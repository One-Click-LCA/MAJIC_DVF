// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dvf.a_extraction_tables_correspondance_0_2;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: A_extraction_tables_correspondance Purpose: extraction des données, transformations et distribution en tables<br>
 * Description: Extraction à partir d'un fichier DVF au format csv dont le nom est spécifié dans "dvf_file" situé dans le répertoire pointé par "source_path"
 Les données sont écrites au format csv et les fichiers sont placés dans le répertoire défini par "target_path"
 Certains composants utilisent un répertoire temporaire permettant de traiter les données sur disque: définir "temp_path".
 Le répertoire "log_path" accueille les fichiers intermédiaires et les fichiers de log (doublons, etc.) <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status DEV
 */
public class A_extraction_tables_correspondance implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (db_host != null) {

				this.setProperty("db_host", db_host.toString());

			}

			if (db_login != null) {

				this.setProperty("db_login", db_login.toString());

			}

			if (db_name != null) {

				this.setProperty("db_name", db_name.toString());

			}

			if (db_password != null) {

				this.setProperty("db_password", db_password.toString());

			}

			if (db_port != null) {

				this.setProperty("db_port", db_port.toString());

			}

			if (db_schema != null) {

				this.setProperty("db_schema", db_schema.toString());

			}

			if (dvf_file != null) {

				this.setProperty("dvf_file", dvf_file.toString());

			}

			if (log_path != null) {

				this.setProperty("log_path", log_path.toString());

			}

			if (prefixe_table != null) {

				this.setProperty("prefixe_table", prefixe_table.toString());

			}

			if (source_path != null) {

				this.setProperty("source_path", source_path.toString());

			}

			if (tables_correspondance_path != null) {

				this.setProperty("tables_correspondance_path",
						tables_correspondance_path.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

			if (temp_path != null) {

				this.setProperty("temp_path", temp_path.toString());

			}

		}

		public String db_host;

		public String getDb_host() {
			return this.db_host;
		}

		public String db_login;

		public String getDb_login() {
			return this.db_login;
		}

		public String db_name;

		public String getDb_name() {
			return this.db_name;
		}

		public String db_password;

		public String getDb_password() {
			return this.db_password;
		}

		public String db_port;

		public String getDb_port() {
			return this.db_port;
		}

		public String db_schema;

		public String getDb_schema() {
			return this.db_schema;
		}

		public String dvf_file;

		public String getDvf_file() {
			return this.dvf_file;
		}

		public String log_path;

		public String getLog_path() {
			return this.log_path;
		}

		public String prefixe_table;

		public String getPrefixe_table() {
			return this.prefixe_table;
		}

		public String source_path;

		public String getSource_path() {
			return this.source_path;
		}

		public String tables_correspondance_path;

		public String getTables_correspondance_path() {
			return this.tables_correspondance_path;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}

		public String temp_path;

		public String getTemp_path() {
			return this.temp_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "A_extraction_tables_correspondance";
	private final String projectName = "DVF";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					A_extraction_tables_correspondance.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(A_extraction_tables_correspondance.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSplitRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFilterRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_5_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_5_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_5_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_5_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_1_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_1_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_3_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_3_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_2_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_2_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_4_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_4_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.code_type_local == null) ? 0
								: this.code_type_local.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.code_type_local == null) {
				if (other.code_type_local != null)
					return false;
			} else if (!this.code_type_local.equals(other.code_type_local))
				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.code_type_local = this.code_type_local;
			other.type_local = this.type_local;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.code_type_local = this.code_type_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_type_local,
					other.code_type_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_5 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_5> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.code_type_local == null) ? 0
								: this.code_type_local.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_5 other = (OnRowsEndStructtSortRow_5) obj;

			if (this.code_type_local == null) {
				if (other.code_type_local != null)
					return false;
			} else if (!this.code_type_local.equals(other.code_type_local))
				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_5 other) {

			other.code_type_local = this.code_type_local;
			other.type_local = this.type_local;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_5 other) {

			other.code_type_local = this.code_type_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_5 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_type_local,
					other.code_type_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.code_type_local == null) ? 0
								: this.code_type_local.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.code_type_local == null) {
				if (other.code_type_local != null)
					return false;
			} else if (!this.code_type_local.equals(other.code_type_local))
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.code_type_local = this.code_type_local;
			other.type_local = this.type_local;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.code_type_local = this.code_type_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_type_local,
					other.code_type_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public String lib_nature_culture;

		public String getLib_nature_culture() {
			return this.lib_nature_culture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture == null) ? 0
								: this.nature_culture.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.nature_culture == null) {
				if (other.nature_culture != null)
					return false;
			} else if (!this.nature_culture.equals(other.nature_culture))
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.nature_culture = this.nature_culture;
			other.lib_nature_culture = this.lib_nature_culture;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.nature_culture = this.nature_culture;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture = readInteger(dis);

					this.lib_nature_culture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture, dos);

				// String

				writeString(this.lib_nature_culture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture=" + String.valueOf(nature_culture));
			sb.append(",lib_nature_culture=" + lib_nature_culture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture,
					other.nature_culture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public String lib_nature_culture;

		public String getLib_nature_culture() {
			return this.lib_nature_culture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture == null) ? 0
								: this.nature_culture.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.nature_culture == null) {
				if (other.nature_culture != null)
					return false;
			} else if (!this.nature_culture.equals(other.nature_culture))
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.nature_culture = this.nature_culture;
			other.lib_nature_culture = this.lib_nature_culture;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.nature_culture = this.nature_culture;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture = readInteger(dis);

					this.lib_nature_culture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture, dos);

				// String

				writeString(this.lib_nature_culture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture=" + String.valueOf(nature_culture));
			sb.append(",lib_nature_culture=" + lib_nature_culture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture,
					other.nature_culture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public String lib_nature_culture;

		public String getLib_nature_culture() {
			return this.lib_nature_culture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture == null) ? 0
								: this.nature_culture.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;

			if (this.nature_culture == null) {
				if (other.nature_culture != null)
					return false;
			} else if (!this.nature_culture.equals(other.nature_culture))
				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

			other.nature_culture = this.nature_culture;
			other.lib_nature_culture = this.lib_nature_culture;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

			other.nature_culture = this.nature_culture;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture = readInteger(dis);

					this.lib_nature_culture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture, dos);

				// String

				writeString(this.lib_nature_culture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture=" + String.valueOf(nature_culture));
			sb.append(",lib_nature_culture=" + lib_nature_culture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture,
					other.nature_culture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public String lib_nature_culture;

		public String getLib_nature_culture() {
			return this.lib_nature_culture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture == null) ? 0
								: this.nature_culture.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.nature_culture == null) {
				if (other.nature_culture != null)
					return false;
			} else if (!this.nature_culture.equals(other.nature_culture))
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.nature_culture = this.nature_culture;
			other.lib_nature_culture = this.lib_nature_culture;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.nature_culture = this.nature_culture;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture = readInteger(dis);

					this.lib_nature_culture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture, dos);

				// String

				writeString(this.lib_nature_culture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture=" + String.valueOf(nature_culture));
			sb.append(",lib_nature_culture=" + lib_nature_culture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture,
					other.nature_culture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String lib_nature_mutation;

		public String getLib_nature_mutation() {
			return this.lib_nature_mutation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_nature_mutation == null) ? 0
								: this.id_nature_mutation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id_nature_mutation == null) {
				if (other.id_nature_mutation != null)
					return false;
			} else if (!this.id_nature_mutation
					.equals(other.id_nature_mutation))
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id_nature_mutation = this.id_nature_mutation;
			other.lib_nature_mutation = this.lib_nature_mutation;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id_nature_mutation = this.id_nature_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_nature_mutation = readInteger(dis);

					this.lib_nature_mutation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.lib_nature_mutation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",lib_nature_mutation=" + lib_nature_mutation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_nature_mutation,
					other.id_nature_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String lib_nature_mutation;

		public String getLib_nature_mutation() {
			return this.lib_nature_mutation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_nature_mutation == null) ? 0
								: this.id_nature_mutation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.id_nature_mutation == null) {
				if (other.id_nature_mutation != null)
					return false;
			} else if (!this.id_nature_mutation
					.equals(other.id_nature_mutation))
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.id_nature_mutation = this.id_nature_mutation;
			other.lib_nature_mutation = this.lib_nature_mutation;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.id_nature_mutation = this.id_nature_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_nature_mutation = readInteger(dis);

					this.lib_nature_mutation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.lib_nature_mutation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",lib_nature_mutation=" + lib_nature_mutation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_nature_mutation,
					other.id_nature_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_3 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String lib_nature_mutation;

		public String getLib_nature_mutation() {
			return this.lib_nature_mutation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_nature_mutation == null) ? 0
								: this.id_nature_mutation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_3 other = (OnRowsEndStructtSortRow_3) obj;

			if (this.id_nature_mutation == null) {
				if (other.id_nature_mutation != null)
					return false;
			} else if (!this.id_nature_mutation
					.equals(other.id_nature_mutation))
				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_3 other) {

			other.id_nature_mutation = this.id_nature_mutation;
			other.lib_nature_mutation = this.lib_nature_mutation;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_3 other) {

			other.id_nature_mutation = this.id_nature_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_nature_mutation = readInteger(dis);

					this.lib_nature_mutation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.lib_nature_mutation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",lib_nature_mutation=" + lib_nature_mutation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_3 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_nature_mutation,
					other.id_nature_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String lib_nature_mutation;

		public String getLib_nature_mutation() {
			return this.lib_nature_mutation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_nature_mutation == null) ? 0
								: this.id_nature_mutation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.id_nature_mutation == null) {
				if (other.id_nature_mutation != null)
					return false;
			} else if (!this.id_nature_mutation
					.equals(other.id_nature_mutation))
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.id_nature_mutation = this.id_nature_mutation;
			other.lib_nature_mutation = this.lib_nature_mutation;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.id_nature_mutation = this.id_nature_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_nature_mutation = readInteger(dis);

					this.lib_nature_mutation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.lib_nature_mutation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",lib_nature_mutation=" + lib_nature_mutation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_nature_mutation,
					other.id_nature_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public String lib_nature_culture_speciale;

		public String getLib_nature_culture_speciale() {
			return this.lib_nature_culture_speciale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture_speciale == null) ? 0
								: this.nature_culture_speciale.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.nature_culture_speciale == null) {
				if (other.nature_culture_speciale != null)
					return false;
			} else if (!this.nature_culture_speciale
					.equals(other.nature_culture_speciale))
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;
			other.lib_nature_culture_speciale = this.lib_nature_culture_speciale;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture_speciale = readInteger(dis);

					this.lib_nature_culture_speciale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// String

				writeString(this.lib_nature_culture_speciale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",lib_nature_culture_speciale="
					+ lib_nature_culture_speciale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture_speciale,
					other.nature_culture_speciale);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public String lib_nature_culture_speciale;

		public String getLib_nature_culture_speciale() {
			return this.lib_nature_culture_speciale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture_speciale == null) ? 0
								: this.nature_culture_speciale.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.nature_culture_speciale == null) {
				if (other.nature_culture_speciale != null)
					return false;
			} else if (!this.nature_culture_speciale
					.equals(other.nature_culture_speciale))
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;
			other.lib_nature_culture_speciale = this.lib_nature_culture_speciale;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture_speciale = readInteger(dis);

					this.lib_nature_culture_speciale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// String

				writeString(this.lib_nature_culture_speciale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",lib_nature_culture_speciale="
					+ lib_nature_culture_speciale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture_speciale,
					other.nature_culture_speciale);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public String lib_nature_culture_speciale;

		public String getLib_nature_culture_speciale() {
			return this.lib_nature_culture_speciale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture_speciale == null) ? 0
								: this.nature_culture_speciale.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_2 other = (OnRowsEndStructtSortRow_2) obj;

			if (this.nature_culture_speciale == null) {
				if (other.nature_culture_speciale != null)
					return false;
			} else if (!this.nature_culture_speciale
					.equals(other.nature_culture_speciale))
				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_2 other) {

			other.nature_culture_speciale = this.nature_culture_speciale;
			other.lib_nature_culture_speciale = this.lib_nature_culture_speciale;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_2 other) {

			other.nature_culture_speciale = this.nature_culture_speciale;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture_speciale = readInteger(dis);

					this.lib_nature_culture_speciale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// String

				writeString(this.lib_nature_culture_speciale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",lib_nature_culture_speciale="
					+ lib_nature_culture_speciale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture_speciale,
					other.nature_culture_speciale);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public String lib_nature_culture_speciale;

		public String getLib_nature_culture_speciale() {
			return this.lib_nature_culture_speciale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture_speciale == null) ? 0
								: this.nature_culture_speciale.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.nature_culture_speciale == null) {
				if (other.nature_culture_speciale != null)
					return false;
			} else if (!this.nature_culture_speciale
					.equals(other.nature_culture_speciale))
				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;
			other.lib_nature_culture_speciale = this.lib_nature_culture_speciale;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture_speciale = readInteger(dis);

					this.lib_nature_culture_speciale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// String

				writeString(this.lib_nature_culture_speciale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",lib_nature_culture_speciale="
					+ lib_nature_culture_speciale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture_speciale,
					other.nature_culture_speciale);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_article_cgi;

		public Integer getId_article_cgi() {
			return this.id_article_cgi;
		}

		public String code_article_cgi;

		public String getCode_article_cgi() {
			return this.code_article_cgi;
		}

		public String lib_article_cgi;

		public String getLib_article_cgi() {
			return this.lib_article_cgi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_article_cgi == null) ? 0
								: this.id_article_cgi.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.id_article_cgi == null) {
				if (other.id_article_cgi != null)
					return false;
			} else if (!this.id_article_cgi.equals(other.id_article_cgi))
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id_article_cgi = this.id_article_cgi;
			other.code_article_cgi = this.code_article_cgi;
			other.lib_article_cgi = this.lib_article_cgi;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_article_cgi = readInteger(dis);

					this.code_article_cgi = readString(dis);

					this.lib_article_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_article_cgi, dos);

				// String

				writeString(this.code_article_cgi, dos);

				// String

				writeString(this.lib_article_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",code_article_cgi=" + code_article_cgi);
			sb.append(",lib_article_cgi=" + lib_article_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_article_cgi;

		public Integer getId_article_cgi() {
			return this.id_article_cgi;
		}

		public String code_article_cgi;

		public String getCode_article_cgi() {
			return this.code_article_cgi;
		}

		public String lib_article_cgi;

		public String getLib_article_cgi() {
			return this.lib_article_cgi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_article_cgi == null) ? 0
								: this.id_article_cgi.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.id_article_cgi == null) {
				if (other.id_article_cgi != null)
					return false;
			} else if (!this.id_article_cgi.equals(other.id_article_cgi))
				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.id_article_cgi = this.id_article_cgi;
			other.code_article_cgi = this.code_article_cgi;
			other.lib_article_cgi = this.lib_article_cgi;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_article_cgi = readInteger(dis);

					this.code_article_cgi = readString(dis);

					this.lib_article_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_article_cgi, dos);

				// String

				writeString(this.code_article_cgi, dos);

				// String

				writeString(this.lib_article_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",code_article_cgi=" + code_article_cgi);
			sb.append(",lib_article_cgi=" + lib_article_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_4 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_4> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_article_cgi;

		public Integer getId_article_cgi() {
			return this.id_article_cgi;
		}

		public String code_article_cgi;

		public String getCode_article_cgi() {
			return this.code_article_cgi;
		}

		public String lib_article_cgi;

		public String getLib_article_cgi() {
			return this.lib_article_cgi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_article_cgi == null) ? 0
								: this.id_article_cgi.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_4 other = (OnRowsEndStructtSortRow_4) obj;

			if (this.id_article_cgi == null) {
				if (other.id_article_cgi != null)
					return false;
			} else if (!this.id_article_cgi.equals(other.id_article_cgi))
				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_4 other) {

			other.id_article_cgi = this.id_article_cgi;
			other.code_article_cgi = this.code_article_cgi;
			other.lib_article_cgi = this.lib_article_cgi;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_4 other) {

			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_article_cgi = readInteger(dis);

					this.code_article_cgi = readString(dis);

					this.lib_article_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_article_cgi, dos);

				// String

				writeString(this.code_article_cgi, dos);

				// String

				writeString(this.lib_article_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",code_article_cgi=" + code_article_cgi);
			sb.append(",lib_article_cgi=" + lib_article_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_4 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_article_cgi;

		public Integer getId_article_cgi() {
			return this.id_article_cgi;
		}

		public String code_article_cgi;

		public String getCode_article_cgi() {
			return this.code_article_cgi;
		}

		public String lib_article_cgi;

		public String getLib_article_cgi() {
			return this.lib_article_cgi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_article_cgi == null) ? 0
								: this.id_article_cgi.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.id_article_cgi == null) {
				if (other.id_article_cgi != null)
					return false;
			} else if (!this.id_article_cgi.equals(other.id_article_cgi))
				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.id_article_cgi = this.id_article_cgi;
			other.code_article_cgi = this.code_article_cgi;
			other.lib_article_cgi = this.lib_article_cgi;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_article_cgi = readInteger(dis);

					this.code_article_cgi = readString(dis);

					this.lib_article_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_article_cgi, dos);

				// String

				writeString(this.code_article_cgi, dos);

				// String

				writeString(this.lib_article_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",code_article_cgi=" + code_article_cgi);
			sb.append(",lib_article_cgi=" + lib_article_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_article_cgi;

		public Integer getId_article_cgi() {
			return this.id_article_cgi;
		}

		public String code_article_cgi;

		public String getCode_article_cgi() {
			return this.code_article_cgi;
		}

		public String lib_article_cgi;

		public String getLib_article_cgi() {
			return this.lib_article_cgi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_article_cgi == null) ? 0
								: this.id_article_cgi.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.id_article_cgi == null) {
				if (other.id_article_cgi != null)
					return false;
			} else if (!this.id_article_cgi.equals(other.id_article_cgi))
				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.id_article_cgi = this.id_article_cgi;
			other.code_article_cgi = this.code_article_cgi;
			other.lib_article_cgi = this.lib_article_cgi;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_article_cgi = readInteger(dis);

					this.code_article_cgi = readString(dis);

					this.lib_article_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_article_cgi, dos);

				// String

				writeString(this.code_article_cgi, dos);

				// String

				writeString(this.lib_article_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",code_article_cgi=" + code_article_cgi);
			sb.append(",lib_article_cgi=" + lib_article_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_article_cgi;

		public Integer getId_article_cgi() {
			return this.id_article_cgi;
		}

		public String code_article_cgi;

		public String getCode_article_cgi() {
			return this.code_article_cgi;
		}

		public String lib_article_cgi;

		public String getLib_article_cgi() {
			return this.lib_article_cgi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_article_cgi == null) ? 0
								: this.id_article_cgi.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id_article_cgi == null) {
				if (other.id_article_cgi != null)
					return false;
			} else if (!this.id_article_cgi.equals(other.id_article_cgi))
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id_article_cgi = this.id_article_cgi;
			other.code_article_cgi = this.code_article_cgi;
			other.lib_article_cgi = this.lib_article_cgi;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_article_cgi = readInteger(dis);

					this.code_article_cgi = readString(dis);

					this.lib_article_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_article_cgi, dos);

				// String

				writeString(this.code_article_cgi, dos);

				// String

				writeString(this.lib_article_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",code_article_cgi=" + code_article_cgi);
			sb.append(",lib_article_cgi=" + lib_article_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class type_localStruct implements
			routines.system.IPersistableRow<type_localStruct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.code_type_local == null) ? 0
								: this.code_type_local.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final type_localStruct other = (type_localStruct) obj;

			if (this.code_type_local == null) {
				if (other.code_type_local != null)
					return false;
			} else if (!this.code_type_local.equals(other.code_type_local))
				return false;

			return true;
		}

		public void copyDataTo(type_localStruct other) {

			other.code_type_local = this.code_type_local;
			other.type_local = this.type_local;

		}

		public void copyKeysDataTo(type_localStruct other) {

			other.code_type_local = this.code_type_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(type_localStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_type_local,
					other.code_type_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class nature_cultureStruct implements
			routines.system.IPersistableRow<nature_cultureStruct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public String lib_nature_culture;

		public String getLib_nature_culture() {
			return this.lib_nature_culture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture == null) ? 0
								: this.nature_culture.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final nature_cultureStruct other = (nature_cultureStruct) obj;

			if (this.nature_culture == null) {
				if (other.nature_culture != null)
					return false;
			} else if (!this.nature_culture.equals(other.nature_culture))
				return false;

			return true;
		}

		public void copyDataTo(nature_cultureStruct other) {

			other.nature_culture = this.nature_culture;
			other.lib_nature_culture = this.lib_nature_culture;

		}

		public void copyKeysDataTo(nature_cultureStruct other) {

			other.nature_culture = this.nature_culture;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture = readInteger(dis);

					this.lib_nature_culture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture, dos);

				// String

				writeString(this.lib_nature_culture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture=" + String.valueOf(nature_culture));
			sb.append(",lib_nature_culture=" + lib_nature_culture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nature_cultureStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture,
					other.nature_culture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class nature_mutationStruct implements
			routines.system.IPersistableRow<nature_mutationStruct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String lib_nature_mutation;

		public String getLib_nature_mutation() {
			return this.lib_nature_mutation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_nature_mutation == null) ? 0
								: this.id_nature_mutation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final nature_mutationStruct other = (nature_mutationStruct) obj;

			if (this.id_nature_mutation == null) {
				if (other.id_nature_mutation != null)
					return false;
			} else if (!this.id_nature_mutation
					.equals(other.id_nature_mutation))
				return false;

			return true;
		}

		public void copyDataTo(nature_mutationStruct other) {

			other.id_nature_mutation = this.id_nature_mutation;
			other.lib_nature_mutation = this.lib_nature_mutation;

		}

		public void copyKeysDataTo(nature_mutationStruct other) {

			other.id_nature_mutation = this.id_nature_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_nature_mutation = readInteger(dis);

					this.lib_nature_mutation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.lib_nature_mutation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",lib_nature_mutation=" + lib_nature_mutation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nature_mutationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_nature_mutation,
					other.id_nature_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class nature_culture_specialeStruct implements
			routines.system.IPersistableRow<nature_culture_specialeStruct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public String lib_nature_culture_speciale;

		public String getLib_nature_culture_speciale() {
			return this.lib_nature_culture_speciale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture_speciale == null) ? 0
								: this.nature_culture_speciale.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final nature_culture_specialeStruct other = (nature_culture_specialeStruct) obj;

			if (this.nature_culture_speciale == null) {
				if (other.nature_culture_speciale != null)
					return false;
			} else if (!this.nature_culture_speciale
					.equals(other.nature_culture_speciale))
				return false;

			return true;
		}

		public void copyDataTo(nature_culture_specialeStruct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;
			other.lib_nature_culture_speciale = this.lib_nature_culture_speciale;

		}

		public void copyKeysDataTo(nature_culture_specialeStruct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture_speciale = readInteger(dis);

					this.lib_nature_culture_speciale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// String

				writeString(this.lib_nature_culture_speciale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",lib_nature_culture_speciale="
					+ lib_nature_culture_speciale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nature_culture_specialeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture_speciale,
					other.nature_culture_speciale);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class articles_cgiStruct implements
			routines.system.IPersistableRow<articles_cgiStruct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.id_mutation_temp = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_mutation_temp, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation_temp=" + id_mutation_temp);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(articles_cgiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DVF_A_extraction_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_A_extraction_tables_correspondance = new byte[0];

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		public Integer numero_disposition;

		public Integer getNumero_disposition() {
			return this.numero_disposition;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public String nature_mutation;

		public String getNature_mutation() {
			return this.nature_mutation;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public Integer numero_voie;

		public Integer getNumero_voie() {
			return this.numero_voie;
		}

		public String complement_numero_voie;

		public String getComplement_numero_voie() {
			return this.complement_numero_voie;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero_plan;

		public String getNumero_plan() {
			return this.numero_plan;
		}

		public String numero_volume;

		public String getNumero_volume() {
			return this.numero_volume;
		}

		public String lot1;

		public String getLot1() {
			return this.lot1;
		}

		public Double surface_carrez_lot1;

		public Double getSurface_carrez_lot1() {
			return this.surface_carrez_lot1;
		}

		public String lot2;

		public String getLot2() {
			return this.lot2;
		}

		public Double surface_carrez_lot2;

		public Double getSurface_carrez_lot2() {
			return this.surface_carrez_lot2;
		}

		public String lot3;

		public String getLot3() {
			return this.lot3;
		}

		public Double surface_carrez_lot3;

		public Double getSurface_carrez_lot3() {
			return this.surface_carrez_lot3;
		}

		public String lot4;

		public String getLot4() {
			return this.lot4;
		}

		public Double surface_carrez_lot4;

		public Double getSurface_carrez_lot4() {
			return this.surface_carrez_lot4;
		}

		public String lot5;

		public String getLot5() {
			return this.lot5;
		}

		public Double surface_carrez_lot5;

		public Double getSurface_carrez_lot5() {
			return this.surface_carrez_lot5;
		}

		public Integer nombre_lots;

		public Integer getNombre_lots() {
			return this.nombre_lots;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public Double surface_reelle_bati;

		public Double getSurface_reelle_bati() {
			return this.surface_reelle_bati;
		}

		public Integer nombre_pieces_principales;

		public Integer getNombre_pieces_principales() {
			return this.nombre_pieces_principales;
		}

		public String nature_culture;

		public String getNature_culture() {
			return this.nature_culture;
		}

		public String nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_A_extraction_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_A_extraction_tables_correspondance.length == 0) {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_A_extraction_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_A_extraction_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_A_extraction_tables_correspondance) {

				try {

					int length = 0;

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

					this.numero_disposition = readInteger(dis);

					this.date_mutation = readDate(dis);

					this.nature_mutation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.numero_voie = readInteger(dis);

					this.complement_numero_voie = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero_plan = readString(dis);

					this.numero_volume = readString(dis);

					this.lot1 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot1 = null;
					} else {
						this.surface_carrez_lot1 = dis.readDouble();
					}

					this.lot2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot2 = null;
					} else {
						this.surface_carrez_lot2 = dis.readDouble();
					}

					this.lot3 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot3 = null;
					} else {
						this.surface_carrez_lot3 = dis.readDouble();
					}

					this.lot4 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot4 = null;
					} else {
						this.surface_carrez_lot4 = dis.readDouble();
					}

					this.lot5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot5 = null;
					} else {
						this.surface_carrez_lot5 = dis.readDouble();
					}

					this.nombre_lots = readInteger(dis);

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

					this.identifiant_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_bati = null;
					} else {
						this.surface_reelle_bati = dis.readDouble();
					}

					this.nombre_pieces_principales = readInteger(dis);

					this.nature_culture = readString(dis);

					this.nature_culture_speciale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

				// Integer

				writeInteger(this.numero_disposition, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// String

				writeString(this.nature_mutation, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// Integer

				writeInteger(this.numero_voie, dos);

				// String

				writeString(this.complement_numero_voie, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero_plan, dos);

				// String

				writeString(this.numero_volume, dos);

				// String

				writeString(this.lot1, dos);

				// Double

				if (this.surface_carrez_lot1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot1);
				}

				// String

				writeString(this.lot2, dos);

				// Double

				if (this.surface_carrez_lot2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot2);
				}

				// String

				writeString(this.lot3, dos);

				// Double

				if (this.surface_carrez_lot3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot3);
				}

				// String

				writeString(this.lot4, dos);

				// Double

				if (this.surface_carrez_lot4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot4);
				}

				// String

				writeString(this.lot5, dos);

				// Double

				if (this.surface_carrez_lot5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot5);
				}

				// Integer

				writeInteger(this.nombre_lots, dos);

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.identifiant_local, dos);

				// Double

				if (this.surface_reelle_bati == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_bati);
				}

				// Integer

				writeInteger(this.nombre_pieces_principales, dos);

				// String

				writeString(this.nature_culture, dos);

				// String

				writeString(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append(",numero_disposition="
					+ String.valueOf(numero_disposition));
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",nature_mutation=" + nature_mutation);
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",numero_voie=" + String.valueOf(numero_voie));
			sb.append(",complement_numero_voie=" + complement_numero_voie);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero_plan=" + numero_plan);
			sb.append(",numero_volume=" + numero_volume);
			sb.append(",lot1=" + lot1);
			sb.append(",surface_carrez_lot1="
					+ String.valueOf(surface_carrez_lot1));
			sb.append(",lot2=" + lot2);
			sb.append(",surface_carrez_lot2="
					+ String.valueOf(surface_carrez_lot2));
			sb.append(",lot3=" + lot3);
			sb.append(",surface_carrez_lot3="
					+ String.valueOf(surface_carrez_lot3));
			sb.append(",lot4=" + lot4);
			sb.append(",surface_carrez_lot4="
					+ String.valueOf(surface_carrez_lot4));
			sb.append(",lot5=" + lot5);
			sb.append(",surface_carrez_lot5="
					+ String.valueOf(surface_carrez_lot5));
			sb.append(",nombre_lots=" + String.valueOf(nombre_lots));
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",surface_reelle_bati="
					+ String.valueOf(surface_reelle_bati));
			sb.append(",nombre_pieces_principales="
					+ String.valueOf(nombre_pieces_principales));
			sb.append(",nature_culture=" + nature_culture);
			sb.append(",nature_culture_speciale=" + nature_culture_speciale);
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				type_localStruct type_local = new type_localStruct();
				row5Struct row5 = new row5Struct();
				row17Struct row17 = new row17Struct();
				nature_cultureStruct nature_culture = new nature_cultureStruct();
				row7Struct row7 = new row7Struct();
				row9Struct row9 = new row9Struct();
				row8Struct row8 = new row8Struct();
				nature_mutationStruct nature_mutation = new nature_mutationStruct();
				row14Struct row14 = new row14Struct();
				row11Struct row11 = new row11Struct();
				row4Struct row4 = new row4Struct();
				nature_culture_specialeStruct nature_culture_speciale = new nature_culture_specialeStruct();
				row13Struct row13 = new row13Struct();
				row10Struct row10 = new row10Struct();
				row6Struct row6 = new row6Struct();
				articles_cgiStruct articles_cgi = new articles_cgiStruct();
				row1Struct row1 = new row1Struct();
				row15Struct row15 = new row15Struct();
				row16Struct row16 = new row16Struct();
				row12Struct row12 = new row12Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tSortRow_5_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_5_SortOut", false);
				start_Hash
						.put("tSortRow_5_SortOut", System.currentTimeMillis());
				currentComponent = "tSortRow_5_SortOut";

				int tos_count_tSortRow_5_SortOut = 0;

				class Comparablerow5Struct extends row5Struct implements
						Comparable<Comparablerow5Struct> {

					public int compareTo(Comparablerow5Struct other) {

						if (this.code_type_local == null
								&& other.code_type_local != null) {
							return -1;

						} else if (this.code_type_local != null
								&& other.code_type_local == null) {
							return 1;

						} else if (this.code_type_local != null
								&& other.code_type_local != null) {
							if (!this.code_type_local
									.equals(other.code_type_local)) {
								return this.code_type_local
										.compareTo(other.code_type_local);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow5Struct> list_tSortRow_5_SortOut = new java.util.ArrayList<Comparablerow5Struct>();

				/**
				 * [tSortRow_5_SortOut begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());
				currentComponent = "tUniqRow_3";

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String code_type_local;
					String type_local;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.code_type_local == null) ? 0
											: this.code_type_local.hashCode());

							result = prime
									* result
									+ ((this.type_local == null) ? 0
											: this.type_local.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.code_type_local == null) {
							if (other.code_type_local != null)
								return false;
						} else if (!this.code_type_local
								.equals(other.code_type_local))
							return false;

						if (this.type_local == null) {
							if (other.type_local != null)
								return false;
						} else if (!this.type_local.equals(other.type_local))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash
						.put("tSortRow_1_SortOut", System.currentTimeMillis());
				currentComponent = "tSortRow_1_SortOut";

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow7Struct extends row7Struct implements
						Comparable<Comparablerow7Struct> {

					public int compareTo(Comparablerow7Struct other) {

						if (this.lib_nature_culture == null
								&& other.lib_nature_culture != null) {
							return -1;

						} else if (this.lib_nature_culture != null
								&& other.lib_nature_culture == null) {
							return 1;

						} else if (this.lib_nature_culture != null
								&& other.lib_nature_culture != null) {
							if (!this.lib_nature_culture
									.equals(other.lib_nature_culture)) {
								return this.lib_nature_culture
										.compareTo(other.lib_nature_culture);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow7Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow7Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());
				currentComponent = "tUniqRow_5";

				int tos_count_tUniqRow_5 = 0;

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String lib_nature_culture;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.lib_nature_culture == null) ? 0
											: this.lib_nature_culture
													.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.lib_nature_culture == null) {
							if (other.lib_nature_culture != null)
								return false;
						} else if (!this.lib_nature_culture
								.equals(other.lib_nature_culture))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tSortRow_3_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortOut", false);
				start_Hash
						.put("tSortRow_3_SortOut", System.currentTimeMillis());
				currentComponent = "tSortRow_3_SortOut";

				int tos_count_tSortRow_3_SortOut = 0;

				class Comparablerow14Struct extends row14Struct implements
						Comparable<Comparablerow14Struct> {

					public int compareTo(Comparablerow14Struct other) {

						if (this.lib_nature_mutation == null
								&& other.lib_nature_mutation != null) {
							return -1;

						} else if (this.lib_nature_mutation != null
								&& other.lib_nature_mutation == null) {
							return 1;

						} else if (this.lib_nature_mutation != null
								&& other.lib_nature_mutation != null) {
							if (!this.lib_nature_mutation
									.equals(other.lib_nature_mutation)) {
								return this.lib_nature_mutation
										.compareTo(other.lib_nature_mutation);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow14Struct> list_tSortRow_3_SortOut = new java.util.ArrayList<Comparablerow14Struct>();

				/**
				 * [tSortRow_3_SortOut begin ] stop
				 */

				/**
				 * [tUniqRow_12 begin ] start
				 */

				ok_Hash.put("tUniqRow_12", false);
				start_Hash.put("tUniqRow_12", System.currentTimeMillis());
				currentComponent = "tUniqRow_12";

				int tos_count_tUniqRow_12 = 0;

				class KeyStruct_tUniqRow_12 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String lib_nature_mutation;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.lib_nature_mutation == null) ? 0
											: this.lib_nature_mutation
													.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_12 other = (KeyStruct_tUniqRow_12) obj;

						if (this.lib_nature_mutation == null) {
							if (other.lib_nature_mutation != null)
								return false;
						} else if (!this.lib_nature_mutation
								.equals(other.lib_nature_mutation))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_12 = 0;
				int nb_duplicates_tUniqRow_12 = 0;
				KeyStruct_tUniqRow_12 finder_tUniqRow_12 = new KeyStruct_tUniqRow_12();
				java.util.Set<KeyStruct_tUniqRow_12> keystUniqRow_12 = new java.util.HashSet<KeyStruct_tUniqRow_12>();

				/**
				 * [tUniqRow_12 begin ] stop
				 */

				/**
				 * [tSortRow_2_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortOut", false);
				start_Hash
						.put("tSortRow_2_SortOut", System.currentTimeMillis());
				currentComponent = "tSortRow_2_SortOut";

				int tos_count_tSortRow_2_SortOut = 0;

				class Comparablerow13Struct extends row13Struct implements
						Comparable<Comparablerow13Struct> {

					public int compareTo(Comparablerow13Struct other) {

						if (this.lib_nature_culture_speciale == null
								&& other.lib_nature_culture_speciale != null) {
							return -1;

						} else if (this.lib_nature_culture_speciale != null
								&& other.lib_nature_culture_speciale == null) {
							return 1;

						} else if (this.lib_nature_culture_speciale != null
								&& other.lib_nature_culture_speciale != null) {
							if (!this.lib_nature_culture_speciale
									.equals(other.lib_nature_culture_speciale)) {
								return this.lib_nature_culture_speciale
										.compareTo(other.lib_nature_culture_speciale);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow13Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow13Struct>();

				/**
				 * [tSortRow_2_SortOut begin ] stop
				 */

				/**
				 * [tUniqRow_11 begin ] start
				 */

				ok_Hash.put("tUniqRow_11", false);
				start_Hash.put("tUniqRow_11", System.currentTimeMillis());
				currentComponent = "tUniqRow_11";

				int tos_count_tUniqRow_11 = 0;

				class KeyStruct_tUniqRow_11 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String lib_nature_culture_speciale;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.lib_nature_culture_speciale == null) ? 0
											: this.lib_nature_culture_speciale
													.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_11 other = (KeyStruct_tUniqRow_11) obj;

						if (this.lib_nature_culture_speciale == null) {
							if (other.lib_nature_culture_speciale != null)
								return false;
						} else if (!this.lib_nature_culture_speciale
								.equals(other.lib_nature_culture_speciale))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_11 = 0;
				int nb_duplicates_tUniqRow_11 = 0;
				KeyStruct_tUniqRow_11 finder_tUniqRow_11 = new KeyStruct_tUniqRow_11();
				java.util.Set<KeyStruct_tUniqRow_11> keystUniqRow_11 = new java.util.HashSet<KeyStruct_tUniqRow_11>();

				/**
				 * [tUniqRow_11 begin ] stop
				 */

				/**
				 * [tSortRow_4_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortOut", false);
				start_Hash
						.put("tSortRow_4_SortOut", System.currentTimeMillis());
				currentComponent = "tSortRow_4_SortOut";

				int tos_count_tSortRow_4_SortOut = 0;

				class Comparablerow16Struct extends row16Struct implements
						Comparable<Comparablerow16Struct> {

					public int compareTo(Comparablerow16Struct other) {

						if (this.code_article_cgi == null
								&& other.code_article_cgi != null) {
							return -1;

						} else if (this.code_article_cgi != null
								&& other.code_article_cgi == null) {
							return 1;

						} else if (this.code_article_cgi != null
								&& other.code_article_cgi != null) {
							if (!this.code_article_cgi
									.equals(other.code_article_cgi)) {
								return this.code_article_cgi
										.compareTo(other.code_article_cgi);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow16Struct> list_tSortRow_4_SortOut = new java.util.ArrayList<Comparablerow16Struct>();

				/**
				 * [tSortRow_4_SortOut begin ] stop
				 */

				/**
				 * [tUniqRow_14 begin ] start
				 */

				ok_Hash.put("tUniqRow_14", false);
				start_Hash.put("tUniqRow_14", System.currentTimeMillis());
				currentComponent = "tUniqRow_14";

				int tos_count_tUniqRow_14 = 0;

				class KeyStruct_tUniqRow_14 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String code_article_cgi;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.code_article_cgi == null) ? 0
											: this.code_article_cgi.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_14 other = (KeyStruct_tUniqRow_14) obj;

						if (this.code_article_cgi == null) {
							if (other.code_article_cgi != null)
								return false;
						} else if (!this.code_article_cgi
								.equals(other.code_article_cgi))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_14 = 0;
				int nb_duplicates_tUniqRow_14 = 0;
				KeyStruct_tUniqRow_14 finder_tUniqRow_14 = new KeyStruct_tUniqRow_14();
				java.util.Set<KeyStruct_tUniqRow_14> keystUniqRow_14 = new java.util.HashSet<KeyStruct_tUniqRow_14>();

				/**
				 * [tUniqRow_14 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());
				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;
				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tSplitRow_1 begin ] start
				 */

				ok_Hash.put("tSplitRow_1", false);
				start_Hash.put("tSplitRow_1", System.currentTimeMillis());
				currentComponent = "tSplitRow_1";

				int tos_count_tSplitRow_1 = 0;
				int nb_line_tSplitRow_1 = 0;

				/**
				 * [tSplitRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				type_localStruct type_local_tmp = new type_localStruct();
				nature_cultureStruct nature_culture_tmp = new nature_cultureStruct();
				nature_mutationStruct nature_mutation_tmp = new nature_mutationStruct();
				nature_culture_specialeStruct nature_culture_speciale_tmp = new nature_culture_specialeStruct();
				articles_cgiStruct articles_cgi_tmp = new articles_cgiStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "|").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) "|")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				context.source_path + context.dvf_file/**
				 * End field
				 * tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.code_service_ch = null;

								row2.reference_document = null;

								row2.a_articles_cgi = null;

								row2.b_articles_cgi = null;

								row2.c_articles_cgi = null;

								row2.d_articles_cgi = null;

								row2.e_articles_cgi = null;

								row2.numero_disposition = null;

								row2.date_mutation = null;

								row2.nature_mutation = null;

								row2.valeur_fonciere = null;

								row2.numero_voie = null;

								row2.complement_numero_voie = null;

								row2.type_voie = null;

								row2.code_voie = null;

								row2.voie = null;

								row2.code_postal = null;

								row2.commune = null;

								row2.code_departement = null;

								row2.code_commune = null;

								row2.prefixe_section = null;

								row2.section = null;

								row2.numero_plan = null;

								row2.numero_volume = null;

								row2.lot1 = null;

								row2.surface_carrez_lot1 = null;

								row2.lot2 = null;

								row2.surface_carrez_lot2 = null;

								row2.lot3 = null;

								row2.surface_carrez_lot3 = null;

								row2.lot4 = null;

								row2.surface_carrez_lot4 = null;

								row2.lot5 = null;

								row2.surface_carrez_lot5 = null;

								row2.nombre_lots = null;

								row2.code_type_local = null;

								row2.type_local = null;

								row2.identifiant_local = null;

								row2.surface_reelle_bati = null;

								row2.nombre_pieces_principales = null;

								row2.nature_culture = null;

								row2.nature_culture_speciale = null;

								row2.surface_terrain = null;

							} else {

								for (int i_tFileInputDelimited_2 = 0; i_tFileInputDelimited_2 < rowtFileInputDelimited_2.length; i_tFileInputDelimited_2++) {
									rowtFileInputDelimited_2[i_tFileInputDelimited_2] = rowtFileInputDelimited_2[i_tFileInputDelimited_2]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.code_service_ch = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.code_service_ch = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.reference_document = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.reference_document = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.a_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.a_articles_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.b_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.b_articles_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.c_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.c_articles_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.d_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.d_articles_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.e_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.e_articles_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.numero_disposition = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.numero_disposition = null;
									}

								} else {
									row2.numero_disposition = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.date_mutation = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd/MM/yyyy");

									} else {
										row2.date_mutation = null;
									}

								} else {
									row2.date_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.nature_mutation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.nature_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.valeur_fonciere = ParserUtils
												.parseTo_Double(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.valeur_fonciere = null;
									}

								} else {
									row2.valeur_fonciere = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.numero_voie = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.numero_voie = null;
									}

								} else {
									row2.numero_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.complement_numero_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.complement_numero_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.type_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.type_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.code_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.code_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.voie = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.code_postal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.code_postal = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.commune = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.commune = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.code_departement = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.code_departement = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.code_commune = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.code_commune = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.prefixe_section = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.prefixe_section = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.section = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.section = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.numero_plan = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.numero_plan = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.numero_volume = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.numero_volume = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 24;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.lot1 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.lot1 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 25;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.surface_carrez_lot1 = ParserUtils
												.parseTo_Double(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.surface_carrez_lot1 = null;
									}

								} else {
									row2.surface_carrez_lot1 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 26;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.lot2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.lot2 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 27;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.surface_carrez_lot2 = ParserUtils
												.parseTo_Double(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.surface_carrez_lot2 = null;
									}

								} else {
									row2.surface_carrez_lot2 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 28;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.lot3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.lot3 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 29;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.surface_carrez_lot3 = ParserUtils
												.parseTo_Double(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.surface_carrez_lot3 = null;
									}

								} else {
									row2.surface_carrez_lot3 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 30;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.lot4 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.lot4 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 31;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.surface_carrez_lot4 = ParserUtils
												.parseTo_Double(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.surface_carrez_lot4 = null;
									}

								} else {
									row2.surface_carrez_lot4 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 32;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.lot5 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.lot5 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 33;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.surface_carrez_lot5 = ParserUtils
												.parseTo_Double(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.surface_carrez_lot5 = null;
									}

								} else {
									row2.surface_carrez_lot5 = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 34;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.nombre_lots = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.nombre_lots = null;
									}

								} else {
									row2.nombre_lots = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 35;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.code_type_local = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.code_type_local = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 36;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.type_local = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.type_local = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 37;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.identifiant_local = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.identifiant_local = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 38;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.surface_reelle_bati = ParserUtils
												.parseTo_Double(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.surface_reelle_bati = null;
									}

								} else {
									row2.surface_reelle_bati = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 39;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.nombre_pieces_principales = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.nombre_pieces_principales = null;
									}

								} else {
									row2.nombre_pieces_principales = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 40;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.nature_culture = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.nature_culture = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 41;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.nature_culture_speciale = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row2.nature_culture_speciale = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 42;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										row2.surface_terrain = ParserUtils
												.parseTo_Double(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																null, ','));

									} else {
										row2.surface_terrain = null;
									}

								} else {
									row2.surface_terrain = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								type_local = null;
								nature_culture = null;
								nature_mutation = null;
								nature_culture_speciale = null;
								articles_cgi = null;

								// # Output table : 'type_local'
								// # Filter conditions
								if (

								!(Relational.ISNULL(row2.code_type_local) || ("")
										.equals(row2.code_type_local))

								) {
									type_local_tmp.code_type_local = row2.code_type_local;
									type_local_tmp.type_local = row2.type_local;
									type_local = type_local_tmp;
								} // closing filter/reject

								// # Output table : 'nature_culture'
								// # Filter conditions
								if (

								!(Relational.ISNULL(row2.nature_culture) || ("")
										.equals(row2.nature_culture))

								) {
									nature_culture_tmp.nature_culture = 0;
									nature_culture_tmp.lib_nature_culture = row2.nature_culture;
									nature_culture = nature_culture_tmp;
								} // closing filter/reject

								// # Output table : 'nature_mutation'
								// # Filter conditions
								if (

								!(Relational.ISNULL(row2.nature_mutation) || ("")
										.equals(row2.nature_mutation))

								) {
									nature_mutation_tmp.id_nature_mutation = 0;
									nature_mutation_tmp.lib_nature_mutation = row2.nature_mutation;
									nature_mutation = nature_mutation_tmp;
								} // closing filter/reject

								// # Output table : 'nature_culture_speciale'
								// # Filter conditions
								if (

								!(Relational
										.ISNULL(row2.nature_culture_speciale) || ("")
										.equals(row2.nature_culture_speciale))

								) {
									nature_culture_speciale_tmp.nature_culture_speciale = 0;
									nature_culture_speciale_tmp.lib_nature_culture_speciale = row2.nature_culture_speciale;
									nature_culture_speciale = nature_culture_speciale_tmp;
								} // closing filter/reject

								// # Output table : 'articles_cgi'
								articles_cgi_tmp.id_mutation_temp = null;
								articles_cgi_tmp.a_articles_cgi = row2.a_articles_cgi;
								articles_cgi_tmp.b_articles_cgi = row2.b_articles_cgi;
								articles_cgi_tmp.c_articles_cgi = row2.c_articles_cgi;
								articles_cgi_tmp.d_articles_cgi = row2.d_articles_cgi;
								articles_cgi_tmp.e_articles_cgi = row2.e_articles_cgi;
								articles_cgi = articles_cgi_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "type_local"
							if (type_local != null) {

								/**
								 * [tUniqRow_3 main ] start
								 */

								currentComponent = "tUniqRow_3";

								row5 = null;
								if (type_local.code_type_local == null) {
									finder_tUniqRow_3.code_type_local = null;
								} else {
									finder_tUniqRow_3.code_type_local = type_local.code_type_local
											.toLowerCase();
								}
								if (type_local.type_local == null) {
									finder_tUniqRow_3.type_local = null;
								} else {
									finder_tUniqRow_3.type_local = type_local.type_local
											.toLowerCase();
								}
								finder_tUniqRow_3.hashCodeDirty = true;
								if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
									KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

									if (type_local.code_type_local == null) {
										new_tUniqRow_3.code_type_local = null;
									} else {
										new_tUniqRow_3.code_type_local = type_local.code_type_local
												.toLowerCase();
									}
									if (type_local.type_local == null) {
										new_tUniqRow_3.type_local = null;
									} else {
										new_tUniqRow_3.type_local = type_local.type_local
												.toLowerCase();
									}

									keystUniqRow_3.add(new_tUniqRow_3);
									if (row5 == null) {
										row5 = new row5Struct();
									}
									row5.code_type_local = type_local.code_type_local;
									row5.type_local = type_local.type_local;
									nb_uniques_tUniqRow_3++;
								} else {
									nb_duplicates_tUniqRow_3++;
								}

								tos_count_tUniqRow_3++;

								/**
								 * [tUniqRow_3 main ] stop
								 */
								// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tSortRow_5_SortOut main ] start
									 */

									currentComponent = "tSortRow_5_SortOut";

									Comparablerow5Struct arrayRowtSortRow_5_SortOut = new Comparablerow5Struct();

									arrayRowtSortRow_5_SortOut.code_type_local = row5.code_type_local;
									arrayRowtSortRow_5_SortOut.type_local = row5.type_local;
									list_tSortRow_5_SortOut
											.add(arrayRowtSortRow_5_SortOut);

									tos_count_tSortRow_5_SortOut++;

									/**
									 * [tSortRow_5_SortOut main ] stop
									 */

								} // End of branch "row5"

							} // End of branch "type_local"

							// Start of branch "nature_culture"
							if (nature_culture != null) {

								/**
								 * [tUniqRow_5 main ] start
								 */

								currentComponent = "tUniqRow_5";

								row7 = null;
								if (nature_culture.lib_nature_culture == null) {
									finder_tUniqRow_5.lib_nature_culture = null;
								} else {
									finder_tUniqRow_5.lib_nature_culture = nature_culture.lib_nature_culture
											.toLowerCase();
								}
								finder_tUniqRow_5.hashCodeDirty = true;
								if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
									KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

									if (nature_culture.lib_nature_culture == null) {
										new_tUniqRow_5.lib_nature_culture = null;
									} else {
										new_tUniqRow_5.lib_nature_culture = nature_culture.lib_nature_culture
												.toLowerCase();
									}

									keystUniqRow_5.add(new_tUniqRow_5);
									if (row7 == null) {
										row7 = new row7Struct();
									}
									row7.nature_culture = nature_culture.nature_culture;
									row7.lib_nature_culture = nature_culture.lib_nature_culture;
									nb_uniques_tUniqRow_5++;
								} else {
									nb_duplicates_tUniqRow_5++;
								}

								tos_count_tUniqRow_5++;

								/**
								 * [tUniqRow_5 main ] stop
								 */
								// Start of branch "row7"
								if (row7 != null) {

									/**
									 * [tSortRow_1_SortOut main ] start
									 */

									currentComponent = "tSortRow_1_SortOut";

									Comparablerow7Struct arrayRowtSortRow_1_SortOut = new Comparablerow7Struct();

									arrayRowtSortRow_1_SortOut.nature_culture = row7.nature_culture;
									arrayRowtSortRow_1_SortOut.lib_nature_culture = row7.lib_nature_culture;
									list_tSortRow_1_SortOut
											.add(arrayRowtSortRow_1_SortOut);

									tos_count_tSortRow_1_SortOut++;

									/**
									 * [tSortRow_1_SortOut main ] stop
									 */

								} // End of branch "row7"

							} // End of branch "nature_culture"

							// Start of branch "nature_mutation"
							if (nature_mutation != null) {

								/**
								 * [tUniqRow_12 main ] start
								 */

								currentComponent = "tUniqRow_12";

								row14 = null;
								if (nature_mutation.lib_nature_mutation == null) {
									finder_tUniqRow_12.lib_nature_mutation = null;
								} else {
									finder_tUniqRow_12.lib_nature_mutation = nature_mutation.lib_nature_mutation
											.toLowerCase();
								}
								finder_tUniqRow_12.hashCodeDirty = true;
								if (!keystUniqRow_12
										.contains(finder_tUniqRow_12)) {
									KeyStruct_tUniqRow_12 new_tUniqRow_12 = new KeyStruct_tUniqRow_12();

									if (nature_mutation.lib_nature_mutation == null) {
										new_tUniqRow_12.lib_nature_mutation = null;
									} else {
										new_tUniqRow_12.lib_nature_mutation = nature_mutation.lib_nature_mutation
												.toLowerCase();
									}

									keystUniqRow_12.add(new_tUniqRow_12);
									if (row14 == null) {
										row14 = new row14Struct();
									}
									row14.id_nature_mutation = nature_mutation.id_nature_mutation;
									row14.lib_nature_mutation = nature_mutation.lib_nature_mutation;
									nb_uniques_tUniqRow_12++;
								} else {
									nb_duplicates_tUniqRow_12++;
								}

								tos_count_tUniqRow_12++;

								/**
								 * [tUniqRow_12 main ] stop
								 */
								// Start of branch "row14"
								if (row14 != null) {

									/**
									 * [tSortRow_3_SortOut main ] start
									 */

									currentComponent = "tSortRow_3_SortOut";

									Comparablerow14Struct arrayRowtSortRow_3_SortOut = new Comparablerow14Struct();

									arrayRowtSortRow_3_SortOut.id_nature_mutation = row14.id_nature_mutation;
									arrayRowtSortRow_3_SortOut.lib_nature_mutation = row14.lib_nature_mutation;
									list_tSortRow_3_SortOut
											.add(arrayRowtSortRow_3_SortOut);

									tos_count_tSortRow_3_SortOut++;

									/**
									 * [tSortRow_3_SortOut main ] stop
									 */

								} // End of branch "row14"

							} // End of branch "nature_mutation"

							// Start of branch "nature_culture_speciale"
							if (nature_culture_speciale != null) {

								/**
								 * [tUniqRow_11 main ] start
								 */

								currentComponent = "tUniqRow_11";

								row13 = null;
								if (nature_culture_speciale.lib_nature_culture_speciale == null) {
									finder_tUniqRow_11.lib_nature_culture_speciale = null;
								} else {
									finder_tUniqRow_11.lib_nature_culture_speciale = nature_culture_speciale.lib_nature_culture_speciale
											.toLowerCase();
								}
								finder_tUniqRow_11.hashCodeDirty = true;
								if (!keystUniqRow_11
										.contains(finder_tUniqRow_11)) {
									KeyStruct_tUniqRow_11 new_tUniqRow_11 = new KeyStruct_tUniqRow_11();

									if (nature_culture_speciale.lib_nature_culture_speciale == null) {
										new_tUniqRow_11.lib_nature_culture_speciale = null;
									} else {
										new_tUniqRow_11.lib_nature_culture_speciale = nature_culture_speciale.lib_nature_culture_speciale
												.toLowerCase();
									}

									keystUniqRow_11.add(new_tUniqRow_11);
									if (row13 == null) {
										row13 = new row13Struct();
									}
									row13.nature_culture_speciale = nature_culture_speciale.nature_culture_speciale;
									row13.lib_nature_culture_speciale = nature_culture_speciale.lib_nature_culture_speciale;
									nb_uniques_tUniqRow_11++;
								} else {
									nb_duplicates_tUniqRow_11++;
								}

								tos_count_tUniqRow_11++;

								/**
								 * [tUniqRow_11 main ] stop
								 */
								// Start of branch "row13"
								if (row13 != null) {

									/**
									 * [tSortRow_2_SortOut main ] start
									 */

									currentComponent = "tSortRow_2_SortOut";

									Comparablerow13Struct arrayRowtSortRow_2_SortOut = new Comparablerow13Struct();

									arrayRowtSortRow_2_SortOut.nature_culture_speciale = row13.nature_culture_speciale;
									arrayRowtSortRow_2_SortOut.lib_nature_culture_speciale = row13.lib_nature_culture_speciale;
									list_tSortRow_2_SortOut
											.add(arrayRowtSortRow_2_SortOut);

									tos_count_tSortRow_2_SortOut++;

									/**
									 * [tSortRow_2_SortOut main ] stop
									 */

								} // End of branch "row13"

							} // End of branch "nature_culture_speciale"

							// Start of branch "articles_cgi"
							if (articles_cgi != null) {

								/**
								 * [tSplitRow_1 main ] start
								 */

								currentComponent = "tSplitRow_1";

								java.util.List<row1Struct> rows_tSplitRow_1 = new java.util.ArrayList<row1Struct>(
										5);
								row1Struct rowTmp_tSplitRow_1 = null;

								// cache output rows for the loop
								rowTmp_tSplitRow_1 = new row1Struct();

								rowTmp_tSplitRow_1.id_article_cgi = null;
								rowTmp_tSplitRow_1.code_article_cgi = articles_cgi.a_articles_cgi;
								rowTmp_tSplitRow_1.lib_article_cgi = "";
								rows_tSplitRow_1.add(rowTmp_tSplitRow_1);
								nb_line_tSplitRow_1++;
								rowTmp_tSplitRow_1 = new row1Struct();

								rowTmp_tSplitRow_1.id_article_cgi = null;
								rowTmp_tSplitRow_1.code_article_cgi = articles_cgi.b_articles_cgi;
								rowTmp_tSplitRow_1.lib_article_cgi = "";
								rows_tSplitRow_1.add(rowTmp_tSplitRow_1);
								nb_line_tSplitRow_1++;
								rowTmp_tSplitRow_1 = new row1Struct();

								rowTmp_tSplitRow_1.id_article_cgi = null;
								rowTmp_tSplitRow_1.code_article_cgi = articles_cgi.c_articles_cgi;
								rowTmp_tSplitRow_1.lib_article_cgi = "";
								rows_tSplitRow_1.add(rowTmp_tSplitRow_1);
								nb_line_tSplitRow_1++;
								rowTmp_tSplitRow_1 = new row1Struct();

								rowTmp_tSplitRow_1.id_article_cgi = null;
								rowTmp_tSplitRow_1.code_article_cgi = articles_cgi.d_articles_cgi;
								rowTmp_tSplitRow_1.lib_article_cgi = "";
								rows_tSplitRow_1.add(rowTmp_tSplitRow_1);
								nb_line_tSplitRow_1++;
								rowTmp_tSplitRow_1 = new row1Struct();

								rowTmp_tSplitRow_1.id_article_cgi = null;
								rowTmp_tSplitRow_1.code_article_cgi = articles_cgi.e_articles_cgi;
								rowTmp_tSplitRow_1.lib_article_cgi = "";
								rows_tSplitRow_1.add(rowTmp_tSplitRow_1);
								nb_line_tSplitRow_1++;

								for (row1Struct row_tSplitRow_1 : rows_tSplitRow_1) {// C_01
									row1 = row_tSplitRow_1;

									tos_count_tSplitRow_1++;

									/**
									 * [tSplitRow_1 main ] stop
									 */
									// Start of branch "row1"
									if (row1 != null) {

										/**
										 * [tFilterRow_1 main ] start
										 */

										currentComponent = "tFilterRow_1";

										row15 = null;
										Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
												"&&");
										ope_tFilterRow_1
												.matches(
														(// code sample : use
															// row1 to define
															// the condition.
														// row1.columnName1.equals("foo")
														// ||!(row1.columnName2.equals("bar"))
														// replace the following
														// expression by your
														// own filter condition
														!(Relational
																.ISNULL(row1.code_article_cgi) || ("")
																.equals(row1.code_article_cgi))),
														"advanced condition failed");

										if (ope_tFilterRow_1.getMatchFlag()) {
											if (row15 == null) {
												row15 = new row15Struct();
											}
											row15.id_article_cgi = row1.id_article_cgi;
											row15.code_article_cgi = row1.code_article_cgi;
											row15.lib_article_cgi = row1.lib_article_cgi;
											nb_line_ok_tFilterRow_1++;
										} else {
											nb_line_reject_tFilterRow_1++;
										}

										nb_line_tFilterRow_1++;

										tos_count_tFilterRow_1++;

										/**
										 * [tFilterRow_1 main ] stop
										 */
										// Start of branch "row15"
										if (row15 != null) {

											/**
											 * [tUniqRow_14 main ] start
											 */

											currentComponent = "tUniqRow_14";

											row16 = null;
											if (row15.code_article_cgi == null) {
												finder_tUniqRow_14.code_article_cgi = null;
											} else {
												finder_tUniqRow_14.code_article_cgi = row15.code_article_cgi
														.toLowerCase();
											}
											finder_tUniqRow_14.hashCodeDirty = true;
											if (!keystUniqRow_14
													.contains(finder_tUniqRow_14)) {
												KeyStruct_tUniqRow_14 new_tUniqRow_14 = new KeyStruct_tUniqRow_14();

												if (row15.code_article_cgi == null) {
													new_tUniqRow_14.code_article_cgi = null;
												} else {
													new_tUniqRow_14.code_article_cgi = row15.code_article_cgi
															.toLowerCase();
												}

												keystUniqRow_14
														.add(new_tUniqRow_14);
												if (row16 == null) {
													row16 = new row16Struct();
												}
												row16.id_article_cgi = row15.id_article_cgi;
												row16.code_article_cgi = row15.code_article_cgi;
												row16.lib_article_cgi = row15.lib_article_cgi;
												nb_uniques_tUniqRow_14++;
											} else {
												nb_duplicates_tUniqRow_14++;
											}

											tos_count_tUniqRow_14++;

											/**
											 * [tUniqRow_14 main ] stop
											 */
											// Start of branch "row16"
											if (row16 != null) {

												/**
												 * [tSortRow_4_SortOut main ]
												 * start
												 */

												currentComponent = "tSortRow_4_SortOut";

												Comparablerow16Struct arrayRowtSortRow_4_SortOut = new Comparablerow16Struct();

												arrayRowtSortRow_4_SortOut.id_article_cgi = row16.id_article_cgi;
												arrayRowtSortRow_4_SortOut.code_article_cgi = row16.code_article_cgi;
												arrayRowtSortRow_4_SortOut.lib_article_cgi = row16.lib_article_cgi;
												list_tSortRow_4_SortOut
														.add(arrayRowtSortRow_4_SortOut);

												tos_count_tSortRow_4_SortOut++;

												/**
												 * [tSortRow_4_SortOut main ]
												 * stop
												 */

											} // End of branch "row16"

										} // End of branch "row15"

									} // End of branch "row1"

								} // C_01

							} // End of branch "articles_cgi"

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSplitRow_1 end ] start
				 */

				currentComponent = "tSplitRow_1";

				globalMap.put("tSplitRow_1_NB_LINE", nb_line_tSplitRow_1);

				ok_Hash.put("tSplitRow_1", true);
				end_Hash.put("tSplitRow_1", System.currentTimeMillis());

				/**
				 * [tSplitRow_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tUniqRow_14 end ] start
				 */

				currentComponent = "tUniqRow_14";

				globalMap.put("tUniqRow_14_NB_UNIQUES", nb_uniques_tUniqRow_14);
				globalMap.put("tUniqRow_14_NB_DUPLICATES",
						nb_duplicates_tUniqRow_14);

				ok_Hash.put("tUniqRow_14", true);
				end_Hash.put("tUniqRow_14", System.currentTimeMillis());

				/**
				 * [tUniqRow_14 end ] stop
				 */

				/**
				 * [tSortRow_4_SortOut end ] start
				 */

				currentComponent = "tSortRow_4_SortOut";

				row16Struct[] array_tSortRow_4_SortOut = list_tSortRow_4_SortOut
						.toArray(new Comparablerow16Struct[0]);

				java.util.Arrays.sort(array_tSortRow_4_SortOut);

				globalMap.put("tSortRow_4", array_tSortRow_4_SortOut);

				ok_Hash.put("tSortRow_4_SortOut", true);
				end_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_12", false);
				start_Hash.put("tFileOutputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_12";

				int tos_count_tFileOutputDelimited_12 = 0;

				String fileName_tFileOutputDelimited_12 = "";
				fileName_tFileOutputDelimited_12 = (new java.io.File(
						context.tables_correspondance_path + "article_cgi.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_12 = null;
				String extension_tFileOutputDelimited_12 = null;
				String directory_tFileOutputDelimited_12 = null;
				if ((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(0, fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
							.substring(0, fileName_tFileOutputDelimited_12
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(0, fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					}
					directory_tFileOutputDelimited_12 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_12 = true;
				java.io.File filetFileOutputDelimited_12 = new java.io.File(
						fileName_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME",
						fileName_tFileOutputDelimited_12);

				String[] headColutFileOutputDelimited_12 = new String[3];
				class CSVBasicSet_tFileOutputDelimited_12 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_12[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_12 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_12[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_12[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_12 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_12[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_12[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_12 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_12[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_12 = 0;
				int splitEvery_tFileOutputDelimited_12 = 1000;
				int splitedFileNo_tFileOutputDelimited_12 = 0;
				int currentRow_tFileOutputDelimited_12 = 0;

				CSVBasicSet_tFileOutputDelimited_12 csvSettings_tFileOutputDelimited_12 = new CSVBasicSet_tFileOutputDelimited_12();
				csvSettings_tFileOutputDelimited_12.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_12.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_12.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_12 != null
						&& directory_tFileOutputDelimited_12.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_12 = new java.io.File(
							directory_tFileOutputDelimited_12);
					if (!dir_tFileOutputDelimited_12.exists()) {
						dir_tFileOutputDelimited_12.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_12 = null;
				try {
					CsvWritertFileOutputDelimited_12 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_12,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_12
							.setSeparator(csvSettings_tFileOutputDelimited_12
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_12
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_12
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_12
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_12.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_12
										.getRowDelim());
					}

					if (filetFileOutputDelimited_12.length() == 0) {

						headColutFileOutputDelimited_12[0] = "id_article_cgi";

						headColutFileOutputDelimited_12[1] = "code_article_cgi";

						headColutFileOutputDelimited_12[2] = "lib_article_cgi";

						CsvWritertFileOutputDelimited_12
								.writeNext(headColutFileOutputDelimited_12);
						CsvWritertFileOutputDelimited_12.flush();

					}

					CsvWritertFileOutputDelimited_12
							.setEscapeChar(csvSettings_tFileOutputDelimited_12
									.getEscapeChar());
					CsvWritertFileOutputDelimited_12
							.setQuoteChar(csvSettings_tFileOutputDelimited_12
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_12
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_12 begin ] stop
					 */

					/**
					 * [tJavaRow_1 begin ] start
					 */

					ok_Hash.put("tJavaRow_1", false);
					start_Hash.put("tJavaRow_1", System.currentTimeMillis());
					currentComponent = "tJavaRow_1";

					int tos_count_tJavaRow_1 = 0;

					int nb_line_tJavaRow_1 = 0;

					/**
					 * [tJavaRow_1 begin ] stop
					 */

					/**
					 * [tSortRow_4_SortIn begin ] start
					 */

					ok_Hash.put("tSortRow_4_SortIn", false);
					start_Hash.put("tSortRow_4_SortIn",
							System.currentTimeMillis());
					currentComponent = "tSortRow_4_SortIn";

					int tos_count_tSortRow_4_SortIn = 0;

					row16Struct[] array_tSortRow_4_SortIn = (row16Struct[]) globalMap
							.get("tSortRow_4");

					int nb_line_tSortRow_4_SortIn = 0;

					row16Struct current_tSortRow_4_SortIn = null;

					for (int i_tSortRow_4_SortIn = 0; i_tSortRow_4_SortIn < array_tSortRow_4_SortIn.length; i_tSortRow_4_SortIn++) {
						current_tSortRow_4_SortIn = array_tSortRow_4_SortIn[i_tSortRow_4_SortIn];
						row12.id_article_cgi = current_tSortRow_4_SortIn.id_article_cgi;
						row12.code_article_cgi = current_tSortRow_4_SortIn.code_article_cgi;
						row12.lib_article_cgi = current_tSortRow_4_SortIn.lib_article_cgi;
						// increase number of line sorted
						nb_line_tSortRow_4_SortIn++;

						/**
						 * [tSortRow_4_SortIn begin ] stop
						 */
						/**
						 * [tSortRow_4_SortIn main ] start
						 */

						currentComponent = "tSortRow_4_SortIn";

						tos_count_tSortRow_4_SortIn++;

						/**
						 * [tSortRow_4_SortIn main ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// Code généré selon le schémas d'entrée et de sortie
						row3.id_article_cgi = Numeric.sequence("s_article_cgi",
								1, 1);
						;
						row3.code_article_cgi = row12.code_article_cgi;
						row3.lib_article_cgi = row12.lib_article_cgi;

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_12 main ] start
						 */

						currentComponent = "tFileOutputDelimited_12";

						String[] rowtFileOutputDelimited_12 = new String[3];

						rowtFileOutputDelimited_12[0] = row3.id_article_cgi == null ? ""
								: String.valueOf(row3.id_article_cgi);

						rowtFileOutputDelimited_12[1] = row3.code_article_cgi == null ? ""
								: row3.code_article_cgi;

						rowtFileOutputDelimited_12[2] = row3.lib_article_cgi == null ? ""
								: row3.lib_article_cgi;

						nb_line_tFileOutputDelimited_12++;
						CsvWritertFileOutputDelimited_12
								.writeNext(rowtFileOutputDelimited_12);

						tos_count_tFileOutputDelimited_12++;

						/**
						 * [tFileOutputDelimited_12 main ] stop
						 */

						/**
						 * [tSortRow_4_SortIn end ] start
						 */

						currentComponent = "tSortRow_4_SortIn";

					}

					globalMap.put("tSortRow_4_SortIn_NB_LINE",
							nb_line_tSortRow_4_SortIn);

					ok_Hash.put("tSortRow_4_SortIn", true);
					end_Hash.put("tSortRow_4_SortIn",
							System.currentTimeMillis());

					/**
					 * [tSortRow_4_SortIn end ] stop
					 */

					/**
					 * [tJavaRow_1 end ] start
					 */

					currentComponent = "tJavaRow_1";

					globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

					ok_Hash.put("tJavaRow_1", true);
					end_Hash.put("tJavaRow_1", System.currentTimeMillis());

					/**
					 * [tJavaRow_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_12 end ] start
					 */

					currentComponent = "tFileOutputDelimited_12";

				} finally {

					if (CsvWritertFileOutputDelimited_12 != null) {
						CsvWritertFileOutputDelimited_12.close();
					}
					globalMap.put("tFileOutputDelimited_12_NB_LINE",
							nb_line_tFileOutputDelimited_12);
				} // finally

				ok_Hash.put("tFileOutputDelimited_12", true);
				end_Hash.put("tFileOutputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_12 end ] stop
				 */

				/**
				 * [tUniqRow_11 end ] start
				 */

				currentComponent = "tUniqRow_11";

				globalMap.put("tUniqRow_11_NB_UNIQUES", nb_uniques_tUniqRow_11);
				globalMap.put("tUniqRow_11_NB_DUPLICATES",
						nb_duplicates_tUniqRow_11);

				ok_Hash.put("tUniqRow_11", true);
				end_Hash.put("tUniqRow_11", System.currentTimeMillis());

				/**
				 * [tUniqRow_11 end ] stop
				 */

				/**
				 * [tSortRow_2_SortOut end ] start
				 */

				currentComponent = "tSortRow_2_SortOut";

				row13Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut
						.toArray(new Comparablerow13Struct[0]);

				java.util.Arrays.sort(array_tSortRow_2_SortOut);

				globalMap.put("tSortRow_2", array_tSortRow_2_SortOut);

				ok_Hash.put("tSortRow_2_SortOut", true);
				end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_10", false);
				start_Hash.put("tFileOutputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_10";

				int tos_count_tFileOutputDelimited_10 = 0;

				String fileName_tFileOutputDelimited_10 = "";
				fileName_tFileOutputDelimited_10 = (new java.io.File(
						context.tables_correspondance_path
								+ "nature_culture_speciale.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_10 = null;
				String extension_tFileOutputDelimited_10 = null;
				String directory_tFileOutputDelimited_10 = null;
				if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
							.substring(0, fileName_tFileOutputDelimited_10
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					}
					directory_tFileOutputDelimited_10 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_10 = true;
				java.io.File filetFileOutputDelimited_10 = new java.io.File(
						fileName_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME",
						fileName_tFileOutputDelimited_10);

				String[] headColutFileOutputDelimited_10 = new String[2];
				class CSVBasicSet_tFileOutputDelimited_10 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_10[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_10 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_10[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_10[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_10 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_10[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_10[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_10 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_10[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_10 = 0;
				int splitEvery_tFileOutputDelimited_10 = 1000;
				int splitedFileNo_tFileOutputDelimited_10 = 0;
				int currentRow_tFileOutputDelimited_10 = 0;

				CSVBasicSet_tFileOutputDelimited_10 csvSettings_tFileOutputDelimited_10 = new CSVBasicSet_tFileOutputDelimited_10();
				csvSettings_tFileOutputDelimited_10.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_10.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_10.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_10 != null
						&& directory_tFileOutputDelimited_10.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
							directory_tFileOutputDelimited_10);
					if (!dir_tFileOutputDelimited_10.exists()) {
						dir_tFileOutputDelimited_10.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = null;
				try {
					CsvWritertFileOutputDelimited_10 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_10,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_10
							.setSeparator(csvSettings_tFileOutputDelimited_10
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_10
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_10
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_10
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_10.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_10
										.getRowDelim());
					}

					if (filetFileOutputDelimited_10.length() == 0) {

						headColutFileOutputDelimited_10[0] = "nature_culture_speciale";

						headColutFileOutputDelimited_10[1] = "lib_nature_culture_speciale";

						CsvWritertFileOutputDelimited_10
								.writeNext(headColutFileOutputDelimited_10);
						CsvWritertFileOutputDelimited_10.flush();

					}

					CsvWritertFileOutputDelimited_10
							.setEscapeChar(csvSettings_tFileOutputDelimited_10
									.getEscapeChar());
					CsvWritertFileOutputDelimited_10
							.setQuoteChar(csvSettings_tFileOutputDelimited_10
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_10
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_10 begin ] stop
					 */

					/**
					 * [tJavaRow_3 begin ] start
					 */

					ok_Hash.put("tJavaRow_3", false);
					start_Hash.put("tJavaRow_3", System.currentTimeMillis());
					currentComponent = "tJavaRow_3";

					int tos_count_tJavaRow_3 = 0;

					int nb_line_tJavaRow_3 = 0;

					/**
					 * [tJavaRow_3 begin ] stop
					 */

					/**
					 * [tSortRow_2_SortIn begin ] start
					 */

					ok_Hash.put("tSortRow_2_SortIn", false);
					start_Hash.put("tSortRow_2_SortIn",
							System.currentTimeMillis());
					currentComponent = "tSortRow_2_SortIn";

					int tos_count_tSortRow_2_SortIn = 0;

					row13Struct[] array_tSortRow_2_SortIn = (row13Struct[]) globalMap
							.get("tSortRow_2");

					int nb_line_tSortRow_2_SortIn = 0;

					row13Struct current_tSortRow_2_SortIn = null;

					for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
						current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
						row10.nature_culture_speciale = current_tSortRow_2_SortIn.nature_culture_speciale;
						row10.lib_nature_culture_speciale = current_tSortRow_2_SortIn.lib_nature_culture_speciale;
						// increase number of line sorted
						nb_line_tSortRow_2_SortIn++;

						/**
						 * [tSortRow_2_SortIn begin ] stop
						 */
						/**
						 * [tSortRow_2_SortIn main ] start
						 */

						currentComponent = "tSortRow_2_SortIn";

						tos_count_tSortRow_2_SortIn++;

						/**
						 * [tSortRow_2_SortIn main ] stop
						 */

						/**
						 * [tJavaRow_3 main ] start
						 */

						currentComponent = "tJavaRow_3";

						// Code généré selon le schémas d'entrée et de sortie
						row6.nature_culture_speciale = Numeric.sequence(
								"s_nature_culture_speciale", 1, 1);
						row6.lib_nature_culture_speciale = row10.lib_nature_culture_speciale;

						nb_line_tJavaRow_3++;

						tos_count_tJavaRow_3++;

						/**
						 * [tJavaRow_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 main ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

						String[] rowtFileOutputDelimited_10 = new String[2];

						rowtFileOutputDelimited_10[0] = row6.nature_culture_speciale == null ? ""
								: String.valueOf(row6.nature_culture_speciale);

						rowtFileOutputDelimited_10[1] = row6.lib_nature_culture_speciale == null ? ""
								: row6.lib_nature_culture_speciale;

						nb_line_tFileOutputDelimited_10++;
						CsvWritertFileOutputDelimited_10
								.writeNext(rowtFileOutputDelimited_10);

						tos_count_tFileOutputDelimited_10++;

						/**
						 * [tFileOutputDelimited_10 main ] stop
						 */

						/**
						 * [tSortRow_2_SortIn end ] start
						 */

						currentComponent = "tSortRow_2_SortIn";

					}

					globalMap.put("tSortRow_2_SortIn_NB_LINE",
							nb_line_tSortRow_2_SortIn);

					ok_Hash.put("tSortRow_2_SortIn", true);
					end_Hash.put("tSortRow_2_SortIn",
							System.currentTimeMillis());

					/**
					 * [tSortRow_2_SortIn end ] stop
					 */

					/**
					 * [tJavaRow_3 end ] start
					 */

					currentComponent = "tJavaRow_3";

					globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

					ok_Hash.put("tJavaRow_3", true);
					end_Hash.put("tJavaRow_3", System.currentTimeMillis());

					/**
					 * [tJavaRow_3 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_10 end ] start
					 */

					currentComponent = "tFileOutputDelimited_10";

				} finally {

					if (CsvWritertFileOutputDelimited_10 != null) {
						CsvWritertFileOutputDelimited_10.close();
					}
					globalMap.put("tFileOutputDelimited_10_NB_LINE",
							nb_line_tFileOutputDelimited_10);
				} // finally

				ok_Hash.put("tFileOutputDelimited_10", true);
				end_Hash.put("tFileOutputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_10 end ] stop
				 */

				/**
				 * [tUniqRow_12 end ] start
				 */

				currentComponent = "tUniqRow_12";

				globalMap.put("tUniqRow_12_NB_UNIQUES", nb_uniques_tUniqRow_12);
				globalMap.put("tUniqRow_12_NB_DUPLICATES",
						nb_duplicates_tUniqRow_12);

				ok_Hash.put("tUniqRow_12", true);
				end_Hash.put("tUniqRow_12", System.currentTimeMillis());

				/**
				 * [tUniqRow_12 end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut end ] start
				 */

				currentComponent = "tSortRow_3_SortOut";

				row14Struct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut
						.toArray(new Comparablerow14Struct[0]);

				java.util.Arrays.sort(array_tSortRow_3_SortOut);

				globalMap.put("tSortRow_3", array_tSortRow_3_SortOut);

				ok_Hash.put("tSortRow_3_SortOut", true);
				end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_13", false);
				start_Hash.put("tFileOutputDelimited_13",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_13";

				int tos_count_tFileOutputDelimited_13 = 0;

				String fileName_tFileOutputDelimited_13 = "";
				fileName_tFileOutputDelimited_13 = (new java.io.File(
						context.tables_correspondance_path
								+ "nature_mutation.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_13 = null;
				String extension_tFileOutputDelimited_13 = null;
				String directory_tFileOutputDelimited_13 = null;
				if ((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(0, fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
							.substring(0, fileName_tFileOutputDelimited_13
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(0, fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					}
					directory_tFileOutputDelimited_13 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_13 = true;
				java.io.File filetFileOutputDelimited_13 = new java.io.File(
						fileName_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME",
						fileName_tFileOutputDelimited_13);

				String[] headColutFileOutputDelimited_13 = new String[2];
				class CSVBasicSet_tFileOutputDelimited_13 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_13[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_13 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_13[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_13[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_13 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_13[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_13[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_13 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_13[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_13 = 0;
				int splitEvery_tFileOutputDelimited_13 = 1000;
				int splitedFileNo_tFileOutputDelimited_13 = 0;
				int currentRow_tFileOutputDelimited_13 = 0;

				CSVBasicSet_tFileOutputDelimited_13 csvSettings_tFileOutputDelimited_13 = new CSVBasicSet_tFileOutputDelimited_13();
				csvSettings_tFileOutputDelimited_13.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_13.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_13.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_13 != null
						&& directory_tFileOutputDelimited_13.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_13 = new java.io.File(
							directory_tFileOutputDelimited_13);
					if (!dir_tFileOutputDelimited_13.exists()) {
						dir_tFileOutputDelimited_13.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = null;
				try {
					CsvWritertFileOutputDelimited_13 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_13,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_13
							.setSeparator(csvSettings_tFileOutputDelimited_13
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_13
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_13
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_13
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_13.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_13
										.getRowDelim());
					}

					if (filetFileOutputDelimited_13.length() == 0) {

						headColutFileOutputDelimited_13[0] = "id_nature_mutation";

						headColutFileOutputDelimited_13[1] = "lib_nature_mutation";

						CsvWritertFileOutputDelimited_13
								.writeNext(headColutFileOutputDelimited_13);
						CsvWritertFileOutputDelimited_13.flush();

					}

					CsvWritertFileOutputDelimited_13
							.setEscapeChar(csvSettings_tFileOutputDelimited_13
									.getEscapeChar());
					CsvWritertFileOutputDelimited_13
							.setQuoteChar(csvSettings_tFileOutputDelimited_13
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_13
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_13 begin ] stop
					 */

					/**
					 * [tJavaRow_2 begin ] start
					 */

					ok_Hash.put("tJavaRow_2", false);
					start_Hash.put("tJavaRow_2", System.currentTimeMillis());
					currentComponent = "tJavaRow_2";

					int tos_count_tJavaRow_2 = 0;

					int nb_line_tJavaRow_2 = 0;

					/**
					 * [tJavaRow_2 begin ] stop
					 */

					/**
					 * [tSortRow_3_SortIn begin ] start
					 */

					ok_Hash.put("tSortRow_3_SortIn", false);
					start_Hash.put("tSortRow_3_SortIn",
							System.currentTimeMillis());
					currentComponent = "tSortRow_3_SortIn";

					int tos_count_tSortRow_3_SortIn = 0;

					row14Struct[] array_tSortRow_3_SortIn = (row14Struct[]) globalMap
							.get("tSortRow_3");

					int nb_line_tSortRow_3_SortIn = 0;

					row14Struct current_tSortRow_3_SortIn = null;

					for (int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++) {
						current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
						row11.id_nature_mutation = current_tSortRow_3_SortIn.id_nature_mutation;
						row11.lib_nature_mutation = current_tSortRow_3_SortIn.lib_nature_mutation;
						// increase number of line sorted
						nb_line_tSortRow_3_SortIn++;

						/**
						 * [tSortRow_3_SortIn begin ] stop
						 */
						/**
						 * [tSortRow_3_SortIn main ] start
						 */

						currentComponent = "tSortRow_3_SortIn";

						tos_count_tSortRow_3_SortIn++;

						/**
						 * [tSortRow_3_SortIn main ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						// Code généré selon le schémas d'entrée et de sortie
						row4.id_nature_mutation = Numeric.sequence(
								"s_nature_mutation", 1, 1);
						;
						row4.lib_nature_mutation = row11.lib_nature_mutation;

						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_13 main ] start
						 */

						currentComponent = "tFileOutputDelimited_13";

						String[] rowtFileOutputDelimited_13 = new String[2];

						rowtFileOutputDelimited_13[0] = row4.id_nature_mutation == null ? ""
								: String.valueOf(row4.id_nature_mutation);

						rowtFileOutputDelimited_13[1] = row4.lib_nature_mutation == null ? ""
								: row4.lib_nature_mutation;

						nb_line_tFileOutputDelimited_13++;
						CsvWritertFileOutputDelimited_13
								.writeNext(rowtFileOutputDelimited_13);

						tos_count_tFileOutputDelimited_13++;

						/**
						 * [tFileOutputDelimited_13 main ] stop
						 */

						/**
						 * [tSortRow_3_SortIn end ] start
						 */

						currentComponent = "tSortRow_3_SortIn";

					}

					globalMap.put("tSortRow_3_SortIn_NB_LINE",
							nb_line_tSortRow_3_SortIn);

					ok_Hash.put("tSortRow_3_SortIn", true);
					end_Hash.put("tSortRow_3_SortIn",
							System.currentTimeMillis());

					/**
					 * [tSortRow_3_SortIn end ] stop
					 */

					/**
					 * [tJavaRow_2 end ] start
					 */

					currentComponent = "tJavaRow_2";

					globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

					ok_Hash.put("tJavaRow_2", true);
					end_Hash.put("tJavaRow_2", System.currentTimeMillis());

					/**
					 * [tJavaRow_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_13 end ] start
					 */

					currentComponent = "tFileOutputDelimited_13";

				} finally {

					if (CsvWritertFileOutputDelimited_13 != null) {
						CsvWritertFileOutputDelimited_13.close();
					}
					globalMap.put("tFileOutputDelimited_13_NB_LINE",
							nb_line_tFileOutputDelimited_13);
				} // finally

				ok_Hash.put("tFileOutputDelimited_13", true);
				end_Hash.put("tFileOutputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_13 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES",
						nb_duplicates_tUniqRow_5);

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentComponent = "tSortRow_1_SortOut";

				row7Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
						.toArray(new Comparablerow7Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.tables_correspondance_path
								+ "nature_culture.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				String[] headColutFileOutputDelimited_3 = new String[2];
				class CSVBasicSet_tFileOutputDelimited_3 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_3[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_3 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_3[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_3 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_3[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_3[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
				csvSettings_tFileOutputDelimited_3.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;
				try {
					CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_3,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_3
							.setSeparator(csvSettings_tFileOutputDelimited_3
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_3
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_3.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_3
										.getRowDelim());
					}

					if (filetFileOutputDelimited_3.length() == 0) {

						headColutFileOutputDelimited_3[0] = "nature_culture";

						headColutFileOutputDelimited_3[1] = "lib_nature_culture";

						CsvWritertFileOutputDelimited_3
								.writeNext(headColutFileOutputDelimited_3);
						CsvWritertFileOutputDelimited_3.flush();

					}

					CsvWritertFileOutputDelimited_3
							.setEscapeChar(csvSettings_tFileOutputDelimited_3
									.getEscapeChar());
					CsvWritertFileOutputDelimited_3
							.setQuoteChar(csvSettings_tFileOutputDelimited_3
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_3
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_3 begin ] stop
					 */

					/**
					 * [tJavaRow_4 begin ] start
					 */

					ok_Hash.put("tJavaRow_4", false);
					start_Hash.put("tJavaRow_4", System.currentTimeMillis());
					currentComponent = "tJavaRow_4";

					int tos_count_tJavaRow_4 = 0;

					int nb_line_tJavaRow_4 = 0;

					/**
					 * [tJavaRow_4 begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn begin ] start
					 */

					ok_Hash.put("tSortRow_1_SortIn", false);
					start_Hash.put("tSortRow_1_SortIn",
							System.currentTimeMillis());
					currentComponent = "tSortRow_1_SortIn";

					int tos_count_tSortRow_1_SortIn = 0;

					row7Struct[] array_tSortRow_1_SortIn = (row7Struct[]) globalMap
							.get("tSortRow_1");

					int nb_line_tSortRow_1_SortIn = 0;

					row7Struct current_tSortRow_1_SortIn = null;

					for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
						current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
						row9.nature_culture = current_tSortRow_1_SortIn.nature_culture;
						row9.lib_nature_culture = current_tSortRow_1_SortIn.lib_nature_culture;
						// increase number of line sorted
						nb_line_tSortRow_1_SortIn++;

						/**
						 * [tSortRow_1_SortIn begin ] stop
						 */
						/**
						 * [tSortRow_1_SortIn main ] start
						 */

						currentComponent = "tSortRow_1_SortIn";

						tos_count_tSortRow_1_SortIn++;

						/**
						 * [tSortRow_1_SortIn main ] stop
						 */

						/**
						 * [tJavaRow_4 main ] start
						 */

						currentComponent = "tJavaRow_4";

						// Code généré selon le schémas d'entrée et de sortie
						row8.nature_culture = Numeric.sequence(
								"s_nature_culture", 1, 1);
						;
						row8.lib_nature_culture = row9.lib_nature_culture;

						nb_line_tJavaRow_4++;

						tos_count_tJavaRow_4++;

						/**
						 * [tJavaRow_4 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						String[] rowtFileOutputDelimited_3 = new String[2];

						rowtFileOutputDelimited_3[0] = row8.nature_culture == null ? ""
								: String.valueOf(row8.nature_culture);

						rowtFileOutputDelimited_3[1] = row8.lib_nature_culture == null ? ""
								: row8.lib_nature_culture;

						nb_line_tFileOutputDelimited_3++;
						CsvWritertFileOutputDelimited_3
								.writeNext(rowtFileOutputDelimited_3);

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tSortRow_1_SortIn end ] start
						 */

						currentComponent = "tSortRow_1_SortIn";

					}

					globalMap.put("tSortRow_1_SortIn_NB_LINE",
							nb_line_tSortRow_1_SortIn);

					ok_Hash.put("tSortRow_1_SortIn", true);
					end_Hash.put("tSortRow_1_SortIn",
							System.currentTimeMillis());

					/**
					 * [tSortRow_1_SortIn end ] stop
					 */

					/**
					 * [tJavaRow_4 end ] start
					 */

					currentComponent = "tJavaRow_4";

					globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

					ok_Hash.put("tJavaRow_4", true);
					end_Hash.put("tJavaRow_4", System.currentTimeMillis());

					/**
					 * [tJavaRow_4 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

				} finally {

					if (CsvWritertFileOutputDelimited_3 != null) {
						CsvWritertFileOutputDelimited_3.close();
					}
					globalMap.put("tFileOutputDelimited_3_NB_LINE",
							nb_line_tFileOutputDelimited_3);
				} // finally

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES",
						nb_duplicates_tUniqRow_3);

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tSortRow_5_SortOut end ] start
				 */

				currentComponent = "tSortRow_5_SortOut";

				row5Struct[] array_tSortRow_5_SortOut = list_tSortRow_5_SortOut
						.toArray(new Comparablerow5Struct[0]);

				java.util.Arrays.sort(array_tSortRow_5_SortOut);

				globalMap.put("tSortRow_5", array_tSortRow_5_SortOut);

				ok_Hash.put("tSortRow_5_SortOut", true);
				end_Hash.put("tSortRow_5_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_5_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.tables_correspondance_path + "type_local.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				String[] headColutFileOutputDelimited_1 = new String[2];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;
				try {
					CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_1,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_1
							.setSeparator(csvSettings_tFileOutputDelimited_1
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_1
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_1.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_1
										.getRowDelim());
					}

					if (filetFileOutputDelimited_1.length() == 0) {

						headColutFileOutputDelimited_1[0] = "code_type_local";

						headColutFileOutputDelimited_1[1] = "type_local";

						CsvWritertFileOutputDelimited_1
								.writeNext(headColutFileOutputDelimited_1);
						CsvWritertFileOutputDelimited_1.flush();

					}

					CsvWritertFileOutputDelimited_1
							.setEscapeChar(csvSettings_tFileOutputDelimited_1
									.getEscapeChar());
					CsvWritertFileOutputDelimited_1
							.setQuoteChar(csvSettings_tFileOutputDelimited_1
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_1
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tSortRow_5_SortIn begin ] start
					 */

					ok_Hash.put("tSortRow_5_SortIn", false);
					start_Hash.put("tSortRow_5_SortIn",
							System.currentTimeMillis());
					currentComponent = "tSortRow_5_SortIn";

					int tos_count_tSortRow_5_SortIn = 0;

					row5Struct[] array_tSortRow_5_SortIn = (row5Struct[]) globalMap
							.get("tSortRow_5");

					int nb_line_tSortRow_5_SortIn = 0;

					row5Struct current_tSortRow_5_SortIn = null;

					for (int i_tSortRow_5_SortIn = 0; i_tSortRow_5_SortIn < array_tSortRow_5_SortIn.length; i_tSortRow_5_SortIn++) {
						current_tSortRow_5_SortIn = array_tSortRow_5_SortIn[i_tSortRow_5_SortIn];
						row17.code_type_local = current_tSortRow_5_SortIn.code_type_local;
						row17.type_local = current_tSortRow_5_SortIn.type_local;
						// increase number of line sorted
						nb_line_tSortRow_5_SortIn++;

						/**
						 * [tSortRow_5_SortIn begin ] stop
						 */
						/**
						 * [tSortRow_5_SortIn main ] start
						 */

						currentComponent = "tSortRow_5_SortIn";

						tos_count_tSortRow_5_SortIn++;

						/**
						 * [tSortRow_5_SortIn main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						String[] rowtFileOutputDelimited_1 = new String[2];

						rowtFileOutputDelimited_1[0] = row17.code_type_local == null ? ""
								: row17.code_type_local;

						rowtFileOutputDelimited_1[1] = row17.type_local == null ? ""
								: row17.type_local;

						nb_line_tFileOutputDelimited_1++;
						CsvWritertFileOutputDelimited_1
								.writeNext(rowtFileOutputDelimited_1);

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tSortRow_5_SortIn end ] start
						 */

						currentComponent = "tSortRow_5_SortIn";

					}

					globalMap.put("tSortRow_5_SortIn_NB_LINE",
							nb_line_tSortRow_5_SortIn);

					ok_Hash.put("tSortRow_5_SortIn", true);
					end_Hash.put("tSortRow_5_SortIn",
							System.currentTimeMillis());

					/**
					 * [tSortRow_5_SortIn end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tSortRow_5_SortIn"
			globalMap.remove("tSortRow_5");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tSortRow_3_SortIn"
			globalMap.remove("tSortRow_3");

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			// free memory for "tSortRow_4_SortIn"
			globalMap.remove("tSortRow_4");

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "test";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final A_extraction_tables_correspondance A_extraction_tables_correspondanceClass = new A_extraction_tables_correspondance();

		int exitCode = A_extraction_tables_correspondanceClass
				.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = A_extraction_tables_correspondance.class
					.getClassLoader().getResourceAsStream(
							"dvf/a_extraction_tables_correspondance_0_2/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.db_host = (String) context.getProperty("db_host");
			context.db_login = (String) context.getProperty("db_login");
			context.db_name = (String) context.getProperty("db_name");
			context.db_password = (String) context.getProperty("db_password");
			context.db_port = (String) context.getProperty("db_port");
			context.db_schema = (String) context.getProperty("db_schema");
			context.dvf_file = (String) context.getProperty("dvf_file");
			context.log_path = (String) context.getProperty("log_path");
			context.prefixe_table = (String) context
					.getProperty("prefixe_table");
			context.source_path = (String) context.getProperty("source_path");
			context.tables_correspondance_path = (String) context
					.getProperty("tables_correspondance_path");
			context.target_path = (String) context.getProperty("target_path");
			context.temp_path = (String) context.getProperty("temp_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("db_host")) {
				context.db_host = (String) parentContextMap.get("db_host");
			}
			if (parentContextMap.containsKey("db_login")) {
				context.db_login = (String) parentContextMap.get("db_login");
			}
			if (parentContextMap.containsKey("db_name")) {
				context.db_name = (String) parentContextMap.get("db_name");
			}
			if (parentContextMap.containsKey("db_password")) {
				context.db_password = (String) parentContextMap
						.get("db_password");
			}
			if (parentContextMap.containsKey("db_port")) {
				context.db_port = (String) parentContextMap.get("db_port");
			}
			if (parentContextMap.containsKey("db_schema")) {
				context.db_schema = (String) parentContextMap.get("db_schema");
			}
			if (parentContextMap.containsKey("dvf_file")) {
				context.dvf_file = (String) parentContextMap.get("dvf_file");
			}
			if (parentContextMap.containsKey("log_path")) {
				context.log_path = (String) parentContextMap.get("log_path");
			}
			if (parentContextMap.containsKey("prefixe_table")) {
				context.prefixe_table = (String) parentContextMap
						.get("prefixe_table");
			}
			if (parentContextMap.containsKey("source_path")) {
				context.source_path = (String) parentContextMap
						.get("source_path");
			}
			if (parentContextMap.containsKey("tables_correspondance_path")) {
				context.tables_correspondance_path = (String) parentContextMap
						.get("tables_correspondance_path");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
			if (parentContextMap.containsKey("temp_path")) {
				context.temp_path = (String) parentContextMap.get("temp_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {

			e_tFileInputDelimited_2.printStackTrace();
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : A_extraction_tables_correspondance");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 322724 characters generated by Talend Open Studio for Data Integration on the
 * 17 décembre 2013 18:32:39 CET
 ************************************************************************************************/
