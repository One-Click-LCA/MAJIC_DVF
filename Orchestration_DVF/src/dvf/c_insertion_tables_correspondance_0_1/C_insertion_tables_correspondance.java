// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dvf.c_insertion_tables_correspondance_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: C_insertion_tables_correspondance Purpose: <br>
 * Description: Insertion dans base PostgreSQL des tables de correspondance (5 tables):
 - article_cgi
 - nature_mutation
 - type_local
 - nature_culture
 - nature_culture_speciale <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class C_insertion_tables_correspondance implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (db_host != null) {

				this.setProperty("db_host", db_host.toString());

			}

			if (db_login != null) {

				this.setProperty("db_login", db_login.toString());

			}

			if (db_name != null) {

				this.setProperty("db_name", db_name.toString());

			}

			if (db_password != null) {

				this.setProperty("db_password", db_password.toString());

			}

			if (db_port != null) {

				this.setProperty("db_port", db_port.toString());

			}

			if (db_schema != null) {

				this.setProperty("db_schema", db_schema.toString());

			}

			if (dvf_file != null) {

				this.setProperty("dvf_file", dvf_file.toString());

			}

			if (log_path != null) {

				this.setProperty("log_path", log_path.toString());

			}

			if (prefixe_table != null) {

				this.setProperty("prefixe_table", prefixe_table.toString());

			}

			if (source_path != null) {

				this.setProperty("source_path", source_path.toString());

			}

			if (tables_correspondance_path != null) {

				this.setProperty("tables_correspondance_path",
						tables_correspondance_path.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

			if (temp_path != null) {

				this.setProperty("temp_path", temp_path.toString());

			}

		}

		public String db_host;

		public String getDb_host() {
			return this.db_host;
		}

		public String db_login;

		public String getDb_login() {
			return this.db_login;
		}

		public String db_name;

		public String getDb_name() {
			return this.db_name;
		}

		public String db_password;

		public String getDb_password() {
			return this.db_password;
		}

		public String db_port;

		public String getDb_port() {
			return this.db_port;
		}

		public String db_schema;

		public String getDb_schema() {
			return this.db_schema;
		}

		public String dvf_file;

		public String getDvf_file() {
			return this.dvf_file;
		}

		public String log_path;

		public String getLog_path() {
			return this.log_path;
		}

		public String prefixe_table;

		public String getPrefixe_table() {
			return this.prefixe_table;
		}

		public String source_path;

		public String getSource_path() {
			return this.source_path;
		}

		public String tables_correspondance_path;

		public String getTables_correspondance_path() {
			return this.tables_correspondance_path;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}

		public String temp_path;

		public String getTemp_path() {
			return this.temp_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "C_insertion_tables_correspondance";
	private final String projectName = "DVF";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					C_insertion_tables_correspondance.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(C_insertion_tables_correspondance.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.db_host + ":" + context.db_port + "/"
						+ context.db_name;

				String userName_tPostgresqlConnection_1 = context.db_login;
				String password_tPostgresqlConnection_1 = context.db_password;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {
					java.lang.Class.forName("org.postgresql.Driver");

					conn_tPostgresqlConnection_1 = java.sql.DriverManager
							.getConnection(url_tPostgresqlConnection_1,
									userName_tPostgresqlConnection_1,
									password_tPostgresqlConnection_1);
					globalMap.put("conn_tPostgresqlConnection_1",
							conn_tPostgresqlConnection_1);
				}
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.db_schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				tFileInputDelimited_12Process(globalMap);

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DVF_C_insertion_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_C_insertion_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_article_cgi;

		public Integer getId_article_cgi() {
			return this.id_article_cgi;
		}

		public String code_article_cgi;

		public String getCode_article_cgi() {
			return this.code_article_cgi;
		}

		public String lib_article_cgi;

		public String getLib_article_cgi() {
			return this.lib_article_cgi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_article_cgi == null) ? 0
								: this.id_article_cgi.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id_article_cgi == null) {
				if (other.id_article_cgi != null)
					return false;
			} else if (!this.id_article_cgi.equals(other.id_article_cgi))
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id_article_cgi = this.id_article_cgi;
			other.code_article_cgi = this.code_article_cgi;
			other.lib_article_cgi = this.lib_article_cgi;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_C_insertion_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_C_insertion_tables_correspondance.length == 0) {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_C_insertion_tables_correspondance) {

				try {

					int length = 0;

					this.id_article_cgi = readInteger(dis);

					this.code_article_cgi = readString(dis);

					this.lib_article_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_article_cgi, dos);

				// String

				writeString(this.code_article_cgi, dos);

				// String

				writeString(this.lib_article_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",code_article_cgi=" + code_article_cgi);
			sb.append(",lib_article_cgi=" + lib_article_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tPostgresqlOutput_12 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_12", false);
				start_Hash.put("tPostgresqlOutput_12",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_12";

				int tos_count_tPostgresqlOutput_12 = 0;

				String dbschema_tPostgresqlOutput_12 = null;
				dbschema_tPostgresqlOutput_12 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_12 = null;
				if (dbschema_tPostgresqlOutput_12 == null
						|| dbschema_tPostgresqlOutput_12.trim().length() == 0) {
					tableName_tPostgresqlOutput_12 = context.prefixe_table
							+ "article_cgi";
				} else {
					tableName_tPostgresqlOutput_12 = dbschema_tPostgresqlOutput_12
							+ "\".\"" + context.prefixe_table + "article_cgi";
				}

				int updateKeyCount_tPostgresqlOutput_12 = 1;
				if (updateKeyCount_tPostgresqlOutput_12 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_12 = 0;
				int nb_line_update_tPostgresqlOutput_12 = 0;
				int nb_line_inserted_tPostgresqlOutput_12 = 0;
				int nb_line_deleted_tPostgresqlOutput_12 = 0;
				int nb_line_rejected_tPostgresqlOutput_12 = 0;

				int deletedCount_tPostgresqlOutput_12 = 0;
				int updatedCount_tPostgresqlOutput_12 = 0;
				int insertedCount_tPostgresqlOutput_12 = 0;
				int rejectedCount_tPostgresqlOutput_12 = 0;

				boolean whetherReject_tPostgresqlOutput_12 = false;

				java.sql.Connection conn_tPostgresqlOutput_12 = null;

				conn_tPostgresqlOutput_12 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_12 = 10000;
				int batchSizeCounter_tPostgresqlOutput_12 = 0;

				int count_tPostgresqlOutput_12 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_12 = dbMetaData_tPostgresqlOutput_12
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_12 = false;
				while (rsTable_tPostgresqlOutput_12.next()) {
					String table_tPostgresqlOutput_12 = rsTable_tPostgresqlOutput_12
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_12 = rsTable_tPostgresqlOutput_12
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_12.equals(context.prefixe_table
							+ "article_cgi")
							&& (schema_tPostgresqlOutput_12
									.equals(dbschema_tPostgresqlOutput_12) || dbschema_tPostgresqlOutput_12
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_12 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_12.close();
				if (!whetherExist_tPostgresqlOutput_12) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
							.createStatement();
					stmtCreate_tPostgresqlOutput_12
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_12
									+ "\"(\"id_article_cgi\" INT4 ,\"code_article_cgi\" BPCHAR ,\"lib_article_cgi\" BPCHAR ,primary key(\"id_article_cgi\"))");
					stmtCreate_tPostgresqlOutput_12.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_12
								+ "\" WHERE \"id_article_cgi\" = ?");
				String insert_tPostgresqlOutput_12 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_12
						+ "\" (\"id_article_cgi\",\"code_article_cgi\",\"lib_article_cgi\") VALUES (?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.prepareStatement(insert_tPostgresqlOutput_12);
				String update_tPostgresqlOutput_12 = "UPDATE \""
						+ tableName_tPostgresqlOutput_12
						+ "\" SET \"code_article_cgi\" = ?,\"lib_article_cgi\" = ? WHERE \"id_article_cgi\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.prepareStatement(update_tPostgresqlOutput_12);

				/**
				 * [tPostgresqlOutput_12 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /**
				 * Start field
				 * tFileInputDelimited_12:FILENAME
				 */
				context.tables_correspondance_path + "article_cgi.csv"/**
				 * End
				 * field tFileInputDelimited_12:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_12)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_12[0]);
						}

						csvReadertFileInputDelimited_12
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar('"');

						csvReadertFileInputDelimited_12
								.setEscapeChar(csvReadertFileInputDelimited_12
										.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 1; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_12.readNext()) {

								rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
										.getValues();
								if (!(rowtFileInputDelimited_12.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_12[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_12++;

								}

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
									: totalLinetFileInputDelimited_12
											- footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12 ? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_12)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_12[0]);
							}
							csvReadertFileInputDelimited_12
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar('"');

							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12
											.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 1; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_12 != 0
							&& csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
								.getValues();

						if (rowtFileInputDelimited_12.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_12[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row4 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row4 = new row4Struct();
						try {

							if (rowtFileInputDelimited_12.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_12[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.id_article_cgi = null;

								row4.code_article_cgi = null;

								row4.lib_article_cgi = null;

							} else {

								for (int i_tFileInputDelimited_12 = 0; i_tFileInputDelimited_12 < rowtFileInputDelimited_12.length; i_tFileInputDelimited_12++) {
									rowtFileInputDelimited_12[i_tFileInputDelimited_12] = rowtFileInputDelimited_12[i_tFileInputDelimited_12]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row4.id_article_cgi = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row4.id_article_cgi = null;
									}

								} else {
									row4.id_article_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row4.code_article_cgi = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row4.code_article_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 2;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row4.lib_article_cgi = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row4.lib_article_cgi = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tPostgresqlOutput_12 main ] start
							 */

							currentComponent = "tPostgresqlOutput_12";

							whetherReject_tPostgresqlOutput_12 = false;

							if (row4.id_article_cgi == null) {
								pstmt_tPostgresqlOutput_12.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_12.setInt(1,
										row4.id_article_cgi);
							}

							java.sql.ResultSet rs_tPostgresqlOutput_12 = pstmt_tPostgresqlOutput_12
									.executeQuery();
							int checkCount_tPostgresqlOutput_12 = -1;
							while (rs_tPostgresqlOutput_12.next()) {
								checkCount_tPostgresqlOutput_12 = rs_tPostgresqlOutput_12
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_12 > 0) {
								if (row4.code_article_cgi == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setString(
											1, row4.code_article_cgi);
								}

								if (row4.lib_article_cgi == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setString(
											2, row4.lib_article_cgi);
								}

								if (row4.id_article_cgi == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(
											3 + count_tPostgresqlOutput_12,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setInt(
											3 + count_tPostgresqlOutput_12,
											row4.id_article_cgi);
								}

								try {

									updatedCount_tPostgresqlOutput_12 = updatedCount_tPostgresqlOutput_12
											+ pstmtUpdate_tPostgresqlOutput_12
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_12 = true;
									System.err.print(e.getMessage());
								}
							} else {
								if (row4.id_article_cgi == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setInt(1,
											row4.id_article_cgi);
								}

								if (row4.code_article_cgi == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setString(
											2, row4.code_article_cgi);
								}

								if (row4.lib_article_cgi == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setString(
											3, row4.lib_article_cgi);
								}

								try {

									insertedCount_tPostgresqlOutput_12 = insertedCount_tPostgresqlOutput_12
											+ pstmtInsert_tPostgresqlOutput_12
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_12 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tPostgresqlOutput_12++;
							if (batchSize_tPostgresqlOutput_12 <= batchSizeCounter_tPostgresqlOutput_12) {

							}

							tos_count_tPostgresqlOutput_12++;

							/**
							 * [tPostgresqlOutput_12 main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								nb_line_tFileInputDelimited_12);
					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_12 end ] start
				 */

				currentComponent = "tPostgresqlOutput_12";

				if (pstmtUpdate_tPostgresqlOutput_12 != null) {

					pstmtUpdate_tPostgresqlOutput_12.close();

				}
				if (pstmtInsert_tPostgresqlOutput_12 != null) {

					pstmtInsert_tPostgresqlOutput_12.close();

				}
				if (pstmt_tPostgresqlOutput_12 != null) {

					pstmt_tPostgresqlOutput_12.close();

				}

				nb_line_deleted_tPostgresqlOutput_12 = nb_line_deleted_tPostgresqlOutput_12
						+ deletedCount_tPostgresqlOutput_12;
				nb_line_update_tPostgresqlOutput_12 = nb_line_update_tPostgresqlOutput_12
						+ updatedCount_tPostgresqlOutput_12;
				nb_line_inserted_tPostgresqlOutput_12 = nb_line_inserted_tPostgresqlOutput_12
						+ insertedCount_tPostgresqlOutput_12;
				nb_line_rejected_tPostgresqlOutput_12 = nb_line_rejected_tPostgresqlOutput_12
						+ rejectedCount_tPostgresqlOutput_12;

				globalMap.put("tPostgresqlOutput_12_NB_LINE",
						nb_line_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_12);

				ok_Hash.put("tPostgresqlOutput_12", true);
				end_Hash.put("tPostgresqlOutput_12", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_12:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_13Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DVF_C_insertion_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_C_insertion_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String lib_nature_mutation;

		public String getLib_nature_mutation() {
			return this.lib_nature_mutation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_nature_mutation == null) ? 0
								: this.id_nature_mutation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.id_nature_mutation == null) {
				if (other.id_nature_mutation != null)
					return false;
			} else if (!this.id_nature_mutation
					.equals(other.id_nature_mutation))
				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.id_nature_mutation = this.id_nature_mutation;
			other.lib_nature_mutation = this.lib_nature_mutation;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.id_nature_mutation = this.id_nature_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_C_insertion_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_C_insertion_tables_correspondance.length == 0) {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_C_insertion_tables_correspondance) {

				try {

					int length = 0;

					this.id_nature_mutation = readInteger(dis);

					this.lib_nature_mutation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.lib_nature_mutation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",lib_nature_mutation=" + lib_nature_mutation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_nature_mutation,
					other.id_nature_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tPostgresqlOutput_13 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_13", false);
				start_Hash.put("tPostgresqlOutput_13",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_13";

				int tos_count_tPostgresqlOutput_13 = 0;

				String dbschema_tPostgresqlOutput_13 = null;
				dbschema_tPostgresqlOutput_13 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_13 = null;
				if (dbschema_tPostgresqlOutput_13 == null
						|| dbschema_tPostgresqlOutput_13.trim().length() == 0) {
					tableName_tPostgresqlOutput_13 = context.prefixe_table
							+ "nature_mutation";
				} else {
					tableName_tPostgresqlOutput_13 = dbschema_tPostgresqlOutput_13
							+ "\".\""
							+ context.prefixe_table
							+ "nature_mutation";
				}

				int updateKeyCount_tPostgresqlOutput_13 = 1;
				if (updateKeyCount_tPostgresqlOutput_13 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_13 = 0;
				int nb_line_update_tPostgresqlOutput_13 = 0;
				int nb_line_inserted_tPostgresqlOutput_13 = 0;
				int nb_line_deleted_tPostgresqlOutput_13 = 0;
				int nb_line_rejected_tPostgresqlOutput_13 = 0;

				int deletedCount_tPostgresqlOutput_13 = 0;
				int updatedCount_tPostgresqlOutput_13 = 0;
				int insertedCount_tPostgresqlOutput_13 = 0;
				int rejectedCount_tPostgresqlOutput_13 = 0;

				boolean whetherReject_tPostgresqlOutput_13 = false;

				java.sql.Connection conn_tPostgresqlOutput_13 = null;

				conn_tPostgresqlOutput_13 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_13 = 10000;
				int batchSizeCounter_tPostgresqlOutput_13 = 0;

				int count_tPostgresqlOutput_13 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_13 = dbMetaData_tPostgresqlOutput_13
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_13 = false;
				while (rsTable_tPostgresqlOutput_13.next()) {
					String table_tPostgresqlOutput_13 = rsTable_tPostgresqlOutput_13
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_13 = rsTable_tPostgresqlOutput_13
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_13.equals(context.prefixe_table
							+ "nature_mutation")
							&& (schema_tPostgresqlOutput_13
									.equals(dbschema_tPostgresqlOutput_13) || dbschema_tPostgresqlOutput_13
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_13 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_13.close();
				if (!whetherExist_tPostgresqlOutput_13) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
							.createStatement();
					stmtCreate_tPostgresqlOutput_13
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_13
									+ "\"(\"id_nature_mutation\" INT4 ,\"lib_nature_mutation\" VARCHAR ,primary key(\"id_nature_mutation\"))");
					stmtCreate_tPostgresqlOutput_13.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_13
								+ "\" WHERE \"id_nature_mutation\" = ?");
				String insert_tPostgresqlOutput_13 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_13
						+ "\" (\"id_nature_mutation\",\"lib_nature_mutation\") VALUES (?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.prepareStatement(insert_tPostgresqlOutput_13);
				String update_tPostgresqlOutput_13 = "UPDATE \""
						+ tableName_tPostgresqlOutput_13
						+ "\" SET \"lib_nature_mutation\" = ? WHERE \"id_nature_mutation\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.prepareStatement(update_tPostgresqlOutput_13);

				/**
				 * [tPostgresqlOutput_13 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_13", false);
				start_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_13";

				int tos_count_tFileInputDelimited_13 = 0;

				int nb_line_tFileInputDelimited_13 = 0;
				int footer_tFileInputDelimited_13 = 0;
				int totalLinetFileInputDelimited_13 = 0;
				int limittFileInputDelimited_13 = -1;
				int lastLinetFileInputDelimited_13 = -1;

				char fieldSeparator_tFileInputDelimited_13[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_13 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_13[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_13 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_13 = /**
				 * Start field
				 * tFileInputDelimited_13:FILENAME
				 */
				context.tables_correspondance_path + "nature_mutation.csv"/**
				 * End
				 * field tFileInputDelimited_13:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_13 = null;

				try {

					String[] rowtFileInputDelimited_13 = null;
					int currentLinetFileInputDelimited_13 = 0;
					int outputLinetFileInputDelimited_13 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_13 = 0;
							if (footer_value_tFileInputDelimited_13 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_13,
									fieldSeparator_tFileInputDelimited_13[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_13)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_13[0]);
						}

						csvReadertFileInputDelimited_13
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_13[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_13[0] != '\r'))
							csvReadertFileInputDelimited_13.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_13[0]);

						csvReadertFileInputDelimited_13.setQuoteChar('"');

						csvReadertFileInputDelimited_13
								.setEscapeChar(csvReadertFileInputDelimited_13
										.getQuoteChar());

						if (footer_tFileInputDelimited_13 > 0) {
							for (totalLinetFileInputDelimited_13 = 0; totalLinetFileInputDelimited_13 < 1; totalLinetFileInputDelimited_13++) {
								csvReadertFileInputDelimited_13.readNext();
							}
							csvReadertFileInputDelimited_13
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_13.readNext()) {

								rowtFileInputDelimited_13 = csvReadertFileInputDelimited_13
										.getValues();
								if (!(rowtFileInputDelimited_13.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_13[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_13++;

								}

							}
							int lastLineTemptFileInputDelimited_13 = totalLinetFileInputDelimited_13
									- footer_tFileInputDelimited_13 < 0 ? 0
									: totalLinetFileInputDelimited_13
											- footer_tFileInputDelimited_13;
							if (lastLinetFileInputDelimited_13 > 0) {
								lastLinetFileInputDelimited_13 = lastLinetFileInputDelimited_13 < lastLineTemptFileInputDelimited_13 ? lastLinetFileInputDelimited_13
										: lastLineTemptFileInputDelimited_13;
							} else {
								lastLinetFileInputDelimited_13 = lastLineTemptFileInputDelimited_13;
							}

							csvReadertFileInputDelimited_13.close();
							if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_13,
										fieldSeparator_tFileInputDelimited_13[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_13)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_13[0]);
							}
							csvReadertFileInputDelimited_13
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_13[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_13[0] != '\r'))
								csvReadertFileInputDelimited_13
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_13[0]);

							csvReadertFileInputDelimited_13.setQuoteChar('"');

							csvReadertFileInputDelimited_13
									.setEscapeChar(csvReadertFileInputDelimited_13
											.getQuoteChar());

						}

						if (limittFileInputDelimited_13 != 0) {
							for (currentLinetFileInputDelimited_13 = 0; currentLinetFileInputDelimited_13 < 1; currentLinetFileInputDelimited_13++) {
								csvReadertFileInputDelimited_13.readNext();
							}
						}
						csvReadertFileInputDelimited_13
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_13 != 0
							&& csvReadertFileInputDelimited_13 != null
							&& csvReadertFileInputDelimited_13.readNext()) {

						rowtFileInputDelimited_13 = csvReadertFileInputDelimited_13
								.getValues();

						if (rowtFileInputDelimited_13.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_13[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_13++;

						if (lastLinetFileInputDelimited_13 > -1
								&& currentLinetFileInputDelimited_13 > lastLinetFileInputDelimited_13) {
							break;
						}
						outputLinetFileInputDelimited_13++;
						if (limittFileInputDelimited_13 > 0
								&& outputLinetFileInputDelimited_13 > limittFileInputDelimited_13) {
							break;
						}

						row12 = null;

						boolean whetherReject_tFileInputDelimited_13 = false;
						row12 = new row12Struct();
						try {

							if (rowtFileInputDelimited_13.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_13[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row12.id_nature_mutation = null;

								row12.lib_nature_mutation = null;

							} else {

								for (int i_tFileInputDelimited_13 = 0; i_tFileInputDelimited_13 < rowtFileInputDelimited_13.length; i_tFileInputDelimited_13++) {
									rowtFileInputDelimited_13[i_tFileInputDelimited_13] = rowtFileInputDelimited_13[i_tFileInputDelimited_13]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_13 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_13 = 0;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									if (rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]
											.length() > 0) {

										row12.id_nature_mutation = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]);

									} else {
										row12.id_nature_mutation = null;
									}

								} else {
									row12.id_nature_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 1;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row12.lib_nature_mutation = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row12.lib_nature_mutation = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_13 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_13 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_13 main ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						tos_count_tFileInputDelimited_13++;

						/**
						 * [tFileInputDelimited_13 main ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tPostgresqlOutput_13 main ] start
							 */

							currentComponent = "tPostgresqlOutput_13";

							whetherReject_tPostgresqlOutput_13 = false;

							if (row12.id_nature_mutation == null) {
								pstmt_tPostgresqlOutput_13.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_13.setInt(1,
										row12.id_nature_mutation);
							}

							java.sql.ResultSet rs_tPostgresqlOutput_13 = pstmt_tPostgresqlOutput_13
									.executeQuery();
							int checkCount_tPostgresqlOutput_13 = -1;
							while (rs_tPostgresqlOutput_13.next()) {
								checkCount_tPostgresqlOutput_13 = rs_tPostgresqlOutput_13
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_13 > 0) {
								if (row12.lib_nature_mutation == null) {
									pstmtUpdate_tPostgresqlOutput_13.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_13.setString(
											1, row12.lib_nature_mutation);
								}

								if (row12.id_nature_mutation == null) {
									pstmtUpdate_tPostgresqlOutput_13.setNull(
											2 + count_tPostgresqlOutput_13,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_13.setInt(
											2 + count_tPostgresqlOutput_13,
											row12.id_nature_mutation);
								}

								try {

									updatedCount_tPostgresqlOutput_13 = updatedCount_tPostgresqlOutput_13
											+ pstmtUpdate_tPostgresqlOutput_13
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_13 = true;
									System.err.print(e.getMessage());
								}
							} else {
								if (row12.id_nature_mutation == null) {
									pstmtInsert_tPostgresqlOutput_13.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tPostgresqlOutput_13.setInt(1,
											row12.id_nature_mutation);
								}

								if (row12.lib_nature_mutation == null) {
									pstmtInsert_tPostgresqlOutput_13.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_13.setString(
											2, row12.lib_nature_mutation);
								}

								try {

									insertedCount_tPostgresqlOutput_13 = insertedCount_tPostgresqlOutput_13
											+ pstmtInsert_tPostgresqlOutput_13
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_13 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tPostgresqlOutput_13++;
							if (batchSize_tPostgresqlOutput_13 <= batchSizeCounter_tPostgresqlOutput_13) {

							}

							tos_count_tPostgresqlOutput_13++;

							/**
							 * [tPostgresqlOutput_13 main ] stop
							 */

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_13 end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						nb_line_tFileInputDelimited_13++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_13 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_13 != null) {
							csvReadertFileInputDelimited_13.close();
						}
					}
					if (csvReadertFileInputDelimited_13 != null) {
						globalMap.put("tFileInputDelimited_13_NB_LINE",
								nb_line_tFileInputDelimited_13);
					}
				}

				ok_Hash.put("tFileInputDelimited_13", true);
				end_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_13 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_13 end ] start
				 */

				currentComponent = "tPostgresqlOutput_13";

				if (pstmtUpdate_tPostgresqlOutput_13 != null) {

					pstmtUpdate_tPostgresqlOutput_13.close();

				}
				if (pstmtInsert_tPostgresqlOutput_13 != null) {

					pstmtInsert_tPostgresqlOutput_13.close();

				}
				if (pstmt_tPostgresqlOutput_13 != null) {

					pstmt_tPostgresqlOutput_13.close();

				}

				nb_line_deleted_tPostgresqlOutput_13 = nb_line_deleted_tPostgresqlOutput_13
						+ deletedCount_tPostgresqlOutput_13;
				nb_line_update_tPostgresqlOutput_13 = nb_line_update_tPostgresqlOutput_13
						+ updatedCount_tPostgresqlOutput_13;
				nb_line_inserted_tPostgresqlOutput_13 = nb_line_inserted_tPostgresqlOutput_13
						+ insertedCount_tPostgresqlOutput_13;
				nb_line_rejected_tPostgresqlOutput_13 = nb_line_rejected_tPostgresqlOutput_13
						+ rejectedCount_tPostgresqlOutput_13;

				globalMap.put("tPostgresqlOutput_13_NB_LINE",
						nb_line_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_13);

				ok_Hash.put("tPostgresqlOutput_13", true);
				end_Hash.put("tPostgresqlOutput_13", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_13:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DVF_C_insertion_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_C_insertion_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.code_type_local == null) ? 0
								: this.code_type_local.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.code_type_local == null) {
				if (other.code_type_local != null)
					return false;
			} else if (!this.code_type_local.equals(other.code_type_local))
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.code_type_local = this.code_type_local;
			other.type_local = this.type_local;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.code_type_local = this.code_type_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_C_insertion_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_C_insertion_tables_correspondance.length == 0) {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_C_insertion_tables_correspondance) {

				try {

					int length = 0;

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_type_local,
					other.code_type_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tPostgresqlOutput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_3", false);
				start_Hash.put("tPostgresqlOutput_3",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_3";

				int tos_count_tPostgresqlOutput_3 = 0;

				String dbschema_tPostgresqlOutput_3 = null;
				dbschema_tPostgresqlOutput_3 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_3 = null;
				if (dbschema_tPostgresqlOutput_3 == null
						|| dbschema_tPostgresqlOutput_3.trim().length() == 0) {
					tableName_tPostgresqlOutput_3 = context.prefixe_table
							+ "type_local";
				} else {
					tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3
							+ "\".\"" + context.prefixe_table + "type_local";
				}

				int updateKeyCount_tPostgresqlOutput_3 = 1;
				if (updateKeyCount_tPostgresqlOutput_3 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_3 = 0;
				int nb_line_update_tPostgresqlOutput_3 = 0;
				int nb_line_inserted_tPostgresqlOutput_3 = 0;
				int nb_line_deleted_tPostgresqlOutput_3 = 0;
				int nb_line_rejected_tPostgresqlOutput_3 = 0;

				int deletedCount_tPostgresqlOutput_3 = 0;
				int updatedCount_tPostgresqlOutput_3 = 0;
				int insertedCount_tPostgresqlOutput_3 = 0;
				int rejectedCount_tPostgresqlOutput_3 = 0;

				boolean whetherReject_tPostgresqlOutput_3 = false;

				java.sql.Connection conn_tPostgresqlOutput_3 = null;

				conn_tPostgresqlOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_3 = 10000;
				int batchSizeCounter_tPostgresqlOutput_3 = 0;

				int count_tPostgresqlOutput_3 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_3 = dbMetaData_tPostgresqlOutput_3
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_3 = false;
				while (rsTable_tPostgresqlOutput_3.next()) {
					String table_tPostgresqlOutput_3 = rsTable_tPostgresqlOutput_3
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_3 = rsTable_tPostgresqlOutput_3
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_3.equals(context.prefixe_table
							+ "type_local")
							&& (schema_tPostgresqlOutput_3
									.equals(dbschema_tPostgresqlOutput_3) || dbschema_tPostgresqlOutput_3
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_3 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_3.close();
				if (!whetherExist_tPostgresqlOutput_3) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
							.createStatement();
					stmtCreate_tPostgresqlOutput_3
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_3
									+ "\"(\"code_type_local\" VARCHAR ,\"type_local\" VARCHAR ,primary key(\"code_type_local\"))");
					stmtCreate_tPostgresqlOutput_3.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_3
								+ "\" WHERE \"code_type_local\" = ?");
				String insert_tPostgresqlOutput_3 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_3
						+ "\" (\"code_type_local\",\"type_local\") VALUES (?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(insert_tPostgresqlOutput_3);
				String update_tPostgresqlOutput_3 = "UPDATE \""
						+ tableName_tPostgresqlOutput_3
						+ "\" SET \"type_local\" = ? WHERE \"code_type_local\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(update_tPostgresqlOutput_3);

				/**
				 * [tPostgresqlOutput_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.tables_correspondance_path + "type_local.csv"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row1 = new row1Struct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.code_type_local = null;

								row1.type_local = null;

							} else {

								for (int i_tFileInputDelimited_3 = 0; i_tFileInputDelimited_3 < rowtFileInputDelimited_3.length; i_tFileInputDelimited_3++) {
									rowtFileInputDelimited_3[i_tFileInputDelimited_3] = rowtFileInputDelimited_3[i_tFileInputDelimited_3]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.code_type_local = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row1.code_type_local = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.type_local = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row1.type_local = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tPostgresqlOutput_3 main ] start
							 */

							currentComponent = "tPostgresqlOutput_3";

							whetherReject_tPostgresqlOutput_3 = false;

							if (row1.code_type_local == null) {
								pstmt_tPostgresqlOutput_3.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_3.setString(1,
										row1.code_type_local);
							}

							java.sql.ResultSet rs_tPostgresqlOutput_3 = pstmt_tPostgresqlOutput_3
									.executeQuery();
							int checkCount_tPostgresqlOutput_3 = -1;
							while (rs_tPostgresqlOutput_3.next()) {
								checkCount_tPostgresqlOutput_3 = rs_tPostgresqlOutput_3
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_3 > 0) {
								if (row1.type_local == null) {
									pstmtUpdate_tPostgresqlOutput_3.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_3.setString(
											1, row1.type_local);
								}

								if (row1.code_type_local == null) {
									pstmtUpdate_tPostgresqlOutput_3.setNull(
											2 + count_tPostgresqlOutput_3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_3.setString(
											2 + count_tPostgresqlOutput_3,
											row1.code_type_local);
								}

								try {

									updatedCount_tPostgresqlOutput_3 = updatedCount_tPostgresqlOutput_3
											+ pstmtUpdate_tPostgresqlOutput_3
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_3 = true;
									System.err.print(e.getMessage());
								}
							} else {
								if (row1.code_type_local == null) {
									pstmtInsert_tPostgresqlOutput_3.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_3.setString(
											1, row1.code_type_local);
								}

								if (row1.type_local == null) {
									pstmtInsert_tPostgresqlOutput_3.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_3.setString(
											2, row1.type_local);
								}

								try {

									insertedCount_tPostgresqlOutput_3 = insertedCount_tPostgresqlOutput_3
											+ pstmtInsert_tPostgresqlOutput_3
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_3 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tPostgresqlOutput_3++;
							if (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3) {

							}

							tos_count_tPostgresqlOutput_3++;

							/**
							 * [tPostgresqlOutput_3 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 end ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				if (pstmtUpdate_tPostgresqlOutput_3 != null) {

					pstmtUpdate_tPostgresqlOutput_3.close();

				}
				if (pstmtInsert_tPostgresqlOutput_3 != null) {

					pstmtInsert_tPostgresqlOutput_3.close();

				}
				if (pstmt_tPostgresqlOutput_3 != null) {

					pstmt_tPostgresqlOutput_3.close();

				}

				nb_line_deleted_tPostgresqlOutput_3 = nb_line_deleted_tPostgresqlOutput_3
						+ deletedCount_tPostgresqlOutput_3;
				nb_line_update_tPostgresqlOutput_3 = nb_line_update_tPostgresqlOutput_3
						+ updatedCount_tPostgresqlOutput_3;
				nb_line_inserted_tPostgresqlOutput_3 = nb_line_inserted_tPostgresqlOutput_3
						+ insertedCount_tPostgresqlOutput_3;
				nb_line_rejected_tPostgresqlOutput_3 = nb_line_rejected_tPostgresqlOutput_3
						+ rejectedCount_tPostgresqlOutput_3;

				globalMap.put("tPostgresqlOutput_3_NB_LINE",
						nb_line_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_3);

				ok_Hash.put("tPostgresqlOutput_3", true);
				end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DVF_C_insertion_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_C_insertion_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public String lib_nature_culture;

		public String getLib_nature_culture() {
			return this.lib_nature_culture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture == null) ? 0
								: this.nature_culture.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.nature_culture == null) {
				if (other.nature_culture != null)
					return false;
			} else if (!this.nature_culture.equals(other.nature_culture))
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.nature_culture = this.nature_culture;
			other.lib_nature_culture = this.lib_nature_culture;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.nature_culture = this.nature_culture;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_C_insertion_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_C_insertion_tables_correspondance.length == 0) {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_C_insertion_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture = readInteger(dis);

					this.lib_nature_culture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture, dos);

				// String

				writeString(this.lib_nature_culture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture=" + String.valueOf(nature_culture));
			sb.append(",lib_nature_culture=" + lib_nature_culture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture,
					other.nature_culture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tPostgresqlOutput_11 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_11", false);
				start_Hash.put("tPostgresqlOutput_11",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_11";

				int tos_count_tPostgresqlOutput_11 = 0;

				String dbschema_tPostgresqlOutput_11 = null;
				dbschema_tPostgresqlOutput_11 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_11 = null;
				if (dbschema_tPostgresqlOutput_11 == null
						|| dbschema_tPostgresqlOutput_11.trim().length() == 0) {
					tableName_tPostgresqlOutput_11 = context.prefixe_table
							+ "nature_culture";
				} else {
					tableName_tPostgresqlOutput_11 = dbschema_tPostgresqlOutput_11
							+ "\".\""
							+ context.prefixe_table
							+ "nature_culture";
				}

				int updateKeyCount_tPostgresqlOutput_11 = 1;
				if (updateKeyCount_tPostgresqlOutput_11 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_11 = 0;
				int nb_line_update_tPostgresqlOutput_11 = 0;
				int nb_line_inserted_tPostgresqlOutput_11 = 0;
				int nb_line_deleted_tPostgresqlOutput_11 = 0;
				int nb_line_rejected_tPostgresqlOutput_11 = 0;

				int deletedCount_tPostgresqlOutput_11 = 0;
				int updatedCount_tPostgresqlOutput_11 = 0;
				int insertedCount_tPostgresqlOutput_11 = 0;
				int rejectedCount_tPostgresqlOutput_11 = 0;

				boolean whetherReject_tPostgresqlOutput_11 = false;

				java.sql.Connection conn_tPostgresqlOutput_11 = null;

				conn_tPostgresqlOutput_11 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_11 = 10000;
				int batchSizeCounter_tPostgresqlOutput_11 = 0;

				int count_tPostgresqlOutput_11 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_11 = dbMetaData_tPostgresqlOutput_11
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_11 = false;
				while (rsTable_tPostgresqlOutput_11.next()) {
					String table_tPostgresqlOutput_11 = rsTable_tPostgresqlOutput_11
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_11 = rsTable_tPostgresqlOutput_11
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_11.equals(context.prefixe_table
							+ "nature_culture")
							&& (schema_tPostgresqlOutput_11
									.equals(dbschema_tPostgresqlOutput_11) || dbschema_tPostgresqlOutput_11
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_11 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_11.close();
				if (!whetherExist_tPostgresqlOutput_11) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
							.createStatement();
					stmtCreate_tPostgresqlOutput_11
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_11
									+ "\"(\"nature_culture\" INT4 ,\"lib_nature_culture\" VARCHAR ,primary key(\"nature_culture\"))");
					stmtCreate_tPostgresqlOutput_11.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_11
								+ "\" WHERE \"nature_culture\" = ?");
				String insert_tPostgresqlOutput_11 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_11
						+ "\" (\"nature_culture\",\"lib_nature_culture\") VALUES (?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.prepareStatement(insert_tPostgresqlOutput_11);
				String update_tPostgresqlOutput_11 = "UPDATE \""
						+ tableName_tPostgresqlOutput_11
						+ "\" SET \"lib_nature_culture\" = ? WHERE \"nature_culture\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.prepareStatement(update_tPostgresqlOutput_11);

				/**
				 * [tPostgresqlOutput_11 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.tables_correspondance_path + "nature_culture.csv"/**
				 * End
				 * field tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row2 = new row2Struct();
						try {

							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.nature_culture = null;

								row2.lib_nature_culture = null;

							} else {

								for (int i_tFileInputDelimited_8 = 0; i_tFileInputDelimited_8 < rowtFileInputDelimited_8.length; i_tFileInputDelimited_8++) {
									rowtFileInputDelimited_8[i_tFileInputDelimited_8] = rowtFileInputDelimited_8[i_tFileInputDelimited_8]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row2.nature_culture = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);

									} else {
										row2.nature_culture = null;
									}

								} else {
									row2.nature_culture = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row2.lib_nature_culture = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row2.lib_nature_culture = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tPostgresqlOutput_11 main ] start
							 */

							currentComponent = "tPostgresqlOutput_11";

							whetherReject_tPostgresqlOutput_11 = false;

							if (row2.nature_culture == null) {
								pstmt_tPostgresqlOutput_11.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_11.setInt(1,
										row2.nature_culture);
							}

							java.sql.ResultSet rs_tPostgresqlOutput_11 = pstmt_tPostgresqlOutput_11
									.executeQuery();
							int checkCount_tPostgresqlOutput_11 = -1;
							while (rs_tPostgresqlOutput_11.next()) {
								checkCount_tPostgresqlOutput_11 = rs_tPostgresqlOutput_11
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_11 > 0) {
								if (row2.lib_nature_culture == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setString(
											1, row2.lib_nature_culture);
								}

								if (row2.nature_culture == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(
											2 + count_tPostgresqlOutput_11,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setInt(
											2 + count_tPostgresqlOutput_11,
											row2.nature_culture);
								}

								try {

									updatedCount_tPostgresqlOutput_11 = updatedCount_tPostgresqlOutput_11
											+ pstmtUpdate_tPostgresqlOutput_11
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_11 = true;
									System.err.print(e.getMessage());
								}
							} else {
								if (row2.nature_culture == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setInt(1,
											row2.nature_culture);
								}

								if (row2.lib_nature_culture == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											2, row2.lib_nature_culture);
								}

								try {

									insertedCount_tPostgresqlOutput_11 = insertedCount_tPostgresqlOutput_11
											+ pstmtInsert_tPostgresqlOutput_11
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_11 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tPostgresqlOutput_11++;
							if (batchSize_tPostgresqlOutput_11 <= batchSizeCounter_tPostgresqlOutput_11) {

							}

							tos_count_tPostgresqlOutput_11++;

							/**
							 * [tPostgresqlOutput_11 main ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_11 end ] start
				 */

				currentComponent = "tPostgresqlOutput_11";

				if (pstmtUpdate_tPostgresqlOutput_11 != null) {

					pstmtUpdate_tPostgresqlOutput_11.close();

				}
				if (pstmtInsert_tPostgresqlOutput_11 != null) {

					pstmtInsert_tPostgresqlOutput_11.close();

				}
				if (pstmt_tPostgresqlOutput_11 != null) {

					pstmt_tPostgresqlOutput_11.close();

				}

				nb_line_deleted_tPostgresqlOutput_11 = nb_line_deleted_tPostgresqlOutput_11
						+ deletedCount_tPostgresqlOutput_11;
				nb_line_update_tPostgresqlOutput_11 = nb_line_update_tPostgresqlOutput_11
						+ updatedCount_tPostgresqlOutput_11;
				nb_line_inserted_tPostgresqlOutput_11 = nb_line_inserted_tPostgresqlOutput_11
						+ insertedCount_tPostgresqlOutput_11;
				nb_line_rejected_tPostgresqlOutput_11 = nb_line_rejected_tPostgresqlOutput_11
						+ rejectedCount_tPostgresqlOutput_11;

				globalMap.put("tPostgresqlOutput_11_NB_LINE",
						nb_line_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_11);

				ok_Hash.put("tPostgresqlOutput_11", true);
				end_Hash.put("tPostgresqlOutput_11", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DVF_C_insertion_tables_correspondance = new byte[0];
		static byte[] commonByteArray_DVF_C_insertion_tables_correspondance = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public String lib_nature_culture_speciale;

		public String getLib_nature_culture_speciale() {
			return this.lib_nature_culture_speciale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nature_culture_speciale == null) ? 0
								: this.nature_culture_speciale.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.nature_culture_speciale == null) {
				if (other.nature_culture_speciale != null)
					return false;
			} else if (!this.nature_culture_speciale
					.equals(other.nature_culture_speciale))
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;
			other.lib_nature_culture_speciale = this.lib_nature_culture_speciale;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_C_insertion_tables_correspondance.length) {
					if (length < 1024
							&& commonByteArray_DVF_C_insertion_tables_correspondance.length == 0) {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[1024];
					} else {
						commonByteArray_DVF_C_insertion_tables_correspondance = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length);
				strReturn = new String(
						commonByteArray_DVF_C_insertion_tables_correspondance,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_C_insertion_tables_correspondance) {

				try {

					int length = 0;

					this.nature_culture_speciale = readInteger(dis);

					this.lib_nature_culture_speciale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// String

				writeString(this.lib_nature_culture_speciale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",lib_nature_culture_speciale="
					+ lib_nature_culture_speciale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nature_culture_speciale,
					other.nature_culture_speciale);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_1";

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = context.prefixe_table
							+ "nature_culture_speciale";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\""
							+ context.prefixe_table
							+ "nature_culture_speciale";
				}

				int updateKeyCount_tPostgresqlOutput_1 = 1;
				if (updateKeyCount_tPostgresqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_1 = 10000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_1 = false;
				while (rsTable_tPostgresqlOutput_1.next()) {
					String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_1.equals(context.prefixe_table
							+ "nature_culture_speciale")
							&& (schema_tPostgresqlOutput_1
									.equals(dbschema_tPostgresqlOutput_1) || dbschema_tPostgresqlOutput_1
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_1 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_1.close();
				if (!whetherExist_tPostgresqlOutput_1) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement();
					stmtCreate_tPostgresqlOutput_1
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_1
									+ "\"(\"nature_culture_speciale\" INT4 ,\"lib_nature_culture_speciale\" VARCHAR ,primary key(\"nature_culture_speciale\"))");
					stmtCreate_tPostgresqlOutput_1.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_1
								+ "\" WHERE \"nature_culture_speciale\" = ?");
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"nature_culture_speciale\",\"lib_nature_culture_speciale\") VALUES (?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				String update_tPostgresqlOutput_1 = "UPDATE \""
						+ tableName_tPostgresqlOutput_1
						+ "\" SET \"lib_nature_culture_speciale\" = ? WHERE \"nature_culture_speciale\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(update_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.tables_correspondance_path
						+ "nature_culture_speciale.csv"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row3 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row3 = new row3Struct();
						try {

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row3.nature_culture_speciale = null;

								row3.lib_nature_culture_speciale = null;

							} else {

								for (int i_tFileInputDelimited_1 = 0; i_tFileInputDelimited_1 < rowtFileInputDelimited_1.length; i_tFileInputDelimited_1++) {
									rowtFileInputDelimited_1[i_tFileInputDelimited_1] = rowtFileInputDelimited_1[i_tFileInputDelimited_1]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row3.nature_culture_speciale = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row3.nature_culture_speciale = null;
									}

								} else {
									row3.nature_culture_speciale = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.lib_nature_culture_speciale = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row3.lib_nature_culture_speciale = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tPostgresqlOutput_1 main ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							whetherReject_tPostgresqlOutput_1 = false;

							if (row3.nature_culture_speciale == null) {
								pstmt_tPostgresqlOutput_1.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(1,
										row3.nature_culture_speciale);
							}

							java.sql.ResultSet rs_tPostgresqlOutput_1 = pstmt_tPostgresqlOutput_1
									.executeQuery();
							int checkCount_tPostgresqlOutput_1 = -1;
							while (rs_tPostgresqlOutput_1.next()) {
								checkCount_tPostgresqlOutput_1 = rs_tPostgresqlOutput_1
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_1 > 0) {
								if (row3.lib_nature_culture_speciale == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setString(
													1,
													row3.lib_nature_culture_speciale);
								}

								if (row3.nature_culture_speciale == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(
											2 + count_tPostgresqlOutput_1,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setInt(
											2 + count_tPostgresqlOutput_1,
											row3.nature_culture_speciale);
								}

								try {

									updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1
											+ pstmtUpdate_tPostgresqlOutput_1
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_1 = true;
									System.err.print(e.getMessage());
								}
							} else {
								if (row3.nature_culture_speciale == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setInt(1,
											row3.nature_culture_speciale);
								}

								if (row3.lib_nature_culture_speciale == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setString(
													2,
													row3.lib_nature_culture_speciale);
								}

								try {

									insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
											+ pstmtInsert_tPostgresqlOutput_1
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_1 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tPostgresqlOutput_1++;
							if (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1) {

							}

							tos_count_tPostgresqlOutput_1++;

							/**
							 * [tPostgresqlOutput_1 main ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmtUpdate_tPostgresqlOutput_1 != null) {

					pstmtUpdate_tPostgresqlOutput_1.close();

				}
				if (pstmtInsert_tPostgresqlOutput_1 != null) {

					pstmtInsert_tPostgresqlOutput_1.close();

				}
				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();

				}

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_1", false);
				start_Hash.put("tPostgresqlCommit_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlCommit_1";

				int tos_count_tPostgresqlCommit_1 = 0;

				/**
				 * [tPostgresqlCommit_1 begin ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 main ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_1 != null
						&& !conn_tPostgresqlCommit_1.isClosed()) {
					conn_tPostgresqlCommit_1.commit();
					conn_tPostgresqlCommit_1.close();
				}

				tos_count_tPostgresqlCommit_1++;

				/**
				 * [tPostgresqlCommit_1 main ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 end ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				ok_Hash.put("tPostgresqlCommit_1", true);
				end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "test";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final C_insertion_tables_correspondance C_insertion_tables_correspondanceClass = new C_insertion_tables_correspondance();

		int exitCode = C_insertion_tables_correspondanceClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = C_insertion_tables_correspondance.class
					.getClassLoader().getResourceAsStream(
							"dvf/c_insertion_tables_correspondance_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.db_host = (String) context.getProperty("db_host");
			context.db_login = (String) context.getProperty("db_login");
			context.db_name = (String) context.getProperty("db_name");
			context.db_password = (String) context.getProperty("db_password");
			context.db_port = (String) context.getProperty("db_port");
			context.db_schema = (String) context.getProperty("db_schema");
			context.dvf_file = (String) context.getProperty("dvf_file");
			context.log_path = (String) context.getProperty("log_path");
			context.prefixe_table = (String) context
					.getProperty("prefixe_table");
			context.source_path = (String) context.getProperty("source_path");
			context.tables_correspondance_path = (String) context
					.getProperty("tables_correspondance_path");
			context.target_path = (String) context.getProperty("target_path");
			context.temp_path = (String) context.getProperty("temp_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("db_host")) {
				context.db_host = (String) parentContextMap.get("db_host");
			}
			if (parentContextMap.containsKey("db_login")) {
				context.db_login = (String) parentContextMap.get("db_login");
			}
			if (parentContextMap.containsKey("db_name")) {
				context.db_name = (String) parentContextMap.get("db_name");
			}
			if (parentContextMap.containsKey("db_password")) {
				context.db_password = (String) parentContextMap
						.get("db_password");
			}
			if (parentContextMap.containsKey("db_port")) {
				context.db_port = (String) parentContextMap.get("db_port");
			}
			if (parentContextMap.containsKey("db_schema")) {
				context.db_schema = (String) parentContextMap.get("db_schema");
			}
			if (parentContextMap.containsKey("dvf_file")) {
				context.dvf_file = (String) parentContextMap.get("dvf_file");
			}
			if (parentContextMap.containsKey("log_path")) {
				context.log_path = (String) parentContextMap.get("log_path");
			}
			if (parentContextMap.containsKey("prefixe_table")) {
				context.prefixe_table = (String) parentContextMap
						.get("prefixe_table");
			}
			if (parentContextMap.containsKey("source_path")) {
				context.source_path = (String) parentContextMap
						.get("source_path");
			}
			if (parentContextMap.containsKey("tables_correspondance_path")) {
				context.tables_correspondance_path = (String) parentContextMap
						.get("tables_correspondance_path");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
			if (parentContextMap.containsKey("temp_path")) {
				context.temp_path = (String) parentContextMap.get("temp_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_1) {

			e_tPostgresqlConnection_1.printStackTrace();
			globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : C_insertion_tables_correspondance");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 157080 characters generated by Talend Open Studio for Data Integration on the
 * 17 décembre 2013 18:32:48 CET
 ************************************************************************************************/
