// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dvf.d_insertions_donnees_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: D_insertions_donnees Purpose: <br>
 * Description: Insertion des données DVF avec clés naturelles. Les clés primaires sont à reconstituer. <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class D_insertions_donnees implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (db_host != null) {

				this.setProperty("db_host", db_host.toString());

			}

			if (db_login != null) {

				this.setProperty("db_login", db_login.toString());

			}

			if (db_name != null) {

				this.setProperty("db_name", db_name.toString());

			}

			if (db_password != null) {

				this.setProperty("db_password", db_password.toString());

			}

			if (db_port != null) {

				this.setProperty("db_port", db_port.toString());

			}

			if (db_schema != null) {

				this.setProperty("db_schema", db_schema.toString());

			}

			if (dvf_file != null) {

				this.setProperty("dvf_file", dvf_file.toString());

			}

			if (log_path != null) {

				this.setProperty("log_path", log_path.toString());

			}

			if (prefixe_table != null) {

				this.setProperty("prefixe_table", prefixe_table.toString());

			}

			if (source_path != null) {

				this.setProperty("source_path", source_path.toString());

			}

			if (tables_correspondance_path != null) {

				this.setProperty("tables_correspondance_path",
						tables_correspondance_path.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

			if (temp_path != null) {

				this.setProperty("temp_path", temp_path.toString());

			}

		}

		public String db_host;

		public String getDb_host() {
			return this.db_host;
		}

		public String db_login;

		public String getDb_login() {
			return this.db_login;
		}

		public String db_name;

		public String getDb_name() {
			return this.db_name;
		}

		public String db_password;

		public String getDb_password() {
			return this.db_password;
		}

		public String db_port;

		public String getDb_port() {
			return this.db_port;
		}

		public String db_schema;

		public String getDb_schema() {
			return this.db_schema;
		}

		public String dvf_file;

		public String getDvf_file() {
			return this.dvf_file;
		}

		public String log_path;

		public String getLog_path() {
			return this.log_path;
		}

		public String prefixe_table;

		public String getPrefixe_table() {
			return this.prefixe_table;
		}

		public String source_path;

		public String getSource_path() {
			return this.source_path;
		}

		public String tables_correspondance_path;

		public String getTables_correspondance_path() {
			return this.tables_correspondance_path;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}

		public String temp_path;

		public String getTemp_path() {
			return this.temp_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "D_insertions_donnees";
	private final String projectName = "DVF";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					D_insertions_donnees.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(D_insertions_donnees.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.db_host + ":" + context.db_port + "/"
						+ context.db_name;

				String userName_tPostgresqlConnection_1 = context.db_login;
				String password_tPostgresqlConnection_1 = context.db_password;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {
					java.lang.Class.forName("org.postgresql.Driver");

					conn_tPostgresqlConnection_1 = java.sql.DriverManager
							.getConnection(url_tPostgresqlConnection_1,
									userName_tPostgresqlConnection_1,
									password_tPostgresqlConnection_1);
					globalMap.put("conn_tPostgresqlConnection_1",
							conn_tPostgresqlConnection_1);
				}
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.db_schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				tFileInputDelimited_12Process(globalMap);

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String code_insee;

		public String getCode_insee() {
			return this.code_insee;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation == null) ? 0 : this.id_mutation
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.id_mutation == null) {
				if (other.id_mutation != null)
					return false;
			} else if (!this.id_mutation.equals(other.id_mutation))
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.id_mutation = this.id_mutation;
			other.code_service_ch = this.code_service_ch;
			other.reference_document = this.reference_document;
			other.code_insee = this.code_insee;
			other.date_mutation = this.date_mutation;
			other.id_nature_mutation = this.id_nature_mutation;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.id_mutation = this.id_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_mutation = readInteger(dis);

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.code_insee = readString(dis);

					this.date_mutation = readDate(dis);

					this.id_nature_mutation = readInteger(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_mutation, dos);

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.code_insee, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",code_insee=" + code_insee);
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation,
					other.id_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tPostgresqlOutput_12 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_12", false);
				start_Hash.put("tPostgresqlOutput_12",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_12";

				int tos_count_tPostgresqlOutput_12 = 0;

				String dbschema_tPostgresqlOutput_12 = null;
				dbschema_tPostgresqlOutput_12 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_12 = null;
				if (dbschema_tPostgresqlOutput_12 == null
						|| dbschema_tPostgresqlOutput_12.trim().length() == 0) {
					tableName_tPostgresqlOutput_12 = context.prefixe_table
							+ "mutation";
				} else {
					tableName_tPostgresqlOutput_12 = dbschema_tPostgresqlOutput_12
							+ "\".\"" + context.prefixe_table + "mutation";
				}

				int updateKeyCount_tPostgresqlOutput_12 = 1;
				if (updateKeyCount_tPostgresqlOutput_12 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_12 = 0;
				int nb_line_update_tPostgresqlOutput_12 = 0;
				int nb_line_inserted_tPostgresqlOutput_12 = 0;
				int nb_line_deleted_tPostgresqlOutput_12 = 0;
				int nb_line_rejected_tPostgresqlOutput_12 = 0;

				int deletedCount_tPostgresqlOutput_12 = 0;
				int updatedCount_tPostgresqlOutput_12 = 0;
				int insertedCount_tPostgresqlOutput_12 = 0;
				int rejectedCount_tPostgresqlOutput_12 = 0;

				boolean whetherReject_tPostgresqlOutput_12 = false;

				java.sql.Connection conn_tPostgresqlOutput_12 = null;

				conn_tPostgresqlOutput_12 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_12 = 10000;
				int batchSizeCounter_tPostgresqlOutput_12 = 0;

				int count_tPostgresqlOutput_12 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_12 = dbMetaData_tPostgresqlOutput_12
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_12 = false;
				while (rsTable_tPostgresqlOutput_12.next()) {
					String table_tPostgresqlOutput_12 = rsTable_tPostgresqlOutput_12
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_12 = rsTable_tPostgresqlOutput_12
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_12.equals(context.prefixe_table
							+ "mutation")
							&& (schema_tPostgresqlOutput_12
									.equals(dbschema_tPostgresqlOutput_12) || dbschema_tPostgresqlOutput_12
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_12 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_12.close();
				if (!whetherExist_tPostgresqlOutput_12) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
							.createStatement();
					stmtCreate_tPostgresqlOutput_12
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_12
									+ "\"(\"id_mutation\" INT4 ,\"code_service_ch\" VARCHAR  not null ,\"reference_document\" VARCHAR  not null ,\"code_insee\" VARCHAR  not null ,\"date_mutation\" TIMESTAMP(0)  ,\"id_nature_mutation\" INT4 ,\"id_mutation_temp\" VARCHAR ,primary key(\"id_mutation\"))");
					stmtCreate_tPostgresqlOutput_12.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_12
								+ "\" WHERE \"id_mutation\" = ?");
				String insert_tPostgresqlOutput_12 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_12
						+ "\" (\"id_mutation\",\"code_service_ch\",\"reference_document\",\"code_insee\",\"date_mutation\",\"id_nature_mutation\",\"id_mutation_temp\") VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.prepareStatement(insert_tPostgresqlOutput_12);
				String update_tPostgresqlOutput_12 = "UPDATE \""
						+ tableName_tPostgresqlOutput_12
						+ "\" SET \"code_service_ch\" = ?,\"reference_document\" = ?,\"code_insee\" = ?,\"date_mutation\" = ?,\"id_nature_mutation\" = ?,\"id_mutation_temp\" = ? WHERE \"id_mutation\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.prepareStatement(update_tPostgresqlOutput_12);

				/**
				 * [tPostgresqlOutput_12 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /**
				 * Start field
				 * tFileInputDelimited_12:FILENAME
				 */
				context.target_path + "mutation.csv"/**
				 * End field
				 * tFileInputDelimited_12:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_12)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_12[0]);
						}

						csvReadertFileInputDelimited_12
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar('"');

						csvReadertFileInputDelimited_12
								.setEscapeChar(csvReadertFileInputDelimited_12
										.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 1; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_12.readNext()) {

								rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
										.getValues();
								if (!(rowtFileInputDelimited_12.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_12[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_12++;

								}

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
									: totalLinetFileInputDelimited_12
											- footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12 ? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_12)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_12[0]);
							}
							csvReadertFileInputDelimited_12
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar('"');

							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12
											.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 1; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_12 != 0
							&& csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
								.getValues();

						if (rowtFileInputDelimited_12.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_12[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row10 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row10 = new row10Struct();
						try {

							if (rowtFileInputDelimited_12.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_12[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row10.id_mutation = null;

								row10.code_service_ch = null;

								row10.reference_document = null;

								row10.code_insee = null;

								row10.date_mutation = null;

								row10.id_nature_mutation = null;

								row10.id_mutation_temp = null;

							} else {

								for (int i_tFileInputDelimited_12 = 0; i_tFileInputDelimited_12 < rowtFileInputDelimited_12.length; i_tFileInputDelimited_12++) {
									rowtFileInputDelimited_12[i_tFileInputDelimited_12] = rowtFileInputDelimited_12[i_tFileInputDelimited_12]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row10.id_mutation = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row10.id_mutation = null;
									}

								} else {
									row10.id_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row10.code_service_ch = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row10.code_service_ch = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 2;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row10.reference_document = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row10.reference_document = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 3;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row10.code_insee = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row10.code_insee = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 4;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row10.date_mutation = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd/MM/yyyy");

									} else {
										row10.date_mutation = null;
									}

								} else {
									row10.date_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 5;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row10.id_nature_mutation = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row10.id_nature_mutation = null;
									}

								} else {
									row10.id_nature_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 6;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row10.id_mutation_temp = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row10.id_mutation_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tPostgresqlOutput_12 main ] start
							 */

							currentComponent = "tPostgresqlOutput_12";

							whetherReject_tPostgresqlOutput_12 = false;

							if (row10.id_mutation == null) {
								pstmt_tPostgresqlOutput_12.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_12.setInt(1,
										row10.id_mutation);
							}

							java.sql.ResultSet rs_tPostgresqlOutput_12 = pstmt_tPostgresqlOutput_12
									.executeQuery();
							int checkCount_tPostgresqlOutput_12 = -1;
							while (rs_tPostgresqlOutput_12.next()) {
								checkCount_tPostgresqlOutput_12 = rs_tPostgresqlOutput_12
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_12 > 0) {
								if (row10.code_service_ch == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setString(
											1, row10.code_service_ch);
								}

								if (row10.reference_document == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setString(
											2, row10.reference_document);
								}

								if (row10.code_insee == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setString(
											3, row10.code_insee);
								}

								if (row10.date_mutation != null) {
									pstmtUpdate_tPostgresqlOutput_12
											.setTimestamp(
													4,
													new java.sql.Timestamp(
															row10.date_mutation
																	.getTime()));
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setNull(4,
											java.sql.Types.TIMESTAMP);
								}

								if (row10.id_nature_mutation == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(5,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setInt(5,
											row10.id_nature_mutation);
								}

								if (row10.id_mutation_temp == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setString(
											6, row10.id_mutation_temp);
								}

								if (row10.id_mutation == null) {
									pstmtUpdate_tPostgresqlOutput_12.setNull(
											7 + count_tPostgresqlOutput_12,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_12.setInt(
											7 + count_tPostgresqlOutput_12,
											row10.id_mutation);
								}

								try {

									updatedCount_tPostgresqlOutput_12 = updatedCount_tPostgresqlOutput_12
											+ pstmtUpdate_tPostgresqlOutput_12
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_12 = true;
									System.err.print(e.getMessage());
								}
							} else {
								if (row10.id_mutation == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setInt(1,
											row10.id_mutation);
								}

								if (row10.code_service_ch == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setString(
											2, row10.code_service_ch);
								}

								if (row10.reference_document == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setString(
											3, row10.reference_document);
								}

								if (row10.code_insee == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setString(
											4, row10.code_insee);
								}

								if (row10.date_mutation != null) {
									pstmtInsert_tPostgresqlOutput_12
											.setTimestamp(
													5,
													new java.sql.Timestamp(
															row10.date_mutation
																	.getTime()));
								} else {
									pstmtInsert_tPostgresqlOutput_12.setNull(5,
											java.sql.Types.TIMESTAMP);
								}

								if (row10.id_nature_mutation == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(6,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setInt(6,
											row10.id_nature_mutation);
								}

								if (row10.id_mutation_temp == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setString(
											7, row10.id_mutation_temp);
								}

								try {

									insertedCount_tPostgresqlOutput_12 = insertedCount_tPostgresqlOutput_12
											+ pstmtInsert_tPostgresqlOutput_12
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_12 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tPostgresqlOutput_12++;
							if (batchSize_tPostgresqlOutput_12 <= batchSizeCounter_tPostgresqlOutput_12) {

							}

							tos_count_tPostgresqlOutput_12++;

							/**
							 * [tPostgresqlOutput_12 main ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								nb_line_tFileInputDelimited_12);
					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_12 end ] start
				 */

				currentComponent = "tPostgresqlOutput_12";

				if (pstmtUpdate_tPostgresqlOutput_12 != null) {

					pstmtUpdate_tPostgresqlOutput_12.close();

				}
				if (pstmtInsert_tPostgresqlOutput_12 != null) {

					pstmtInsert_tPostgresqlOutput_12.close();

				}
				if (pstmt_tPostgresqlOutput_12 != null) {

					pstmt_tPostgresqlOutput_12.close();

				}

				nb_line_deleted_tPostgresqlOutput_12 = nb_line_deleted_tPostgresqlOutput_12
						+ deletedCount_tPostgresqlOutput_12;
				nb_line_update_tPostgresqlOutput_12 = nb_line_update_tPostgresqlOutput_12
						+ updatedCount_tPostgresqlOutput_12;
				nb_line_inserted_tPostgresqlOutput_12 = nb_line_inserted_tPostgresqlOutput_12
						+ insertedCount_tPostgresqlOutput_12;
				nb_line_rejected_tPostgresqlOutput_12 = nb_line_rejected_tPostgresqlOutput_12
						+ rejectedCount_tPostgresqlOutput_12;

				globalMap.put("tPostgresqlOutput_12_NB_LINE",
						nb_line_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_12);

				ok_Hash.put("tPostgresqlOutput_12", true);
				end_Hash.put("tPostgresqlOutput_12", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_12:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_13Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public static class mutation_article_cgiStruct implements
			routines.system.IPersistableRow<mutation_article_cgiStruct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public int id_article_cgi;

		public int getId_article_cgi() {
			return this.id_article_cgi;
		}

		public int ordre_article_cgi;

		public int getOrdre_article_cgi() {
			return this.ordre_article_cgi;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation == null) ? 0 : this.id_mutation
								.hashCode());

				result = prime * result + (int) this.id_article_cgi;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mutation_article_cgiStruct other = (mutation_article_cgiStruct) obj;

			if (this.id_mutation == null) {
				if (other.id_mutation != null)
					return false;
			} else if (!this.id_mutation.equals(other.id_mutation))
				return false;

			if (this.id_article_cgi != other.id_article_cgi)
				return false;

			return true;
		}

		public void copyDataTo(mutation_article_cgiStruct other) {

			other.id_mutation = this.id_mutation;
			other.id_article_cgi = this.id_article_cgi;
			other.ordre_article_cgi = this.ordre_article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(mutation_article_cgiStruct other) {

			other.id_mutation = this.id_mutation;
			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_mutation = readInteger(dis);

					this.id_article_cgi = dis.readInt();

					this.ordre_article_cgi = dis.readInt();

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_mutation, dos);

				// int

				dos.writeInt(this.id_article_cgi);

				// int

				dos.writeInt(this.ordre_article_cgi);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",ordre_article_cgi=" + String.valueOf(ordre_article_cgi));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mutation_article_cgiStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation,
					other.id_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public int id_article_cgi;

		public int getId_article_cgi() {
			return this.id_article_cgi;
		}

		public int ordre_article_cgi;

		public int getOrdre_article_cgi() {
			return this.ordre_article_cgi;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_mutation = readInteger(dis);

					this.id_article_cgi = dis.readInt();

					this.ordre_article_cgi = dis.readInt();

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_mutation, dos);

				// int

				dos.writeInt(this.id_article_cgi);

				// int

				dos.writeInt(this.ordre_article_cgi);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",ordre_article_cgi=" + String.valueOf(ordre_article_cgi));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_13Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_13Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public int id_article_cgi;

		public int getId_article_cgi() {
			return this.id_article_cgi;
		}

		public int ordre_article_cgi;

		public int getOrdre_article_cgi() {
			return this.ordre_article_cgi;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation == null) ? 0 : this.id_mutation
								.hashCode());

				result = prime * result + (int) this.id_article_cgi;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_13Struct other = (after_tFileInputDelimited_13Struct) obj;

			if (this.id_mutation == null) {
				if (other.id_mutation != null)
					return false;
			} else if (!this.id_mutation.equals(other.id_mutation))
				return false;

			if (this.id_article_cgi != other.id_article_cgi)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_13Struct other) {

			other.id_mutation = this.id_mutation;
			other.id_article_cgi = this.id_article_cgi;
			other.ordre_article_cgi = this.ordre_article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_13Struct other) {

			other.id_mutation = this.id_mutation;
			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_mutation = readInteger(dis);

					this.id_article_cgi = dis.readInt();

					this.ordre_article_cgi = dis.readInt();

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_mutation, dos);

				// int

				dos.writeInt(this.id_article_cgi);

				// int

				dos.writeInt(this.ordre_article_cgi);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",ordre_article_cgi=" + String.valueOf(ordre_article_cgi));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation,
					other.id_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_1Process(globalMap);

				row12Struct row12 = new row12Struct();
				mutation_article_cgiStruct mutation_article_cgi = new mutation_article_cgiStruct();

				/**
				 * [tPostgresqlOutput_13 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_13", false);
				start_Hash.put("tPostgresqlOutput_13",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_13";

				int tos_count_tPostgresqlOutput_13 = 0;

				String dbschema_tPostgresqlOutput_13 = null;
				dbschema_tPostgresqlOutput_13 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_13 = null;
				if (dbschema_tPostgresqlOutput_13 == null
						|| dbschema_tPostgresqlOutput_13.trim().length() == 0) {
					tableName_tPostgresqlOutput_13 = context.prefixe_table
							+ "mutation_article_cgi";
				} else {
					tableName_tPostgresqlOutput_13 = dbschema_tPostgresqlOutput_13
							+ "\".\""
							+ context.prefixe_table
							+ "mutation_article_cgi";
				}

				int updateKeyCount_tPostgresqlOutput_13 = 2;
				if (updateKeyCount_tPostgresqlOutput_13 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_13 = 0;
				int nb_line_update_tPostgresqlOutput_13 = 0;
				int nb_line_inserted_tPostgresqlOutput_13 = 0;
				int nb_line_deleted_tPostgresqlOutput_13 = 0;
				int nb_line_rejected_tPostgresqlOutput_13 = 0;

				int deletedCount_tPostgresqlOutput_13 = 0;
				int updatedCount_tPostgresqlOutput_13 = 0;
				int insertedCount_tPostgresqlOutput_13 = 0;
				int rejectedCount_tPostgresqlOutput_13 = 0;

				boolean whetherReject_tPostgresqlOutput_13 = false;

				java.sql.Connection conn_tPostgresqlOutput_13 = null;

				conn_tPostgresqlOutput_13 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_13 = 10000;
				int batchSizeCounter_tPostgresqlOutput_13 = 0;

				int count_tPostgresqlOutput_13 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_13 = dbMetaData_tPostgresqlOutput_13
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_13 = false;
				while (rsTable_tPostgresqlOutput_13.next()) {
					String table_tPostgresqlOutput_13 = rsTable_tPostgresqlOutput_13
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_13 = rsTable_tPostgresqlOutput_13
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_13.equals(context.prefixe_table
							+ "mutation_article_cgi")
							&& (schema_tPostgresqlOutput_13
									.equals(dbschema_tPostgresqlOutput_13) || dbschema_tPostgresqlOutput_13
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_13 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_13.close();
				if (!whetherExist_tPostgresqlOutput_13) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
							.createStatement();
					stmtCreate_tPostgresqlOutput_13
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_13
									+ "\"(\"id_mutation\" INT4 ,\"id_article_cgi\" INT4  not null ,\"ordre_article_cgi\" INT4  not null ,\"id_mutation_temp\" VARCHAR ,primary key(\"id_mutation\",\"id_article_cgi\"))");
					stmtCreate_tPostgresqlOutput_13.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_13
								+ "\" WHERE \"id_mutation\" = ? AND \"id_article_cgi\" = ?");
				String insert_tPostgresqlOutput_13 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_13
						+ "\" (\"id_mutation\",\"id_article_cgi\",\"ordre_article_cgi\",\"id_mutation_temp\") VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.prepareStatement(insert_tPostgresqlOutput_13);
				String update_tPostgresqlOutput_13 = "UPDATE \""
						+ tableName_tPostgresqlOutput_13
						+ "\" SET \"ordre_article_cgi\" = ?,\"id_mutation_temp\" = ? WHERE \"id_mutation\" = ? AND \"id_article_cgi\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.prepareStatement(update_tPostgresqlOutput_13);

				/**
				 * [tPostgresqlOutput_13 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
						.get("tHash_Lookup_row11"));

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				mutation_article_cgiStruct mutation_article_cgi_tmp = new mutation_article_cgiStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_13", false);
				start_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_13";

				int tos_count_tFileInputDelimited_13 = 0;

				int nb_line_tFileInputDelimited_13 = 0;
				int footer_tFileInputDelimited_13 = 0;
				int totalLinetFileInputDelimited_13 = 0;
				int limittFileInputDelimited_13 = -1;
				int lastLinetFileInputDelimited_13 = -1;

				char fieldSeparator_tFileInputDelimited_13[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_13 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_13[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_13 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_13 = /**
				 * Start field
				 * tFileInputDelimited_13:FILENAME
				 */
				context.target_path + "mutation_article_cgi.csv"/**
				 * End field
				 * tFileInputDelimited_13:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_13 = null;

				try {

					String[] rowtFileInputDelimited_13 = null;
					int currentLinetFileInputDelimited_13 = 0;
					int outputLinetFileInputDelimited_13 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_13 = 0;
							if (footer_value_tFileInputDelimited_13 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_13,
									fieldSeparator_tFileInputDelimited_13[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_13)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_13[0]);
						}

						csvReadertFileInputDelimited_13
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_13[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_13[0] != '\r'))
							csvReadertFileInputDelimited_13.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_13[0]);

						csvReadertFileInputDelimited_13.setQuoteChar('"');

						csvReadertFileInputDelimited_13
								.setEscapeChar(csvReadertFileInputDelimited_13
										.getQuoteChar());

						if (footer_tFileInputDelimited_13 > 0) {
							for (totalLinetFileInputDelimited_13 = 0; totalLinetFileInputDelimited_13 < 1; totalLinetFileInputDelimited_13++) {
								csvReadertFileInputDelimited_13.readNext();
							}
							csvReadertFileInputDelimited_13
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_13.readNext()) {

								rowtFileInputDelimited_13 = csvReadertFileInputDelimited_13
										.getValues();
								if (!(rowtFileInputDelimited_13.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_13[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_13++;

								}

							}
							int lastLineTemptFileInputDelimited_13 = totalLinetFileInputDelimited_13
									- footer_tFileInputDelimited_13 < 0 ? 0
									: totalLinetFileInputDelimited_13
											- footer_tFileInputDelimited_13;
							if (lastLinetFileInputDelimited_13 > 0) {
								lastLinetFileInputDelimited_13 = lastLinetFileInputDelimited_13 < lastLineTemptFileInputDelimited_13 ? lastLinetFileInputDelimited_13
										: lastLineTemptFileInputDelimited_13;
							} else {
								lastLinetFileInputDelimited_13 = lastLineTemptFileInputDelimited_13;
							}

							csvReadertFileInputDelimited_13.close();
							if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_13,
										fieldSeparator_tFileInputDelimited_13[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_13)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_13[0]);
							}
							csvReadertFileInputDelimited_13
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_13[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_13[0] != '\r'))
								csvReadertFileInputDelimited_13
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_13[0]);

							csvReadertFileInputDelimited_13.setQuoteChar('"');

							csvReadertFileInputDelimited_13
									.setEscapeChar(csvReadertFileInputDelimited_13
											.getQuoteChar());

						}

						if (limittFileInputDelimited_13 != 0) {
							for (currentLinetFileInputDelimited_13 = 0; currentLinetFileInputDelimited_13 < 1; currentLinetFileInputDelimited_13++) {
								csvReadertFileInputDelimited_13.readNext();
							}
						}
						csvReadertFileInputDelimited_13
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_13 != 0
							&& csvReadertFileInputDelimited_13 != null
							&& csvReadertFileInputDelimited_13.readNext()) {

						rowtFileInputDelimited_13 = csvReadertFileInputDelimited_13
								.getValues();

						if (rowtFileInputDelimited_13.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_13[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_13++;

						if (lastLinetFileInputDelimited_13 > -1
								&& currentLinetFileInputDelimited_13 > lastLinetFileInputDelimited_13) {
							break;
						}
						outputLinetFileInputDelimited_13++;
						if (limittFileInputDelimited_13 > 0
								&& outputLinetFileInputDelimited_13 > limittFileInputDelimited_13) {
							break;
						}

						row12 = null;

						boolean whetherReject_tFileInputDelimited_13 = false;
						row12 = new row12Struct();
						try {

							if (rowtFileInputDelimited_13.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_13[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row12.id_mutation = null;

								row12.id_article_cgi = 0;

								row12.ordre_article_cgi = 0;

								row12.id_mutation_temp = null;

							} else {

								for (int i_tFileInputDelimited_13 = 0; i_tFileInputDelimited_13 < rowtFileInputDelimited_13.length; i_tFileInputDelimited_13++) {
									rowtFileInputDelimited_13[i_tFileInputDelimited_13] = rowtFileInputDelimited_13[i_tFileInputDelimited_13]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_13 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_13 = 0;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									if (rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]
											.length() > 0) {

										row12.id_mutation = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]);

									} else {
										row12.id_mutation = null;
									}

								} else {
									row12.id_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 1;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									if (rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]
											.length() > 0) {

										row12.id_article_cgi = ParserUtils
												.parseTo_int(rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]);

									} else {
										row12.id_article_cgi = 0;
									}

								} else {
									row12.id_article_cgi = 0;
								}

								columnIndexWithD_tFileInputDelimited_13 = 2;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									if (rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]
											.length() > 0) {

										row12.ordre_article_cgi = ParserUtils
												.parseTo_int(rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]);

									} else {
										row12.ordre_article_cgi = 0;
									}

								} else {
									row12.ordre_article_cgi = 0;
								}

								columnIndexWithD_tFileInputDelimited_13 = 3;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row12.id_mutation_temp = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row12.id_mutation_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_13 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_13 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_13 main ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						tos_count_tFileInputDelimited_13++;

						/**
						 * [tFileInputDelimited_13 main ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row11"
							// /////////////////////////////////////////////

							boolean forceLooprow11 = false;

							row11Struct row11ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row11HashKey.id_mutation_temp = row12.id_mutation_temp;

								row11HashKey.hashCodeDirty = true;

								tHash_Lookup_row11.lookup(row11HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row11 != null
									&& tHash_Lookup_row11
											.getCount(row11HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.id_mutation_temp = '"
								// + row11HashKey.id_mutation_temp + "'");
							} // G 071

							row11Struct row11 = null;

							row11Struct fromLookup_row11 = null;
							row11 = row11Default;

							if (tHash_Lookup_row11 != null
									&& tHash_Lookup_row11.hasNext()) { // G 099

								fromLookup_row11 = tHash_Lookup_row11.next();

							} // G 099

							if (fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								mutation_article_cgi = null;

								// # Output table : 'mutation_article_cgi'
								mutation_article_cgi_tmp.id_mutation = row11.id_mutation;
								mutation_article_cgi_tmp.id_article_cgi = row12.id_article_cgi;
								mutation_article_cgi_tmp.ordre_article_cgi = row12.ordre_article_cgi;
								mutation_article_cgi_tmp.id_mutation_temp = row12.id_mutation_temp;
								mutation_article_cgi = mutation_article_cgi_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "mutation_article_cgi"
							if (mutation_article_cgi != null) {

								/**
								 * [tPostgresqlOutput_13 main ] start
								 */

								currentComponent = "tPostgresqlOutput_13";

								whetherReject_tPostgresqlOutput_13 = false;

								if (mutation_article_cgi.id_mutation == null) {
									pstmt_tPostgresqlOutput_13.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tPostgresqlOutput_13.setInt(1,
											mutation_article_cgi.id_mutation);
								}

								pstmt_tPostgresqlOutput_13.setInt(2,
										mutation_article_cgi.id_article_cgi);

								java.sql.ResultSet rs_tPostgresqlOutput_13 = pstmt_tPostgresqlOutput_13
										.executeQuery();
								int checkCount_tPostgresqlOutput_13 = -1;
								while (rs_tPostgresqlOutput_13.next()) {
									checkCount_tPostgresqlOutput_13 = rs_tPostgresqlOutput_13
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_13 > 0) {
									pstmtUpdate_tPostgresqlOutput_13
											.setInt(1,
													mutation_article_cgi.ordre_article_cgi);

									if (mutation_article_cgi.id_mutation_temp == null) {
										pstmtUpdate_tPostgresqlOutput_13
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_13
												.setString(
														2,
														mutation_article_cgi.id_mutation_temp);
									}

									if (mutation_article_cgi.id_mutation == null) {
										pstmtUpdate_tPostgresqlOutput_13
												.setNull(
														3 + count_tPostgresqlOutput_13,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_13
												.setInt(3 + count_tPostgresqlOutput_13,
														mutation_article_cgi.id_mutation);
									}

									pstmtUpdate_tPostgresqlOutput_13
											.setInt(4 + count_tPostgresqlOutput_13,
													mutation_article_cgi.id_article_cgi);

									try {

										updatedCount_tPostgresqlOutput_13 = updatedCount_tPostgresqlOutput_13
												+ pstmtUpdate_tPostgresqlOutput_13
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_13 = true;
										System.err.print(e.getMessage());
									}
								} else {
									if (mutation_article_cgi.id_mutation == null) {
										pstmtInsert_tPostgresqlOutput_13
												.setNull(1,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_13
												.setInt(1,
														mutation_article_cgi.id_mutation);
									}

									pstmtInsert_tPostgresqlOutput_13
											.setInt(2,
													mutation_article_cgi.id_article_cgi);

									pstmtInsert_tPostgresqlOutput_13
											.setInt(3,
													mutation_article_cgi.ordre_article_cgi);

									if (mutation_article_cgi.id_mutation_temp == null) {
										pstmtInsert_tPostgresqlOutput_13
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_13
												.setString(
														4,
														mutation_article_cgi.id_mutation_temp);
									}

									try {

										insertedCount_tPostgresqlOutput_13 = insertedCount_tPostgresqlOutput_13
												+ pstmtInsert_tPostgresqlOutput_13
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_13 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tPostgresqlOutput_13++;
								if (batchSize_tPostgresqlOutput_13 <= batchSizeCounter_tPostgresqlOutput_13) {

								}

								tos_count_tPostgresqlOutput_13++;

								/**
								 * [tPostgresqlOutput_13 main ] stop
								 */

							} // End of branch "mutation_article_cgi"

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_13 end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						nb_line_tFileInputDelimited_13++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_13 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_13 != null) {
							csvReadertFileInputDelimited_13.close();
						}
					}
					if (csvReadertFileInputDelimited_13 != null) {
						globalMap.put("tFileInputDelimited_13_NB_LINE",
								nb_line_tFileInputDelimited_13);
					}
				}

				ok_Hash.put("tFileInputDelimited_13", true);
				end_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_13 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row11 != null) {
					tHash_Lookup_row11.endGet();
				}
				globalMap.remove("tHash_Lookup_row11");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_13 end ] start
				 */

				currentComponent = "tPostgresqlOutput_13";

				if (pstmtUpdate_tPostgresqlOutput_13 != null) {

					pstmtUpdate_tPostgresqlOutput_13.close();

				}
				if (pstmtInsert_tPostgresqlOutput_13 != null) {

					pstmtInsert_tPostgresqlOutput_13.close();

				}
				if (pstmt_tPostgresqlOutput_13 != null) {

					pstmt_tPostgresqlOutput_13.close();

				}

				nb_line_deleted_tPostgresqlOutput_13 = nb_line_deleted_tPostgresqlOutput_13
						+ deletedCount_tPostgresqlOutput_13;
				nb_line_update_tPostgresqlOutput_13 = nb_line_update_tPostgresqlOutput_13
						+ updatedCount_tPostgresqlOutput_13;
				nb_line_inserted_tPostgresqlOutput_13 = nb_line_inserted_tPostgresqlOutput_13
						+ insertedCount_tPostgresqlOutput_13;
				nb_line_rejected_tPostgresqlOutput_13 = nb_line_rejected_tPostgresqlOutput_13
						+ rejectedCount_tPostgresqlOutput_13;

				globalMap.put("tPostgresqlOutput_13_NB_LINE",
						nb_line_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_13);

				ok_Hash.put("tPostgresqlOutput_13", true);
				end_Hash.put("tPostgresqlOutput_13", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_13:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row11");

		}

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}

	public static class dispoStruct implements
			routines.system.IPersistableRow<dispoStruct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public Integer no_disposition;

		public Integer getNo_disposition() {
			return this.no_disposition;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_disposition;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final dispoStruct other = (dispoStruct) obj;

			if (this.id_disposition != other.id_disposition)
				return false;

			return true;
		}

		public void copyDataTo(dispoStruct other) {

			other.id_disposition = this.id_disposition;
			other.id_mutation = this.id_mutation;
			other.no_disposition = this.no_disposition;
			other.valeur_fonciere = this.valeur_fonciere;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(dispoStruct other) {

			other.id_disposition = this.id_disposition;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_disposition = dis.readInt();

					this.id_mutation = dis.readInt();

					this.no_disposition = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.id_disposition_temp = readString(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_mutation);

				// Integer

				writeInteger(this.no_disposition, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_mutation=" + String.valueOf(id_mutation));
			sb.append(",no_disposition=" + String.valueOf(no_disposition));
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dispoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_disposition,
					other.id_disposition);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public Integer no_disposition;

		public Integer getNo_disposition() {
			return this.no_disposition;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_disposition = dis.readInt();

					this.id_mutation = dis.readInt();

					this.no_disposition = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.id_disposition_temp = readString(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_mutation);

				// Integer

				writeInteger(this.no_disposition, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_mutation=" + String.valueOf(id_mutation));
			sb.append(",no_disposition=" + String.valueOf(no_disposition));
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_3Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public Integer no_disposition;

		public Integer getNo_disposition() {
			return this.no_disposition;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_disposition;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_3Struct other = (after_tFileInputDelimited_3Struct) obj;

			if (this.id_disposition != other.id_disposition)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_3Struct other) {

			other.id_disposition = this.id_disposition;
			other.id_mutation = this.id_mutation;
			other.no_disposition = this.no_disposition;
			other.valeur_fonciere = this.valeur_fonciere;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_3Struct other) {

			other.id_disposition = this.id_disposition;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_disposition = dis.readInt();

					this.id_mutation = dis.readInt();

					this.no_disposition = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.id_disposition_temp = readString(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_mutation);

				// Integer

				writeInteger(this.no_disposition, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_mutation=" + String.valueOf(id_mutation));
			sb.append(",no_disposition=" + String.valueOf(no_disposition));
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_disposition,
					other.id_disposition);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				dispoStruct dispo = new dispoStruct();

				/**
				 * [tPostgresqlOutput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_3", false);
				start_Hash.put("tPostgresqlOutput_3",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_3";

				int tos_count_tPostgresqlOutput_3 = 0;

				String dbschema_tPostgresqlOutput_3 = null;
				dbschema_tPostgresqlOutput_3 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_3 = null;
				if (dbschema_tPostgresqlOutput_3 == null
						|| dbschema_tPostgresqlOutput_3.trim().length() == 0) {
					tableName_tPostgresqlOutput_3 = context.prefixe_table
							+ "disposition";
				} else {
					tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3
							+ "\".\"" + context.prefixe_table + "disposition";
				}

				int updateKeyCount_tPostgresqlOutput_3 = 1;
				if (updateKeyCount_tPostgresqlOutput_3 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_3 = 0;
				int nb_line_update_tPostgresqlOutput_3 = 0;
				int nb_line_inserted_tPostgresqlOutput_3 = 0;
				int nb_line_deleted_tPostgresqlOutput_3 = 0;
				int nb_line_rejected_tPostgresqlOutput_3 = 0;

				int deletedCount_tPostgresqlOutput_3 = 0;
				int updatedCount_tPostgresqlOutput_3 = 0;
				int insertedCount_tPostgresqlOutput_3 = 0;
				int rejectedCount_tPostgresqlOutput_3 = 0;

				boolean whetherReject_tPostgresqlOutput_3 = false;

				java.sql.Connection conn_tPostgresqlOutput_3 = null;

				conn_tPostgresqlOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_3 = 10000;
				int batchSizeCounter_tPostgresqlOutput_3 = 0;

				int count_tPostgresqlOutput_3 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_3 = dbMetaData_tPostgresqlOutput_3
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_3 = false;
				while (rsTable_tPostgresqlOutput_3.next()) {
					String table_tPostgresqlOutput_3 = rsTable_tPostgresqlOutput_3
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_3 = rsTable_tPostgresqlOutput_3
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_3.equals(context.prefixe_table
							+ "disposition")
							&& (schema_tPostgresqlOutput_3
									.equals(dbschema_tPostgresqlOutput_3) || dbschema_tPostgresqlOutput_3
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_3 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_3.close();
				if (!whetherExist_tPostgresqlOutput_3) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
							.createStatement();
					stmtCreate_tPostgresqlOutput_3
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_3
									+ "\"(\"id_disposition\" INT4  not null ,\"id_mutation\" INT4  not null ,\"no_disposition\" INT4 ,\"valeur_fonciere\" NUMERIC ,\"id_disposition_temp\" VARCHAR ,\"id_mutation_temp\" VARCHAR ,primary key(\"id_disposition\"))");
					stmtCreate_tPostgresqlOutput_3.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_3
								+ "\" WHERE \"id_disposition\" = ?");
				String insert_tPostgresqlOutput_3 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_3
						+ "\" (\"id_disposition\",\"id_mutation\",\"no_disposition\",\"valeur_fonciere\",\"id_disposition_temp\",\"id_mutation_temp\") VALUES (?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(insert_tPostgresqlOutput_3);
				String update_tPostgresqlOutput_3 = "UPDATE \""
						+ tableName_tPostgresqlOutput_3
						+ "\" SET \"id_mutation\" = ?,\"no_disposition\" = ?,\"valeur_fonciere\" = ?,\"id_disposition_temp\" = ?,\"id_mutation_temp\" = ? WHERE \"id_disposition\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(update_tPostgresqlOutput_3);

				/**
				 * [tPostgresqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				dispoStruct dispo_tmp = new dispoStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.target_path + "disposition.csv"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row1 = new row1Struct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.id_disposition = 0;

								row1.id_mutation = 0;

								row1.no_disposition = null;

								row1.valeur_fonciere = null;

								row1.id_disposition_temp = null;

								row1.id_mutation_temp = null;

							} else {

								for (int i_tFileInputDelimited_3 = 0; i_tFileInputDelimited_3 < rowtFileInputDelimited_3.length; i_tFileInputDelimited_3++) {
									rowtFileInputDelimited_3[i_tFileInputDelimited_3] = rowtFileInputDelimited_3[i_tFileInputDelimited_3]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row1.id_disposition = ParserUtils
												.parseTo_int(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row1.id_disposition = 0;
									}

								} else {
									row1.id_disposition = 0;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row1.id_mutation = ParserUtils
												.parseTo_int(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row1.id_mutation = 0;
									}

								} else {
									row1.id_mutation = 0;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row1.no_disposition = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row1.no_disposition = null;
									}

								} else {
									row1.no_disposition = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row1.valeur_fonciere = ParserUtils
												.parseTo_Double(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row1.valeur_fonciere = null;
									}

								} else {
									row1.valeur_fonciere = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.id_disposition_temp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row1.id_disposition_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.id_mutation_temp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row1.id_mutation_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row13"
							// /////////////////////////////////////////////

							boolean forceLooprow13 = false;

							row13Struct row13ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								row13HashKey.id_mutation_temp = row1.id_mutation_temp;

								row13HashKey.hashCodeDirty = true;

								tHash_Lookup_row13.lookup(row13HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row13 != null
									&& tHash_Lookup_row13
											.getCount(row13HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.id_mutation_temp = '"
								// + row13HashKey.id_mutation_temp + "'");
							} // G 071

							row13Struct row13 = null;

							row13Struct fromLookup_row13 = null;
							row13 = row13Default;

							if (tHash_Lookup_row13 != null
									&& tHash_Lookup_row13.hasNext()) { // G 099

								fromLookup_row13 = tHash_Lookup_row13.next();

							} // G 099

							if (fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								dispo = null;

								// # Output table : 'dispo'
								dispo_tmp.id_disposition = row1.id_disposition;
								dispo_tmp.id_mutation = row13.id_mutation;
								dispo_tmp.no_disposition = row1.no_disposition;
								dispo_tmp.valeur_fonciere = row1.valeur_fonciere;
								dispo_tmp.id_disposition_temp = row1.id_disposition_temp;
								dispo_tmp.id_mutation_temp = row1.id_mutation_temp;
								dispo = dispo_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "dispo"
							if (dispo != null) {

								/**
								 * [tPostgresqlOutput_3 main ] start
								 */

								currentComponent = "tPostgresqlOutput_3";

								whetherReject_tPostgresqlOutput_3 = false;

								pstmt_tPostgresqlOutput_3.setInt(1,
										dispo.id_disposition);

								java.sql.ResultSet rs_tPostgresqlOutput_3 = pstmt_tPostgresqlOutput_3
										.executeQuery();
								int checkCount_tPostgresqlOutput_3 = -1;
								while (rs_tPostgresqlOutput_3.next()) {
									checkCount_tPostgresqlOutput_3 = rs_tPostgresqlOutput_3
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_3 > 0) {
									pstmtUpdate_tPostgresqlOutput_3.setInt(1,
											dispo.id_mutation);

									if (dispo.no_disposition == null) {
										pstmtUpdate_tPostgresqlOutput_3
												.setNull(2,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_3.setInt(
												2, dispo.no_disposition);
									}

									if (dispo.valeur_fonciere == null) {
										pstmtUpdate_tPostgresqlOutput_3
												.setNull(3,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_3
												.setDouble(3,
														dispo.valeur_fonciere);
									}

									if (dispo.id_disposition_temp == null) {
										pstmtUpdate_tPostgresqlOutput_3
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_3
												.setString(
														4,
														dispo.id_disposition_temp);
									}

									if (dispo.id_mutation_temp == null) {
										pstmtUpdate_tPostgresqlOutput_3
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_3
												.setString(5,
														dispo.id_mutation_temp);
									}

									pstmtUpdate_tPostgresqlOutput_3.setInt(
											6 + count_tPostgresqlOutput_3,
											dispo.id_disposition);

									try {

										updatedCount_tPostgresqlOutput_3 = updatedCount_tPostgresqlOutput_3
												+ pstmtUpdate_tPostgresqlOutput_3
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_3 = true;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tPostgresqlOutput_3.setInt(1,
											dispo.id_disposition);

									pstmtInsert_tPostgresqlOutput_3.setInt(2,
											dispo.id_mutation);

									if (dispo.no_disposition == null) {
										pstmtInsert_tPostgresqlOutput_3
												.setNull(3,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_3.setInt(
												3, dispo.no_disposition);
									}

									if (dispo.valeur_fonciere == null) {
										pstmtInsert_tPostgresqlOutput_3
												.setNull(4,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_3
												.setDouble(4,
														dispo.valeur_fonciere);
									}

									if (dispo.id_disposition_temp == null) {
										pstmtInsert_tPostgresqlOutput_3
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_3
												.setString(
														5,
														dispo.id_disposition_temp);
									}

									if (dispo.id_mutation_temp == null) {
										pstmtInsert_tPostgresqlOutput_3
												.setNull(6,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_3
												.setString(6,
														dispo.id_mutation_temp);
									}

									try {

										insertedCount_tPostgresqlOutput_3 = insertedCount_tPostgresqlOutput_3
												+ pstmtInsert_tPostgresqlOutput_3
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_3 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tPostgresqlOutput_3++;
								if (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3) {

								}

								tos_count_tPostgresqlOutput_3++;

								/**
								 * [tPostgresqlOutput_3 main ] stop
								 */

							} // End of branch "dispo"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 end ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				if (pstmtUpdate_tPostgresqlOutput_3 != null) {

					pstmtUpdate_tPostgresqlOutput_3.close();

				}
				if (pstmtInsert_tPostgresqlOutput_3 != null) {

					pstmtInsert_tPostgresqlOutput_3.close();

				}
				if (pstmt_tPostgresqlOutput_3 != null) {

					pstmt_tPostgresqlOutput_3.close();

				}

				nb_line_deleted_tPostgresqlOutput_3 = nb_line_deleted_tPostgresqlOutput_3
						+ deletedCount_tPostgresqlOutput_3;
				nb_line_update_tPostgresqlOutput_3 = nb_line_update_tPostgresqlOutput_3
						+ updatedCount_tPostgresqlOutput_3;
				nb_line_inserted_tPostgresqlOutput_3 = nb_line_inserted_tPostgresqlOutput_3
						+ insertedCount_tPostgresqlOutput_3;
				nb_line_rejected_tPostgresqlOutput_3 = nb_line_rejected_tPostgresqlOutput_3
						+ rejectedCount_tPostgresqlOutput_3;

				globalMap.put("tPostgresqlOutput_3_NB_LINE",
						nb_line_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_3);

				ok_Hash.put("tPostgresqlOutput_3", true);
				end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row13");

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public String idpar;

		public String getIdpar() {
			return this.idpar;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero;

		public String getNumero() {
			return this.numero;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_parcelle;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id_parcelle != other.id_parcelle)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id_parcelle = this.id_parcelle;
			other.idpar = this.idpar;
			other.code_departement = this.code_departement;
			other.code_commune = this.code_commune;
			other.prefixe_section = this.prefixe_section;
			other.section = this.section;
			other.numero = this.numero;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id_parcelle = this.id_parcelle;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_parcelle = dis.readInt();

					this.idpar = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_parcelle);

				// String

				writeString(this.idpar, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",idpar=" + idpar);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero=" + numero);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_parcelle,
					other.id_parcelle);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tPostgresqlOutput_11 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_11", false);
				start_Hash.put("tPostgresqlOutput_11",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_11";

				int tos_count_tPostgresqlOutput_11 = 0;

				String dbschema_tPostgresqlOutput_11 = null;
				dbschema_tPostgresqlOutput_11 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_11 = null;
				if (dbschema_tPostgresqlOutput_11 == null
						|| dbschema_tPostgresqlOutput_11.trim().length() == 0) {
					tableName_tPostgresqlOutput_11 = context.prefixe_table
							+ "parcelle";
				} else {
					tableName_tPostgresqlOutput_11 = dbschema_tPostgresqlOutput_11
							+ "\".\"" + context.prefixe_table + "parcelle";
				}

				int updateKeyCount_tPostgresqlOutput_11 = 1;
				if (updateKeyCount_tPostgresqlOutput_11 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_11 = 0;
				int nb_line_update_tPostgresqlOutput_11 = 0;
				int nb_line_inserted_tPostgresqlOutput_11 = 0;
				int nb_line_deleted_tPostgresqlOutput_11 = 0;
				int nb_line_rejected_tPostgresqlOutput_11 = 0;

				int deletedCount_tPostgresqlOutput_11 = 0;
				int updatedCount_tPostgresqlOutput_11 = 0;
				int insertedCount_tPostgresqlOutput_11 = 0;
				int rejectedCount_tPostgresqlOutput_11 = 0;

				boolean whetherReject_tPostgresqlOutput_11 = false;

				java.sql.Connection conn_tPostgresqlOutput_11 = null;

				conn_tPostgresqlOutput_11 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_11 = 10000;
				int batchSizeCounter_tPostgresqlOutput_11 = 0;

				int count_tPostgresqlOutput_11 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_11 = dbMetaData_tPostgresqlOutput_11
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_11 = false;
				while (rsTable_tPostgresqlOutput_11.next()) {
					String table_tPostgresqlOutput_11 = rsTable_tPostgresqlOutput_11
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_11 = rsTable_tPostgresqlOutput_11
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_11.equals(context.prefixe_table
							+ "parcelle")
							&& (schema_tPostgresqlOutput_11
									.equals(dbschema_tPostgresqlOutput_11) || dbschema_tPostgresqlOutput_11
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_11 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_11.close();
				if (!whetherExist_tPostgresqlOutput_11) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
							.createStatement();
					stmtCreate_tPostgresqlOutput_11
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_11
									+ "\"(\"id_parcelle\" INT4  not null ,\"idpar\" VARCHAR  not null ,\"code_departement\" VARCHAR  not null ,\"code_commune\" VARCHAR  not null ,\"prefixe_section\" VARCHAR  not null ,\"section\" VARCHAR  not null ,\"numero\" VARCHAR  not null ,\"id_parcelle_temp\" VARCHAR  not null ,primary key(\"id_parcelle\"))");
					stmtCreate_tPostgresqlOutput_11.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_11
								+ "\" WHERE \"id_parcelle\" = ?");
				String insert_tPostgresqlOutput_11 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_11
						+ "\" (\"id_parcelle\",\"idpar\",\"code_departement\",\"code_commune\",\"prefixe_section\",\"section\",\"numero\",\"id_parcelle_temp\") VALUES (?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.prepareStatement(insert_tPostgresqlOutput_11);
				String update_tPostgresqlOutput_11 = "UPDATE \""
						+ tableName_tPostgresqlOutput_11
						+ "\" SET \"idpar\" = ?,\"code_departement\" = ?,\"code_commune\" = ?,\"prefixe_section\" = ?,\"section\" = ?,\"numero\" = ?,\"id_parcelle_temp\" = ? WHERE \"id_parcelle\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.prepareStatement(update_tPostgresqlOutput_11);

				/**
				 * [tPostgresqlOutput_11 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.target_path + "parcelle.csv"/**
				 * End field
				 * tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row2 = new row2Struct();
						try {

							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.id_parcelle = 0;

								row2.idpar = null;

								row2.code_departement = null;

								row2.code_commune = null;

								row2.prefixe_section = null;

								row2.section = null;

								row2.numero = null;

								row2.id_parcelle_temp = null;

							} else {

								for (int i_tFileInputDelimited_8 = 0; i_tFileInputDelimited_8 < rowtFileInputDelimited_8.length; i_tFileInputDelimited_8++) {
									rowtFileInputDelimited_8[i_tFileInputDelimited_8] = rowtFileInputDelimited_8[i_tFileInputDelimited_8]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row2.id_parcelle = ParserUtils
												.parseTo_int(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);

									} else {
										row2.id_parcelle = 0;
									}

								} else {
									row2.id_parcelle = 0;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row2.idpar = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row2.idpar = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 2;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row2.code_departement = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row2.code_departement = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 3;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row2.code_commune = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row2.code_commune = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 4;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row2.prefixe_section = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row2.prefixe_section = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 5;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row2.section = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row2.section = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 6;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row2.numero = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row2.numero = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 7;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row2.id_parcelle_temp = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row2.id_parcelle_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tPostgresqlOutput_11 main ] start
							 */

							currentComponent = "tPostgresqlOutput_11";

							whetherReject_tPostgresqlOutput_11 = false;

							pstmt_tPostgresqlOutput_11.setInt(1,
									row2.id_parcelle);

							java.sql.ResultSet rs_tPostgresqlOutput_11 = pstmt_tPostgresqlOutput_11
									.executeQuery();
							int checkCount_tPostgresqlOutput_11 = -1;
							while (rs_tPostgresqlOutput_11.next()) {
								checkCount_tPostgresqlOutput_11 = rs_tPostgresqlOutput_11
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_11 > 0) {
								if (row2.idpar == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setString(
											1, row2.idpar);
								}

								if (row2.code_departement == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setString(
											2, row2.code_departement);
								}

								if (row2.code_commune == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setString(
											3, row2.code_commune);
								}

								if (row2.prefixe_section == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setString(
											4, row2.prefixe_section);
								}

								if (row2.section == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setString(
											5, row2.section);
								}

								if (row2.numero == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setString(
											6, row2.numero);
								}

								if (row2.id_parcelle_temp == null) {
									pstmtUpdate_tPostgresqlOutput_11.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_11.setString(
											7, row2.id_parcelle_temp);
								}

								pstmtUpdate_tPostgresqlOutput_11.setInt(
										8 + count_tPostgresqlOutput_11,
										row2.id_parcelle);

								try {

									updatedCount_tPostgresqlOutput_11 = updatedCount_tPostgresqlOutput_11
											+ pstmtUpdate_tPostgresqlOutput_11
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_11 = true;
									System.err.print(e.getMessage());
								}
							} else {
								pstmtInsert_tPostgresqlOutput_11.setInt(1,
										row2.id_parcelle);

								if (row2.idpar == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											2, row2.idpar);
								}

								if (row2.code_departement == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											3, row2.code_departement);
								}

								if (row2.code_commune == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											4, row2.code_commune);
								}

								if (row2.prefixe_section == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											5, row2.prefixe_section);
								}

								if (row2.section == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											6, row2.section);
								}

								if (row2.numero == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											7, row2.numero);
								}

								if (row2.id_parcelle_temp == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											8, row2.id_parcelle_temp);
								}

								try {

									insertedCount_tPostgresqlOutput_11 = insertedCount_tPostgresqlOutput_11
											+ pstmtInsert_tPostgresqlOutput_11
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_11 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tPostgresqlOutput_11++;
							if (batchSize_tPostgresqlOutput_11 <= batchSizeCounter_tPostgresqlOutput_11) {

							}

							tos_count_tPostgresqlOutput_11++;

							/**
							 * [tPostgresqlOutput_11 main ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_11 end ] start
				 */

				currentComponent = "tPostgresqlOutput_11";

				if (pstmtUpdate_tPostgresqlOutput_11 != null) {

					pstmtUpdate_tPostgresqlOutput_11.close();

				}
				if (pstmtInsert_tPostgresqlOutput_11 != null) {

					pstmtInsert_tPostgresqlOutput_11.close();

				}
				if (pstmt_tPostgresqlOutput_11 != null) {

					pstmt_tPostgresqlOutput_11.close();

				}

				nb_line_deleted_tPostgresqlOutput_11 = nb_line_deleted_tPostgresqlOutput_11
						+ deletedCount_tPostgresqlOutput_11;
				nb_line_update_tPostgresqlOutput_11 = nb_line_update_tPostgresqlOutput_11
						+ updatedCount_tPostgresqlOutput_11;
				nb_line_inserted_tPostgresqlOutput_11 = nb_line_inserted_tPostgresqlOutput_11
						+ insertedCount_tPostgresqlOutput_11;
				nb_line_rejected_tPostgresqlOutput_11 = nb_line_rejected_tPostgresqlOutput_11
						+ rejectedCount_tPostgresqlOutput_11;

				globalMap.put("tPostgresqlOutput_11_NB_LINE",
						nb_line_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_11);

				ok_Hash.put("tPostgresqlOutput_11", true);
				end_Hash.put("tPostgresqlOutput_11", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class dispoparcStruct implements
			routines.system.IPersistableRow<dispoparcStruct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_dispoparc;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final dispoparcStruct other = (dispoparcStruct) obj;

			if (this.id_dispoparc != other.id_dispoparc)
				return false;

			return true;
		}

		public void copyDataTo(dispoparcStruct other) {

			other.id_dispoparc = this.id_dispoparc;
			other.id_disposition = this.id_disposition;
			other.id_parcelle = this.id_parcelle;
			other.nombre_de_lots = this.nombre_de_lots;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(dispoparcStruct other) {

			other.id_dispoparc = this.id_dispoparc;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_dispoparc = dis.readInt();

					this.id_disposition = dis.readInt();

					this.id_parcelle = dis.readInt();

					this.nombre_de_lots = readInteger(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_disposition_temp = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_dispoparc);

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_parcelle);

				// Integer

				writeInteger(this.nombre_de_lots, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dispoparcStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_dispoparc,
					other.id_dispoparc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_dispoparc = dis.readInt();

					this.id_disposition = dis.readInt();

					this.id_parcelle = dis.readInt();

					this.nombre_de_lots = readInteger(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_disposition_temp = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_dispoparc);

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_parcelle);

				// Integer

				writeInteger(this.nombre_de_lots, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_dispoparc;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.id_dispoparc != other.id_dispoparc)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.id_dispoparc = this.id_dispoparc;
			other.id_disposition = this.id_disposition;
			other.id_parcelle = this.id_parcelle;
			other.nombre_de_lots = this.nombre_de_lots;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.id_dispoparc = this.id_dispoparc;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_dispoparc = dis.readInt();

					this.id_disposition = dis.readInt();

					this.id_parcelle = dis.readInt();

					this.nombre_de_lots = readInteger(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_disposition_temp = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_dispoparc);

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_parcelle);

				// Integer

				writeInteger(this.nombre_de_lots, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_dispoparc,
					other.id_dispoparc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_3Process(globalMap);
				tPostgresqlInput_4Process(globalMap);

				row3Struct row3 = new row3Struct();
				dispoparcStruct dispoparc = new dispoparcStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_1";

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = context.prefixe_table
							+ "disposition_parcelle";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\""
							+ context.prefixe_table
							+ "disposition_parcelle";
				}

				int updateKeyCount_tPostgresqlOutput_1 = 1;
				if (updateKeyCount_tPostgresqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_1 = 10000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_1 = false;
				while (rsTable_tPostgresqlOutput_1.next()) {
					String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_1.equals(context.prefixe_table
							+ "disposition_parcelle")
							&& (schema_tPostgresqlOutput_1
									.equals(dbschema_tPostgresqlOutput_1) || dbschema_tPostgresqlOutput_1
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_1 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_1.close();
				if (!whetherExist_tPostgresqlOutput_1) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement();
					stmtCreate_tPostgresqlOutput_1
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_1
									+ "\"(\"id_dispoparc\" INT4  not null ,\"id_disposition\" INT4  not null ,\"id_parcelle\" INT4  not null ,\"nombre_de_lots\" INT4 ,\"id_dispoparc_temp\" VARCHAR ,\"id_disposition_temp\" VARCHAR ,\"id_parcelle_temp\" VARCHAR ,primary key(\"id_dispoparc\"))");
					stmtCreate_tPostgresqlOutput_1.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_1
								+ "\" WHERE \"id_dispoparc\" = ?");
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"id_dispoparc\",\"id_disposition\",\"id_parcelle\",\"nombre_de_lots\",\"id_dispoparc_temp\",\"id_disposition_temp\",\"id_parcelle_temp\") VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				String update_tPostgresqlOutput_1 = "UPDATE \""
						+ tableName_tPostgresqlOutput_1
						+ "\" SET \"id_disposition\" = ?,\"id_parcelle\" = ?,\"nombre_de_lots\" = ?,\"id_dispoparc_temp\" = ?,\"id_disposition_temp\" = ?,\"id_parcelle_temp\" = ? WHERE \"id_dispoparc\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(update_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());
				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				dispoparcStruct dispoparc_tmp = new dispoparcStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.target_path + "disposition_parcelle.csv"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row3 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row3 = new row3Struct();
						try {

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row3.id_dispoparc = 0;

								row3.id_disposition = 0;

								row3.id_parcelle = 0;

								row3.nombre_de_lots = null;

								row3.id_dispoparc_temp = null;

								row3.id_disposition_temp = null;

								row3.id_parcelle_temp = null;

							} else {

								for (int i_tFileInputDelimited_1 = 0; i_tFileInputDelimited_1 < rowtFileInputDelimited_1.length; i_tFileInputDelimited_1++) {
									rowtFileInputDelimited_1[i_tFileInputDelimited_1] = rowtFileInputDelimited_1[i_tFileInputDelimited_1]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row3.id_dispoparc = ParserUtils
												.parseTo_int(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row3.id_dispoparc = 0;
									}

								} else {
									row3.id_dispoparc = 0;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row3.id_disposition = ParserUtils
												.parseTo_int(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row3.id_disposition = 0;
									}

								} else {
									row3.id_disposition = 0;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row3.id_parcelle = ParserUtils
												.parseTo_int(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row3.id_parcelle = 0;
									}

								} else {
									row3.id_parcelle = 0;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row3.nombre_de_lots = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row3.nombre_de_lots = null;
									}

								} else {
									row3.nombre_de_lots = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.id_dispoparc_temp = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row3.id_dispoparc_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.id_disposition_temp = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row3.id_disposition_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.id_parcelle_temp = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row3.id_parcelle_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row14"
							// /////////////////////////////////////////////

							boolean forceLooprow14 = false;

							row14Struct row14ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_3 = false;

								row14HashKey.id_disposition_temp = row3.id_disposition_temp;

								row14HashKey.hashCodeDirty = true;

								tHash_Lookup_row14.lookup(row14HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row14 != null
									&& tHash_Lookup_row14
											.getCount(row14HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.id_disposition_temp = '"
								// + row14HashKey.id_disposition_temp + "'");
							} // G 071

							row14Struct row14 = null;

							row14Struct fromLookup_row14 = null;
							row14 = row14Default;

							if (tHash_Lookup_row14 != null
									&& tHash_Lookup_row14.hasNext()) { // G 099

								fromLookup_row14 = tHash_Lookup_row14.next();

							} // G 099

							if (fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row15"
							// /////////////////////////////////////////////

							boolean forceLooprow15 = false;

							row15Struct row15ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_3 = false;

								row15HashKey.id_parcelle_temp = row3.id_parcelle_temp;

								row15HashKey.hashCodeDirty = true;

								tHash_Lookup_row15.lookup(row15HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row15 != null
									&& tHash_Lookup_row15
											.getCount(row15HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.id_parcelle_temp = '"
								// + row15HashKey.id_parcelle_temp + "'");
							} // G 071

							row15Struct row15 = null;

							row15Struct fromLookup_row15 = null;
							row15 = row15Default;

							if (tHash_Lookup_row15 != null
									&& tHash_Lookup_row15.hasNext()) { // G 099

								fromLookup_row15 = tHash_Lookup_row15.next();

							} // G 099

							if (fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								dispoparc = null;

								// # Output table : 'dispoparc'
								dispoparc_tmp.id_dispoparc = row3.id_dispoparc;
								dispoparc_tmp.id_disposition = row14.id_disposition;
								dispoparc_tmp.id_parcelle = row15.id_parcelle;
								dispoparc_tmp.nombre_de_lots = row3.nombre_de_lots;
								dispoparc_tmp.id_dispoparc_temp = row3.id_dispoparc_temp;
								dispoparc_tmp.id_disposition_temp = row3.id_disposition_temp;
								dispoparc_tmp.id_parcelle_temp = row3.id_parcelle_temp;
								dispoparc = dispoparc_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "dispoparc"
							if (dispoparc != null) {

								/**
								 * [tPostgresqlOutput_1 main ] start
								 */

								currentComponent = "tPostgresqlOutput_1";

								whetherReject_tPostgresqlOutput_1 = false;

								pstmt_tPostgresqlOutput_1.setInt(1,
										dispoparc.id_dispoparc);

								java.sql.ResultSet rs_tPostgresqlOutput_1 = pstmt_tPostgresqlOutput_1
										.executeQuery();
								int checkCount_tPostgresqlOutput_1 = -1;
								while (rs_tPostgresqlOutput_1.next()) {
									checkCount_tPostgresqlOutput_1 = rs_tPostgresqlOutput_1
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_1 > 0) {
									pstmtUpdate_tPostgresqlOutput_1.setInt(1,
											dispoparc.id_disposition);

									pstmtUpdate_tPostgresqlOutput_1.setInt(2,
											dispoparc.id_parcelle);

									if (dispoparc.nombre_de_lots == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(3,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_1.setInt(
												3, dispoparc.nombre_de_lots);
									}

									if (dispoparc.id_dispoparc_temp == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														4,
														dispoparc.id_dispoparc_temp);
									}

									if (dispoparc.id_disposition_temp == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														5,
														dispoparc.id_disposition_temp);
									}

									if (dispoparc.id_parcelle_temp == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(6,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														6,
														dispoparc.id_parcelle_temp);
									}

									pstmtUpdate_tPostgresqlOutput_1.setInt(
											7 + count_tPostgresqlOutput_1,
											dispoparc.id_dispoparc);

									try {

										updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1
												+ pstmtUpdate_tPostgresqlOutput_1
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_1 = true;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tPostgresqlOutput_1.setInt(1,
											dispoparc.id_dispoparc);

									pstmtInsert_tPostgresqlOutput_1.setInt(2,
											dispoparc.id_disposition);

									pstmtInsert_tPostgresqlOutput_1.setInt(3,
											dispoparc.id_parcelle);

									if (dispoparc.nombre_de_lots == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(4,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												4, dispoparc.nombre_de_lots);
									}

									if (dispoparc.id_dispoparc_temp == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														5,
														dispoparc.id_dispoparc_temp);
									}

									if (dispoparc.id_disposition_temp == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(6,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														6,
														dispoparc.id_disposition_temp);
									}

									if (dispoparc.id_parcelle_temp == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														7,
														dispoparc.id_parcelle_temp);
									}

									try {

										insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
												+ pstmtInsert_tPostgresqlOutput_1
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_1 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tPostgresqlOutput_1++;
								if (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1) {

								}

								tos_count_tPostgresqlOutput_1++;

								/**
								 * [tPostgresqlOutput_1 main ] stop
								 */

							} // End of branch "dispoparc"

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmtUpdate_tPostgresqlOutput_1 != null) {

					pstmtUpdate_tPostgresqlOutput_1.close();

				}
				if (pstmtInsert_tPostgresqlOutput_1 != null) {

					pstmtInsert_tPostgresqlOutput_1.close();

				}
				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();

				}

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row15");

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class sufStruct implements
			routines.system.IPersistableRow<sufStruct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_suf;

		public int getId_suf() {
			return this.id_suf;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_suf_cplmt;

		public Integer getId_suf_cplmt() {
			return this.id_suf_cplmt;
		}

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public String id_suf_temp;

		public String getId_suf_temp() {
			return this.id_suf_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_suf;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final sufStruct other = (sufStruct) obj;

			if (this.id_suf != other.id_suf)
				return false;

			return true;
		}

		public void copyDataTo(sufStruct other) {

			other.id_suf = this.id_suf;
			other.id_dispoparc = this.id_dispoparc;
			other.id_suf_cplmt = this.id_suf_cplmt;
			other.nature_culture = this.nature_culture;
			other.nature_culture_speciale = this.nature_culture_speciale;
			other.surface_terrain = this.surface_terrain;
			other.id_suf_temp = this.id_suf_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(sufStruct other) {

			other.id_suf = this.id_suf;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_suf = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_suf_cplmt = readInteger(dis);

					this.nature_culture = readInteger(dis);

					this.nature_culture_speciale = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_suf_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_suf);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_suf_cplmt, dos);

				// Integer

				writeInteger(this.nature_culture, dos);

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// String

				writeString(this.id_suf_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_suf=" + String.valueOf(id_suf));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_suf_cplmt=" + String.valueOf(id_suf_cplmt));
			sb.append(",nature_culture=" + String.valueOf(nature_culture));
			sb.append(",nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_suf_temp=" + id_suf_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sufStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_suf, other.id_suf);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];

		public int id_suf;

		public int getId_suf() {
			return this.id_suf;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_suf_cplmt;

		public Integer getId_suf_cplmt() {
			return this.id_suf_cplmt;
		}

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public String id_suf_temp;

		public String getId_suf_temp() {
			return this.id_suf_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_suf = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_suf_cplmt = readInteger(dis);

					this.nature_culture = readInteger(dis);

					this.nature_culture_speciale = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_suf_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_suf);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_suf_cplmt, dos);

				// Integer

				writeInteger(this.nature_culture, dos);

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// String

				writeString(this.id_suf_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_suf=" + String.valueOf(id_suf));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_suf_cplmt=" + String.valueOf(id_suf_cplmt));
			sb.append(",nature_culture=" + String.valueOf(nature_culture));
			sb.append(",nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_suf_temp=" + id_suf_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_6Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_6Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_suf;

		public int getId_suf() {
			return this.id_suf;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_suf_cplmt;

		public Integer getId_suf_cplmt() {
			return this.id_suf_cplmt;
		}

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public String id_suf_temp;

		public String getId_suf_temp() {
			return this.id_suf_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_suf;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_6Struct other = (after_tFileInputDelimited_6Struct) obj;

			if (this.id_suf != other.id_suf)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_6Struct other) {

			other.id_suf = this.id_suf;
			other.id_dispoparc = this.id_dispoparc;
			other.id_suf_cplmt = this.id_suf_cplmt;
			other.nature_culture = this.nature_culture;
			other.nature_culture_speciale = this.nature_culture_speciale;
			other.surface_terrain = this.surface_terrain;
			other.id_suf_temp = this.id_suf_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_6Struct other) {

			other.id_suf = this.id_suf;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_suf = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_suf_cplmt = readInteger(dis);

					this.nature_culture = readInteger(dis);

					this.nature_culture_speciale = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_suf_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_suf);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_suf_cplmt, dos);

				// Integer

				writeInteger(this.nature_culture, dos);

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// String

				writeString(this.id_suf_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_suf=" + String.valueOf(id_suf));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_suf_cplmt=" + String.valueOf(id_suf_cplmt));
			sb.append(",nature_culture=" + String.valueOf(nature_culture));
			sb.append(",nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_suf_temp=" + id_suf_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_suf, other.id_suf);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_5Process(globalMap);

				row4Struct row4 = new row4Struct();
				sufStruct suf = new sufStruct();

				/**
				 * [tPostgresqlOutput_6 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_6", false);
				start_Hash.put("tPostgresqlOutput_6",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_6";

				int tos_count_tPostgresqlOutput_6 = 0;

				String dbschema_tPostgresqlOutput_6 = null;
				dbschema_tPostgresqlOutput_6 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_6 = null;
				if (dbschema_tPostgresqlOutput_6 == null
						|| dbschema_tPostgresqlOutput_6.trim().length() == 0) {
					tableName_tPostgresqlOutput_6 = context.prefixe_table
							+ "suf";
				} else {
					tableName_tPostgresqlOutput_6 = dbschema_tPostgresqlOutput_6
							+ "\".\"" + context.prefixe_table + "suf";
				}

				int updateKeyCount_tPostgresqlOutput_6 = 1;
				if (updateKeyCount_tPostgresqlOutput_6 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_6 = 0;
				int nb_line_update_tPostgresqlOutput_6 = 0;
				int nb_line_inserted_tPostgresqlOutput_6 = 0;
				int nb_line_deleted_tPostgresqlOutput_6 = 0;
				int nb_line_rejected_tPostgresqlOutput_6 = 0;

				int deletedCount_tPostgresqlOutput_6 = 0;
				int updatedCount_tPostgresqlOutput_6 = 0;
				int insertedCount_tPostgresqlOutput_6 = 0;
				int rejectedCount_tPostgresqlOutput_6 = 0;

				boolean whetherReject_tPostgresqlOutput_6 = false;

				java.sql.Connection conn_tPostgresqlOutput_6 = null;

				conn_tPostgresqlOutput_6 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_6 = 10000;
				int batchSizeCounter_tPostgresqlOutput_6 = 0;

				int count_tPostgresqlOutput_6 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_6 = dbMetaData_tPostgresqlOutput_6
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_6 = false;
				while (rsTable_tPostgresqlOutput_6.next()) {
					String table_tPostgresqlOutput_6 = rsTable_tPostgresqlOutput_6
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_6 = rsTable_tPostgresqlOutput_6
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_6.equals(context.prefixe_table
							+ "suf")
							&& (schema_tPostgresqlOutput_6
									.equals(dbschema_tPostgresqlOutput_6) || dbschema_tPostgresqlOutput_6
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_6 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_6.close();
				if (!whetherExist_tPostgresqlOutput_6) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6
							.createStatement();
					stmtCreate_tPostgresqlOutput_6
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_6
									+ "\"(\"id_suf\" INT4  not null ,\"id_dispoparc\" INT4  not null ,\"id_suf_cplmt\" INT4 ,\"nature_culture\" INT4 ,\"nature_culture_speciale\" INT4 ,\"surface_terrain\" NUMERIC ,\"id_suf_temp\" VARCHAR ,\"id_dispoparc_temp\" VARCHAR ,primary key(\"id_suf\"))");
					stmtCreate_tPostgresqlOutput_6.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_6
								+ "\" WHERE \"id_suf\" = ?");
				String insert_tPostgresqlOutput_6 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_6
						+ "\" (\"id_suf\",\"id_dispoparc\",\"id_suf_cplmt\",\"nature_culture\",\"nature_culture_speciale\",\"surface_terrain\",\"id_suf_temp\",\"id_dispoparc_temp\") VALUES (?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6
						.prepareStatement(insert_tPostgresqlOutput_6);
				String update_tPostgresqlOutput_6 = "UPDATE \""
						+ tableName_tPostgresqlOutput_6
						+ "\" SET \"id_dispoparc\" = ?,\"id_suf_cplmt\" = ?,\"nature_culture\" = ?,\"nature_culture_speciale\" = ?,\"surface_terrain\" = ?,\"id_suf_temp\" = ?,\"id_dispoparc_temp\" = ? WHERE \"id_suf\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6
						.prepareStatement(update_tPostgresqlOutput_6);

				/**
				 * [tPostgresqlOutput_6 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());
				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				sufStruct suf_tmp = new sufStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /**
				 * Start field
				 * tFileInputDelimited_6:FILENAME
				 */
				context.target_path + "suf.csv"/**
				 * End field
				 * tFileInputDelimited_6:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_6)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6
								.setEscapeChar(csvReadertFileInputDelimited_6
										.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_6.readNext()) {

								rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
										.getValues();
								if (!(rowtFileInputDelimited_6.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_6[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_6++;

								}

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
									: totalLinetFileInputDelimited_6
											- footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_6)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6
									.setEscapeChar(csvReadertFileInputDelimited_6
											.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_6 != 0
							&& csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
								.getValues();

						if (rowtFileInputDelimited_6.length == 1
								&& ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row4 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row4 = new row4Struct();
						try {

							if (rowtFileInputDelimited_6.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.id_suf = 0;

								row4.id_dispoparc = 0;

								row4.id_suf_cplmt = null;

								row4.nature_culture = null;

								row4.nature_culture_speciale = null;

								row4.surface_terrain = null;

								row4.id_suf_temp = null;

								row4.id_dispoparc_temp = null;

							} else {

								for (int i_tFileInputDelimited_6 = 0; i_tFileInputDelimited_6 < rowtFileInputDelimited_6.length; i_tFileInputDelimited_6++) {
									rowtFileInputDelimited_6[i_tFileInputDelimited_6] = rowtFileInputDelimited_6[i_tFileInputDelimited_6]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row4.id_suf = ParserUtils
												.parseTo_int(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row4.id_suf = 0;
									}

								} else {
									row4.id_suf = 0;
								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row4.id_dispoparc = ParserUtils
												.parseTo_int(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row4.id_dispoparc = 0;
									}

								} else {
									row4.id_dispoparc = 0;
								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row4.id_suf_cplmt = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row4.id_suf_cplmt = null;
									}

								} else {
									row4.id_suf_cplmt = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 3;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row4.nature_culture = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row4.nature_culture = null;
									}

								} else {
									row4.nature_culture = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 4;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row4.nature_culture_speciale = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row4.nature_culture_speciale = null;
									}

								} else {
									row4.nature_culture_speciale = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 5;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row4.surface_terrain = ParserUtils
												.parseTo_Double(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row4.surface_terrain = null;
									}

								} else {
									row4.surface_terrain = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 6;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row4.id_suf_temp = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row4.id_suf_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 7;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row4.id_dispoparc_temp = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row4.id_dispoparc_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row16"
							// /////////////////////////////////////////////

							boolean forceLooprow16 = false;

							row16Struct row16ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row16HashKey.id_disposition_temp = row4.id_dispoparc_temp;

								row16HashKey.hashCodeDirty = true;

								tHash_Lookup_row16.lookup(row16HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row16 != null
									&& tHash_Lookup_row16
											.getCount(row16HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.id_disposition_temp = '"
								// + row16HashKey.id_disposition_temp + "'");
							} // G 071

							row16Struct row16 = null;

							row16Struct fromLookup_row16 = null;
							row16 = row16Default;

							if (tHash_Lookup_row16 != null
									&& tHash_Lookup_row16.hasNext()) { // G 099

								fromLookup_row16 = tHash_Lookup_row16.next();

							} // G 099

							if (fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								suf = null;

								// # Output table : 'suf'
								suf_tmp.id_suf = row4.id_suf;
								suf_tmp.id_dispoparc = row16.id_dispoparc;
								suf_tmp.id_suf_cplmt = row4.id_suf_cplmt;
								suf_tmp.nature_culture = row4.nature_culture;
								suf_tmp.nature_culture_speciale = row4.nature_culture_speciale;
								suf_tmp.surface_terrain = row4.surface_terrain;
								suf_tmp.id_suf_temp = row4.id_suf_temp;
								suf_tmp.id_dispoparc_temp = row4.id_dispoparc_temp;
								suf = suf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "suf"
							if (suf != null) {

								/**
								 * [tPostgresqlOutput_6 main ] start
								 */

								currentComponent = "tPostgresqlOutput_6";

								whetherReject_tPostgresqlOutput_6 = false;

								pstmt_tPostgresqlOutput_6.setInt(1, suf.id_suf);

								java.sql.ResultSet rs_tPostgresqlOutput_6 = pstmt_tPostgresqlOutput_6
										.executeQuery();
								int checkCount_tPostgresqlOutput_6 = -1;
								while (rs_tPostgresqlOutput_6.next()) {
									checkCount_tPostgresqlOutput_6 = rs_tPostgresqlOutput_6
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_6 > 0) {
									pstmtUpdate_tPostgresqlOutput_6.setInt(1,
											suf.id_dispoparc);

									if (suf.id_suf_cplmt == null) {
										pstmtUpdate_tPostgresqlOutput_6
												.setNull(2,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_6.setInt(
												2, suf.id_suf_cplmt);
									}

									if (suf.nature_culture == null) {
										pstmtUpdate_tPostgresqlOutput_6
												.setNull(3,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_6.setInt(
												3, suf.nature_culture);
									}

									if (suf.nature_culture_speciale == null) {
										pstmtUpdate_tPostgresqlOutput_6
												.setNull(4,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_6.setInt(
												4, suf.nature_culture_speciale);
									}

									if (suf.surface_terrain == null) {
										pstmtUpdate_tPostgresqlOutput_6
												.setNull(5,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_6
												.setDouble(5,
														suf.surface_terrain);
									}

									if (suf.id_suf_temp == null) {
										pstmtUpdate_tPostgresqlOutput_6
												.setNull(6,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_6
												.setString(6, suf.id_suf_temp);
									}

									if (suf.id_dispoparc_temp == null) {
										pstmtUpdate_tPostgresqlOutput_6
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_6
												.setString(7,
														suf.id_dispoparc_temp);
									}

									pstmtUpdate_tPostgresqlOutput_6.setInt(
											8 + count_tPostgresqlOutput_6,
											suf.id_suf);

									try {

										updatedCount_tPostgresqlOutput_6 = updatedCount_tPostgresqlOutput_6
												+ pstmtUpdate_tPostgresqlOutput_6
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_6 = true;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tPostgresqlOutput_6.setInt(1,
											suf.id_suf);

									pstmtInsert_tPostgresqlOutput_6.setInt(2,
											suf.id_dispoparc);

									if (suf.id_suf_cplmt == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(3,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_6.setInt(
												3, suf.id_suf_cplmt);
									}

									if (suf.nature_culture == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(4,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_6.setInt(
												4, suf.nature_culture);
									}

									if (suf.nature_culture_speciale == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(5,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_6.setInt(
												5, suf.nature_culture_speciale);
									}

									if (suf.surface_terrain == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(6,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setDouble(6,
														suf.surface_terrain);
									}

									if (suf.id_suf_temp == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(7, suf.id_suf_temp);
									}

									if (suf.id_dispoparc_temp == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(8,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(8,
														suf.id_dispoparc_temp);
									}

									try {

										insertedCount_tPostgresqlOutput_6 = insertedCount_tPostgresqlOutput_6
												+ pstmtInsert_tPostgresqlOutput_6
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_6 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tPostgresqlOutput_6++;
								if (batchSize_tPostgresqlOutput_6 <= batchSizeCounter_tPostgresqlOutput_6) {

								}

								tos_count_tPostgresqlOutput_6++;

								/**
								 * [tPostgresqlOutput_6 main ] stop
								 */

							} // End of branch "suf"

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								nb_line_tFileInputDelimited_6);
					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_6 end ] start
				 */

				currentComponent = "tPostgresqlOutput_6";

				if (pstmtUpdate_tPostgresqlOutput_6 != null) {

					pstmtUpdate_tPostgresqlOutput_6.close();

				}
				if (pstmtInsert_tPostgresqlOutput_6 != null) {

					pstmtInsert_tPostgresqlOutput_6.close();

				}
				if (pstmt_tPostgresqlOutput_6 != null) {

					pstmt_tPostgresqlOutput_6.close();

				}

				nb_line_deleted_tPostgresqlOutput_6 = nb_line_deleted_tPostgresqlOutput_6
						+ deletedCount_tPostgresqlOutput_6;
				nb_line_update_tPostgresqlOutput_6 = nb_line_update_tPostgresqlOutput_6
						+ updatedCount_tPostgresqlOutput_6;
				nb_line_inserted_tPostgresqlOutput_6 = nb_line_inserted_tPostgresqlOutput_6
						+ insertedCount_tPostgresqlOutput_6;
				nb_line_rejected_tPostgresqlOutput_6 = nb_line_rejected_tPostgresqlOutput_6
						+ rejectedCount_tPostgresqlOutput_6;

				globalMap.put("tPostgresqlOutput_6_NB_LINE",
						nb_line_tPostgresqlOutput_6);
				globalMap.put("tPostgresqlOutput_6_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_6);
				globalMap.put("tPostgresqlOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_6);
				globalMap.put("tPostgresqlOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_6);
				globalMap.put("tPostgresqlOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_6);

				ok_Hash.put("tPostgresqlOutput_6", true);
				end_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row16");

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class volumeStruct implements
			routines.system.IPersistableRow<volumeStruct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_volume;

		public int getId_volume() {
			return this.id_volume;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String no_volume;

		public String getNo_volume() {
			return this.no_volume;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_volume;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final volumeStruct other = (volumeStruct) obj;

			if (this.id_volume != other.id_volume)
				return false;

			return true;
		}

		public void copyDataTo(volumeStruct other) {

			other.id_volume = this.id_volume;
			other.id_dispoparc = this.id_dispoparc;
			other.no_volume = this.no_volume;
			other.id_volume_temp = this.id_volume_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(volumeStruct other) {

			other.id_volume = this.id_volume;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_volume = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.no_volume = readString(dis);

					this.id_volume_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_volume);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.no_volume, dos);

				// String

				writeString(this.id_volume_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_volume=" + String.valueOf(id_volume));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",no_volume=" + no_volume);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(volumeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_volume, other.id_volume);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];

		public int id_volume;

		public int getId_volume() {
			return this.id_volume;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String no_volume;

		public String getNo_volume() {
			return this.no_volume;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_volume = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.no_volume = readString(dis);

					this.id_volume_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_volume);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.no_volume, dos);

				// String

				writeString(this.id_volume_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_volume=" + String.valueOf(id_volume));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",no_volume=" + no_volume);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_5Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_volume;

		public int getId_volume() {
			return this.id_volume;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String no_volume;

		public String getNo_volume() {
			return this.no_volume;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_volume;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_5Struct other = (after_tFileInputDelimited_5Struct) obj;

			if (this.id_volume != other.id_volume)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_5Struct other) {

			other.id_volume = this.id_volume;
			other.id_dispoparc = this.id_dispoparc;
			other.no_volume = this.no_volume;
			other.id_volume_temp = this.id_volume_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_5Struct other) {

			other.id_volume = this.id_volume;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_volume = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.no_volume = readString(dis);

					this.id_volume_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_volume);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.no_volume, dos);

				// String

				writeString(this.id_volume_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_volume=" + String.valueOf(id_volume));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",no_volume=" + no_volume);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_volume, other.id_volume);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_8Process(globalMap);

				row5Struct row5 = new row5Struct();
				volumeStruct volume = new volumeStruct();

				/**
				 * [tPostgresqlOutput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_5", false);
				start_Hash.put("tPostgresqlOutput_5",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_5";

				int tos_count_tPostgresqlOutput_5 = 0;

				String dbschema_tPostgresqlOutput_5 = null;
				dbschema_tPostgresqlOutput_5 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_5 = null;
				if (dbschema_tPostgresqlOutput_5 == null
						|| dbschema_tPostgresqlOutput_5.trim().length() == 0) {
					tableName_tPostgresqlOutput_5 = context.prefixe_table
							+ "volume";
				} else {
					tableName_tPostgresqlOutput_5 = dbschema_tPostgresqlOutput_5
							+ "\".\"" + context.prefixe_table + "volume";
				}

				int updateKeyCount_tPostgresqlOutput_5 = 1;
				if (updateKeyCount_tPostgresqlOutput_5 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_5 = 0;
				int nb_line_update_tPostgresqlOutput_5 = 0;
				int nb_line_inserted_tPostgresqlOutput_5 = 0;
				int nb_line_deleted_tPostgresqlOutput_5 = 0;
				int nb_line_rejected_tPostgresqlOutput_5 = 0;

				int deletedCount_tPostgresqlOutput_5 = 0;
				int updatedCount_tPostgresqlOutput_5 = 0;
				int insertedCount_tPostgresqlOutput_5 = 0;
				int rejectedCount_tPostgresqlOutput_5 = 0;

				boolean whetherReject_tPostgresqlOutput_5 = false;

				java.sql.Connection conn_tPostgresqlOutput_5 = null;

				conn_tPostgresqlOutput_5 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_5 = 10000;
				int batchSizeCounter_tPostgresqlOutput_5 = 0;

				int count_tPostgresqlOutput_5 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_5 = dbMetaData_tPostgresqlOutput_5
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_5 = false;
				while (rsTable_tPostgresqlOutput_5.next()) {
					String table_tPostgresqlOutput_5 = rsTable_tPostgresqlOutput_5
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_5 = rsTable_tPostgresqlOutput_5
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_5.equals(context.prefixe_table
							+ "volume")
							&& (schema_tPostgresqlOutput_5
									.equals(dbschema_tPostgresqlOutput_5) || dbschema_tPostgresqlOutput_5
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_5 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_5.close();
				if (!whetherExist_tPostgresqlOutput_5) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
							.createStatement();
					stmtCreate_tPostgresqlOutput_5
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_5
									+ "\"(\"id_volume\" INT4  not null ,\"id_dispoparc\" INT4  not null ,\"no_volume\" VARCHAR  not null ,\"id_volume_temp\" VARCHAR ,\"id_dispoparc_temp\" VARCHAR ,primary key(\"id_volume\"))");
					stmtCreate_tPostgresqlOutput_5.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_5
								+ "\" WHERE \"id_volume\" = ?");
				String insert_tPostgresqlOutput_5 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_5
						+ "\" (\"id_volume\",\"id_dispoparc\",\"no_volume\",\"id_volume_temp\",\"id_dispoparc_temp\") VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.prepareStatement(insert_tPostgresqlOutput_5);
				String update_tPostgresqlOutput_5 = "UPDATE \""
						+ tableName_tPostgresqlOutput_5
						+ "\" SET \"id_dispoparc\" = ?,\"no_volume\" = ?,\"id_volume_temp\" = ?,\"id_dispoparc_temp\" = ? WHERE \"id_volume\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.prepareStatement(update_tPostgresqlOutput_5);

				/**
				 * [tPostgresqlOutput_5 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());
				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) globalMap
						.get("tHash_Lookup_row17"));

				row17Struct row17HashKey = new row17Struct();
				row17Struct row17Default = new row17Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				volumeStruct volume_tmp = new volumeStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /**
				 * Start field
				 * tFileInputDelimited_5:FILENAME
				 */
				context.target_path + "volume.csv"/**
				 * End field
				 * tFileInputDelimited_5:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_5)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('"');

						csvReadertFileInputDelimited_5
								.setEscapeChar(csvReadertFileInputDelimited_5
										.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_5.readNext()) {

								rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
										.getValues();
								if (!(rowtFileInputDelimited_5.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_5[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_5++;

								}

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
									: totalLinetFileInputDelimited_5
											- footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_5)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('"');

							csvReadertFileInputDelimited_5
									.setEscapeChar(csvReadertFileInputDelimited_5
											.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_5 != 0
							&& csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
								.getValues();

						if (rowtFileInputDelimited_5.length == 1
								&& ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						row5 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row5 = new row5Struct();
						try {

							if (rowtFileInputDelimited_5.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row5.id_volume = 0;

								row5.id_dispoparc = 0;

								row5.no_volume = null;

								row5.id_volume_temp = null;

								row5.id_dispoparc_temp = null;

							} else {

								for (int i_tFileInputDelimited_5 = 0; i_tFileInputDelimited_5 < rowtFileInputDelimited_5.length; i_tFileInputDelimited_5++) {
									rowtFileInputDelimited_5[i_tFileInputDelimited_5] = rowtFileInputDelimited_5[i_tFileInputDelimited_5]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row5.id_volume = ParserUtils
												.parseTo_int(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

									} else {
										row5.id_volume = 0;
									}

								} else {
									row5.id_volume = 0;
								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row5.id_dispoparc = ParserUtils
												.parseTo_int(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

									} else {
										row5.id_dispoparc = 0;
									}

								} else {
									row5.id_dispoparc = 0;
								}

								columnIndexWithD_tFileInputDelimited_5 = 2;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row5.no_volume = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row5.no_volume = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row5.id_volume_temp = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row5.id_volume_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row5.id_dispoparc_temp = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row5.id_dispoparc_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row17"
							// /////////////////////////////////////////////

							boolean forceLooprow17 = false;

							row17Struct row17ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								row17HashKey.id_dispoparc_temp = row5.id_dispoparc_temp;

								row17HashKey.hashCodeDirty = true;

								tHash_Lookup_row17.lookup(row17HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row17 != null
									&& tHash_Lookup_row17
											.getCount(row17HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys :  row17.id_dispoparc_temp = '"
								// + row17HashKey.id_dispoparc_temp + "'");
							} // G 071

							row17Struct row17 = null;

							row17Struct fromLookup_row17 = null;
							row17 = row17Default;

							if (tHash_Lookup_row17 != null
									&& tHash_Lookup_row17.hasNext()) { // G 099

								fromLookup_row17 = tHash_Lookup_row17.next();

							} // G 099

							if (fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								volume = null;

								// # Output table : 'volume'
								volume_tmp.id_volume = row5.id_volume;
								volume_tmp.id_dispoparc = row17.id_dispoparc;
								volume_tmp.no_volume = row5.no_volume;
								volume_tmp.id_volume_temp = row5.id_volume_temp;
								volume_tmp.id_dispoparc_temp = row5.id_dispoparc_temp;
								volume = volume_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "volume"
							if (volume != null) {

								/**
								 * [tPostgresqlOutput_5 main ] start
								 */

								currentComponent = "tPostgresqlOutput_5";

								whetherReject_tPostgresqlOutput_5 = false;

								pstmt_tPostgresqlOutput_5.setInt(1,
										volume.id_volume);

								java.sql.ResultSet rs_tPostgresqlOutput_5 = pstmt_tPostgresqlOutput_5
										.executeQuery();
								int checkCount_tPostgresqlOutput_5 = -1;
								while (rs_tPostgresqlOutput_5.next()) {
									checkCount_tPostgresqlOutput_5 = rs_tPostgresqlOutput_5
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_5 > 0) {
									pstmtUpdate_tPostgresqlOutput_5.setInt(1,
											volume.id_dispoparc);

									if (volume.no_volume == null) {
										pstmtUpdate_tPostgresqlOutput_5
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_5
												.setString(2, volume.no_volume);
									}

									if (volume.id_volume_temp == null) {
										pstmtUpdate_tPostgresqlOutput_5
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_5
												.setString(3,
														volume.id_volume_temp);
									}

									if (volume.id_dispoparc_temp == null) {
										pstmtUpdate_tPostgresqlOutput_5
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_5
												.setString(
														4,
														volume.id_dispoparc_temp);
									}

									pstmtUpdate_tPostgresqlOutput_5.setInt(
											5 + count_tPostgresqlOutput_5,
											volume.id_volume);

									try {

										updatedCount_tPostgresqlOutput_5 = updatedCount_tPostgresqlOutput_5
												+ pstmtUpdate_tPostgresqlOutput_5
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_5 = true;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tPostgresqlOutput_5.setInt(1,
											volume.id_volume);

									pstmtInsert_tPostgresqlOutput_5.setInt(2,
											volume.id_dispoparc);

									if (volume.no_volume == null) {
										pstmtInsert_tPostgresqlOutput_5
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_5
												.setString(3, volume.no_volume);
									}

									if (volume.id_volume_temp == null) {
										pstmtInsert_tPostgresqlOutput_5
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_5
												.setString(4,
														volume.id_volume_temp);
									}

									if (volume.id_dispoparc_temp == null) {
										pstmtInsert_tPostgresqlOutput_5
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_5
												.setString(
														5,
														volume.id_dispoparc_temp);
									}

									try {

										insertedCount_tPostgresqlOutput_5 = insertedCount_tPostgresqlOutput_5
												+ pstmtInsert_tPostgresqlOutput_5
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_5 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tPostgresqlOutput_5++;
								if (batchSize_tPostgresqlOutput_5 <= batchSizeCounter_tPostgresqlOutput_5) {

								}

								tos_count_tPostgresqlOutput_5++;

								/**
								 * [tPostgresqlOutput_5 main ] stop
								 */

							} // End of branch "volume"

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row17 != null) {
					tHash_Lookup_row17.endGet();
				}
				globalMap.remove("tHash_Lookup_row17");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_5 end ] start
				 */

				currentComponent = "tPostgresqlOutput_5";

				if (pstmtUpdate_tPostgresqlOutput_5 != null) {

					pstmtUpdate_tPostgresqlOutput_5.close();

				}
				if (pstmtInsert_tPostgresqlOutput_5 != null) {

					pstmtInsert_tPostgresqlOutput_5.close();

				}
				if (pstmt_tPostgresqlOutput_5 != null) {

					pstmt_tPostgresqlOutput_5.close();

				}

				nb_line_deleted_tPostgresqlOutput_5 = nb_line_deleted_tPostgresqlOutput_5
						+ deletedCount_tPostgresqlOutput_5;
				nb_line_update_tPostgresqlOutput_5 = nb_line_update_tPostgresqlOutput_5
						+ updatedCount_tPostgresqlOutput_5;
				nb_line_inserted_tPostgresqlOutput_5 = nb_line_inserted_tPostgresqlOutput_5
						+ insertedCount_tPostgresqlOutput_5;
				nb_line_rejected_tPostgresqlOutput_5 = nb_line_rejected_tPostgresqlOutput_5
						+ rejectedCount_tPostgresqlOutput_5;

				globalMap.put("tPostgresqlOutput_5_NB_LINE",
						nb_line_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_5);

				ok_Hash.put("tPostgresqlOutput_5", true);
				end_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row17");

		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public Integer num_voie;

		public Integer getNum_voie() {
			return this.num_voie;
		}

		public String b_t_q;

		public String getB_t_q() {
			return this.b_t_q;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.id_adresse = this.id_adresse;
			other.num_voie = this.num_voie;
			other.b_t_q = this.b_t_q;
			other.type_voie = this.type_voie;
			other.code_voie = this.code_voie;
			other.voie = this.voie;
			other.code_postal = this.code_postal;
			other.commune = this.commune;
			other.id_adresse_temp = this.id_adresse_temp;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.id_adresse = this.id_adresse;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.num_voie = readInteger(dis);

					this.b_t_q = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.id_adresse_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// Integer

				writeInteger(this.num_voie, dos);

				// String

				writeString(this.b_t_q, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.id_adresse_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",num_voie=" + String.valueOf(num_voie));
			sb.append(",b_t_q=" + b_t_q);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tPostgresqlOutput_8 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_8", false);
				start_Hash.put("tPostgresqlOutput_8",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_8";

				int tos_count_tPostgresqlOutput_8 = 0;

				String dbschema_tPostgresqlOutput_8 = null;
				dbschema_tPostgresqlOutput_8 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_8 = null;
				if (dbschema_tPostgresqlOutput_8 == null
						|| dbschema_tPostgresqlOutput_8.trim().length() == 0) {
					tableName_tPostgresqlOutput_8 = context.prefixe_table
							+ "adresse";
				} else {
					tableName_tPostgresqlOutput_8 = dbschema_tPostgresqlOutput_8
							+ "\".\"" + context.prefixe_table + "adresse";
				}

				int updateKeyCount_tPostgresqlOutput_8 = 1;
				if (updateKeyCount_tPostgresqlOutput_8 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_8 = 0;
				int nb_line_update_tPostgresqlOutput_8 = 0;
				int nb_line_inserted_tPostgresqlOutput_8 = 0;
				int nb_line_deleted_tPostgresqlOutput_8 = 0;
				int nb_line_rejected_tPostgresqlOutput_8 = 0;

				int deletedCount_tPostgresqlOutput_8 = 0;
				int updatedCount_tPostgresqlOutput_8 = 0;
				int insertedCount_tPostgresqlOutput_8 = 0;
				int rejectedCount_tPostgresqlOutput_8 = 0;

				boolean whetherReject_tPostgresqlOutput_8 = false;

				java.sql.Connection conn_tPostgresqlOutput_8 = null;

				conn_tPostgresqlOutput_8 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_8 = 10000;
				int batchSizeCounter_tPostgresqlOutput_8 = 0;

				int count_tPostgresqlOutput_8 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_8 = dbMetaData_tPostgresqlOutput_8
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_8 = false;
				while (rsTable_tPostgresqlOutput_8.next()) {
					String table_tPostgresqlOutput_8 = rsTable_tPostgresqlOutput_8
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_8 = rsTable_tPostgresqlOutput_8
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_8.equals(context.prefixe_table
							+ "adresse")
							&& (schema_tPostgresqlOutput_8
									.equals(dbschema_tPostgresqlOutput_8) || dbschema_tPostgresqlOutput_8
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_8 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_8.close();
				if (!whetherExist_tPostgresqlOutput_8) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8
							.createStatement();
					stmtCreate_tPostgresqlOutput_8
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_8
									+ "\"(\"id_adresse\" INT4  not null ,\"num_voie\" INT4 ,\"b_t_q\" VARCHAR ,\"type_voie\" VARCHAR ,\"code_voie\" VARCHAR ,\"voie\" VARCHAR ,\"code_postal\" VARCHAR ,\"commune\" VARCHAR ,\"id_adresse_temp\" VARCHAR ,primary key(\"id_adresse\"))");
					stmtCreate_tPostgresqlOutput_8.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_8
								+ "\" WHERE \"id_adresse\" = ?");
				String insert_tPostgresqlOutput_8 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_8
						+ "\" (\"id_adresse\",\"num_voie\",\"b_t_q\",\"type_voie\",\"code_voie\",\"voie\",\"code_postal\",\"commune\",\"id_adresse_temp\") VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8
						.prepareStatement(insert_tPostgresqlOutput_8);
				String update_tPostgresqlOutput_8 = "UPDATE \""
						+ tableName_tPostgresqlOutput_8
						+ "\" SET \"num_voie\" = ?,\"b_t_q\" = ?,\"type_voie\" = ?,\"code_voie\" = ?,\"voie\" = ?,\"code_postal\" = ?,\"commune\" = ?,\"id_adresse_temp\" = ? WHERE \"id_adresse\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8
						.prepareStatement(update_tPostgresqlOutput_8);

				/**
				 * [tPostgresqlOutput_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /**
				 * Start field
				 * tFileInputDelimited_9:FILENAME
				 */
				context.target_path + "adresse.csv"/**
				 * End field
				 * tFileInputDelimited_9:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_9)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_9[0]);
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('"');

						csvReadertFileInputDelimited_9
								.setEscapeChar(csvReadertFileInputDelimited_9
										.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_9.readNext()) {

								rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
										.getValues();
								if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_9[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_9++;

								}

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
									: totalLinetFileInputDelimited_9
											- footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_9[0]);
							}
							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('"');

							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_9 != 0
							&& csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
								.getValues();

						if (rowtFileInputDelimited_9.length == 1
								&& ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						row8 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row8 = new row8Struct();
						try {

							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row8.id_adresse = 0;

								row8.num_voie = null;

								row8.b_t_q = null;

								row8.type_voie = null;

								row8.code_voie = null;

								row8.voie = null;

								row8.code_postal = null;

								row8.commune = null;

								row8.id_adresse_temp = null;

							} else {

								for (int i_tFileInputDelimited_9 = 0; i_tFileInputDelimited_9 < rowtFileInputDelimited_9.length; i_tFileInputDelimited_9++) {
									rowtFileInputDelimited_9[i_tFileInputDelimited_9] = rowtFileInputDelimited_9[i_tFileInputDelimited_9]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row8.id_adresse = ParserUtils
												.parseTo_int(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row8.id_adresse = 0;
									}

								} else {
									row8.id_adresse = 0;
								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row8.num_voie = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row8.num_voie = null;
									}

								} else {
									row8.num_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row8.b_t_q = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row8.b_t_q = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row8.type_voie = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row8.type_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row8.code_voie = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row8.code_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row8.voie = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row8.voie = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row8.code_postal = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row8.code_postal = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 7;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row8.commune = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row8.commune = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 8;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row8.id_adresse_temp = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row8.id_adresse_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tPostgresqlOutput_8 main ] start
							 */

							currentComponent = "tPostgresqlOutput_8";

							whetherReject_tPostgresqlOutput_8 = false;

							pstmt_tPostgresqlOutput_8
									.setInt(1, row8.id_adresse);

							java.sql.ResultSet rs_tPostgresqlOutput_8 = pstmt_tPostgresqlOutput_8
									.executeQuery();
							int checkCount_tPostgresqlOutput_8 = -1;
							while (rs_tPostgresqlOutput_8.next()) {
								checkCount_tPostgresqlOutput_8 = rs_tPostgresqlOutput_8
										.getInt(1);
							}
							if (checkCount_tPostgresqlOutput_8 > 0) {
								if (row8.num_voie == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_8.setInt(1,
											row8.num_voie);
								}

								if (row8.b_t_q == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_8.setString(
											2, row8.b_t_q);
								}

								if (row8.type_voie == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_8.setString(
											3, row8.type_voie);
								}

								if (row8.code_voie == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_8.setString(
											4, row8.code_voie);
								}

								if (row8.voie == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_8.setString(
											5, row8.voie);
								}

								if (row8.code_postal == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_8.setString(
											6, row8.code_postal);
								}

								if (row8.commune == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_8.setString(
											7, row8.commune);
								}

								if (row8.id_adresse_temp == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_8.setString(
											8, row8.id_adresse_temp);
								}

								pstmtUpdate_tPostgresqlOutput_8.setInt(
										9 + count_tPostgresqlOutput_8,
										row8.id_adresse);

								try {

									updatedCount_tPostgresqlOutput_8 = updatedCount_tPostgresqlOutput_8
											+ pstmtUpdate_tPostgresqlOutput_8
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_8 = true;
									System.err.print(e.getMessage());
								}
							} else {
								pstmtInsert_tPostgresqlOutput_8.setInt(1,
										row8.id_adresse);

								if (row8.num_voie == null) {
									pstmtInsert_tPostgresqlOutput_8.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tPostgresqlOutput_8.setInt(2,
											row8.num_voie);
								}

								if (row8.b_t_q == null) {
									pstmtInsert_tPostgresqlOutput_8.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_8.setString(
											3, row8.b_t_q);
								}

								if (row8.type_voie == null) {
									pstmtInsert_tPostgresqlOutput_8.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_8.setString(
											4, row8.type_voie);
								}

								if (row8.code_voie == null) {
									pstmtInsert_tPostgresqlOutput_8.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_8.setString(
											5, row8.code_voie);
								}

								if (row8.voie == null) {
									pstmtInsert_tPostgresqlOutput_8.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_8.setString(
											6, row8.voie);
								}

								if (row8.code_postal == null) {
									pstmtInsert_tPostgresqlOutput_8.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_8.setString(
											7, row8.code_postal);
								}

								if (row8.commune == null) {
									pstmtInsert_tPostgresqlOutput_8.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_8.setString(
											8, row8.commune);
								}

								if (row8.id_adresse_temp == null) {
									pstmtInsert_tPostgresqlOutput_8.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_8.setString(
											9, row8.id_adresse_temp);
								}

								try {

									insertedCount_tPostgresqlOutput_8 = insertedCount_tPostgresqlOutput_8
											+ pstmtInsert_tPostgresqlOutput_8
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_8 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tPostgresqlOutput_8++;
							if (batchSize_tPostgresqlOutput_8 <= batchSizeCounter_tPostgresqlOutput_8) {

							}

							tos_count_tPostgresqlOutput_8++;

							/**
							 * [tPostgresqlOutput_8 main ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								nb_line_tFileInputDelimited_9);
					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_8 end ] start
				 */

				currentComponent = "tPostgresqlOutput_8";

				if (pstmtUpdate_tPostgresqlOutput_8 != null) {

					pstmtUpdate_tPostgresqlOutput_8.close();

				}
				if (pstmtInsert_tPostgresqlOutput_8 != null) {

					pstmtInsert_tPostgresqlOutput_8.close();

				}
				if (pstmt_tPostgresqlOutput_8 != null) {

					pstmt_tPostgresqlOutput_8.close();

				}

				nb_line_deleted_tPostgresqlOutput_8 = nb_line_deleted_tPostgresqlOutput_8
						+ deletedCount_tPostgresqlOutput_8;
				nb_line_update_tPostgresqlOutput_8 = nb_line_update_tPostgresqlOutput_8
						+ updatedCount_tPostgresqlOutput_8;
				nb_line_inserted_tPostgresqlOutput_8 = nb_line_inserted_tPostgresqlOutput_8
						+ insertedCount_tPostgresqlOutput_8;
				nb_line_rejected_tPostgresqlOutput_8 = nb_line_rejected_tPostgresqlOutput_8
						+ rejectedCount_tPostgresqlOutput_8;

				globalMap.put("tPostgresqlOutput_8_NB_LINE",
						nb_line_tPostgresqlOutput_8);
				globalMap.put("tPostgresqlOutput_8_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_8);
				globalMap.put("tPostgresqlOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_8);
				globalMap.put("tPostgresqlOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_8);
				globalMap.put("tPostgresqlOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_8);

				ok_Hash.put("tPostgresqlOutput_8", true);
				end_Hash.put("tPostgresqlOutput_8", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class localStruct implements
			routines.system.IPersistableRow<localStruct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_local;

		public int getId_local() {
			return this.id_local;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public Double surface_reelle_batie;

		public Double getSurface_reelle_batie() {
			return this.surface_reelle_batie;
		}

		public Integer nb_pieces_principales;

		public Integer getNb_pieces_principales() {
			return this.nb_pieces_principales;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_local;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final localStruct other = (localStruct) obj;

			if (this.id_local != other.id_local)
				return false;

			return true;
		}

		public void copyDataTo(localStruct other) {

			other.id_local = this.id_local;
			other.id_dispoparc = this.id_dispoparc;
			other.identifiant_local = this.identifiant_local;
			other.code_type_local = this.code_type_local;
			other.surface_reelle_batie = this.surface_reelle_batie;
			other.nb_pieces_principales = this.nb_pieces_principales;
			other.id_local_temp = this.id_local_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(localStruct other) {

			other.id_local = this.id_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_local = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.identifiant_local = readString(dis);

					this.code_type_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_batie = null;
					} else {
						this.surface_reelle_batie = dis.readDouble();
					}

					this.nb_pieces_principales = readInteger(dis);

					this.id_local_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_local);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.identifiant_local, dos);

				// String

				writeString(this.code_type_local, dos);

				// Double

				if (this.surface_reelle_batie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_batie);
				}

				// Integer

				writeInteger(this.nb_pieces_principales, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_local=" + String.valueOf(id_local));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",surface_reelle_batie="
					+ String.valueOf(surface_reelle_batie));
			sb.append(",nb_pieces_principales="
					+ String.valueOf(nb_pieces_principales));
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(localStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_local, other.id_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];

		public int id_local;

		public int getId_local() {
			return this.id_local;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public Double surface_reelle_batie;

		public Double getSurface_reelle_batie() {
			return this.surface_reelle_batie;
		}

		public Integer nb_pieces_principales;

		public Integer getNb_pieces_principales() {
			return this.nb_pieces_principales;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_local = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.identifiant_local = readString(dis);

					this.code_type_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_batie = null;
					} else {
						this.surface_reelle_batie = dis.readDouble();
					}

					this.nb_pieces_principales = readInteger(dis);

					this.id_local_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_local);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.identifiant_local, dos);

				// String

				writeString(this.code_type_local, dos);

				// Double

				if (this.surface_reelle_batie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_batie);
				}

				// Integer

				writeInteger(this.nb_pieces_principales, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_local=" + String.valueOf(id_local));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",surface_reelle_batie="
					+ String.valueOf(surface_reelle_batie));
			sb.append(",nb_pieces_principales="
					+ String.valueOf(nb_pieces_principales));
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_4Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_4Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_local;

		public int getId_local() {
			return this.id_local;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public Double surface_reelle_batie;

		public Double getSurface_reelle_batie() {
			return this.surface_reelle_batie;
		}

		public Integer nb_pieces_principales;

		public Integer getNb_pieces_principales() {
			return this.nb_pieces_principales;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_local;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_4Struct other = (after_tFileInputDelimited_4Struct) obj;

			if (this.id_local != other.id_local)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_4Struct other) {

			other.id_local = this.id_local;
			other.id_dispoparc = this.id_dispoparc;
			other.identifiant_local = this.identifiant_local;
			other.code_type_local = this.code_type_local;
			other.surface_reelle_batie = this.surface_reelle_batie;
			other.nb_pieces_principales = this.nb_pieces_principales;
			other.id_local_temp = this.id_local_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_4Struct other) {

			other.id_local = this.id_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_local = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.identifiant_local = readString(dis);

					this.code_type_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_batie = null;
					} else {
						this.surface_reelle_batie = dis.readDouble();
					}

					this.nb_pieces_principales = readInteger(dis);

					this.id_local_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_local);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.identifiant_local, dos);

				// String

				writeString(this.code_type_local, dos);

				// Double

				if (this.surface_reelle_batie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_batie);
				}

				// Integer

				writeInteger(this.nb_pieces_principales, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_local=" + String.valueOf(id_local));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",surface_reelle_batie="
					+ String.valueOf(surface_reelle_batie));
			sb.append(",nb_pieces_principales="
					+ String.valueOf(nb_pieces_principales));
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_local, other.id_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_9Process(globalMap);

				row9Struct row9 = new row9Struct();
				localStruct local = new localStruct();

				/**
				 * [tPostgresqlOutput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_4", false);
				start_Hash.put("tPostgresqlOutput_4",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_4";

				int tos_count_tPostgresqlOutput_4 = 0;

				String dbschema_tPostgresqlOutput_4 = null;
				dbschema_tPostgresqlOutput_4 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_4 = null;
				if (dbschema_tPostgresqlOutput_4 == null
						|| dbschema_tPostgresqlOutput_4.trim().length() == 0) {
					tableName_tPostgresqlOutput_4 = context.prefixe_table
							+ "local";
				} else {
					tableName_tPostgresqlOutput_4 = dbschema_tPostgresqlOutput_4
							+ "\".\"" + context.prefixe_table + "local";
				}

				int updateKeyCount_tPostgresqlOutput_4 = 1;
				if (updateKeyCount_tPostgresqlOutput_4 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_4 = 0;
				int nb_line_update_tPostgresqlOutput_4 = 0;
				int nb_line_inserted_tPostgresqlOutput_4 = 0;
				int nb_line_deleted_tPostgresqlOutput_4 = 0;
				int nb_line_rejected_tPostgresqlOutput_4 = 0;

				int deletedCount_tPostgresqlOutput_4 = 0;
				int updatedCount_tPostgresqlOutput_4 = 0;
				int insertedCount_tPostgresqlOutput_4 = 0;
				int rejectedCount_tPostgresqlOutput_4 = 0;

				boolean whetherReject_tPostgresqlOutput_4 = false;

				java.sql.Connection conn_tPostgresqlOutput_4 = null;

				conn_tPostgresqlOutput_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_4 = 10000;
				int batchSizeCounter_tPostgresqlOutput_4 = 0;

				int count_tPostgresqlOutput_4 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_4 = dbMetaData_tPostgresqlOutput_4
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_4 = false;
				while (rsTable_tPostgresqlOutput_4.next()) {
					String table_tPostgresqlOutput_4 = rsTable_tPostgresqlOutput_4
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_4 = rsTable_tPostgresqlOutput_4
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_4.equals(context.prefixe_table
							+ "local")
							&& (schema_tPostgresqlOutput_4
									.equals(dbschema_tPostgresqlOutput_4) || dbschema_tPostgresqlOutput_4
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_4 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_4.close();
				if (!whetherExist_tPostgresqlOutput_4) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
							.createStatement();
					stmtCreate_tPostgresqlOutput_4
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_4
									+ "\"(\"id_local\" INT4  not null ,\"id_dispoparc\" INT4  not null ,\"identifiant_local\" VARCHAR  not null ,\"code_type_local\" VARCHAR ,\"surface_reelle_batie\" NUMERIC ,\"nb_pieces_principales\" INT4 ,\"id_local_temp\" VARCHAR  not null ,\"id_dispoparc_temp\" VARCHAR  not null ,primary key(\"id_local\"))");
					stmtCreate_tPostgresqlOutput_4.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_4
								+ "\" WHERE \"id_local\" = ?");
				String insert_tPostgresqlOutput_4 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_4
						+ "\" (\"id_local\",\"id_dispoparc\",\"identifiant_local\",\"code_type_local\",\"surface_reelle_batie\",\"nb_pieces_principales\",\"id_local_temp\",\"id_dispoparc_temp\") VALUES (?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
						.prepareStatement(insert_tPostgresqlOutput_4);
				String update_tPostgresqlOutput_4 = "UPDATE \""
						+ tableName_tPostgresqlOutput_4
						+ "\" SET \"id_dispoparc\" = ?,\"identifiant_local\" = ?,\"code_type_local\" = ?,\"surface_reelle_batie\" = ?,\"nb_pieces_principales\" = ?,\"id_local_temp\" = ?,\"id_dispoparc_temp\" = ? WHERE \"id_local\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
						.prepareStatement(update_tPostgresqlOutput_4);

				/**
				 * [tPostgresqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());
				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				localStruct local_tmp = new localStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				context.target_path + "local.csv"/**
				 * End field
				 * tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('"');

						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						row9 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row9 = new row9Struct();
						try {

							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row9.id_local = 0;

								row9.id_dispoparc = 0;

								row9.identifiant_local = null;

								row9.code_type_local = null;

								row9.surface_reelle_batie = null;

								row9.nb_pieces_principales = null;

								row9.id_local_temp = null;

								row9.id_dispoparc_temp = null;

							} else {

								for (int i_tFileInputDelimited_4 = 0; i_tFileInputDelimited_4 < rowtFileInputDelimited_4.length; i_tFileInputDelimited_4++) {
									rowtFileInputDelimited_4[i_tFileInputDelimited_4] = rowtFileInputDelimited_4[i_tFileInputDelimited_4]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										row9.id_local = ParserUtils
												.parseTo_int(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										row9.id_local = 0;
									}

								} else {
									row9.id_local = 0;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										row9.id_dispoparc = ParserUtils
												.parseTo_int(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										row9.id_dispoparc = 0;
									}

								} else {
									row9.id_dispoparc = 0;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row9.identifiant_local = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row9.identifiant_local = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row9.code_type_local = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row9.code_type_local = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										row9.surface_reelle_batie = ParserUtils
												.parseTo_Double(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										row9.surface_reelle_batie = null;
									}

								} else {
									row9.surface_reelle_batie = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										row9.nb_pieces_principales = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										row9.nb_pieces_principales = null;
									}

								} else {
									row9.nb_pieces_principales = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row9.id_local_temp = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row9.id_local_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row9.id_dispoparc_temp = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row9.id_dispoparc_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row18"
							// /////////////////////////////////////////////

							boolean forceLooprow18 = false;

							row18Struct row18ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_7 = false;

								row18HashKey.id_dispoparc_temp = row9.id_dispoparc_temp;

								row18HashKey.hashCodeDirty = true;

								tHash_Lookup_row18.lookup(row18HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18
											.getCount(row18HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.id_dispoparc_temp = '"
								// + row18HashKey.id_dispoparc_temp + "'");
							} // G 071

							row18Struct row18 = null;

							row18Struct fromLookup_row18 = null;
							row18 = row18Default;

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18.hasNext()) { // G 099

								fromLookup_row18 = tHash_Lookup_row18.next();

							} // G 099

							if (fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								local = null;

								// # Output table : 'local'
								local_tmp.id_local = row9.id_local;
								local_tmp.id_dispoparc = row18.id_dispoparc;
								local_tmp.identifiant_local = row9.identifiant_local;
								local_tmp.code_type_local = row9.code_type_local;
								local_tmp.surface_reelle_batie = row9.surface_reelle_batie;
								local_tmp.nb_pieces_principales = row9.nb_pieces_principales;
								local_tmp.id_local_temp = row9.id_local_temp;
								local_tmp.id_dispoparc_temp = row9.id_dispoparc_temp;
								local = local_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */
							// Start of branch "local"
							if (local != null) {

								/**
								 * [tPostgresqlOutput_4 main ] start
								 */

								currentComponent = "tPostgresqlOutput_4";

								whetherReject_tPostgresqlOutput_4 = false;

								pstmt_tPostgresqlOutput_4.setInt(1,
										local.id_local);

								java.sql.ResultSet rs_tPostgresqlOutput_4 = pstmt_tPostgresqlOutput_4
										.executeQuery();
								int checkCount_tPostgresqlOutput_4 = -1;
								while (rs_tPostgresqlOutput_4.next()) {
									checkCount_tPostgresqlOutput_4 = rs_tPostgresqlOutput_4
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_4 > 0) {
									pstmtUpdate_tPostgresqlOutput_4.setInt(1,
											local.id_dispoparc);

									if (local.identifiant_local == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setString(2,
														local.identifiant_local);
									}

									if (local.code_type_local == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setString(3,
														local.code_type_local);
									}

									if (local.surface_reelle_batie == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(4,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setDouble(
														4,
														local.surface_reelle_batie);
									}

									if (local.nb_pieces_principales == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(5,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_4.setInt(
												5, local.nb_pieces_principales);
									}

									if (local.id_local_temp == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(6,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setString(6,
														local.id_local_temp);
									}

									if (local.id_dispoparc_temp == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setString(7,
														local.id_dispoparc_temp);
									}

									pstmtUpdate_tPostgresqlOutput_4.setInt(
											8 + count_tPostgresqlOutput_4,
											local.id_local);

									try {

										updatedCount_tPostgresqlOutput_4 = updatedCount_tPostgresqlOutput_4
												+ pstmtUpdate_tPostgresqlOutput_4
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_4 = true;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tPostgresqlOutput_4.setInt(1,
											local.id_local);

									pstmtInsert_tPostgresqlOutput_4.setInt(2,
											local.id_dispoparc);

									if (local.identifiant_local == null) {
										pstmtInsert_tPostgresqlOutput_4
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_4
												.setString(3,
														local.identifiant_local);
									}

									if (local.code_type_local == null) {
										pstmtInsert_tPostgresqlOutput_4
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_4
												.setString(4,
														local.code_type_local);
									}

									if (local.surface_reelle_batie == null) {
										pstmtInsert_tPostgresqlOutput_4
												.setNull(5,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_4
												.setDouble(
														5,
														local.surface_reelle_batie);
									}

									if (local.nb_pieces_principales == null) {
										pstmtInsert_tPostgresqlOutput_4
												.setNull(6,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_4.setInt(
												6, local.nb_pieces_principales);
									}

									if (local.id_local_temp == null) {
										pstmtInsert_tPostgresqlOutput_4
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_4
												.setString(7,
														local.id_local_temp);
									}

									if (local.id_dispoparc_temp == null) {
										pstmtInsert_tPostgresqlOutput_4
												.setNull(8,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_4
												.setString(8,
														local.id_dispoparc_temp);
									}

									try {

										insertedCount_tPostgresqlOutput_4 = insertedCount_tPostgresqlOutput_4
												+ pstmtInsert_tPostgresqlOutput_4
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_4 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tPostgresqlOutput_4++;
								if (batchSize_tPostgresqlOutput_4 <= batchSizeCounter_tPostgresqlOutput_4) {

								}

								tos_count_tPostgresqlOutput_4++;

								/**
								 * [tPostgresqlOutput_4 main ] stop
								 */

							} // End of branch "local"

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_4 end ] start
				 */

				currentComponent = "tPostgresqlOutput_4";

				if (pstmtUpdate_tPostgresqlOutput_4 != null) {

					pstmtUpdate_tPostgresqlOutput_4.close();

				}
				if (pstmtInsert_tPostgresqlOutput_4 != null) {

					pstmtInsert_tPostgresqlOutput_4.close();

				}
				if (pstmt_tPostgresqlOutput_4 != null) {

					pstmt_tPostgresqlOutput_4.close();

				}

				nb_line_deleted_tPostgresqlOutput_4 = nb_line_deleted_tPostgresqlOutput_4
						+ deletedCount_tPostgresqlOutput_4;
				nb_line_update_tPostgresqlOutput_4 = nb_line_update_tPostgresqlOutput_4
						+ updatedCount_tPostgresqlOutput_4;
				nb_line_inserted_tPostgresqlOutput_4 = nb_line_inserted_tPostgresqlOutput_4
						+ insertedCount_tPostgresqlOutput_4;
				nb_line_rejected_tPostgresqlOutput_4 = nb_line_rejected_tPostgresqlOutput_4
						+ rejectedCount_tPostgresqlOutput_4;

				globalMap.put("tPostgresqlOutput_4_NB_LINE",
						nb_line_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_4);

				ok_Hash.put("tPostgresqlOutput_4", true);
				end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_14Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row18");

		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class adresse_dispoparcStruct implements
			routines.system.IPersistableRow<adresse_dispoparcStruct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				result = prime * result + (int) this.id_dispoparc;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final adresse_dispoparcStruct other = (adresse_dispoparcStruct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			if (this.id_dispoparc != other.id_dispoparc)
				return false;

			return true;
		}

		public void copyDataTo(adresse_dispoparcStruct other) {

			other.id_adresse = this.id_adresse;
			other.id_dispoparc = this.id_dispoparc;
			other.id_adresse_temp = this.id_adresse_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(adresse_dispoparcStruct other) {

			other.id_adresse = this.id_adresse;
			other.id_dispoparc = this.id_dispoparc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_adresse_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.id_adresse_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(adresse_dispoparcStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_dispoparc,
					other.id_dispoparc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_adresse_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.id_adresse_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_14Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_14Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				result = prime * result + (int) this.id_dispoparc;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_14Struct other = (after_tFileInputDelimited_14Struct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			if (this.id_dispoparc != other.id_dispoparc)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_14Struct other) {

			other.id_adresse = this.id_adresse;
			other.id_dispoparc = this.id_dispoparc;
			other.id_adresse_temp = this.id_adresse_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_14Struct other) {

			other.id_adresse = this.id_adresse;
			other.id_dispoparc = this.id_dispoparc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_adresse_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.id_adresse_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_dispoparc,
					other.id_dispoparc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_10Process(globalMap);
				tPostgresqlInput_11Process(globalMap);

				row6Struct row6 = new row6Struct();
				adresse_dispoparcStruct adresse_dispoparc = new adresse_dispoparcStruct();

				/**
				 * [tPostgresqlOutput_14 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_14", false);
				start_Hash.put("tPostgresqlOutput_14",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_14";

				int tos_count_tPostgresqlOutput_14 = 0;

				String dbschema_tPostgresqlOutput_14 = null;
				dbschema_tPostgresqlOutput_14 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_14 = null;
				if (dbschema_tPostgresqlOutput_14 == null
						|| dbschema_tPostgresqlOutput_14.trim().length() == 0) {
					tableName_tPostgresqlOutput_14 = context.prefixe_table
							+ "adresse_dispoparc";
				} else {
					tableName_tPostgresqlOutput_14 = dbschema_tPostgresqlOutput_14
							+ "\".\""
							+ context.prefixe_table
							+ "adresse_dispoparc";
				}

				int updateKeyCount_tPostgresqlOutput_14 = 2;
				if (updateKeyCount_tPostgresqlOutput_14 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_14 = 0;
				int nb_line_update_tPostgresqlOutput_14 = 0;
				int nb_line_inserted_tPostgresqlOutput_14 = 0;
				int nb_line_deleted_tPostgresqlOutput_14 = 0;
				int nb_line_rejected_tPostgresqlOutput_14 = 0;

				int deletedCount_tPostgresqlOutput_14 = 0;
				int updatedCount_tPostgresqlOutput_14 = 0;
				int insertedCount_tPostgresqlOutput_14 = 0;
				int rejectedCount_tPostgresqlOutput_14 = 0;

				boolean whetherReject_tPostgresqlOutput_14 = false;

				java.sql.Connection conn_tPostgresqlOutput_14 = null;

				conn_tPostgresqlOutput_14 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_14 = 10000;
				int batchSizeCounter_tPostgresqlOutput_14 = 0;

				int count_tPostgresqlOutput_14 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_14 = conn_tPostgresqlOutput_14
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_14 = dbMetaData_tPostgresqlOutput_14
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_14 = false;
				while (rsTable_tPostgresqlOutput_14.next()) {
					String table_tPostgresqlOutput_14 = rsTable_tPostgresqlOutput_14
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_14 = rsTable_tPostgresqlOutput_14
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_14.equals(context.prefixe_table
							+ "adresse_dispoparc")
							&& (schema_tPostgresqlOutput_14
									.equals(dbschema_tPostgresqlOutput_14) || dbschema_tPostgresqlOutput_14
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_14 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_14.close();
				if (!whetherExist_tPostgresqlOutput_14) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_14 = conn_tPostgresqlOutput_14
							.createStatement();
					stmtCreate_tPostgresqlOutput_14
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_14
									+ "\"(\"id_adresse\" INT4  not null ,\"id_dispoparc\" INT4  not null ,\"id_adresse_temp\" VARCHAR  not null ,\"id_dispoparc_temp\" VARCHAR  not null ,primary key(\"id_adresse\",\"id_dispoparc\"))");
					stmtCreate_tPostgresqlOutput_14.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_14 = conn_tPostgresqlOutput_14
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_14
								+ "\" WHERE \"id_adresse\" = ? AND \"id_dispoparc\" = ?");
				String insert_tPostgresqlOutput_14 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_14
						+ "\" (\"id_adresse\",\"id_dispoparc\",\"id_adresse_temp\",\"id_dispoparc_temp\") VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_14 = conn_tPostgresqlOutput_14
						.prepareStatement(insert_tPostgresqlOutput_14);
				String update_tPostgresqlOutput_14 = "UPDATE \""
						+ tableName_tPostgresqlOutput_14
						+ "\" SET \"id_adresse_temp\" = ?,\"id_dispoparc_temp\" = ? WHERE \"id_adresse\" = ? AND \"id_dispoparc\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_14 = conn_tPostgresqlOutput_14
						.prepareStatement(update_tPostgresqlOutput_14);

				/**
				 * [tPostgresqlOutput_14 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());
				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) globalMap
						.get("tHash_Lookup_row19"));

				row19Struct row19HashKey = new row19Struct();
				row19Struct row19Default = new row19Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) globalMap
						.get("tHash_Lookup_row20"));

				row20Struct row20HashKey = new row20Struct();
				row20Struct row20Default = new row20Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				adresse_dispoparcStruct adresse_dispoparc_tmp = new adresse_dispoparcStruct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				int nb_line_tFileInputDelimited_14 = 0;
				int footer_tFileInputDelimited_14 = 0;
				int totalLinetFileInputDelimited_14 = 0;
				int limittFileInputDelimited_14 = -1;
				int lastLinetFileInputDelimited_14 = -1;

				char fieldSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_14 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_14 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_14 = /**
				 * Start field
				 * tFileInputDelimited_14:FILENAME
				 */
				context.target_path + "adresse_dispoparc.csv"/**
				 * End field
				 * tFileInputDelimited_14:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_14 = null;

				try {

					String[] rowtFileInputDelimited_14 = null;
					int currentLinetFileInputDelimited_14 = 0;
					int outputLinetFileInputDelimited_14 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_14 = 0;
							if (footer_value_tFileInputDelimited_14 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_14,
									fieldSeparator_tFileInputDelimited_14[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_14)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_14[0]);
						}

						csvReadertFileInputDelimited_14
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
							csvReadertFileInputDelimited_14.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_14[0]);

						csvReadertFileInputDelimited_14.setQuoteChar('"');

						csvReadertFileInputDelimited_14
								.setEscapeChar(csvReadertFileInputDelimited_14
										.getQuoteChar());

						if (footer_tFileInputDelimited_14 > 0) {
							for (totalLinetFileInputDelimited_14 = 0; totalLinetFileInputDelimited_14 < 1; totalLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
							csvReadertFileInputDelimited_14
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_14.readNext()) {

								rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
										.getValues();
								if (!(rowtFileInputDelimited_14.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_14[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_14++;

								}

							}
							int lastLineTemptFileInputDelimited_14 = totalLinetFileInputDelimited_14
									- footer_tFileInputDelimited_14 < 0 ? 0
									: totalLinetFileInputDelimited_14
											- footer_tFileInputDelimited_14;
							if (lastLinetFileInputDelimited_14 > 0) {
								lastLinetFileInputDelimited_14 = lastLinetFileInputDelimited_14 < lastLineTemptFileInputDelimited_14 ? lastLinetFileInputDelimited_14
										: lastLineTemptFileInputDelimited_14;
							} else {
								lastLinetFileInputDelimited_14 = lastLineTemptFileInputDelimited_14;
							}

							csvReadertFileInputDelimited_14.close();
							if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_14,
										fieldSeparator_tFileInputDelimited_14[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_14)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_14[0]);
							}
							csvReadertFileInputDelimited_14
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
								csvReadertFileInputDelimited_14
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_14[0]);

							csvReadertFileInputDelimited_14.setQuoteChar('"');

							csvReadertFileInputDelimited_14
									.setEscapeChar(csvReadertFileInputDelimited_14
											.getQuoteChar());

						}

						if (limittFileInputDelimited_14 != 0) {
							for (currentLinetFileInputDelimited_14 = 0; currentLinetFileInputDelimited_14 < 1; currentLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
						}
						csvReadertFileInputDelimited_14
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_14 != 0
							&& csvReadertFileInputDelimited_14 != null
							&& csvReadertFileInputDelimited_14.readNext()) {

						rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
								.getValues();

						if (rowtFileInputDelimited_14.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_14[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_14++;

						if (lastLinetFileInputDelimited_14 > -1
								&& currentLinetFileInputDelimited_14 > lastLinetFileInputDelimited_14) {
							break;
						}
						outputLinetFileInputDelimited_14++;
						if (limittFileInputDelimited_14 > 0
								&& outputLinetFileInputDelimited_14 > limittFileInputDelimited_14) {
							break;
						}

						row6 = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						row6 = new row6Struct();
						try {

							if (rowtFileInputDelimited_14.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_14[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row6.id_adresse = 0;

								row6.id_dispoparc = 0;

								row6.id_adresse_temp = null;

								row6.id_dispoparc_temp = null;

							} else {

								for (int i_tFileInputDelimited_14 = 0; i_tFileInputDelimited_14 < rowtFileInputDelimited_14.length; i_tFileInputDelimited_14++) {
									rowtFileInputDelimited_14[i_tFileInputDelimited_14] = rowtFileInputDelimited_14[i_tFileInputDelimited_14]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_14 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_14 = 0;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row6.id_adresse = ParserUtils
												.parseTo_int(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										row6.id_adresse = 0;
									}

								} else {
									row6.id_adresse = 0;
								}

								columnIndexWithD_tFileInputDelimited_14 = 1;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row6.id_dispoparc = ParserUtils
												.parseTo_int(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										row6.id_dispoparc = 0;
									}

								} else {
									row6.id_dispoparc = 0;
								}

								columnIndexWithD_tFileInputDelimited_14 = 2;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row6.id_adresse_temp = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row6.id_adresse_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 3;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row6.id_dispoparc_temp = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row6.id_dispoparc_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_8 main ] start
							 */

							currentComponent = "tMap_8";

							boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_8 = false;
							boolean mainRowRejected_tMap_8 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row19"
							// /////////////////////////////////////////////

							boolean forceLooprow19 = false;

							row19Struct row19ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_8 = false;

								row19HashKey.id_dispoparc_temp = row6.id_dispoparc_temp;

								row19HashKey.hashCodeDirty = true;

								tHash_Lookup_row19.lookup(row19HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row19 != null
									&& tHash_Lookup_row19
											.getCount(row19HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.id_dispoparc_temp = '"
								// + row19HashKey.id_dispoparc_temp + "'");
							} // G 071

							row19Struct row19 = null;

							row19Struct fromLookup_row19 = null;
							row19 = row19Default;

							if (tHash_Lookup_row19 != null
									&& tHash_Lookup_row19.hasNext()) { // G 099

								fromLookup_row19 = tHash_Lookup_row19.next();

							} // G 099

							if (fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row20"
							// /////////////////////////////////////////////

							boolean forceLooprow20 = false;

							row20Struct row20ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_8 = false;

								row20HashKey.id_adresse_temp = row6.id_adresse_temp;

								row20HashKey.hashCodeDirty = true;

								tHash_Lookup_row20.lookup(row20HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row20 != null
									&& tHash_Lookup_row20
											.getCount(row20HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.id_adresse_temp = '"
								// + row20HashKey.id_adresse_temp + "'");
							} // G 071

							row20Struct row20 = null;

							row20Struct fromLookup_row20 = null;
							row20 = row20Default;

							if (tHash_Lookup_row20 != null
									&& tHash_Lookup_row20.hasNext()) { // G 099

								fromLookup_row20 = tHash_Lookup_row20.next();

							} // G 099

							if (fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
								// ###############################
								// # Output tables

								adresse_dispoparc = null;

								// # Output table : 'adresse_dispoparc'
								adresse_dispoparc_tmp.id_adresse = row20.id_adresse;
								adresse_dispoparc_tmp.id_dispoparc = row19.id_dispoparc;
								adresse_dispoparc_tmp.id_adresse_temp = row6.id_adresse_temp;
								adresse_dispoparc_tmp.id_dispoparc_temp = row6.id_dispoparc_temp;
								adresse_dispoparc = adresse_dispoparc_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_8 = false;

							tos_count_tMap_8++;

							/**
							 * [tMap_8 main ] stop
							 */
							// Start of branch "adresse_dispoparc"
							if (adresse_dispoparc != null) {

								/**
								 * [tPostgresqlOutput_14 main ] start
								 */

								currentComponent = "tPostgresqlOutput_14";

								whetherReject_tPostgresqlOutput_14 = false;

								pstmt_tPostgresqlOutput_14.setInt(1,
										adresse_dispoparc.id_adresse);

								pstmt_tPostgresqlOutput_14.setInt(2,
										adresse_dispoparc.id_dispoparc);

								java.sql.ResultSet rs_tPostgresqlOutput_14 = pstmt_tPostgresqlOutput_14
										.executeQuery();
								int checkCount_tPostgresqlOutput_14 = -1;
								while (rs_tPostgresqlOutput_14.next()) {
									checkCount_tPostgresqlOutput_14 = rs_tPostgresqlOutput_14
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_14 > 0) {
									if (adresse_dispoparc.id_adresse_temp == null) {
										pstmtUpdate_tPostgresqlOutput_14
												.setNull(1,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_14
												.setString(
														1,
														adresse_dispoparc.id_adresse_temp);
									}

									if (adresse_dispoparc.id_dispoparc_temp == null) {
										pstmtUpdate_tPostgresqlOutput_14
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_14
												.setString(
														2,
														adresse_dispoparc.id_dispoparc_temp);
									}

									pstmtUpdate_tPostgresqlOutput_14.setInt(
											3 + count_tPostgresqlOutput_14,
											adresse_dispoparc.id_adresse);

									pstmtUpdate_tPostgresqlOutput_14.setInt(
											4 + count_tPostgresqlOutput_14,
											adresse_dispoparc.id_dispoparc);

									try {

										updatedCount_tPostgresqlOutput_14 = updatedCount_tPostgresqlOutput_14
												+ pstmtUpdate_tPostgresqlOutput_14
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_14 = true;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tPostgresqlOutput_14.setInt(1,
											adresse_dispoparc.id_adresse);

									pstmtInsert_tPostgresqlOutput_14.setInt(2,
											adresse_dispoparc.id_dispoparc);

									if (adresse_dispoparc.id_adresse_temp == null) {
										pstmtInsert_tPostgresqlOutput_14
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_14
												.setString(
														3,
														adresse_dispoparc.id_adresse_temp);
									}

									if (adresse_dispoparc.id_dispoparc_temp == null) {
										pstmtInsert_tPostgresqlOutput_14
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_14
												.setString(
														4,
														adresse_dispoparc.id_dispoparc_temp);
									}

									try {

										insertedCount_tPostgresqlOutput_14 = insertedCount_tPostgresqlOutput_14
												+ pstmtInsert_tPostgresqlOutput_14
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_14 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tPostgresqlOutput_14++;
								if (batchSize_tPostgresqlOutput_14 <= batchSizeCounter_tPostgresqlOutput_14) {

								}

								tos_count_tPostgresqlOutput_14++;

								/**
								 * [tPostgresqlOutput_14 main ] stop
								 */

							} // End of branch "adresse_dispoparc"

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						nb_line_tFileInputDelimited_14++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_14 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_14 != null) {
							csvReadertFileInputDelimited_14.close();
						}
					}
					if (csvReadertFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE",
								nb_line_tFileInputDelimited_14);
					}
				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row19 != null) {
					tHash_Lookup_row19.endGet();
				}
				globalMap.remove("tHash_Lookup_row19");

				if (tHash_Lookup_row20 != null) {
					tHash_Lookup_row20.endGet();
				}
				globalMap.remove("tHash_Lookup_row20");

				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_14 end ] start
				 */

				currentComponent = "tPostgresqlOutput_14";

				if (pstmtUpdate_tPostgresqlOutput_14 != null) {

					pstmtUpdate_tPostgresqlOutput_14.close();

				}
				if (pstmtInsert_tPostgresqlOutput_14 != null) {

					pstmtInsert_tPostgresqlOutput_14.close();

				}
				if (pstmt_tPostgresqlOutput_14 != null) {

					pstmt_tPostgresqlOutput_14.close();

				}

				nb_line_deleted_tPostgresqlOutput_14 = nb_line_deleted_tPostgresqlOutput_14
						+ deletedCount_tPostgresqlOutput_14;
				nb_line_update_tPostgresqlOutput_14 = nb_line_update_tPostgresqlOutput_14
						+ updatedCount_tPostgresqlOutput_14;
				nb_line_inserted_tPostgresqlOutput_14 = nb_line_inserted_tPostgresqlOutput_14
						+ insertedCount_tPostgresqlOutput_14;
				nb_line_rejected_tPostgresqlOutput_14 = nb_line_rejected_tPostgresqlOutput_14
						+ rejectedCount_tPostgresqlOutput_14;

				globalMap.put("tPostgresqlOutput_14_NB_LINE",
						nb_line_tPostgresqlOutput_14);
				globalMap.put("tPostgresqlOutput_14_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_14);
				globalMap.put("tPostgresqlOutput_14_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_14);
				globalMap.put("tPostgresqlOutput_14_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_14);
				globalMap.put("tPostgresqlOutput_14_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_14);

				ok_Hash.put("tPostgresqlOutput_14", true);
				end_Hash.put("tPostgresqlOutput_14", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_14 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_14:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_15Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row19");

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row20");

		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public static class lotStruct implements
			routines.system.IPersistableRow<lotStruct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_lot;

		public int getId_lot() {
			return this.id_lot;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_volume;

		public Integer getId_volume() {
			return this.id_volume;
		}

		public String no_lot;

		public String getNo_lot() {
			return this.no_lot;
		}

		public Double surface_carrez;

		public Double getSurface_carrez() {
			return this.surface_carrez;
		}

		public String id_lot_temp;

		public String getId_lot_temp() {
			return this.id_lot_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_lot;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lotStruct other = (lotStruct) obj;

			if (this.id_lot != other.id_lot)
				return false;

			return true;
		}

		public void copyDataTo(lotStruct other) {

			other.id_lot = this.id_lot;
			other.id_dispoparc = this.id_dispoparc;
			other.id_local = this.id_local;
			other.id_volume = this.id_volume;
			other.no_lot = this.no_lot;
			other.surface_carrez = this.surface_carrez;
			other.id_lot_temp = this.id_lot_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_local_temp = this.id_local_temp;
			other.id_volume_temp = this.id_volume_temp;

		}

		public void copyKeysDataTo(lotStruct other) {

			other.id_lot = this.id_lot;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_lot = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_local = readInteger(dis);

					this.id_volume = readInteger(dis);

					this.no_lot = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez = null;
					} else {
						this.surface_carrez = dis.readDouble();
					}

					this.id_lot_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_lot);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_volume, dos);

				// String

				writeString(this.no_lot, dos);

				// Double

				if (this.surface_carrez == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez);
				}

				// String

				writeString(this.id_lot_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_lot=" + String.valueOf(id_lot));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_volume=" + String.valueOf(id_volume));
			sb.append(",no_lot=" + no_lot);
			sb.append(",surface_carrez=" + String.valueOf(surface_carrez));
			sb.append(",id_lot_temp=" + id_lot_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lotStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_lot, other.id_lot);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];

		public int id_lot;

		public int getId_lot() {
			return this.id_lot;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_volume;

		public Integer getId_volume() {
			return this.id_volume;
		}

		public String no_lot;

		public String getNo_lot() {
			return this.no_lot;
		}

		public Double surface_carrez;

		public Double getSurface_carrez() {
			return this.surface_carrez;
		}

		public String id_lot_temp;

		public String getId_lot_temp() {
			return this.id_lot_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_lot = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_local = readInteger(dis);

					this.id_volume = readInteger(dis);

					this.no_lot = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez = null;
					} else {
						this.surface_carrez = dis.readDouble();
					}

					this.id_lot_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_lot);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_volume, dos);

				// String

				writeString(this.no_lot, dos);

				// Double

				if (this.surface_carrez == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez);
				}

				// String

				writeString(this.id_lot_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_lot=" + String.valueOf(id_lot));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_volume=" + String.valueOf(id_volume));
			sb.append(",no_lot=" + no_lot);
			sb.append(",surface_carrez=" + String.valueOf(surface_carrez));
			sb.append(",id_lot_temp=" + id_lot_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_15Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_15Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_lot;

		public int getId_lot() {
			return this.id_lot;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_volume;

		public Integer getId_volume() {
			return this.id_volume;
		}

		public String no_lot;

		public String getNo_lot() {
			return this.no_lot;
		}

		public Double surface_carrez;

		public Double getSurface_carrez() {
			return this.surface_carrez;
		}

		public String id_lot_temp;

		public String getId_lot_temp() {
			return this.id_lot_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_lot;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_15Struct other = (after_tFileInputDelimited_15Struct) obj;

			if (this.id_lot != other.id_lot)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_15Struct other) {

			other.id_lot = this.id_lot;
			other.id_dispoparc = this.id_dispoparc;
			other.id_local = this.id_local;
			other.id_volume = this.id_volume;
			other.no_lot = this.no_lot;
			other.surface_carrez = this.surface_carrez;
			other.id_lot_temp = this.id_lot_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_local_temp = this.id_local_temp;
			other.id_volume_temp = this.id_volume_temp;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_15Struct other) {

			other.id_lot = this.id_lot;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_lot = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_local = readInteger(dis);

					this.id_volume = readInteger(dis);

					this.no_lot = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez = null;
					} else {
						this.surface_carrez = dis.readDouble();
					}

					this.id_lot_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_lot);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_volume, dos);

				// String

				writeString(this.no_lot, dos);

				// Double

				if (this.surface_carrez == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez);
				}

				// String

				writeString(this.id_lot_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_lot=" + String.valueOf(id_lot));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_volume=" + String.valueOf(id_volume));
			sb.append(",no_lot=" + no_lot);
			sb.append(",surface_carrez=" + String.valueOf(surface_carrez));
			sb.append(",id_lot_temp=" + id_lot_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_lot, other.id_lot);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_12Process(globalMap);
				tPostgresqlInput_13Process(globalMap);
				tPostgresqlInput_14Process(globalMap);

				row7Struct row7 = new row7Struct();
				lotStruct lot = new lotStruct();

				/**
				 * [tPostgresqlOutput_15 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_15", false);
				start_Hash.put("tPostgresqlOutput_15",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_15";

				int tos_count_tPostgresqlOutput_15 = 0;

				String dbschema_tPostgresqlOutput_15 = null;
				dbschema_tPostgresqlOutput_15 = context.db_schema;

				String tableName_tPostgresqlOutput_15 = null;
				if (dbschema_tPostgresqlOutput_15 == null
						|| dbschema_tPostgresqlOutput_15.trim().length() == 0) {
					tableName_tPostgresqlOutput_15 = context.prefixe_table
							+ "lot";
				} else {
					tableName_tPostgresqlOutput_15 = dbschema_tPostgresqlOutput_15
							+ "\".\"" + context.prefixe_table + "lot";
				}

				int updateKeyCount_tPostgresqlOutput_15 = 1;
				if (updateKeyCount_tPostgresqlOutput_15 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_15 = 0;
				int nb_line_update_tPostgresqlOutput_15 = 0;
				int nb_line_inserted_tPostgresqlOutput_15 = 0;
				int nb_line_deleted_tPostgresqlOutput_15 = 0;
				int nb_line_rejected_tPostgresqlOutput_15 = 0;

				int deletedCount_tPostgresqlOutput_15 = 0;
				int updatedCount_tPostgresqlOutput_15 = 0;
				int insertedCount_tPostgresqlOutput_15 = 0;
				int rejectedCount_tPostgresqlOutput_15 = 0;

				boolean whetherReject_tPostgresqlOutput_15 = false;

				java.sql.Connection conn_tPostgresqlOutput_15 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_15 = "jdbc:postgresql://"
						+ context.db_host + ":" + context.db_port + "/"
						+ context.db_name;
				String dbUser_tPostgresqlOutput_15 = context.db_login;
				String dbPwd_tPostgresqlOutput_15 = context.db_password;
				conn_tPostgresqlOutput_15 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_15,
								dbUser_tPostgresqlOutput_15,
								dbPwd_tPostgresqlOutput_15);
				conn_tPostgresqlOutput_15.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_15 = 10000;
				int commitCounter_tPostgresqlOutput_15 = 0;

				int batchSize_tPostgresqlOutput_15 = 10000;
				int batchSizeCounter_tPostgresqlOutput_15 = 0;

				int count_tPostgresqlOutput_15 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_15 = conn_tPostgresqlOutput_15
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_15 = dbMetaData_tPostgresqlOutput_15
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_15 = false;
				while (rsTable_tPostgresqlOutput_15.next()) {
					String table_tPostgresqlOutput_15 = rsTable_tPostgresqlOutput_15
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_15 = rsTable_tPostgresqlOutput_15
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_15.equals(context.prefixe_table
							+ "lot")
							&& (schema_tPostgresqlOutput_15
									.equals(dbschema_tPostgresqlOutput_15) || dbschema_tPostgresqlOutput_15
									.trim().length() == 0)) {
						whetherExist_tPostgresqlOutput_15 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_15.close();
				if (!whetherExist_tPostgresqlOutput_15) {
					java.sql.Statement stmtCreate_tPostgresqlOutput_15 = conn_tPostgresqlOutput_15
							.createStatement();
					stmtCreate_tPostgresqlOutput_15
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_15
									+ "\"(\"id_lot\" INT4  not null ,\"id_dispoparc\" INT4  not null ,\"id_local\" INT4 ,\"id_volume\" INT4 ,\"no_lot\" VARCHAR ,\"surface_carrez\" NUMERIC ,\"id_lot_temp\" VARCHAR ,\"id_dispoparc_temp\" VARCHAR ,\"id_local_temp\" VARCHAR ,\"id_volume_temp\" VARCHAR ,primary key(\"id_lot\"))");
					stmtCreate_tPostgresqlOutput_15.close();
				}
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_15 = conn_tPostgresqlOutput_15
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_15
								+ "\" WHERE \"id_lot\" = ?");
				String insert_tPostgresqlOutput_15 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_15
						+ "\" (\"id_lot\",\"id_dispoparc\",\"id_local\",\"id_volume\",\"no_lot\",\"surface_carrez\",\"id_lot_temp\",\"id_dispoparc_temp\",\"id_local_temp\",\"id_volume_temp\") VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_15 = conn_tPostgresqlOutput_15
						.prepareStatement(insert_tPostgresqlOutput_15);
				String update_tPostgresqlOutput_15 = "UPDATE \""
						+ tableName_tPostgresqlOutput_15
						+ "\" SET \"id_dispoparc\" = ?,\"id_local\" = ?,\"id_volume\" = ?,\"no_lot\" = ?,\"surface_carrez\" = ?,\"id_lot_temp\" = ?,\"id_dispoparc_temp\" = ?,\"id_local_temp\" = ?,\"id_volume_temp\" = ? WHERE \"id_lot\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_15 = conn_tPostgresqlOutput_15
						.prepareStatement(update_tPostgresqlOutput_15);

				/**
				 * [tPostgresqlOutput_15 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());
				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) globalMap
						.get("tHash_Lookup_row21"));

				row21Struct row21HashKey = new row21Struct();
				row21Struct row21Default = new row21Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) globalMap
						.get("tHash_Lookup_row23"));

				row23Struct row23HashKey = new row23Struct();
				row23Struct row23Default = new row23Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lotStruct lot_tmp = new lotStruct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				int nb_line_tFileInputDelimited_15 = 0;
				int footer_tFileInputDelimited_15 = 0;
				int totalLinetFileInputDelimited_15 = 0;
				int limittFileInputDelimited_15 = -1;
				int lastLinetFileInputDelimited_15 = -1;

				char fieldSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_15 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_15 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_15 = /**
				 * Start field
				 * tFileInputDelimited_15:FILENAME
				 */
				context.target_path + "local.csv"/**
				 * End field
				 * tFileInputDelimited_15:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_15 = null;

				try {

					String[] rowtFileInputDelimited_15 = null;
					int currentLinetFileInputDelimited_15 = 0;
					int outputLinetFileInputDelimited_15 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_15 = 0;
							if (footer_value_tFileInputDelimited_15 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_15,
									fieldSeparator_tFileInputDelimited_15[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_15)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_15[0]);
						}

						csvReadertFileInputDelimited_15
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
							csvReadertFileInputDelimited_15.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_15[0]);

						csvReadertFileInputDelimited_15.setQuoteChar('"');

						csvReadertFileInputDelimited_15
								.setEscapeChar(csvReadertFileInputDelimited_15
										.getQuoteChar());

						if (footer_tFileInputDelimited_15 > 0) {
							for (totalLinetFileInputDelimited_15 = 0; totalLinetFileInputDelimited_15 < 1; totalLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
							csvReadertFileInputDelimited_15
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_15.readNext()) {

								rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
										.getValues();
								if (!(rowtFileInputDelimited_15.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_15[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_15++;

								}

							}
							int lastLineTemptFileInputDelimited_15 = totalLinetFileInputDelimited_15
									- footer_tFileInputDelimited_15 < 0 ? 0
									: totalLinetFileInputDelimited_15
											- footer_tFileInputDelimited_15;
							if (lastLinetFileInputDelimited_15 > 0) {
								lastLinetFileInputDelimited_15 = lastLinetFileInputDelimited_15 < lastLineTemptFileInputDelimited_15 ? lastLinetFileInputDelimited_15
										: lastLineTemptFileInputDelimited_15;
							} else {
								lastLinetFileInputDelimited_15 = lastLineTemptFileInputDelimited_15;
							}

							csvReadertFileInputDelimited_15.close();
							if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_15,
										fieldSeparator_tFileInputDelimited_15[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_15)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_15[0]);
							}
							csvReadertFileInputDelimited_15
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
								csvReadertFileInputDelimited_15
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_15[0]);

							csvReadertFileInputDelimited_15.setQuoteChar('"');

							csvReadertFileInputDelimited_15
									.setEscapeChar(csvReadertFileInputDelimited_15
											.getQuoteChar());

						}

						if (limittFileInputDelimited_15 != 0) {
							for (currentLinetFileInputDelimited_15 = 0; currentLinetFileInputDelimited_15 < 1; currentLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
						}
						csvReadertFileInputDelimited_15
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_15 != 0
							&& csvReadertFileInputDelimited_15 != null
							&& csvReadertFileInputDelimited_15.readNext()) {

						rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
								.getValues();

						if (rowtFileInputDelimited_15.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_15[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_15++;

						if (lastLinetFileInputDelimited_15 > -1
								&& currentLinetFileInputDelimited_15 > lastLinetFileInputDelimited_15) {
							break;
						}
						outputLinetFileInputDelimited_15++;
						if (limittFileInputDelimited_15 > 0
								&& outputLinetFileInputDelimited_15 > limittFileInputDelimited_15) {
							break;
						}

						row7 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row7 = new row7Struct();
						try {

							if (rowtFileInputDelimited_15.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_15[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row7.id_lot = 0;

								row7.id_dispoparc = 0;

								row7.id_local = null;

								row7.id_volume = null;

								row7.no_lot = null;

								row7.surface_carrez = null;

								row7.id_lot_temp = null;

								row7.id_dispoparc_temp = null;

								row7.id_local_temp = null;

								row7.id_volume_temp = null;

							} else {

								for (int i_tFileInputDelimited_15 = 0; i_tFileInputDelimited_15 < rowtFileInputDelimited_15.length; i_tFileInputDelimited_15++) {
									rowtFileInputDelimited_15[i_tFileInputDelimited_15] = rowtFileInputDelimited_15[i_tFileInputDelimited_15]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_15 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_15 = 0;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row7.id_lot = ParserUtils
												.parseTo_int(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row7.id_lot = 0;
									}

								} else {
									row7.id_lot = 0;
								}

								columnIndexWithD_tFileInputDelimited_15 = 1;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row7.id_dispoparc = ParserUtils
												.parseTo_int(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row7.id_dispoparc = 0;
									}

								} else {
									row7.id_dispoparc = 0;
								}

								columnIndexWithD_tFileInputDelimited_15 = 2;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row7.id_local = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row7.id_local = null;
									}

								} else {
									row7.id_local = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 3;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row7.id_volume = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row7.id_volume = null;
									}

								} else {
									row7.id_volume = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 4;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row7.no_lot = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row7.no_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 5;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row7.surface_carrez = ParserUtils
												.parseTo_Double(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row7.surface_carrez = null;
									}

								} else {
									row7.surface_carrez = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 6;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row7.id_lot_temp = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row7.id_lot_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 7;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row7.id_dispoparc_temp = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row7.id_dispoparc_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 8;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row7.id_local_temp = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row7.id_local_temp = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 9;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row7.id_volume_temp = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row7.id_volume_temp = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tMap_9 main ] start
							 */

							currentComponent = "tMap_9";

							boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_9 = false;
							boolean mainRowRejected_tMap_9 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row21"
							// /////////////////////////////////////////////

							boolean forceLooprow21 = false;

							row21Struct row21ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_9 = false;

								row21HashKey.id_dispoparc_temp = row7.id_dispoparc_temp;

								row21HashKey.hashCodeDirty = true;

								tHash_Lookup_row21.lookup(row21HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row21 != null
									&& tHash_Lookup_row21
											.getCount(row21HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.id_dispoparc_temp = '"
								// + row21HashKey.id_dispoparc_temp + "'");
							} // G 071

							row21Struct row21 = null;

							row21Struct fromLookup_row21 = null;
							row21 = row21Default;

							if (tHash_Lookup_row21 != null
									&& tHash_Lookup_row21.hasNext()) { // G 099

								fromLookup_row21 = tHash_Lookup_row21.next();

							} // G 099

							if (fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row22"
							// /////////////////////////////////////////////

							boolean forceLooprow22 = false;

							row22Struct row22ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_9 = false;

								row22HashKey.id_local_temp = row7.id_local_temp;

								row22HashKey.hashCodeDirty = true;

								tHash_Lookup_row22.lookup(row22HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row22 != null
									&& tHash_Lookup_row22
											.getCount(row22HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.id_local_temp = '"
								// + row22HashKey.id_local_temp + "'");
							} // G 071

							row22Struct row22 = null;

							row22Struct fromLookup_row22 = null;
							row22 = row22Default;

							if (tHash_Lookup_row22 != null
									&& tHash_Lookup_row22.hasNext()) { // G 099

								fromLookup_row22 = tHash_Lookup_row22.next();

							} // G 099

							if (fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row23"
							// /////////////////////////////////////////////

							boolean forceLooprow23 = false;

							row23Struct row23ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_9 = false;

								row23HashKey.id_volume_temp = row7.id_volume_temp;

								row23HashKey.hashCodeDirty = true;

								tHash_Lookup_row23.lookup(row23HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row23 != null
									&& tHash_Lookup_row23
											.getCount(row23HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.id_volume_temp = '"
								// + row23HashKey.id_volume_temp + "'");
							} // G 071

							row23Struct row23 = null;

							row23Struct fromLookup_row23 = null;
							row23 = row23Default;

							if (tHash_Lookup_row23 != null
									&& tHash_Lookup_row23.hasNext()) { // G 099

								fromLookup_row23 = tHash_Lookup_row23.next();

							} // G 099

							if (fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
								// ###############################
								// # Output tables

								lot = null;

								// # Output table : 'lot'
								lot_tmp.id_lot = row7.id_lot;
								lot_tmp.id_dispoparc = row21.id_dispoparc;
								lot_tmp.id_local = row22.id_local;
								lot_tmp.id_volume = row23.id_volume;
								lot_tmp.no_lot = row7.no_lot;
								lot_tmp.surface_carrez = row7.surface_carrez;
								lot_tmp.id_lot_temp = row7.id_lot_temp;
								lot_tmp.id_dispoparc_temp = row7.id_dispoparc_temp;
								lot_tmp.id_local_temp = row7.id_local_temp;
								lot_tmp.id_volume_temp = row7.id_volume_temp;
								lot = lot_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_9 = false;

							tos_count_tMap_9++;

							/**
							 * [tMap_9 main ] stop
							 */
							// Start of branch "lot"
							if (lot != null) {

								/**
								 * [tPostgresqlOutput_15 main ] start
								 */

								currentComponent = "tPostgresqlOutput_15";

								whetherReject_tPostgresqlOutput_15 = false;

								pstmt_tPostgresqlOutput_15
										.setInt(1, lot.id_lot);

								java.sql.ResultSet rs_tPostgresqlOutput_15 = pstmt_tPostgresqlOutput_15
										.executeQuery();
								int checkCount_tPostgresqlOutput_15 = -1;
								while (rs_tPostgresqlOutput_15.next()) {
									checkCount_tPostgresqlOutput_15 = rs_tPostgresqlOutput_15
											.getInt(1);
								}
								if (checkCount_tPostgresqlOutput_15 > 0) {
									pstmtUpdate_tPostgresqlOutput_15.setInt(1,
											lot.id_dispoparc);

									if (lot.id_local == null) {
										pstmtUpdate_tPostgresqlOutput_15
												.setNull(2,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_15
												.setInt(2, lot.id_local);
									}

									if (lot.id_volume == null) {
										pstmtUpdate_tPostgresqlOutput_15
												.setNull(3,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_15
												.setInt(3, lot.id_volume);
									}

									if (lot.no_lot == null) {
										pstmtUpdate_tPostgresqlOutput_15
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_15
												.setString(4, lot.no_lot);
									}

									if (lot.surface_carrez == null) {
										pstmtUpdate_tPostgresqlOutput_15
												.setNull(5,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_15
												.setDouble(5,
														lot.surface_carrez);
									}

									if (lot.id_lot_temp == null) {
										pstmtUpdate_tPostgresqlOutput_15
												.setNull(6,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_15
												.setString(6, lot.id_lot_temp);
									}

									if (lot.id_dispoparc_temp == null) {
										pstmtUpdate_tPostgresqlOutput_15
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_15
												.setString(7,
														lot.id_dispoparc_temp);
									}

									if (lot.id_local_temp == null) {
										pstmtUpdate_tPostgresqlOutput_15
												.setNull(8,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_15
												.setString(8, lot.id_local_temp);
									}

									if (lot.id_volume_temp == null) {
										pstmtUpdate_tPostgresqlOutput_15
												.setNull(9,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_15
												.setString(9,
														lot.id_volume_temp);
									}

									pstmtUpdate_tPostgresqlOutput_15.setInt(
											10 + count_tPostgresqlOutput_15,
											lot.id_lot);

									try {

										updatedCount_tPostgresqlOutput_15 = updatedCount_tPostgresqlOutput_15
												+ pstmtUpdate_tPostgresqlOutput_15
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_15 = true;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tPostgresqlOutput_15.setInt(1,
											lot.id_lot);

									pstmtInsert_tPostgresqlOutput_15.setInt(2,
											lot.id_dispoparc);

									if (lot.id_local == null) {
										pstmtInsert_tPostgresqlOutput_15
												.setNull(3,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_15
												.setInt(3, lot.id_local);
									}

									if (lot.id_volume == null) {
										pstmtInsert_tPostgresqlOutput_15
												.setNull(4,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_15
												.setInt(4, lot.id_volume);
									}

									if (lot.no_lot == null) {
										pstmtInsert_tPostgresqlOutput_15
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_15
												.setString(5, lot.no_lot);
									}

									if (lot.surface_carrez == null) {
										pstmtInsert_tPostgresqlOutput_15
												.setNull(6,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_15
												.setDouble(6,
														lot.surface_carrez);
									}

									if (lot.id_lot_temp == null) {
										pstmtInsert_tPostgresqlOutput_15
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_15
												.setString(7, lot.id_lot_temp);
									}

									if (lot.id_dispoparc_temp == null) {
										pstmtInsert_tPostgresqlOutput_15
												.setNull(8,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_15
												.setString(8,
														lot.id_dispoparc_temp);
									}

									if (lot.id_local_temp == null) {
										pstmtInsert_tPostgresqlOutput_15
												.setNull(9,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_15
												.setString(9, lot.id_local_temp);
									}

									if (lot.id_volume_temp == null) {
										pstmtInsert_tPostgresqlOutput_15
												.setNull(10,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_15
												.setString(10,
														lot.id_volume_temp);
									}

									try {

										insertedCount_tPostgresqlOutput_15 = insertedCount_tPostgresqlOutput_15
												+ pstmtInsert_tPostgresqlOutput_15
														.executeUpdate();

									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_15 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tPostgresqlOutput_15++;
								if (batchSize_tPostgresqlOutput_15 <= batchSizeCounter_tPostgresqlOutput_15) {

								}

								commitCounter_tPostgresqlOutput_15++;
								if (commitEvery_tPostgresqlOutput_15 <= commitCounter_tPostgresqlOutput_15) {

									conn_tPostgresqlOutput_15.commit();
									commitCounter_tPostgresqlOutput_15 = 0;
								}

								tos_count_tPostgresqlOutput_15++;

								/**
								 * [tPostgresqlOutput_15 main ] stop
								 */

							} // End of branch "lot"

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						nb_line_tFileInputDelimited_15++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_15 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_15 != null) {
							csvReadertFileInputDelimited_15.close();
						}
					}
					if (csvReadertFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE",
								nb_line_tFileInputDelimited_15);
					}
				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row21 != null) {
					tHash_Lookup_row21.endGet();
				}
				globalMap.remove("tHash_Lookup_row21");

				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

				if (tHash_Lookup_row23 != null) {
					tHash_Lookup_row23.endGet();
				}
				globalMap.remove("tHash_Lookup_row23");

				// ###############################

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_15 end ] start
				 */

				currentComponent = "tPostgresqlOutput_15";

				if (pstmtUpdate_tPostgresqlOutput_15 != null) {

					pstmtUpdate_tPostgresqlOutput_15.close();

				}
				if (pstmtInsert_tPostgresqlOutput_15 != null) {

					pstmtInsert_tPostgresqlOutput_15.close();

				}
				if (pstmt_tPostgresqlOutput_15 != null) {

					pstmt_tPostgresqlOutput_15.close();

				}

				conn_tPostgresqlOutput_15.commit();
				conn_tPostgresqlOutput_15.close();

				nb_line_deleted_tPostgresqlOutput_15 = nb_line_deleted_tPostgresqlOutput_15
						+ deletedCount_tPostgresqlOutput_15;
				nb_line_update_tPostgresqlOutput_15 = nb_line_update_tPostgresqlOutput_15
						+ updatedCount_tPostgresqlOutput_15;
				nb_line_inserted_tPostgresqlOutput_15 = nb_line_inserted_tPostgresqlOutput_15
						+ insertedCount_tPostgresqlOutput_15;
				nb_line_rejected_tPostgresqlOutput_15 = nb_line_rejected_tPostgresqlOutput_15
						+ rejectedCount_tPostgresqlOutput_15;

				globalMap.put("tPostgresqlOutput_15_NB_LINE",
						nb_line_tPostgresqlOutput_15);
				globalMap.put("tPostgresqlOutput_15_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_15);
				globalMap.put("tPostgresqlOutput_15_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_15);
				globalMap.put("tPostgresqlOutput_15_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_15);
				globalMap.put("tPostgresqlOutput_15_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_15);

				ok_Hash.put("tPostgresqlOutput_15", true);
				end_Hash.put("tPostgresqlOutput_15", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row21");

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row22");

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row23");

		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public Integer no_disposition;

		public Integer getNo_disposition() {
			return this.no_disposition;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_disposition_temp == null) ? 0
								: this.id_disposition_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.id_disposition_temp == null) {
				if (other.id_disposition_temp != null)
					return false;
			} else if (!this.id_disposition_temp
					.equals(other.id_disposition_temp))
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.id_disposition = this.id_disposition;
			other.id_mutation = this.id_mutation;
			other.no_disposition = this.no_disposition;
			other.valeur_fonciere = this.valeur_fonciere;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.id_disposition_temp = this.id_disposition_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_disposition_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_disposition_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_disposition = dis.readInt();

				this.id_mutation = dis.readInt();

				this.no_disposition = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.valeur_fonciere = null;
				} else {
					this.valeur_fonciere = dis.readDouble();
				}

				this.id_mutation_temp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_disposition);

				dos.writeInt(this.id_mutation);

				writeInteger(this.no_disposition, dos, oos);

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				writeString(this.id_mutation_temp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_mutation=" + String.valueOf(id_mutation));
			sb.append(",no_disposition=" + String.valueOf(no_disposition));
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_disposition_temp,
					other.id_disposition_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_3 - inputs:(row3,row14,row15)
				// outputs:(dispoparc)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct> getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				conn_tPostgresqlInput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_3 = dataSources_tPostgresqlInput_3
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_3);
				}

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT  \""
						+ context.prefixe_table + "disposition"
						+ "\".\"id_disposition\",  \"" + context.prefixe_table
						+ "disposition" + "\".\"id_mutation\",  \""
						+ context.prefixe_table + "disposition"
						+ "\".\"no_disposition\",  \"" + context.prefixe_table
						+ "disposition" + "\".\"valeur_fonciere\",  \""
						+ context.prefixe_table + "disposition"
						+ "\".\"id_disposition_temp\",  \""
						+ context.prefixe_table + "disposition"
						+ "\".\"id_mutation_temp\" FROM \""
						+ context.prefixe_table + "disposition" + "\"";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);

				java.sql.ResultSet rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
						.executeQuery(dbquery_tPostgresqlInput_3);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
						.getColumnCount();

				String tmpContent_tPostgresqlInput_3 = null;
				int column_index_tPostgresqlInput_3 = 1;
				while (rs_tPostgresqlInput_3.next()) {
					nb_line_tPostgresqlInput_3++;

					column_index_tPostgresqlInput_3 = 1;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row14.id_disposition = 0;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row14.id_disposition = rs_tPostgresqlInput_3
									.getInt(column_index_tPostgresqlInput_3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_3 = 2;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row14.id_mutation = 0;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row14.id_mutation = rs_tPostgresqlInput_3
									.getInt(column_index_tPostgresqlInput_3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_3 = 3;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row14.no_disposition = null;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row14.no_disposition = rs_tPostgresqlInput_3
									.getInt(column_index_tPostgresqlInput_3);
						} else {
							row14.no_disposition = null;
						}

					}
					column_index_tPostgresqlInput_3 = 4;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row14.valeur_fonciere = null;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row14.valeur_fonciere = rs_tPostgresqlInput_3
									.getDouble(column_index_tPostgresqlInput_3);
						} else {
							row14.valeur_fonciere = null;
						}

					}
					column_index_tPostgresqlInput_3 = 5;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row14.id_disposition_temp = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row14.id_disposition_temp = tmpContent_tPostgresqlInput_3;
						} else {
							row14.id_disposition_temp = null;
						}

					}
					column_index_tPostgresqlInput_3 = 6;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row14.id_mutation_temp = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row14.id_mutation_temp = tmpContent_tPostgresqlInput_3;
						} else {
							row14.id_mutation_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_3 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_3 main ] start
					 */

					currentComponent = "tPostgresqlInput_3";

					tos_count_tPostgresqlInput_3++;

					/**
					 * [tPostgresqlInput_3 main ] stop
					 */

					/**
					 * [tAdvancedHash_row14 main ] start
					 */

					currentComponent = "tAdvancedHash_row14";

					row14Struct row14_HashRow = new row14Struct();

					row14_HashRow.id_disposition = row14.id_disposition;

					row14_HashRow.id_mutation = row14.id_mutation;

					row14_HashRow.no_disposition = row14.no_disposition;

					row14_HashRow.valeur_fonciere = row14.valeur_fonciere;

					row14_HashRow.id_disposition_temp = row14.id_disposition_temp;

					row14_HashRow.id_mutation_temp = row14.id_mutation_temp;

					tHash_Lookup_row14.put(row14_HashRow);

					tos_count_tAdvancedHash_row14++;

					/**
					 * [tAdvancedHash_row14 main ] stop
					 */

					/**
					 * [tPostgresqlInput_3 end ] start
					 */

					currentComponent = "tPostgresqlInput_3";

				}
				stmt_tPostgresqlInput_3.close();

				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public String idpar;

		public String getIdpar() {
			return this.idpar;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero;

		public String getNumero() {
			return this.numero;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_parcelle_temp == null) ? 0
								: this.id_parcelle_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.id_parcelle_temp == null) {
				if (other.id_parcelle_temp != null)
					return false;
			} else if (!this.id_parcelle_temp.equals(other.id_parcelle_temp))
				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.id_parcelle = this.id_parcelle;
			other.idpar = this.idpar;
			other.code_departement = this.code_departement;
			other.code_commune = this.code_commune;
			other.prefixe_section = this.prefixe_section;
			other.section = this.section;
			other.numero = this.numero;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_parcelle = dis.readInt();

				this.idpar = readString(dis, ois);

				this.code_departement = readString(dis, ois);

				this.code_commune = readString(dis, ois);

				this.prefixe_section = readString(dis, ois);

				this.section = readString(dis, ois);

				this.numero = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_parcelle);

				writeString(this.idpar, dos, oos);

				writeString(this.code_departement, dos, oos);

				writeString(this.code_commune, dos, oos);

				writeString(this.prefixe_section, dos, oos);

				writeString(this.section, dos, oos);

				writeString(this.numero, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",idpar=" + idpar);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero=" + numero);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_parcelle_temp,
					other.id_parcelle_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tPostgresqlInput_4 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_3 - inputs:(row3,row14,row15)
				// outputs:(dispoparc)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				conn_tPostgresqlInput_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_4 = dataSources_tPostgresqlInput_4
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_4);
				}

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "SELECT  \""
						+ context.prefixe_table + "parcelle"
						+ "\".\"id_parcelle\",  \"" + context.prefixe_table
						+ "parcelle" + "\".\"idpar\",  \""
						+ context.prefixe_table + "parcelle"
						+ "\".\"code_departement\",  \""
						+ context.prefixe_table + "parcelle"
						+ "\".\"code_commune\",  \"" + context.prefixe_table
						+ "parcelle" + "\".\"prefixe_section\",  \""
						+ context.prefixe_table + "parcelle"
						+ "\".\"section\",  \"" + context.prefixe_table
						+ "parcelle" + "\".\"numero\",  \""
						+ context.prefixe_table + "parcelle"
						+ "\".\"id_parcelle_temp\" FROM \""
						+ context.prefixe_table + "parcelle" + "\"";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);

				java.sql.ResultSet rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
						.executeQuery(dbquery_tPostgresqlInput_4);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
						.getColumnCount();

				String tmpContent_tPostgresqlInput_4 = null;
				int column_index_tPostgresqlInput_4 = 1;
				while (rs_tPostgresqlInput_4.next()) {
					nb_line_tPostgresqlInput_4++;

					column_index_tPostgresqlInput_4 = 1;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row15.id_parcelle = 0;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row15.id_parcelle = rs_tPostgresqlInput_4
									.getInt(column_index_tPostgresqlInput_4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_4 = 2;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row15.idpar = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row15.idpar = tmpContent_tPostgresqlInput_4;
						} else {
							row15.idpar = null;
						}

					}
					column_index_tPostgresqlInput_4 = 3;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row15.code_departement = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row15.code_departement = tmpContent_tPostgresqlInput_4;
						} else {
							row15.code_departement = null;
						}

					}
					column_index_tPostgresqlInput_4 = 4;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row15.code_commune = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row15.code_commune = tmpContent_tPostgresqlInput_4;
						} else {
							row15.code_commune = null;
						}

					}
					column_index_tPostgresqlInput_4 = 5;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row15.prefixe_section = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row15.prefixe_section = tmpContent_tPostgresqlInput_4;
						} else {
							row15.prefixe_section = null;
						}

					}
					column_index_tPostgresqlInput_4 = 6;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row15.section = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row15.section = tmpContent_tPostgresqlInput_4;
						} else {
							row15.section = null;
						}

					}
					column_index_tPostgresqlInput_4 = 7;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row15.numero = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row15.numero = tmpContent_tPostgresqlInput_4;
						} else {
							row15.numero = null;
						}

					}
					column_index_tPostgresqlInput_4 = 8;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row15.id_parcelle_temp = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row15.id_parcelle_temp = tmpContent_tPostgresqlInput_4;
						} else {
							row15.id_parcelle_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_4 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_4 main ] start
					 */

					currentComponent = "tPostgresqlInput_4";

					tos_count_tPostgresqlInput_4++;

					/**
					 * [tPostgresqlInput_4 main ] stop
					 */

					/**
					 * [tAdvancedHash_row15 main ] start
					 */

					currentComponent = "tAdvancedHash_row15";

					row15Struct row15_HashRow = new row15Struct();

					row15_HashRow.id_parcelle = row15.id_parcelle;

					row15_HashRow.idpar = row15.idpar;

					row15_HashRow.code_departement = row15.code_departement;

					row15_HashRow.code_commune = row15.code_commune;

					row15_HashRow.prefixe_section = row15.prefixe_section;

					row15_HashRow.section = row15.section;

					row15_HashRow.numero = row15.numero;

					row15_HashRow.id_parcelle_temp = row15.id_parcelle_temp;

					tHash_Lookup_row15.put(row15_HashRow);

					tos_count_tAdvancedHash_row15++;

					/**
					 * [tAdvancedHash_row15 main ] stop
					 */

					/**
					 * [tPostgresqlInput_4 end ] start
					 */

					currentComponent = "tPostgresqlInput_4";

				}
				stmt_tPostgresqlInput_4.close();

				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String code_insee;

		public String getCode_insee() {
			return this.code_insee;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation_temp == null) ? 0
								: this.id_mutation_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.id_mutation_temp == null) {
				if (other.id_mutation_temp != null)
					return false;
			} else if (!this.id_mutation_temp.equals(other.id_mutation_temp))
				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.id_mutation = this.id_mutation;
			other.code_service_ch = this.code_service_ch;
			other.reference_document = this.reference_document;
			other.code_insee = this.code_insee;
			other.date_mutation = this.date_mutation;
			other.id_nature_mutation = this.id_nature_mutation;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.id_mutation_temp = this.id_mutation_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_mutation = readInteger(dis, ois);

				this.code_service_ch = readString(dis, ois);

				this.reference_document = readString(dis, ois);

				this.code_insee = readString(dis, ois);

				this.date_mutation = readDate(dis, ois);

				this.id_nature_mutation = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id_mutation, dos, oos);

				writeString(this.code_service_ch, dos, oos);

				writeString(this.reference_document, dos, oos);

				writeString(this.code_insee, dos, oos);

				writeDate(this.date_mutation, dos, oos);

				writeInteger(this.id_nature_mutation, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",code_insee=" + code_insee);
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation_temp,
					other.id_mutation_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row13";

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tPostgresqlInput_2 -
				// inputs:(after_tFileInputDelimited_3) outputs:(row13,row13) |
				// target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
				// linked node: tMap_2 - inputs:(row1,row13) outputs:(dispo)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row13Struct> getLookup(matchingModeEnum_row13);

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				conn_tPostgresqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_2 = dataSources_tPostgresqlInput_2
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_2);
				}

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"id_mutation\",  \"" + context.prefixe_table
						+ "mutation" + "\".\"code_service_ch\",  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"reference_document\",  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"code_insee\",  \"" + context.prefixe_table
						+ "mutation" + "\".\"date_mutation\",  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"id_nature_mutation\",  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"id_mutation_temp\" FROM \""
						+ context.prefixe_table + "mutation" + "\"";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
						.executeQuery(dbquery_tPostgresqlInput_2);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
						.getColumnCount();

				String tmpContent_tPostgresqlInput_2 = null;
				int column_index_tPostgresqlInput_2 = 1;
				while (rs_tPostgresqlInput_2.next()) {
					nb_line_tPostgresqlInput_2++;

					column_index_tPostgresqlInput_2 = 1;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row13.id_mutation = null;
					} else {

						if (rs_tPostgresqlInput_2
								.getObject(column_index_tPostgresqlInput_2) != null) {
							row13.id_mutation = rs_tPostgresqlInput_2
									.getInt(column_index_tPostgresqlInput_2);
						} else {
							row13.id_mutation = null;
						}

					}
					column_index_tPostgresqlInput_2 = 2;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row13.code_service_ch = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row13.code_service_ch = tmpContent_tPostgresqlInput_2;
						} else {
							row13.code_service_ch = null;
						}

					}
					column_index_tPostgresqlInput_2 = 3;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row13.reference_document = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row13.reference_document = tmpContent_tPostgresqlInput_2;
						} else {
							row13.reference_document = null;
						}

					}
					column_index_tPostgresqlInput_2 = 4;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row13.code_insee = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row13.code_insee = tmpContent_tPostgresqlInput_2;
						} else {
							row13.code_insee = null;
						}

					}
					column_index_tPostgresqlInput_2 = 5;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row13.date_mutation = null;
					} else {

						if (rs_tPostgresqlInput_2
								.getTimestamp(column_index_tPostgresqlInput_2) != null) {
							row13.date_mutation = new java.util.Date(
									rs_tPostgresqlInput_2.getTimestamp(
											column_index_tPostgresqlInput_2)
											.getTime());
						} else {
							row13.date_mutation = null;
						}

					}
					column_index_tPostgresqlInput_2 = 6;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row13.id_nature_mutation = null;
					} else {

						if (rs_tPostgresqlInput_2
								.getObject(column_index_tPostgresqlInput_2) != null) {
							row13.id_nature_mutation = rs_tPostgresqlInput_2
									.getInt(column_index_tPostgresqlInput_2);
						} else {
							row13.id_nature_mutation = null;
						}

					}
					column_index_tPostgresqlInput_2 = 7;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row13.id_mutation_temp = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row13.id_mutation_temp = tmpContent_tPostgresqlInput_2;
						} else {
							row13.id_mutation_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_2 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_2 main ] start
					 */

					currentComponent = "tPostgresqlInput_2";

					tos_count_tPostgresqlInput_2++;

					/**
					 * [tPostgresqlInput_2 main ] stop
					 */

					/**
					 * [tAdvancedHash_row13 main ] start
					 */

					currentComponent = "tAdvancedHash_row13";

					row13Struct row13_HashRow = new row13Struct();

					row13_HashRow.id_mutation = row13.id_mutation;

					row13_HashRow.code_service_ch = row13.code_service_ch;

					row13_HashRow.reference_document = row13.reference_document;

					row13_HashRow.code_insee = row13.code_insee;

					row13_HashRow.date_mutation = row13.date_mutation;

					row13_HashRow.id_nature_mutation = row13.id_nature_mutation;

					row13_HashRow.id_mutation_temp = row13.id_mutation_temp;

					tHash_Lookup_row13.put(row13_HashRow);

					tos_count_tAdvancedHash_row13++;

					/**
					 * [tAdvancedHash_row13 main ] stop
					 */

					/**
					 * [tPostgresqlInput_2 end ] start
					 */

					currentComponent = "tPostgresqlInput_2";

				}
				stmt_tPostgresqlInput_2.close();

				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_dispoparc_temp == null) ? 0
								: this.id_dispoparc_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.id_dispoparc_temp == null) {
				if (other.id_dispoparc_temp != null)
					return false;
			} else if (!this.id_dispoparc_temp.equals(other.id_dispoparc_temp))
				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.id_dispoparc = this.id_dispoparc;
			other.id_disposition = this.id_disposition;
			other.id_parcelle = this.id_parcelle;
			other.nombre_de_lots = this.nombre_de_lots;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_dispoparc = dis.readInt();

				this.id_disposition = dis.readInt();

				this.id_parcelle = dis.readInt();

				this.nombre_de_lots = readInteger(dis, ois);

				this.id_disposition_temp = readString(dis, ois);

				this.id_parcelle_temp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_dispoparc);

				dos.writeInt(this.id_disposition);

				dos.writeInt(this.id_parcelle);

				writeInteger(this.nombre_de_lots, dos, oos);

				writeString(this.id_disposition_temp, dos, oos);

				writeString(this.id_parcelle_temp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_dispoparc_temp,
					other.id_dispoparc_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tPostgresqlInput_9 -
				// inputs:(after_tFileInputDelimited_4) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_7 - inputs:(row9,row18) outputs:(local)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct> getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_9 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_9", false);
				start_Hash
						.put("tPostgresqlInput_9", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_9";

				int tos_count_tPostgresqlInput_9 = 0;

				int nb_line_tPostgresqlInput_9 = 0;
				java.sql.Connection conn_tPostgresqlInput_9 = null;
				conn_tPostgresqlInput_9 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_9) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_9 = dataSources_tPostgresqlInput_9
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_9);
				}

				java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9
						.createStatement();

				String dbquery_tPostgresqlInput_9 = "SELECT   \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"id_disposition\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"nombre_de_lots\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_disposition_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle_temp\" FROM \""
						+ context.prefixe_table + "disposition_parcelle" + "\"";

				globalMap.put("tPostgresqlInput_9_QUERY",
						dbquery_tPostgresqlInput_9);

				java.sql.ResultSet rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9
						.executeQuery(dbquery_tPostgresqlInput_9);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9
						.getColumnCount();

				String tmpContent_tPostgresqlInput_9 = null;
				int column_index_tPostgresqlInput_9 = 1;
				while (rs_tPostgresqlInput_9.next()) {
					nb_line_tPostgresqlInput_9++;

					column_index_tPostgresqlInput_9 = 1;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row18.id_dispoparc = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row18.id_dispoparc = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 2;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row18.id_disposition = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row18.id_disposition = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 3;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row18.id_parcelle = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row18.id_parcelle = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 4;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row18.nombre_de_lots = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row18.nombre_de_lots = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row18.nombre_de_lots = null;
						}

					}
					column_index_tPostgresqlInput_9 = 5;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row18.id_dispoparc_temp = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row18.id_dispoparc_temp = tmpContent_tPostgresqlInput_9;
						} else {
							row18.id_dispoparc_temp = null;
						}

					}
					column_index_tPostgresqlInput_9 = 6;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row18.id_disposition_temp = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row18.id_disposition_temp = tmpContent_tPostgresqlInput_9;
						} else {
							row18.id_disposition_temp = null;
						}

					}
					column_index_tPostgresqlInput_9 = 7;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row18.id_parcelle_temp = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row18.id_parcelle_temp = tmpContent_tPostgresqlInput_9;
						} else {
							row18.id_parcelle_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_9 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_9 main ] start
					 */

					currentComponent = "tPostgresqlInput_9";

					tos_count_tPostgresqlInput_9++;

					/**
					 * [tPostgresqlInput_9 main ] stop
					 */

					/**
					 * [tAdvancedHash_row18 main ] start
					 */

					currentComponent = "tAdvancedHash_row18";

					row18Struct row18_HashRow = new row18Struct();

					row18_HashRow.id_dispoparc = row18.id_dispoparc;

					row18_HashRow.id_disposition = row18.id_disposition;

					row18_HashRow.id_parcelle = row18.id_parcelle;

					row18_HashRow.nombre_de_lots = row18.nombre_de_lots;

					row18_HashRow.id_dispoparc_temp = row18.id_dispoparc_temp;

					row18_HashRow.id_disposition_temp = row18.id_disposition_temp;

					row18_HashRow.id_parcelle_temp = row18.id_parcelle_temp;

					tHash_Lookup_row18.put(row18_HashRow);

					tos_count_tAdvancedHash_row18++;

					/**
					 * [tAdvancedHash_row18 main ] stop
					 */

					/**
					 * [tPostgresqlInput_9 end ] start
					 */

					currentComponent = "tPostgresqlInput_9";

				}
				stmt_tPostgresqlInput_9.close();

				globalMap.put("tPostgresqlInput_9_NB_LINE",
						nb_line_tPostgresqlInput_9);

				ok_Hash.put("tPostgresqlInput_9", true);
				end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_dispoparc_temp == null) ? 0
								: this.id_dispoparc_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.id_dispoparc_temp == null) {
				if (other.id_dispoparc_temp != null)
					return false;
			} else if (!this.id_dispoparc_temp.equals(other.id_dispoparc_temp))
				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.id_dispoparc = this.id_dispoparc;
			other.id_disposition = this.id_disposition;
			other.id_parcelle = this.id_parcelle;
			other.nombre_de_lots = this.nombre_de_lots;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_dispoparc = dis.readInt();

				this.id_disposition = dis.readInt();

				this.id_parcelle = dis.readInt();

				this.nombre_de_lots = readInteger(dis, ois);

				this.id_disposition_temp = readString(dis, ois);

				this.id_parcelle_temp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_dispoparc);

				dos.writeInt(this.id_disposition);

				dos.writeInt(this.id_parcelle);

				writeInteger(this.nombre_de_lots, dos, oos);

				writeString(this.id_disposition_temp, dos, oos);

				writeString(this.id_parcelle_temp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_dispoparc_temp,
					other.id_dispoparc_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row17";

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tPostgresqlInput_8 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_6 - inputs:(row5,row17) outputs:(volume)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row17Struct> getLookup(matchingModeEnum_row17);

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_8 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_8", false);
				start_Hash
						.put("tPostgresqlInput_8", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_8";

				int tos_count_tPostgresqlInput_8 = 0;

				int nb_line_tPostgresqlInput_8 = 0;
				java.sql.Connection conn_tPostgresqlInput_8 = null;
				conn_tPostgresqlInput_8 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_8) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_8 = dataSources_tPostgresqlInput_8
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_8);
				}

				java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8
						.createStatement();

				String dbquery_tPostgresqlInput_8 = "SELECT  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"id_disposition\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"nombre_de_lots\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_disposition_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle_temp\" FROM \""
						+ context.prefixe_table + "disposition_parcelle" + "\"";

				globalMap.put("tPostgresqlInput_8_QUERY",
						dbquery_tPostgresqlInput_8);

				java.sql.ResultSet rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8
						.executeQuery(dbquery_tPostgresqlInput_8);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8
						.getColumnCount();

				String tmpContent_tPostgresqlInput_8 = null;
				int column_index_tPostgresqlInput_8 = 1;
				while (rs_tPostgresqlInput_8.next()) {
					nb_line_tPostgresqlInput_8++;

					column_index_tPostgresqlInput_8 = 1;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row17.id_dispoparc = 0;
					} else {

						if (rs_tPostgresqlInput_8
								.getObject(column_index_tPostgresqlInput_8) != null) {
							row17.id_dispoparc = rs_tPostgresqlInput_8
									.getInt(column_index_tPostgresqlInput_8);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_8 = 2;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row17.id_disposition = 0;
					} else {

						if (rs_tPostgresqlInput_8
								.getObject(column_index_tPostgresqlInput_8) != null) {
							row17.id_disposition = rs_tPostgresqlInput_8
									.getInt(column_index_tPostgresqlInput_8);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_8 = 3;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row17.id_parcelle = 0;
					} else {

						if (rs_tPostgresqlInput_8
								.getObject(column_index_tPostgresqlInput_8) != null) {
							row17.id_parcelle = rs_tPostgresqlInput_8
									.getInt(column_index_tPostgresqlInput_8);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_8 = 4;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row17.nombre_de_lots = null;
					} else {

						if (rs_tPostgresqlInput_8
								.getObject(column_index_tPostgresqlInput_8) != null) {
							row17.nombre_de_lots = rs_tPostgresqlInput_8
									.getInt(column_index_tPostgresqlInput_8);
						} else {
							row17.nombre_de_lots = null;
						}

					}
					column_index_tPostgresqlInput_8 = 5;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row17.id_dispoparc_temp = null;
					} else {

						tmpContent_tPostgresqlInput_8 = rs_tPostgresqlInput_8
								.getString(column_index_tPostgresqlInput_8);
						if (tmpContent_tPostgresqlInput_8 != null) {
							row17.id_dispoparc_temp = tmpContent_tPostgresqlInput_8;
						} else {
							row17.id_dispoparc_temp = null;
						}

					}
					column_index_tPostgresqlInput_8 = 6;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row17.id_disposition_temp = null;
					} else {

						tmpContent_tPostgresqlInput_8 = rs_tPostgresqlInput_8
								.getString(column_index_tPostgresqlInput_8);
						if (tmpContent_tPostgresqlInput_8 != null) {
							row17.id_disposition_temp = tmpContent_tPostgresqlInput_8;
						} else {
							row17.id_disposition_temp = null;
						}

					}
					column_index_tPostgresqlInput_8 = 7;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row17.id_parcelle_temp = null;
					} else {

						tmpContent_tPostgresqlInput_8 = rs_tPostgresqlInput_8
								.getString(column_index_tPostgresqlInput_8);
						if (tmpContent_tPostgresqlInput_8 != null) {
							row17.id_parcelle_temp = tmpContent_tPostgresqlInput_8;
						} else {
							row17.id_parcelle_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_8 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_8 main ] start
					 */

					currentComponent = "tPostgresqlInput_8";

					tos_count_tPostgresqlInput_8++;

					/**
					 * [tPostgresqlInput_8 main ] stop
					 */

					/**
					 * [tAdvancedHash_row17 main ] start
					 */

					currentComponent = "tAdvancedHash_row17";

					row17Struct row17_HashRow = new row17Struct();

					row17_HashRow.id_dispoparc = row17.id_dispoparc;

					row17_HashRow.id_disposition = row17.id_disposition;

					row17_HashRow.id_parcelle = row17.id_parcelle;

					row17_HashRow.nombre_de_lots = row17.nombre_de_lots;

					row17_HashRow.id_dispoparc_temp = row17.id_dispoparc_temp;

					row17_HashRow.id_disposition_temp = row17.id_disposition_temp;

					row17_HashRow.id_parcelle_temp = row17.id_parcelle_temp;

					tHash_Lookup_row17.put(row17_HashRow);

					tos_count_tAdvancedHash_row17++;

					/**
					 * [tAdvancedHash_row17 main ] stop
					 */

					/**
					 * [tPostgresqlInput_8 end ] start
					 */

					currentComponent = "tPostgresqlInput_8";

				}
				stmt_tPostgresqlInput_8.close();

				globalMap.put("tPostgresqlInput_8_NB_LINE",
						nb_line_tPostgresqlInput_8);

				ok_Hash.put("tPostgresqlInput_8", true);
				end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_disposition_temp == null) ? 0
								: this.id_disposition_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.id_disposition_temp == null) {
				if (other.id_disposition_temp != null)
					return false;
			} else if (!this.id_disposition_temp
					.equals(other.id_disposition_temp))
				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.id_dispoparc = this.id_dispoparc;
			other.id_disposition = this.id_disposition;
			other.id_parcelle = this.id_parcelle;
			other.nombre_de_lots = this.nombre_de_lots;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.id_disposition_temp = this.id_disposition_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_disposition_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_disposition_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_dispoparc = dis.readInt();

				this.id_disposition = dis.readInt();

				this.id_parcelle = dis.readInt();

				this.nombre_de_lots = readInteger(dis, ois);

				this.id_dispoparc_temp = readString(dis, ois);

				this.id_parcelle_temp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_dispoparc);

				dos.writeInt(this.id_disposition);

				dos.writeInt(this.id_parcelle);

				writeInteger(this.nombre_de_lots, dos, oos);

				writeString(this.id_dispoparc_temp, dos, oos);

				writeString(this.id_parcelle_temp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_disposition_temp,
					other.id_disposition_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tPostgresqlInput_5 -
				// inputs:(after_tFileInputDelimited_6) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_4 - inputs:(row4,row16) outputs:(suf)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct> getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_5", false);
				start_Hash
						.put("tPostgresqlInput_5", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_5";

				int tos_count_tPostgresqlInput_5 = 0;

				int nb_line_tPostgresqlInput_5 = 0;
				java.sql.Connection conn_tPostgresqlInput_5 = null;
				conn_tPostgresqlInput_5 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_5) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_5 = dataSources_tPostgresqlInput_5
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_5);
				}

				java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5
						.createStatement();

				String dbquery_tPostgresqlInput_5 = "SELECT  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"id_disposition\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"nombre_de_lots\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_disposition_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle_temp\" FROM \""
						+ context.prefixe_table + "disposition_parcelle" + "\"";

				globalMap.put("tPostgresqlInput_5_QUERY",
						dbquery_tPostgresqlInput_5);

				java.sql.ResultSet rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5
						.executeQuery(dbquery_tPostgresqlInput_5);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5
						.getColumnCount();

				String tmpContent_tPostgresqlInput_5 = null;
				int column_index_tPostgresqlInput_5 = 1;
				while (rs_tPostgresqlInput_5.next()) {
					nb_line_tPostgresqlInput_5++;

					column_index_tPostgresqlInput_5 = 1;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row16.id_dispoparc = 0;
					} else {

						if (rs_tPostgresqlInput_5
								.getObject(column_index_tPostgresqlInput_5) != null) {
							row16.id_dispoparc = rs_tPostgresqlInput_5
									.getInt(column_index_tPostgresqlInput_5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_5 = 2;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row16.id_disposition = 0;
					} else {

						if (rs_tPostgresqlInput_5
								.getObject(column_index_tPostgresqlInput_5) != null) {
							row16.id_disposition = rs_tPostgresqlInput_5
									.getInt(column_index_tPostgresqlInput_5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_5 = 3;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row16.id_parcelle = 0;
					} else {

						if (rs_tPostgresqlInput_5
								.getObject(column_index_tPostgresqlInput_5) != null) {
							row16.id_parcelle = rs_tPostgresqlInput_5
									.getInt(column_index_tPostgresqlInput_5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_5 = 4;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row16.nombre_de_lots = null;
					} else {

						if (rs_tPostgresqlInput_5
								.getObject(column_index_tPostgresqlInput_5) != null) {
							row16.nombre_de_lots = rs_tPostgresqlInput_5
									.getInt(column_index_tPostgresqlInput_5);
						} else {
							row16.nombre_de_lots = null;
						}

					}
					column_index_tPostgresqlInput_5 = 5;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row16.id_dispoparc_temp = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row16.id_dispoparc_temp = tmpContent_tPostgresqlInput_5;
						} else {
							row16.id_dispoparc_temp = null;
						}

					}
					column_index_tPostgresqlInput_5 = 6;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row16.id_disposition_temp = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row16.id_disposition_temp = tmpContent_tPostgresqlInput_5;
						} else {
							row16.id_disposition_temp = null;
						}

					}
					column_index_tPostgresqlInput_5 = 7;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row16.id_parcelle_temp = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row16.id_parcelle_temp = tmpContent_tPostgresqlInput_5;
						} else {
							row16.id_parcelle_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_5 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_5 main ] start
					 */

					currentComponent = "tPostgresqlInput_5";

					tos_count_tPostgresqlInput_5++;

					/**
					 * [tPostgresqlInput_5 main ] stop
					 */

					/**
					 * [tAdvancedHash_row16 main ] start
					 */

					currentComponent = "tAdvancedHash_row16";

					row16Struct row16_HashRow = new row16Struct();

					row16_HashRow.id_dispoparc = row16.id_dispoparc;

					row16_HashRow.id_disposition = row16.id_disposition;

					row16_HashRow.id_parcelle = row16.id_parcelle;

					row16_HashRow.nombre_de_lots = row16.nombre_de_lots;

					row16_HashRow.id_dispoparc_temp = row16.id_dispoparc_temp;

					row16_HashRow.id_disposition_temp = row16.id_disposition_temp;

					row16_HashRow.id_parcelle_temp = row16.id_parcelle_temp;

					tHash_Lookup_row16.put(row16_HashRow);

					tos_count_tAdvancedHash_row16++;

					/**
					 * [tAdvancedHash_row16 main ] stop
					 */

					/**
					 * [tPostgresqlInput_5 end ] start
					 */

					currentComponent = "tPostgresqlInput_5";

				}
				stmt_tPostgresqlInput_5.close();

				globalMap.put("tPostgresqlInput_5_NB_LINE",
						nb_line_tPostgresqlInput_5);

				ok_Hash.put("tPostgresqlInput_5", true);
				end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String code_insee;

		public String getCode_insee() {
			return this.code_insee;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation_temp == null) ? 0
								: this.id_mutation_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.id_mutation_temp == null) {
				if (other.id_mutation_temp != null)
					return false;
			} else if (!this.id_mutation_temp.equals(other.id_mutation_temp))
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.id_mutation = this.id_mutation;
			other.code_service_ch = this.code_service_ch;
			other.reference_document = this.reference_document;
			other.code_insee = this.code_insee;
			other.date_mutation = this.date_mutation;
			other.id_nature_mutation = this.id_nature_mutation;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.id_mutation_temp = this.id_mutation_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_mutation = readInteger(dis, ois);

				this.code_service_ch = readString(dis, ois);

				this.reference_document = readString(dis, ois);

				this.code_insee = readString(dis, ois);

				this.date_mutation = readDate(dis, ois);

				this.id_nature_mutation = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id_mutation, dos, oos);

				writeString(this.code_service_ch, dos, oos);

				writeString(this.reference_document, dos, oos);

				writeString(this.code_insee, dos, oos);

				writeDate(this.date_mutation, dos, oos);

				writeInteger(this.id_nature_mutation, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",code_insee=" + code_insee);
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation_temp,
					other.id_mutation_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row11";

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tPostgresqlInput_1 -
				// inputs:(after_tFileInputDelimited_13) outputs:(row11,row11) |
				// target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
				// linked node: tMap_1 - inputs:(row12,row11)
				// outputs:(mutation_article_cgi)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct> getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_1 = dataSources_tPostgresqlInput_1
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_1);
				}

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"id_mutation\",  \"" + context.prefixe_table
						+ "mutation" + "\".\"code_service_ch\",  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"reference_document\",  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"code_insee\",  \"" + context.prefixe_table
						+ "mutation" + "\".\"date_mutation\",  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"id_nature_mutation\",  \""
						+ context.prefixe_table + "mutation"
						+ "\".\"id_mutation_temp\" FROM \""
						+ context.prefixe_table + "mutation" + "\"";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
						.executeQuery(dbquery_tPostgresqlInput_1);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
						.getColumnCount();

				String tmpContent_tPostgresqlInput_1 = null;
				int column_index_tPostgresqlInput_1 = 1;
				while (rs_tPostgresqlInput_1.next()) {
					nb_line_tPostgresqlInput_1++;

					column_index_tPostgresqlInput_1 = 1;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row11.id_mutation = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row11.id_mutation = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row11.id_mutation = null;
						}

					}
					column_index_tPostgresqlInput_1 = 2;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row11.code_service_ch = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row11.code_service_ch = tmpContent_tPostgresqlInput_1;
						} else {
							row11.code_service_ch = null;
						}

					}
					column_index_tPostgresqlInput_1 = 3;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row11.reference_document = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row11.reference_document = tmpContent_tPostgresqlInput_1;
						} else {
							row11.reference_document = null;
						}

					}
					column_index_tPostgresqlInput_1 = 4;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row11.code_insee = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row11.code_insee = tmpContent_tPostgresqlInput_1;
						} else {
							row11.code_insee = null;
						}

					}
					column_index_tPostgresqlInput_1 = 5;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row11.date_mutation = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getTimestamp(column_index_tPostgresqlInput_1) != null) {
							row11.date_mutation = new java.util.Date(
									rs_tPostgresqlInput_1.getTimestamp(
											column_index_tPostgresqlInput_1)
											.getTime());
						} else {
							row11.date_mutation = null;
						}

					}
					column_index_tPostgresqlInput_1 = 6;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row11.id_nature_mutation = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row11.id_nature_mutation = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row11.id_nature_mutation = null;
						}

					}
					column_index_tPostgresqlInput_1 = 7;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row11.id_mutation_temp = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row11.id_mutation_temp = tmpContent_tPostgresqlInput_1;
						} else {
							row11.id_mutation_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_1 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_1 main ] start
					 */

					currentComponent = "tPostgresqlInput_1";

					tos_count_tPostgresqlInput_1++;

					/**
					 * [tPostgresqlInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_row11 main ] start
					 */

					currentComponent = "tAdvancedHash_row11";

					row11Struct row11_HashRow = new row11Struct();

					row11_HashRow.id_mutation = row11.id_mutation;

					row11_HashRow.code_service_ch = row11.code_service_ch;

					row11_HashRow.reference_document = row11.reference_document;

					row11_HashRow.code_insee = row11.code_insee;

					row11_HashRow.date_mutation = row11.date_mutation;

					row11_HashRow.id_nature_mutation = row11.id_nature_mutation;

					row11_HashRow.id_mutation_temp = row11.id_mutation_temp;

					tHash_Lookup_row11.put(row11_HashRow);

					tos_count_tAdvancedHash_row11++;

					/**
					 * [tAdvancedHash_row11 main ] stop
					 */

					/**
					 * [tPostgresqlInput_1 end ] start
					 */

					currentComponent = "tPostgresqlInput_1";

				}
				stmt_tPostgresqlInput_1.close();

				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableComparableLookupRow<row19Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_dispoparc_temp == null) ? 0
								: this.id_dispoparc_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.id_dispoparc_temp == null) {
				if (other.id_dispoparc_temp != null)
					return false;
			} else if (!this.id_dispoparc_temp.equals(other.id_dispoparc_temp))
				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.id_dispoparc = this.id_dispoparc;
			other.id_disposition = this.id_disposition;
			other.id_parcelle = this.id_parcelle;
			other.nombre_de_lots = this.nombre_de_lots;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_dispoparc = dis.readInt();

				this.id_disposition = dis.readInt();

				this.id_parcelle = dis.readInt();

				this.nombre_de_lots = readInteger(dis, ois);

				this.id_disposition_temp = readString(dis, ois);

				this.id_parcelle_temp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_dispoparc);

				dos.writeInt(this.id_disposition);

				dos.writeInt(this.id_parcelle);

				writeInteger(this.nombre_de_lots, dos, oos);

				writeString(this.id_disposition_temp, dos, oos);

				writeString(this.id_parcelle_temp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_dispoparc_temp,
					other.id_dispoparc_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tAdvancedHash_row19 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row19", false);
				start_Hash.put("tAdvancedHash_row19",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row19";

				int tos_count_tAdvancedHash_row19 = 0;

				// connection name:row19
				// source node:tPostgresqlInput_10 -
				// inputs:(after_tFileInputDelimited_14) outputs:(row19,row19) |
				// target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
				// linked node: tMap_8 - inputs:(row6,row19,row20)
				// outputs:(adresse_dispoparc)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row19Struct> getLookup(matchingModeEnum_row19);

				globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);

				/**
				 * [tAdvancedHash_row19 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_10 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_10", false);
				start_Hash.put("tPostgresqlInput_10",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_10";

				int tos_count_tPostgresqlInput_10 = 0;

				int nb_line_tPostgresqlInput_10 = 0;
				java.sql.Connection conn_tPostgresqlInput_10 = null;
				conn_tPostgresqlInput_10 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_10) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_10 = dataSources_tPostgresqlInput_10
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_10);
				}

				java.sql.Statement stmt_tPostgresqlInput_10 = conn_tPostgresqlInput_10
						.createStatement();

				String dbquery_tPostgresqlInput_10 = "SELECT  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"id_disposition\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"nombre_de_lots\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_disposition_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle_temp\" FROM  \""
						+ context.prefixe_table + "disposition_parcelle" + "\"";

				globalMap.put("tPostgresqlInput_10_QUERY",
						dbquery_tPostgresqlInput_10);

				java.sql.ResultSet rs_tPostgresqlInput_10 = stmt_tPostgresqlInput_10
						.executeQuery(dbquery_tPostgresqlInput_10);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_10 = rs_tPostgresqlInput_10
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_10 = rsmd_tPostgresqlInput_10
						.getColumnCount();

				String tmpContent_tPostgresqlInput_10 = null;
				int column_index_tPostgresqlInput_10 = 1;
				while (rs_tPostgresqlInput_10.next()) {
					nb_line_tPostgresqlInput_10++;

					column_index_tPostgresqlInput_10 = 1;

					if (colQtyInRs_tPostgresqlInput_10 < column_index_tPostgresqlInput_10) {
						row19.id_dispoparc = 0;
					} else {

						if (rs_tPostgresqlInput_10
								.getObject(column_index_tPostgresqlInput_10) != null) {
							row19.id_dispoparc = rs_tPostgresqlInput_10
									.getInt(column_index_tPostgresqlInput_10);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_10 = 2;

					if (colQtyInRs_tPostgresqlInput_10 < column_index_tPostgresqlInput_10) {
						row19.id_disposition = 0;
					} else {

						if (rs_tPostgresqlInput_10
								.getObject(column_index_tPostgresqlInput_10) != null) {
							row19.id_disposition = rs_tPostgresqlInput_10
									.getInt(column_index_tPostgresqlInput_10);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_10 = 3;

					if (colQtyInRs_tPostgresqlInput_10 < column_index_tPostgresqlInput_10) {
						row19.id_parcelle = 0;
					} else {

						if (rs_tPostgresqlInput_10
								.getObject(column_index_tPostgresqlInput_10) != null) {
							row19.id_parcelle = rs_tPostgresqlInput_10
									.getInt(column_index_tPostgresqlInput_10);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_10 = 4;

					if (colQtyInRs_tPostgresqlInput_10 < column_index_tPostgresqlInput_10) {
						row19.nombre_de_lots = null;
					} else {

						if (rs_tPostgresqlInput_10
								.getObject(column_index_tPostgresqlInput_10) != null) {
							row19.nombre_de_lots = rs_tPostgresqlInput_10
									.getInt(column_index_tPostgresqlInput_10);
						} else {
							row19.nombre_de_lots = null;
						}

					}
					column_index_tPostgresqlInput_10 = 5;

					if (colQtyInRs_tPostgresqlInput_10 < column_index_tPostgresqlInput_10) {
						row19.id_dispoparc_temp = null;
					} else {

						tmpContent_tPostgresqlInput_10 = rs_tPostgresqlInput_10
								.getString(column_index_tPostgresqlInput_10);
						if (tmpContent_tPostgresqlInput_10 != null) {
							row19.id_dispoparc_temp = tmpContent_tPostgresqlInput_10;
						} else {
							row19.id_dispoparc_temp = null;
						}

					}
					column_index_tPostgresqlInput_10 = 6;

					if (colQtyInRs_tPostgresqlInput_10 < column_index_tPostgresqlInput_10) {
						row19.id_disposition_temp = null;
					} else {

						tmpContent_tPostgresqlInput_10 = rs_tPostgresqlInput_10
								.getString(column_index_tPostgresqlInput_10);
						if (tmpContent_tPostgresqlInput_10 != null) {
							row19.id_disposition_temp = tmpContent_tPostgresqlInput_10;
						} else {
							row19.id_disposition_temp = null;
						}

					}
					column_index_tPostgresqlInput_10 = 7;

					if (colQtyInRs_tPostgresqlInput_10 < column_index_tPostgresqlInput_10) {
						row19.id_parcelle_temp = null;
					} else {

						tmpContent_tPostgresqlInput_10 = rs_tPostgresqlInput_10
								.getString(column_index_tPostgresqlInput_10);
						if (tmpContent_tPostgresqlInput_10 != null) {
							row19.id_parcelle_temp = tmpContent_tPostgresqlInput_10;
						} else {
							row19.id_parcelle_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_10 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_10 main ] start
					 */

					currentComponent = "tPostgresqlInput_10";

					tos_count_tPostgresqlInput_10++;

					/**
					 * [tPostgresqlInput_10 main ] stop
					 */

					/**
					 * [tAdvancedHash_row19 main ] start
					 */

					currentComponent = "tAdvancedHash_row19";

					row19Struct row19_HashRow = new row19Struct();

					row19_HashRow.id_dispoparc = row19.id_dispoparc;

					row19_HashRow.id_disposition = row19.id_disposition;

					row19_HashRow.id_parcelle = row19.id_parcelle;

					row19_HashRow.nombre_de_lots = row19.nombre_de_lots;

					row19_HashRow.id_dispoparc_temp = row19.id_dispoparc_temp;

					row19_HashRow.id_disposition_temp = row19.id_disposition_temp;

					row19_HashRow.id_parcelle_temp = row19.id_parcelle_temp;

					tHash_Lookup_row19.put(row19_HashRow);

					tos_count_tAdvancedHash_row19++;

					/**
					 * [tAdvancedHash_row19 main ] stop
					 */

					/**
					 * [tPostgresqlInput_10 end ] start
					 */

					currentComponent = "tPostgresqlInput_10";

				}
				stmt_tPostgresqlInput_10.close();

				globalMap.put("tPostgresqlInput_10_NB_LINE",
						nb_line_tPostgresqlInput_10);

				ok_Hash.put("tPostgresqlInput_10", true);
				end_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row19 end ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				tHash_Lookup_row19.endPut();

				ok_Hash.put("tAdvancedHash_row19", true);
				end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row19 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableComparableLookupRow<row20Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public Integer num_voie;

		public Integer getNum_voie() {
			return this.num_voie;
		}

		public String b_t_q;

		public String getB_t_q() {
			return this.b_t_q;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_adresse_temp == null) ? 0
								: this.id_adresse_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.id_adresse_temp == null) {
				if (other.id_adresse_temp != null)
					return false;
			} else if (!this.id_adresse_temp.equals(other.id_adresse_temp))
				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.id_adresse = this.id_adresse;
			other.num_voie = this.num_voie;
			other.b_t_q = this.b_t_q;
			other.type_voie = this.type_voie;
			other.code_voie = this.code_voie;
			other.voie = this.voie;
			other.code_postal = this.code_postal;
			other.commune = this.commune;
			other.id_adresse_temp = this.id_adresse_temp;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.id_adresse_temp = this.id_adresse_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_adresse_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_adresse_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_adresse = dis.readInt();

				this.num_voie = readInteger(dis, ois);

				this.b_t_q = readString(dis, ois);

				this.type_voie = readString(dis, ois);

				this.code_voie = readString(dis, ois);

				this.voie = readString(dis, ois);

				this.code_postal = readString(dis, ois);

				this.commune = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_adresse);

				writeInteger(this.num_voie, dos, oos);

				writeString(this.b_t_q, dos, oos);

				writeString(this.type_voie, dos, oos);

				writeString(this.code_voie, dos, oos);

				writeString(this.voie, dos, oos);

				writeString(this.code_postal, dos, oos);

				writeString(this.commune, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",num_voie=" + String.valueOf(num_voie));
			sb.append(",b_t_q=" + b_t_q);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse_temp,
					other.id_adresse_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tAdvancedHash_row20 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row20", false);
				start_Hash.put("tAdvancedHash_row20",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row20";

				int tos_count_tAdvancedHash_row20 = 0;

				// connection name:row20
				// source node:tPostgresqlInput_11 -
				// inputs:(after_tFileInputDelimited_14) outputs:(row20,row20) |
				// target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
				// linked node: tMap_8 - inputs:(row6,row19,row20)
				// outputs:(adresse_dispoparc)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row20Struct> getLookup(matchingModeEnum_row20);

				globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);

				/**
				 * [tAdvancedHash_row20 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_11 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_11", false);
				start_Hash.put("tPostgresqlInput_11",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_11";

				int tos_count_tPostgresqlInput_11 = 0;

				int nb_line_tPostgresqlInput_11 = 0;
				java.sql.Connection conn_tPostgresqlInput_11 = null;
				conn_tPostgresqlInput_11 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_11) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_11 = dataSources_tPostgresqlInput_11
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_11);
				}

				java.sql.Statement stmt_tPostgresqlInput_11 = conn_tPostgresqlInput_11
						.createStatement();

				String dbquery_tPostgresqlInput_11 = "SELECT  \""
						+ context.prefixe_table + "adresse"
						+ "\".\"id_adresse\",  \"" + context.prefixe_table
						+ "adresse" + "\".\"num_voie\",  \""
						+ context.prefixe_table + "adresse"
						+ "\".\"b_t_q\",  \"" + context.prefixe_table
						+ "adresse" + "\".\"type_voie\",  \""
						+ context.prefixe_table + "adresse"
						+ "\".\"code_voie\",  \"" + context.prefixe_table
						+ "adresse" + "\".\"voie\",  \""
						+ context.prefixe_table + "adresse"
						+ "\".\"code_postal\",  \"" + context.prefixe_table
						+ "adresse" + "\".\"commune\",  \""
						+ context.prefixe_table + "adresse"
						+ "\".\"id_adresse_temp\" FROM \""
						+ context.prefixe_table + "adresse" + "\"";

				globalMap.put("tPostgresqlInput_11_QUERY",
						dbquery_tPostgresqlInput_11);

				java.sql.ResultSet rs_tPostgresqlInput_11 = stmt_tPostgresqlInput_11
						.executeQuery(dbquery_tPostgresqlInput_11);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_11 = rs_tPostgresqlInput_11
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_11 = rsmd_tPostgresqlInput_11
						.getColumnCount();

				String tmpContent_tPostgresqlInput_11 = null;
				int column_index_tPostgresqlInput_11 = 1;
				while (rs_tPostgresqlInput_11.next()) {
					nb_line_tPostgresqlInput_11++;

					column_index_tPostgresqlInput_11 = 1;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.id_adresse = 0;
					} else {

						if (rs_tPostgresqlInput_11
								.getObject(column_index_tPostgresqlInput_11) != null) {
							row20.id_adresse = rs_tPostgresqlInput_11
									.getInt(column_index_tPostgresqlInput_11);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_11 = 2;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.num_voie = null;
					} else {

						if (rs_tPostgresqlInput_11
								.getObject(column_index_tPostgresqlInput_11) != null) {
							row20.num_voie = rs_tPostgresqlInput_11
									.getInt(column_index_tPostgresqlInput_11);
						} else {
							row20.num_voie = null;
						}

					}
					column_index_tPostgresqlInput_11 = 3;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.b_t_q = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row20.b_t_q = tmpContent_tPostgresqlInput_11;
						} else {
							row20.b_t_q = null;
						}

					}
					column_index_tPostgresqlInput_11 = 4;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.type_voie = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row20.type_voie = tmpContent_tPostgresqlInput_11;
						} else {
							row20.type_voie = null;
						}

					}
					column_index_tPostgresqlInput_11 = 5;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.code_voie = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row20.code_voie = tmpContent_tPostgresqlInput_11;
						} else {
							row20.code_voie = null;
						}

					}
					column_index_tPostgresqlInput_11 = 6;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.voie = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row20.voie = tmpContent_tPostgresqlInput_11;
						} else {
							row20.voie = null;
						}

					}
					column_index_tPostgresqlInput_11 = 7;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.code_postal = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row20.code_postal = tmpContent_tPostgresqlInput_11;
						} else {
							row20.code_postal = null;
						}

					}
					column_index_tPostgresqlInput_11 = 8;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.commune = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row20.commune = tmpContent_tPostgresqlInput_11;
						} else {
							row20.commune = null;
						}

					}
					column_index_tPostgresqlInput_11 = 9;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row20.id_adresse_temp = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row20.id_adresse_temp = tmpContent_tPostgresqlInput_11;
						} else {
							row20.id_adresse_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_11 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_11 main ] start
					 */

					currentComponent = "tPostgresqlInput_11";

					tos_count_tPostgresqlInput_11++;

					/**
					 * [tPostgresqlInput_11 main ] stop
					 */

					/**
					 * [tAdvancedHash_row20 main ] start
					 */

					currentComponent = "tAdvancedHash_row20";

					row20Struct row20_HashRow = new row20Struct();

					row20_HashRow.id_adresse = row20.id_adresse;

					row20_HashRow.num_voie = row20.num_voie;

					row20_HashRow.b_t_q = row20.b_t_q;

					row20_HashRow.type_voie = row20.type_voie;

					row20_HashRow.code_voie = row20.code_voie;

					row20_HashRow.voie = row20.voie;

					row20_HashRow.code_postal = row20.code_postal;

					row20_HashRow.commune = row20.commune;

					row20_HashRow.id_adresse_temp = row20.id_adresse_temp;

					tHash_Lookup_row20.put(row20_HashRow);

					tos_count_tAdvancedHash_row20++;

					/**
					 * [tAdvancedHash_row20 main ] stop
					 */

					/**
					 * [tPostgresqlInput_11 end ] start
					 */

					currentComponent = "tPostgresqlInput_11";

				}
				stmt_tPostgresqlInput_11.close();

				globalMap.put("tPostgresqlInput_11_NB_LINE",
						nb_line_tPostgresqlInput_11);

				ok_Hash.put("tPostgresqlInput_11", true);
				end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row20 end ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				tHash_Lookup_row20.endPut();

				ok_Hash.put("tAdvancedHash_row20", true);
				end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableComparableLookupRow<row21Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_dispoparc_temp == null) ? 0
								: this.id_dispoparc_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.id_dispoparc_temp == null) {
				if (other.id_dispoparc_temp != null)
					return false;
			} else if (!this.id_dispoparc_temp.equals(other.id_dispoparc_temp))
				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.id_dispoparc = this.id_dispoparc;
			other.id_disposition = this.id_disposition;
			other.id_parcelle = this.id_parcelle;
			other.nombre_de_lots = this.nombre_de_lots;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_dispoparc = dis.readInt();

				this.id_disposition = dis.readInt();

				this.id_parcelle = dis.readInt();

				this.nombre_de_lots = readInteger(dis, ois);

				this.id_disposition_temp = readString(dis, ois);

				this.id_parcelle_temp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_dispoparc);

				dos.writeInt(this.id_disposition);

				dos.writeInt(this.id_parcelle);

				writeInteger(this.nombre_de_lots, dos, oos);

				writeString(this.id_disposition_temp, dos, oos);

				writeString(this.id_parcelle_temp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_dispoparc_temp,
					other.id_dispoparc_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tAdvancedHash_row21 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row21", false);
				start_Hash.put("tAdvancedHash_row21",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row21";

				int tos_count_tAdvancedHash_row21 = 0;

				// connection name:row21
				// source node:tPostgresqlInput_12 -
				// inputs:(after_tFileInputDelimited_15) outputs:(row21,row21) |
				// target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
				// linked node: tMap_9 - inputs:(row7,row21,row22,row23)
				// outputs:(lot)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row21Struct> getLookup(matchingModeEnum_row21);

				globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);

				/**
				 * [tAdvancedHash_row21 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_12 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_12", false);
				start_Hash.put("tPostgresqlInput_12",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_12";

				int tos_count_tPostgresqlInput_12 = 0;

				int nb_line_tPostgresqlInput_12 = 0;
				java.sql.Connection conn_tPostgresqlInput_12 = null;
				conn_tPostgresqlInput_12 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_12) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_12 = dataSources_tPostgresqlInput_12
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_12);
				}

				java.sql.Statement stmt_tPostgresqlInput_12 = conn_tPostgresqlInput_12
						.createStatement();

				String dbquery_tPostgresqlInput_12 = "SELECT   \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"id_disposition\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle\",  \"" + context.prefixe_table
						+ "disposition_parcelle" + "\".\"nombre_de_lots\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_dispoparc_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_disposition_temp\",  \""
						+ context.prefixe_table + "disposition_parcelle"
						+ "\".\"id_parcelle_temp\" FROM \""
						+ context.prefixe_table + "disposition_parcelle" + "\"";

				globalMap.put("tPostgresqlInput_12_QUERY",
						dbquery_tPostgresqlInput_12);

				java.sql.ResultSet rs_tPostgresqlInput_12 = stmt_tPostgresqlInput_12
						.executeQuery(dbquery_tPostgresqlInput_12);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_12 = rs_tPostgresqlInput_12
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_12 = rsmd_tPostgresqlInput_12
						.getColumnCount();

				String tmpContent_tPostgresqlInput_12 = null;
				int column_index_tPostgresqlInput_12 = 1;
				while (rs_tPostgresqlInput_12.next()) {
					nb_line_tPostgresqlInput_12++;

					column_index_tPostgresqlInput_12 = 1;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row21.id_dispoparc = 0;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row21.id_dispoparc = rs_tPostgresqlInput_12
									.getInt(column_index_tPostgresqlInput_12);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_12 = 2;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row21.id_disposition = 0;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row21.id_disposition = rs_tPostgresqlInput_12
									.getInt(column_index_tPostgresqlInput_12);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_12 = 3;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row21.id_parcelle = 0;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row21.id_parcelle = rs_tPostgresqlInput_12
									.getInt(column_index_tPostgresqlInput_12);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_12 = 4;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row21.nombre_de_lots = null;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row21.nombre_de_lots = rs_tPostgresqlInput_12
									.getInt(column_index_tPostgresqlInput_12);
						} else {
							row21.nombre_de_lots = null;
						}

					}
					column_index_tPostgresqlInput_12 = 5;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row21.id_dispoparc_temp = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row21.id_dispoparc_temp = tmpContent_tPostgresqlInput_12;
						} else {
							row21.id_dispoparc_temp = null;
						}

					}
					column_index_tPostgresqlInput_12 = 6;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row21.id_disposition_temp = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row21.id_disposition_temp = tmpContent_tPostgresqlInput_12;
						} else {
							row21.id_disposition_temp = null;
						}

					}
					column_index_tPostgresqlInput_12 = 7;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row21.id_parcelle_temp = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row21.id_parcelle_temp = tmpContent_tPostgresqlInput_12;
						} else {
							row21.id_parcelle_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_12 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_12 main ] start
					 */

					currentComponent = "tPostgresqlInput_12";

					tos_count_tPostgresqlInput_12++;

					/**
					 * [tPostgresqlInput_12 main ] stop
					 */

					/**
					 * [tAdvancedHash_row21 main ] start
					 */

					currentComponent = "tAdvancedHash_row21";

					row21Struct row21_HashRow = new row21Struct();

					row21_HashRow.id_dispoparc = row21.id_dispoparc;

					row21_HashRow.id_disposition = row21.id_disposition;

					row21_HashRow.id_parcelle = row21.id_parcelle;

					row21_HashRow.nombre_de_lots = row21.nombre_de_lots;

					row21_HashRow.id_dispoparc_temp = row21.id_dispoparc_temp;

					row21_HashRow.id_disposition_temp = row21.id_disposition_temp;

					row21_HashRow.id_parcelle_temp = row21.id_parcelle_temp;

					tHash_Lookup_row21.put(row21_HashRow);

					tos_count_tAdvancedHash_row21++;

					/**
					 * [tAdvancedHash_row21 main ] stop
					 */

					/**
					 * [tPostgresqlInput_12 end ] start
					 */

					currentComponent = "tPostgresqlInput_12";

				}
				stmt_tPostgresqlInput_12.close();

				globalMap.put("tPostgresqlInput_12_NB_LINE",
						nb_line_tPostgresqlInput_12);

				ok_Hash.put("tPostgresqlInput_12", true);
				end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row21 end ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				tHash_Lookup_row21.endPut();

				ok_Hash.put("tAdvancedHash_row21", true);
				end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row21 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_local;

		public int getId_local() {
			return this.id_local;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public Double surface_reelle_batie;

		public Double getSurface_reelle_batie() {
			return this.surface_reelle_batie;
		}

		public Integer nb_pieces_principales;

		public Integer getNb_pieces_principales() {
			return this.nb_pieces_principales;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_local_temp == null) ? 0
								: this.id_local_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.id_local_temp == null) {
				if (other.id_local_temp != null)
					return false;
			} else if (!this.id_local_temp.equals(other.id_local_temp))
				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.id_local = this.id_local;
			other.id_dispoparc = this.id_dispoparc;
			other.identifiant_local = this.identifiant_local;
			other.code_type_local = this.code_type_local;
			other.surface_reelle_batie = this.surface_reelle_batie;
			other.nb_pieces_principales = this.nb_pieces_principales;
			other.id_local_temp = this.id_local_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.id_local_temp = this.id_local_temp;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_local_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_local_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_local = dis.readInt();

				this.id_dispoparc = dis.readInt();

				this.identifiant_local = readString(dis, ois);

				this.code_type_local = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.surface_reelle_batie = null;
				} else {
					this.surface_reelle_batie = dis.readDouble();
				}

				this.nb_pieces_principales = readInteger(dis, ois);

				this.id_dispoparc_temp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_local);

				dos.writeInt(this.id_dispoparc);

				writeString(this.identifiant_local, dos, oos);

				writeString(this.code_type_local, dos, oos);

				if (this.surface_reelle_batie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_batie);
				}

				writeInteger(this.nb_pieces_principales, dos, oos);

				writeString(this.id_dispoparc_temp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_local=" + String.valueOf(id_local));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",surface_reelle_batie="
					+ String.valueOf(surface_reelle_batie));
			sb.append(",nb_pieces_principales="
					+ String.valueOf(nb_pieces_principales));
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_local_temp,
					other.id_local_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row22";

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tPostgresqlInput_13 -
				// inputs:(after_tFileInputDelimited_15) outputs:(row22,row22) |
				// target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
				// linked node: tMap_9 - inputs:(row7,row21,row22,row23)
				// outputs:(lot)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_13 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_13", false);
				start_Hash.put("tPostgresqlInput_13",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_13";

				int tos_count_tPostgresqlInput_13 = 0;

				int nb_line_tPostgresqlInput_13 = 0;
				java.sql.Connection conn_tPostgresqlInput_13 = null;
				conn_tPostgresqlInput_13 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_13) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_13 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_13 = dataSources_tPostgresqlInput_13
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_13);
				}

				java.sql.Statement stmt_tPostgresqlInput_13 = conn_tPostgresqlInput_13
						.createStatement();

				String dbquery_tPostgresqlInput_13 = "SELECT   \""
						+ context.prefixe_table + "local"
						+ "\".\"id_local\",  \"" + context.prefixe_table
						+ "local" + "\".\"id_dispoparc\",  \""
						+ context.prefixe_table + "local"
						+ "\".\"identifiant_local\",  \""
						+ context.prefixe_table + "local"
						+ "\".\"code_type_local\",  \"" + context.prefixe_table
						+ "local" + "\".\"surface_reelle_batie\",  \""
						+ context.prefixe_table + "local"
						+ "\".\"nb_pieces_principales\",  \""
						+ context.prefixe_table + "local"
						+ "\".\"id_local_temp\",  \"" + context.prefixe_table
						+ "local" + "\".\"id_dispoparc_temp\" FROM \""
						+ context.prefixe_table + "local" + "\"";

				globalMap.put("tPostgresqlInput_13_QUERY",
						dbquery_tPostgresqlInput_13);

				java.sql.ResultSet rs_tPostgresqlInput_13 = stmt_tPostgresqlInput_13
						.executeQuery(dbquery_tPostgresqlInput_13);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_13 = rs_tPostgresqlInput_13
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_13 = rsmd_tPostgresqlInput_13
						.getColumnCount();

				String tmpContent_tPostgresqlInput_13 = null;
				int column_index_tPostgresqlInput_13 = 1;
				while (rs_tPostgresqlInput_13.next()) {
					nb_line_tPostgresqlInput_13++;

					column_index_tPostgresqlInput_13 = 1;

					if (colQtyInRs_tPostgresqlInput_13 < column_index_tPostgresqlInput_13) {
						row22.id_local = 0;
					} else {

						if (rs_tPostgresqlInput_13
								.getObject(column_index_tPostgresqlInput_13) != null) {
							row22.id_local = rs_tPostgresqlInput_13
									.getInt(column_index_tPostgresqlInput_13);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_13 = 2;

					if (colQtyInRs_tPostgresqlInput_13 < column_index_tPostgresqlInput_13) {
						row22.id_dispoparc = 0;
					} else {

						if (rs_tPostgresqlInput_13
								.getObject(column_index_tPostgresqlInput_13) != null) {
							row22.id_dispoparc = rs_tPostgresqlInput_13
									.getInt(column_index_tPostgresqlInput_13);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_13 = 3;

					if (colQtyInRs_tPostgresqlInput_13 < column_index_tPostgresqlInput_13) {
						row22.identifiant_local = null;
					} else {

						tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
								.getString(column_index_tPostgresqlInput_13);
						if (tmpContent_tPostgresqlInput_13 != null) {
							row22.identifiant_local = tmpContent_tPostgresqlInput_13;
						} else {
							row22.identifiant_local = null;
						}

					}
					column_index_tPostgresqlInput_13 = 4;

					if (colQtyInRs_tPostgresqlInput_13 < column_index_tPostgresqlInput_13) {
						row22.code_type_local = null;
					} else {

						tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
								.getString(column_index_tPostgresqlInput_13);
						if (tmpContent_tPostgresqlInput_13 != null) {
							row22.code_type_local = tmpContent_tPostgresqlInput_13;
						} else {
							row22.code_type_local = null;
						}

					}
					column_index_tPostgresqlInput_13 = 5;

					if (colQtyInRs_tPostgresqlInput_13 < column_index_tPostgresqlInput_13) {
						row22.surface_reelle_batie = null;
					} else {

						if (rs_tPostgresqlInput_13
								.getObject(column_index_tPostgresqlInput_13) != null) {
							row22.surface_reelle_batie = rs_tPostgresqlInput_13
									.getDouble(column_index_tPostgresqlInput_13);
						} else {
							row22.surface_reelle_batie = null;
						}

					}
					column_index_tPostgresqlInput_13 = 6;

					if (colQtyInRs_tPostgresqlInput_13 < column_index_tPostgresqlInput_13) {
						row22.nb_pieces_principales = null;
					} else {

						if (rs_tPostgresqlInput_13
								.getObject(column_index_tPostgresqlInput_13) != null) {
							row22.nb_pieces_principales = rs_tPostgresqlInput_13
									.getInt(column_index_tPostgresqlInput_13);
						} else {
							row22.nb_pieces_principales = null;
						}

					}
					column_index_tPostgresqlInput_13 = 7;

					if (colQtyInRs_tPostgresqlInput_13 < column_index_tPostgresqlInput_13) {
						row22.id_local_temp = null;
					} else {

						tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
								.getString(column_index_tPostgresqlInput_13);
						if (tmpContent_tPostgresqlInput_13 != null) {
							row22.id_local_temp = tmpContent_tPostgresqlInput_13;
						} else {
							row22.id_local_temp = null;
						}

					}
					column_index_tPostgresqlInput_13 = 8;

					if (colQtyInRs_tPostgresqlInput_13 < column_index_tPostgresqlInput_13) {
						row22.id_dispoparc_temp = null;
					} else {

						tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
								.getString(column_index_tPostgresqlInput_13);
						if (tmpContent_tPostgresqlInput_13 != null) {
							row22.id_dispoparc_temp = tmpContent_tPostgresqlInput_13;
						} else {
							row22.id_dispoparc_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_13 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_13 main ] start
					 */

					currentComponent = "tPostgresqlInput_13";

					tos_count_tPostgresqlInput_13++;

					/**
					 * [tPostgresqlInput_13 main ] stop
					 */

					/**
					 * [tAdvancedHash_row22 main ] start
					 */

					currentComponent = "tAdvancedHash_row22";

					row22Struct row22_HashRow = new row22Struct();

					row22_HashRow.id_local = row22.id_local;

					row22_HashRow.id_dispoparc = row22.id_dispoparc;

					row22_HashRow.identifiant_local = row22.identifiant_local;

					row22_HashRow.code_type_local = row22.code_type_local;

					row22_HashRow.surface_reelle_batie = row22.surface_reelle_batie;

					row22_HashRow.nb_pieces_principales = row22.nb_pieces_principales;

					row22_HashRow.id_local_temp = row22.id_local_temp;

					row22_HashRow.id_dispoparc_temp = row22.id_dispoparc_temp;

					tHash_Lookup_row22.put(row22_HashRow);

					tos_count_tAdvancedHash_row22++;

					/**
					 * [tAdvancedHash_row22 main ] stop
					 */

					/**
					 * [tPostgresqlInput_13 end ] start
					 */

					currentComponent = "tPostgresqlInput_13";

				}
				stmt_tPostgresqlInput_13.close();

				globalMap.put("tPostgresqlInput_13_NB_LINE",
						nb_line_tPostgresqlInput_13);

				ok_Hash.put("tPostgresqlInput_13", true);
				end_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 1);
	}

	public static class row23Struct implements
			routines.system.IPersistableComparableLookupRow<row23Struct> {
		final static byte[] commonByteArrayLock_DVF_D_insertions_donnees = new byte[0];
		static byte[] commonByteArray_DVF_D_insertions_donnees = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_volume;

		public int getId_volume() {
			return this.id_volume;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String no_volume;

		public String getNo_volume() {
			return this.no_volume;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_volume_temp == null) ? 0
								: this.id_volume_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row23Struct other = (row23Struct) obj;

			if (this.id_volume_temp == null) {
				if (other.id_volume_temp != null)
					return false;
			} else if (!this.id_volume_temp.equals(other.id_volume_temp))
				return false;

			return true;
		}

		public void copyDataTo(row23Struct other) {

			other.id_volume = this.id_volume;
			other.id_dispoparc = this.id_dispoparc;
			other.no_volume = this.no_volume;
			other.id_volume_temp = this.id_volume_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row23Struct other) {

			other.id_volume_temp = this.id_volume_temp;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_D_insertions_donnees.length) {
					if (length < 1024
							&& commonByteArray_DVF_D_insertions_donnees.length == 0) {
						commonByteArray_DVF_D_insertions_donnees = new byte[1024];
					} else {
						commonByteArray_DVF_D_insertions_donnees = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_D_insertions_donnees, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_D_insertions_donnees, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_D_insertions_donnees) {

				try {

					int length = 0;

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_volume = dis.readInt();

				this.id_dispoparc = dis.readInt();

				this.no_volume = readString(dis, ois);

				this.id_dispoparc_temp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_volume);

				dos.writeInt(this.id_dispoparc);

				writeString(this.no_volume, dos, oos);

				writeString(this.id_dispoparc_temp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_volume=" + String.valueOf(id_volume));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",no_volume=" + no_volume);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_volume_temp,
					other.id_volume_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();

				/**
				 * [tAdvancedHash_row23 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row23", false);
				start_Hash.put("tAdvancedHash_row23",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row23";

				int tos_count_tAdvancedHash_row23 = 0;

				// connection name:row23
				// source node:tPostgresqlInput_14 -
				// inputs:(after_tFileInputDelimited_15) outputs:(row23,row23) |
				// target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
				// linked node: tMap_9 - inputs:(row7,row21,row22,row23)
				// outputs:(lot)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row23Struct> getLookup(matchingModeEnum_row23);

				globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);

				/**
				 * [tAdvancedHash_row23 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_14 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_14", false);
				start_Hash.put("tPostgresqlInput_14",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_14";

				int tos_count_tPostgresqlInput_14 = 0;

				int nb_line_tPostgresqlInput_14 = 0;
				java.sql.Connection conn_tPostgresqlInput_14 = null;
				conn_tPostgresqlInput_14 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_14) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_14 = dataSources_tPostgresqlInput_14
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_14);
				}

				java.sql.Statement stmt_tPostgresqlInput_14 = conn_tPostgresqlInput_14
						.createStatement();

				String dbquery_tPostgresqlInput_14 = "SELECT  \""
						+ context.prefixe_table + "volume"
						+ "\".\"id_volume\",  \"" + context.prefixe_table
						+ "volume" + "\".\"id_dispoparc\",  \""
						+ context.prefixe_table + "volume"
						+ "\".\"no_volume\",  \"" + context.prefixe_table
						+ "volume" + "\".\"id_volume_temp\",  \""
						+ context.prefixe_table + "volume"
						+ "\".\"id_dispoparc_temp\" FROM \""
						+ context.prefixe_table + "volume" + "\"";

				globalMap.put("tPostgresqlInput_14_QUERY",
						dbquery_tPostgresqlInput_14);

				java.sql.ResultSet rs_tPostgresqlInput_14 = stmt_tPostgresqlInput_14
						.executeQuery(dbquery_tPostgresqlInput_14);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_14 = rs_tPostgresqlInput_14
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_14 = rsmd_tPostgresqlInput_14
						.getColumnCount();

				String tmpContent_tPostgresqlInput_14 = null;
				int column_index_tPostgresqlInput_14 = 1;
				while (rs_tPostgresqlInput_14.next()) {
					nb_line_tPostgresqlInput_14++;

					column_index_tPostgresqlInput_14 = 1;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row23.id_volume = 0;
					} else {

						if (rs_tPostgresqlInput_14
								.getObject(column_index_tPostgresqlInput_14) != null) {
							row23.id_volume = rs_tPostgresqlInput_14
									.getInt(column_index_tPostgresqlInput_14);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_14 = 2;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row23.id_dispoparc = 0;
					} else {

						if (rs_tPostgresqlInput_14
								.getObject(column_index_tPostgresqlInput_14) != null) {
							row23.id_dispoparc = rs_tPostgresqlInput_14
									.getInt(column_index_tPostgresqlInput_14);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_14 = 3;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row23.no_volume = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row23.no_volume = tmpContent_tPostgresqlInput_14;
						} else {
							row23.no_volume = null;
						}

					}
					column_index_tPostgresqlInput_14 = 4;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row23.id_volume_temp = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row23.id_volume_temp = tmpContent_tPostgresqlInput_14;
						} else {
							row23.id_volume_temp = null;
						}

					}
					column_index_tPostgresqlInput_14 = 5;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row23.id_dispoparc_temp = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row23.id_dispoparc_temp = tmpContent_tPostgresqlInput_14;
						} else {
							row23.id_dispoparc_temp = null;
						}

					}

					/**
					 * [tPostgresqlInput_14 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_14 main ] start
					 */

					currentComponent = "tPostgresqlInput_14";

					tos_count_tPostgresqlInput_14++;

					/**
					 * [tPostgresqlInput_14 main ] stop
					 */

					/**
					 * [tAdvancedHash_row23 main ] start
					 */

					currentComponent = "tAdvancedHash_row23";

					row23Struct row23_HashRow = new row23Struct();

					row23_HashRow.id_volume = row23.id_volume;

					row23_HashRow.id_dispoparc = row23.id_dispoparc;

					row23_HashRow.no_volume = row23.no_volume;

					row23_HashRow.id_volume_temp = row23.id_volume_temp;

					row23_HashRow.id_dispoparc_temp = row23.id_dispoparc_temp;

					tHash_Lookup_row23.put(row23_HashRow);

					tos_count_tAdvancedHash_row23++;

					/**
					 * [tAdvancedHash_row23 main ] stop
					 */

					/**
					 * [tPostgresqlInput_14 end ] start
					 */

					currentComponent = "tPostgresqlInput_14";

				}
				stmt_tPostgresqlInput_14.close();

				globalMap.put("tPostgresqlInput_14_NB_LINE",
						nb_line_tPostgresqlInput_14);

				ok_Hash.put("tPostgresqlInput_14", true);
				end_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row23 end ] start
				 */

				currentComponent = "tAdvancedHash_row23";

				tHash_Lookup_row23.endPut();

				ok_Hash.put("tAdvancedHash_row23", true);
				end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row23 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "test";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final D_insertions_donnees D_insertions_donneesClass = new D_insertions_donnees();

		int exitCode = D_insertions_donneesClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = D_insertions_donnees.class
					.getClassLoader().getResourceAsStream(
							"dvf/d_insertions_donnees_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.db_host = (String) context.getProperty("db_host");
			context.db_login = (String) context.getProperty("db_login");
			context.db_name = (String) context.getProperty("db_name");
			context.db_password = (String) context.getProperty("db_password");
			context.db_port = (String) context.getProperty("db_port");
			context.db_schema = (String) context.getProperty("db_schema");
			context.dvf_file = (String) context.getProperty("dvf_file");
			context.log_path = (String) context.getProperty("log_path");
			context.prefixe_table = (String) context
					.getProperty("prefixe_table");
			context.source_path = (String) context.getProperty("source_path");
			context.tables_correspondance_path = (String) context
					.getProperty("tables_correspondance_path");
			context.target_path = (String) context.getProperty("target_path");
			context.temp_path = (String) context.getProperty("temp_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("db_host")) {
				context.db_host = (String) parentContextMap.get("db_host");
			}
			if (parentContextMap.containsKey("db_login")) {
				context.db_login = (String) parentContextMap.get("db_login");
			}
			if (parentContextMap.containsKey("db_name")) {
				context.db_name = (String) parentContextMap.get("db_name");
			}
			if (parentContextMap.containsKey("db_password")) {
				context.db_password = (String) parentContextMap
						.get("db_password");
			}
			if (parentContextMap.containsKey("db_port")) {
				context.db_port = (String) parentContextMap.get("db_port");
			}
			if (parentContextMap.containsKey("db_schema")) {
				context.db_schema = (String) parentContextMap.get("db_schema");
			}
			if (parentContextMap.containsKey("dvf_file")) {
				context.dvf_file = (String) parentContextMap.get("dvf_file");
			}
			if (parentContextMap.containsKey("log_path")) {
				context.log_path = (String) parentContextMap.get("log_path");
			}
			if (parentContextMap.containsKey("prefixe_table")) {
				context.prefixe_table = (String) parentContextMap
						.get("prefixe_table");
			}
			if (parentContextMap.containsKey("source_path")) {
				context.source_path = (String) parentContextMap
						.get("source_path");
			}
			if (parentContextMap.containsKey("tables_correspondance_path")) {
				context.tables_correspondance_path = (String) parentContextMap
						.get("tables_correspondance_path");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
			if (parentContextMap.containsKey("temp_path")) {
				context.temp_path = (String) parentContextMap.get("temp_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_1) {

			e_tPostgresqlConnection_1.printStackTrace();
			globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : D_insertions_donnees");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 762573 characters generated by Talend Open Studio for Data Integration on the
 * 17 décembre 2013 18:32:51 CET
 ************************************************************************************************/
