// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package majic.etape2_affectprop_parcelle_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.OpenStreetMap;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.GeometryUtility;
import routines.GeometryOperation;
import routines.GeoOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: etape2_affectprop_parcelle Purpose: <br>
 * Description:  <br>
 * @author thomas.brosset@quelleville.fr
 * @version 5.3.1.r104014
 * @status 
 */
public class etape2_affectprop_parcelle implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (extfichier != null) {

				this.setProperty("extfichier", extfichier.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

			if (temp_path != null) {

				this.setProperty("temp_path", temp_path.toString());

			}

		}

		public String extfichier;

		public String getExtfichier() {
			return this.extfichier;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}

		public String temp_path;

		public String getTemp_path() {
			return this.temp_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "etape2_affectprop_parcelle";
	private final String projectName = "MAJIC";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					etape2_affectprop_parcelle.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(etape2_affectprop_parcelle.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFilterRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape2_affectprop_parcelle = new byte[0];
		static byte[] commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String comptepropcommunal;

		public String getComptepropcommunal() {
			return this.comptepropcommunal;
		}

		public String cgroup;

		public String getCgroup() {
			return this.cgroup;
		}

		public String dnumcp;

		public String getDnumcp() {
			return this.dnumcp;
		}

		public String dnulp;

		public String getDnulp() {
			return this.dnulp;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dnuper;

		public String getDnuper() {
			return this.dnuper;
		}

		public String iddnuper;

		public String getIddnuper() {
			return this.iddnuper;
		}

		public String ccodro;

		public String getCcodro() {
			return this.ccodro;
		}

		public String ccodem;

		public String getCcodem() {
			return this.ccodem;
		}

		public String gdesip;

		public String getGdesip() {
			return this.gdesip;
		}

		public String gtoper;

		public String getGtoper() {
			return this.gtoper;
		}

		public String ccoqua;

		public String getCcoqua() {
			return this.ccoqua;
		}

		public String dnatpr;

		public String getDnatpr() {
			return this.dnatpr;
		}

		public String ccogrm;

		public String getCcogrm() {
			return this.ccogrm;
		}

		public String dsglpm;

		public String getDsglpm() {
			return this.dsglpm;
		}

		public String dforme;

		public String getDforme() {
			return this.dforme;
		}

		public String ddenom;

		public String getDdenom() {
			return this.ddenom;
		}

		public String gtyp3;

		public String getGtyp3() {
			return this.gtyp3;
		}

		public String gtyp4;

		public String getGtyp4() {
			return this.gtyp4;
		}

		public String gtyp5;

		public String getGtyp5() {
			return this.gtyp5;
		}

		public String gtyp6;

		public String getGtyp6() {
			return this.gtyp6;
		}

		public String dlign3;

		public String getDlign3() {
			return this.dlign3;
		}

		public String dlign4;

		public String getDlign4() {
			return this.dlign4;
		}

		public String dlign5;

		public String getDlign5() {
			return this.dlign5;
		}

		public String dlign6;

		public String getDlign6() {
			return this.dlign6;
		}

		public String ccopay;

		public String getCcopay() {
			return this.ccopay;
		}

		public String ccodep1a2;

		public String getCcodep1a2() {
			return this.ccodep1a2;
		}

		public String ccodira;

		public String getCcodira() {
			return this.ccodira;
		}

		public String ccocom_adr;

		public String getCcocom_adr() {
			return this.ccocom_adr;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccopos;

		public String getCcopos() {
			return this.ccopos;
		}

		public String dqualp;

		public String getDqualp() {
			return this.dqualp;
		}

		public String dnomlp;

		public String getDnomlp() {
			return this.dnomlp;
		}

		public String dprnlp;

		public String getDprnlp() {
			return this.dprnlp;
		}

		public String jdatnss;

		public String getJdatnss() {
			return this.jdatnss;
		}

		public String dldnss;

		public String getDldnss() {
			return this.dldnss;
		}

		public String epxnee;

		public String getEpxnee() {
			return this.epxnee;
		}

		public String dnomcp;

		public String getDnomcp() {
			return this.dnomcp;
		}

		public String dprncp;

		public String getDprncp() {
			return this.dprncp;
		}

		public String dsiren;

		public String getDsiren() {
			return this.dsiren;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape2_affectprop_parcelle,
						0, length);
				strReturn = new String(
						commonByteArray_MAJIC_etape2_affectprop_parcelle, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape2_affectprop_parcelle) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.dnupro = readString(dis);

					this.comptepropcommunal = readString(dis);

					this.cgroup = readString(dis);

					this.dnumcp = readString(dis);

					this.dnulp = readString(dis);

					this.ccocif = readString(dis);

					this.dnuper = readString(dis);

					this.iddnuper = readString(dis);

					this.ccodro = readString(dis);

					this.ccodem = readString(dis);

					this.gdesip = readString(dis);

					this.gtoper = readString(dis);

					this.ccoqua = readString(dis);

					this.dnatpr = readString(dis);

					this.ccogrm = readString(dis);

					this.dsglpm = readString(dis);

					this.dforme = readString(dis);

					this.ddenom = readString(dis);

					this.gtyp3 = readString(dis);

					this.gtyp4 = readString(dis);

					this.gtyp5 = readString(dis);

					this.gtyp6 = readString(dis);

					this.dlign3 = readString(dis);

					this.dlign4 = readString(dis);

					this.dlign5 = readString(dis);

					this.dlign6 = readString(dis);

					this.ccopay = readString(dis);

					this.ccodep1a2 = readString(dis);

					this.ccodira = readString(dis);

					this.ccocom_adr = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccopos = readString(dis);

					this.dqualp = readString(dis);

					this.dnomlp = readString(dis);

					this.dprnlp = readString(dis);

					this.jdatnss = readString(dis);

					this.dldnss = readString(dis);

					this.epxnee = readString(dis);

					this.dnomcp = readString(dis);

					this.dprncp = readString(dis);

					this.dsiren = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.comptepropcommunal, dos);

				// String

				writeString(this.cgroup, dos);

				// String

				writeString(this.dnumcp, dos);

				// String

				writeString(this.dnulp, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.dnuper, dos);

				// String

				writeString(this.iddnuper, dos);

				// String

				writeString(this.ccodro, dos);

				// String

				writeString(this.ccodem, dos);

				// String

				writeString(this.gdesip, dos);

				// String

				writeString(this.gtoper, dos);

				// String

				writeString(this.ccoqua, dos);

				// String

				writeString(this.dnatpr, dos);

				// String

				writeString(this.ccogrm, dos);

				// String

				writeString(this.dsglpm, dos);

				// String

				writeString(this.dforme, dos);

				// String

				writeString(this.ddenom, dos);

				// String

				writeString(this.gtyp3, dos);

				// String

				writeString(this.gtyp4, dos);

				// String

				writeString(this.gtyp5, dos);

				// String

				writeString(this.gtyp6, dos);

				// String

				writeString(this.dlign3, dos);

				// String

				writeString(this.dlign4, dos);

				// String

				writeString(this.dlign5, dos);

				// String

				writeString(this.dlign6, dos);

				// String

				writeString(this.ccopay, dos);

				// String

				writeString(this.ccodep1a2, dos);

				// String

				writeString(this.ccodira, dos);

				// String

				writeString(this.ccocom_adr, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccopos, dos);

				// String

				writeString(this.dqualp, dos);

				// String

				writeString(this.dnomlp, dos);

				// String

				writeString(this.dprnlp, dos);

				// String

				writeString(this.jdatnss, dos);

				// String

				writeString(this.dldnss, dos);

				// String

				writeString(this.epxnee, dos);

				// String

				writeString(this.dnomcp, dos);

				// String

				writeString(this.dprncp, dos);

				// String

				writeString(this.dsiren, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",dnupro=" + dnupro);
			sb.append(",comptepropcommunal=" + comptepropcommunal);
			sb.append(",cgroup=" + cgroup);
			sb.append(",dnumcp=" + dnumcp);
			sb.append(",dnulp=" + dnulp);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dnuper=" + dnuper);
			sb.append(",iddnuper=" + iddnuper);
			sb.append(",ccodro=" + ccodro);
			sb.append(",ccodem=" + ccodem);
			sb.append(",gdesip=" + gdesip);
			sb.append(",gtoper=" + gtoper);
			sb.append(",ccoqua=" + ccoqua);
			sb.append(",dnatpr=" + dnatpr);
			sb.append(",ccogrm=" + ccogrm);
			sb.append(",dsglpm=" + dsglpm);
			sb.append(",dforme=" + dforme);
			sb.append(",ddenom=" + ddenom);
			sb.append(",gtyp3=" + gtyp3);
			sb.append(",gtyp4=" + gtyp4);
			sb.append(",gtyp5=" + gtyp5);
			sb.append(",gtyp6=" + gtyp6);
			sb.append(",dlign3=" + dlign3);
			sb.append(",dlign4=" + dlign4);
			sb.append(",dlign5=" + dlign5);
			sb.append(",dlign6=" + dlign6);
			sb.append(",ccopay=" + ccopay);
			sb.append(",ccodep1a2=" + ccodep1a2);
			sb.append(",ccodira=" + ccodira);
			sb.append(",ccocom_adr=" + ccocom_adr);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccopos=" + ccopos);
			sb.append(",dqualp=" + dqualp);
			sb.append(",dnomlp=" + dnomlp);
			sb.append(",dprnlp=" + dprnlp);
			sb.append(",jdatnss=" + jdatnss);
			sb.append(",dldnss=" + dldnss);
			sb.append(",epxnee=" + epxnee);
			sb.append(",dnomcp=" + dnomcp);
			sb.append(",dprncp=" + dprncp);
			sb.append(",dsiren=" + dsiren);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape2_affectprop_parcelle = new byte[0];
		static byte[] commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String comptepropcommunal;

		public String getComptepropcommunal() {
			return this.comptepropcommunal;
		}

		public String cgroup;

		public String getCgroup() {
			return this.cgroup;
		}

		public String dnumcp;

		public String getDnumcp() {
			return this.dnumcp;
		}

		public String dnulp;

		public String getDnulp() {
			return this.dnulp;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dnuper;

		public String getDnuper() {
			return this.dnuper;
		}

		public String iddnuper;

		public String getIddnuper() {
			return this.iddnuper;
		}

		public String ccodro;

		public String getCcodro() {
			return this.ccodro;
		}

		public String ccodem;

		public String getCcodem() {
			return this.ccodem;
		}

		public String gdesip;

		public String getGdesip() {
			return this.gdesip;
		}

		public String gtoper;

		public String getGtoper() {
			return this.gtoper;
		}

		public String ccoqua;

		public String getCcoqua() {
			return this.ccoqua;
		}

		public String dnatpr;

		public String getDnatpr() {
			return this.dnatpr;
		}

		public String ccogrm;

		public String getCcogrm() {
			return this.ccogrm;
		}

		public String dsglpm;

		public String getDsglpm() {
			return this.dsglpm;
		}

		public String dforme;

		public String getDforme() {
			return this.dforme;
		}

		public String ddenom;

		public String getDdenom() {
			return this.ddenom;
		}

		public String gtyp3;

		public String getGtyp3() {
			return this.gtyp3;
		}

		public String gtyp4;

		public String getGtyp4() {
			return this.gtyp4;
		}

		public String gtyp5;

		public String getGtyp5() {
			return this.gtyp5;
		}

		public String gtyp6;

		public String getGtyp6() {
			return this.gtyp6;
		}

		public String dlign3;

		public String getDlign3() {
			return this.dlign3;
		}

		public String dlign4;

		public String getDlign4() {
			return this.dlign4;
		}

		public String dlign5;

		public String getDlign5() {
			return this.dlign5;
		}

		public String dlign6;

		public String getDlign6() {
			return this.dlign6;
		}

		public String ccopay;

		public String getCcopay() {
			return this.ccopay;
		}

		public String ccodep1a2;

		public String getCcodep1a2() {
			return this.ccodep1a2;
		}

		public String ccodira;

		public String getCcodira() {
			return this.ccodira;
		}

		public String ccocom_adr;

		public String getCcocom_adr() {
			return this.ccocom_adr;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccopos;

		public String getCcopos() {
			return this.ccopos;
		}

		public String dqualp;

		public String getDqualp() {
			return this.dqualp;
		}

		public String dnomlp;

		public String getDnomlp() {
			return this.dnomlp;
		}

		public String dprnlp;

		public String getDprnlp() {
			return this.dprnlp;
		}

		public String jdatnss;

		public String getJdatnss() {
			return this.jdatnss;
		}

		public String dldnss;

		public String getDldnss() {
			return this.dldnss;
		}

		public String epxnee;

		public String getEpxnee() {
			return this.epxnee;
		}

		public String dnomcp;

		public String getDnomcp() {
			return this.dnomcp;
		}

		public String dprncp;

		public String getDprncp() {
			return this.dprncp;
		}

		public String dsiren;

		public String getDsiren() {
			return this.dsiren;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape2_affectprop_parcelle,
						0, length);
				strReturn = new String(
						commonByteArray_MAJIC_etape2_affectprop_parcelle, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape2_affectprop_parcelle) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.dnupro = readString(dis);

					this.comptepropcommunal = readString(dis);

					this.cgroup = readString(dis);

					this.dnumcp = readString(dis);

					this.dnulp = readString(dis);

					this.ccocif = readString(dis);

					this.dnuper = readString(dis);

					this.iddnuper = readString(dis);

					this.ccodro = readString(dis);

					this.ccodem = readString(dis);

					this.gdesip = readString(dis);

					this.gtoper = readString(dis);

					this.ccoqua = readString(dis);

					this.dnatpr = readString(dis);

					this.ccogrm = readString(dis);

					this.dsglpm = readString(dis);

					this.dforme = readString(dis);

					this.ddenom = readString(dis);

					this.gtyp3 = readString(dis);

					this.gtyp4 = readString(dis);

					this.gtyp5 = readString(dis);

					this.gtyp6 = readString(dis);

					this.dlign3 = readString(dis);

					this.dlign4 = readString(dis);

					this.dlign5 = readString(dis);

					this.dlign6 = readString(dis);

					this.ccopay = readString(dis);

					this.ccodep1a2 = readString(dis);

					this.ccodira = readString(dis);

					this.ccocom_adr = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccopos = readString(dis);

					this.dqualp = readString(dis);

					this.dnomlp = readString(dis);

					this.dprnlp = readString(dis);

					this.jdatnss = readString(dis);

					this.dldnss = readString(dis);

					this.epxnee = readString(dis);

					this.dnomcp = readString(dis);

					this.dprncp = readString(dis);

					this.dsiren = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.comptepropcommunal, dos);

				// String

				writeString(this.cgroup, dos);

				// String

				writeString(this.dnumcp, dos);

				// String

				writeString(this.dnulp, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.dnuper, dos);

				// String

				writeString(this.iddnuper, dos);

				// String

				writeString(this.ccodro, dos);

				// String

				writeString(this.ccodem, dos);

				// String

				writeString(this.gdesip, dos);

				// String

				writeString(this.gtoper, dos);

				// String

				writeString(this.ccoqua, dos);

				// String

				writeString(this.dnatpr, dos);

				// String

				writeString(this.ccogrm, dos);

				// String

				writeString(this.dsglpm, dos);

				// String

				writeString(this.dforme, dos);

				// String

				writeString(this.ddenom, dos);

				// String

				writeString(this.gtyp3, dos);

				// String

				writeString(this.gtyp4, dos);

				// String

				writeString(this.gtyp5, dos);

				// String

				writeString(this.gtyp6, dos);

				// String

				writeString(this.dlign3, dos);

				// String

				writeString(this.dlign4, dos);

				// String

				writeString(this.dlign5, dos);

				// String

				writeString(this.dlign6, dos);

				// String

				writeString(this.ccopay, dos);

				// String

				writeString(this.ccodep1a2, dos);

				// String

				writeString(this.ccodira, dos);

				// String

				writeString(this.ccocom_adr, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccopos, dos);

				// String

				writeString(this.dqualp, dos);

				// String

				writeString(this.dnomlp, dos);

				// String

				writeString(this.dprnlp, dos);

				// String

				writeString(this.jdatnss, dos);

				// String

				writeString(this.dldnss, dos);

				// String

				writeString(this.epxnee, dos);

				// String

				writeString(this.dnomcp, dos);

				// String

				writeString(this.dprncp, dos);

				// String

				writeString(this.dsiren, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",dnupro=" + dnupro);
			sb.append(",comptepropcommunal=" + comptepropcommunal);
			sb.append(",cgroup=" + cgroup);
			sb.append(",dnumcp=" + dnumcp);
			sb.append(",dnulp=" + dnulp);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dnuper=" + dnuper);
			sb.append(",iddnuper=" + iddnuper);
			sb.append(",ccodro=" + ccodro);
			sb.append(",ccodem=" + ccodem);
			sb.append(",gdesip=" + gdesip);
			sb.append(",gtoper=" + gtoper);
			sb.append(",ccoqua=" + ccoqua);
			sb.append(",dnatpr=" + dnatpr);
			sb.append(",ccogrm=" + ccogrm);
			sb.append(",dsglpm=" + dsglpm);
			sb.append(",dforme=" + dforme);
			sb.append(",ddenom=" + ddenom);
			sb.append(",gtyp3=" + gtyp3);
			sb.append(",gtyp4=" + gtyp4);
			sb.append(",gtyp5=" + gtyp5);
			sb.append(",gtyp6=" + gtyp6);
			sb.append(",dlign3=" + dlign3);
			sb.append(",dlign4=" + dlign4);
			sb.append(",dlign5=" + dlign5);
			sb.append(",dlign6=" + dlign6);
			sb.append(",ccopay=" + ccopay);
			sb.append(",ccodep1a2=" + ccodep1a2);
			sb.append(",ccodira=" + ccodira);
			sb.append(",ccocom_adr=" + ccocom_adr);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccopos=" + ccopos);
			sb.append(",dqualp=" + dqualp);
			sb.append(",dnomlp=" + dnomlp);
			sb.append(",dprnlp=" + dprnlp);
			sb.append(",jdatnss=" + jdatnss);
			sb.append(",dldnss=" + dldnss);
			sb.append(",epxnee=" + epxnee);
			sb.append(",dnomcp=" + dnomcp);
			sb.append(",dprncp=" + dprncp);
			sb.append(",dsiren=" + dsiren);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.target_path + "proprietaires_valid.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				String[] headColutFileOutputDelimited_2 = new String[47];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
				try {
					CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_2,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_2
							.setSeparator(csvSettings_tFileOutputDelimited_2
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_2
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_2.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_2
										.getRowDelim());
					}

					if (filetFileOutputDelimited_2.length() == 0) {

						headColutFileOutputDelimited_2[0] = "ccodep";

						headColutFileOutputDelimited_2[1] = "ccodir";

						headColutFileOutputDelimited_2[2] = "ccocom";

						headColutFileOutputDelimited_2[3] = "dnupro";

						headColutFileOutputDelimited_2[4] = "comptepropcommunal";

						headColutFileOutputDelimited_2[5] = "cgroup";

						headColutFileOutputDelimited_2[6] = "dnumcp";

						headColutFileOutputDelimited_2[7] = "dnulp";

						headColutFileOutputDelimited_2[8] = "ccocif";

						headColutFileOutputDelimited_2[9] = "dnuper";

						headColutFileOutputDelimited_2[10] = "iddnuper";

						headColutFileOutputDelimited_2[11] = "ccodro";

						headColutFileOutputDelimited_2[12] = "ccodem";

						headColutFileOutputDelimited_2[13] = "gdesip";

						headColutFileOutputDelimited_2[14] = "gtoper";

						headColutFileOutputDelimited_2[15] = "ccoqua";

						headColutFileOutputDelimited_2[16] = "dnatpr";

						headColutFileOutputDelimited_2[17] = "ccogrm";

						headColutFileOutputDelimited_2[18] = "dsglpm";

						headColutFileOutputDelimited_2[19] = "dforme";

						headColutFileOutputDelimited_2[20] = "ddenom";

						headColutFileOutputDelimited_2[21] = "gtyp3";

						headColutFileOutputDelimited_2[22] = "gtyp4";

						headColutFileOutputDelimited_2[23] = "gtyp5";

						headColutFileOutputDelimited_2[24] = "gtyp6";

						headColutFileOutputDelimited_2[25] = "dlign3";

						headColutFileOutputDelimited_2[26] = "dlign4";

						headColutFileOutputDelimited_2[27] = "dlign5";

						headColutFileOutputDelimited_2[28] = "dlign6";

						headColutFileOutputDelimited_2[29] = "ccopay";

						headColutFileOutputDelimited_2[30] = "ccodep1a2";

						headColutFileOutputDelimited_2[31] = "ccodira";

						headColutFileOutputDelimited_2[32] = "ccocom_adr";

						headColutFileOutputDelimited_2[33] = "ccovoi";

						headColutFileOutputDelimited_2[34] = "ccoriv";

						headColutFileOutputDelimited_2[35] = "dnvoiri";

						headColutFileOutputDelimited_2[36] = "dindic";

						headColutFileOutputDelimited_2[37] = "ccopos";

						headColutFileOutputDelimited_2[38] = "dqualp";

						headColutFileOutputDelimited_2[39] = "dnomlp";

						headColutFileOutputDelimited_2[40] = "dprnlp";

						headColutFileOutputDelimited_2[41] = "jdatnss";

						headColutFileOutputDelimited_2[42] = "dldnss";

						headColutFileOutputDelimited_2[43] = "epxnee";

						headColutFileOutputDelimited_2[44] = "dnomcp";

						headColutFileOutputDelimited_2[45] = "dprncp";

						headColutFileOutputDelimited_2[46] = "dsiren";

						CsvWritertFileOutputDelimited_2
								.writeNext(headColutFileOutputDelimited_2);
						CsvWritertFileOutputDelimited_2.flush();

					}

					CsvWritertFileOutputDelimited_2
							.setEscapeChar(csvSettings_tFileOutputDelimited_2
									.getEscapeChar());
					CsvWritertFileOutputDelimited_2
							.setQuoteChar(csvSettings_tFileOutputDelimited_2
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_2
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tFilterRow_1 begin ] start
					 */

					ok_Hash.put("tFilterRow_1", false);
					start_Hash.put("tFilterRow_1", System.currentTimeMillis());
					currentComponent = "tFilterRow_1";

					int tos_count_tFilterRow_1 = 0;
					int nb_line_tFilterRow_1 = 0;
					int nb_line_ok_tFilterRow_1 = 0;
					int nb_line_reject_tFilterRow_1 = 0;

					class Operator_tFilterRow_1 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_1(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_1 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_2", false);
					start_Hash.put("tFileInputDelimited_2",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_2";

					int tos_count_tFileInputDelimited_2 = 0;

					int nb_line_tFileInputDelimited_2 = 0;
					int footer_tFileInputDelimited_2 = 0;
					int totalLinetFileInputDelimited_2 = 0;
					int limittFileInputDelimited_2 = -1;
					int lastLinetFileInputDelimited_2 = -1;

					char fieldSeparator_tFileInputDelimited_2[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) ";").length() > 0) {
						fieldSeparator_tFileInputDelimited_2 = ((String) ";")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_2[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_2 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_2 = /**
					 * Start field
					 * tFileInputDelimited_2:FILENAME
					 */
					context.target_path + "proprietaires.csv"/**
					 * End field
					 * tFileInputDelimited_2:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

					try {

						String[] rowtFileInputDelimited_2 = null;
						int currentLinetFileInputDelimited_2 = 0;
						int outputLinetFileInputDelimited_2 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_2 = 0;
								if (footer_value_tFileInputDelimited_2 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}

							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

							if (footer_tFileInputDelimited_2 > 0) {
								for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
									csvReadertFileInputDelimited_2.readNext();
								}
								csvReadertFileInputDelimited_2
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_2
										.readNext()) {

									rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
											.getValues();
									if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_2[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

										totalLinetFileInputDelimited_2++;

									}

								}
								int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
										- footer_tFileInputDelimited_2 < 0 ? 0
										: totalLinetFileInputDelimited_2
												- footer_tFileInputDelimited_2;
								if (lastLinetFileInputDelimited_2 > 0) {
									lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
											: lastLineTemptFileInputDelimited_2;
								} else {
									lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
								}

								csvReadertFileInputDelimited_2.close();
								if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_2,
											fieldSeparator_tFileInputDelimited_2[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_2)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_2[0]);
								}
								csvReadertFileInputDelimited_2
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
									csvReadertFileInputDelimited_2
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_2[0]);

								csvReadertFileInputDelimited_2
										.setQuoteChar('"');

								csvReadertFileInputDelimited_2
										.setEscapeChar(csvReadertFileInputDelimited_2
												.getQuoteChar());

							}

							if (limittFileInputDelimited_2 != 0) {
								for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
									csvReadertFileInputDelimited_2.readNext();
								}
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_2 != 0
								&& csvReadertFileInputDelimited_2 != null
								&& csvReadertFileInputDelimited_2.readNext()) {

							rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
									.getValues();

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_2++;

							if (lastLinetFileInputDelimited_2 > -1
									&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
								break;
							}
							outputLinetFileInputDelimited_2++;
							if (limittFileInputDelimited_2 > 0
									&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
								break;
							}

							row2 = null;

							boolean whetherReject_tFileInputDelimited_2 = false;
							row2 = new row2Struct();
							try {

								if (rowtFileInputDelimited_2.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_2[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row2.ccodep = null;

									row2.ccodir = null;

									row2.ccocom = null;

									row2.dnupro = null;

									row2.comptepropcommunal = null;

									row2.cgroup = null;

									row2.dnumcp = null;

									row2.dnulp = null;

									row2.ccocif = null;

									row2.dnuper = null;

									row2.iddnuper = null;

									row2.ccodro = null;

									row2.ccodem = null;

									row2.gdesip = null;

									row2.gtoper = null;

									row2.ccoqua = null;

									row2.dnatpr = null;

									row2.ccogrm = null;

									row2.dsglpm = null;

									row2.dforme = null;

									row2.ddenom = null;

									row2.gtyp3 = null;

									row2.gtyp4 = null;

									row2.gtyp5 = null;

									row2.gtyp6 = null;

									row2.dlign3 = null;

									row2.dlign4 = null;

									row2.dlign5 = null;

									row2.dlign6 = null;

									row2.ccopay = null;

									row2.ccodep1a2 = null;

									row2.ccodira = null;

									row2.ccocom_adr = null;

									row2.ccovoi = null;

									row2.ccoriv = null;

									row2.dnvoiri = null;

									row2.dindic = null;

									row2.ccopos = null;

									row2.dqualp = null;

									row2.dnomlp = null;

									row2.dprnlp = null;

									row2.jdatnss = null;

									row2.dldnss = null;

									row2.epxnee = null;

									row2.dnomcp = null;

									row2.dprncp = null;

									row2.dsiren = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																					// Index

									columnIndexWithD_tFileInputDelimited_2 = 0;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccodep = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccodep = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 1;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccodir = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccodir = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 2;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccocom = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccocom = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 3;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dnupro = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dnupro = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 4;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.comptepropcommunal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.comptepropcommunal = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 5;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.cgroup = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.cgroup = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 6;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dnumcp = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dnumcp = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 7;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dnulp = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dnulp = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 8;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccocif = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccocif = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 9;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dnuper = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dnuper = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 10;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.iddnuper = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.iddnuper = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 11;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccodro = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccodro = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 12;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccodem = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccodem = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 13;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.gdesip = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.gdesip = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 14;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.gtoper = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.gtoper = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 15;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccoqua = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccoqua = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 16;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dnatpr = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dnatpr = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 17;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccogrm = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccogrm = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 18;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dsglpm = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dsglpm = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 19;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dforme = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dforme = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 20;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ddenom = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ddenom = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 21;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.gtyp3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.gtyp3 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 22;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.gtyp4 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.gtyp4 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 23;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.gtyp5 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.gtyp5 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 24;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.gtyp6 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.gtyp6 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 25;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dlign3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dlign3 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 26;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dlign4 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dlign4 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 27;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dlign5 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dlign5 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 28;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dlign6 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dlign6 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 29;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccopay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccopay = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 30;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccodep1a2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccodep1a2 = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 31;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccodira = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccodira = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 32;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccocom_adr = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccocom_adr = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 33;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccovoi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccovoi = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 34;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccoriv = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccoriv = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 35;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dnvoiri = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dnvoiri = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 36;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dindic = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dindic = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 37;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.ccopos = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.ccopos = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 38;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dqualp = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dqualp = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 39;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dnomlp = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dnomlp = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 40;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dprnlp = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dprnlp = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 41;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.jdatnss = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.jdatnss = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 42;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dldnss = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dldnss = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 43;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.epxnee = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.epxnee = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 44;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dnomcp = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dnomcp = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 45;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dprncp = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dprncp = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 46;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row2.dsiren = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row2.dsiren = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_2 = true;

								System.err.println(e.getMessage());
								row2 = null;

							}

							/**
							 * [tFileInputDelimited_2 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_2 main ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							tos_count_tFileInputDelimited_2++;

							/**
							 * [tFileInputDelimited_2 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								row3 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
										"&&");
								ope_tFilterRow_1
										.matches(
												(("C".equals(row2.ccodro)
														|| "F".equals(row2.ccodro)
														|| "J".equals(row2.ccodro)
														|| "L".equals(row2.ccodro)
														|| "N".equals(row2.ccodro)
														|| "P".equals(row2.ccodro)
														|| "V".equals(row2.ccodro) || "X"
														.equals(row2.ccodro))),
												"advanced condition failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row3 == null) {
										row3 = new row3Struct();
									}
									row3.ccodep = row2.ccodep;
									row3.ccodir = row2.ccodir;
									row3.ccocom = row2.ccocom;
									row3.dnupro = row2.dnupro;
									row3.comptepropcommunal = row2.comptepropcommunal;
									row3.cgroup = row2.cgroup;
									row3.dnumcp = row2.dnumcp;
									row3.dnulp = row2.dnulp;
									row3.ccocif = row2.ccocif;
									row3.dnuper = row2.dnuper;
									row3.iddnuper = row2.iddnuper;
									row3.ccodro = row2.ccodro;
									row3.ccodem = row2.ccodem;
									row3.gdesip = row2.gdesip;
									row3.gtoper = row2.gtoper;
									row3.ccoqua = row2.ccoqua;
									row3.dnatpr = row2.dnatpr;
									row3.ccogrm = row2.ccogrm;
									row3.dsglpm = row2.dsglpm;
									row3.dforme = row2.dforme;
									row3.ddenom = row2.ddenom;
									row3.gtyp3 = row2.gtyp3;
									row3.gtyp4 = row2.gtyp4;
									row3.gtyp5 = row2.gtyp5;
									row3.gtyp6 = row2.gtyp6;
									row3.dlign3 = row2.dlign3;
									row3.dlign4 = row2.dlign4;
									row3.dlign5 = row2.dlign5;
									row3.dlign6 = row2.dlign6;
									row3.ccopay = row2.ccopay;
									row3.ccodep1a2 = row2.ccodep1a2;
									row3.ccodira = row2.ccodira;
									row3.ccocom_adr = row2.ccocom_adr;
									row3.ccovoi = row2.ccovoi;
									row3.ccoriv = row2.ccoriv;
									row3.dnvoiri = row2.dnvoiri;
									row3.dindic = row2.dindic;
									row3.ccopos = row2.ccopos;
									row3.dqualp = row2.dqualp;
									row3.dnomlp = row2.dnomlp;
									row3.dprnlp = row2.dprnlp;
									row3.jdatnss = row2.jdatnss;
									row3.dldnss = row2.dldnss;
									row3.epxnee = row2.epxnee;
									row3.dnomcp = row2.dnomcp;
									row3.dprncp = row2.dprncp;
									row3.dsiren = row2.dsiren;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */
								// Start of branch "row3"
								if (row3 != null) {

									/**
									 * [tFileOutputDelimited_2 main ] start
									 */

									currentComponent = "tFileOutputDelimited_2";

									String[] rowtFileOutputDelimited_2 = new String[47];

									rowtFileOutputDelimited_2[0] = row3.ccodep == null ? ""
											: row3.ccodep;

									rowtFileOutputDelimited_2[1] = row3.ccodir == null ? ""
											: row3.ccodir;

									rowtFileOutputDelimited_2[2] = row3.ccocom == null ? ""
											: row3.ccocom;

									rowtFileOutputDelimited_2[3] = row3.dnupro == null ? ""
											: row3.dnupro;

									rowtFileOutputDelimited_2[4] = row3.comptepropcommunal == null ? ""
											: row3.comptepropcommunal;

									rowtFileOutputDelimited_2[5] = row3.cgroup == null ? ""
											: row3.cgroup;

									rowtFileOutputDelimited_2[6] = row3.dnumcp == null ? ""
											: row3.dnumcp;

									rowtFileOutputDelimited_2[7] = row3.dnulp == null ? ""
											: row3.dnulp;

									rowtFileOutputDelimited_2[8] = row3.ccocif == null ? ""
											: row3.ccocif;

									rowtFileOutputDelimited_2[9] = row3.dnuper == null ? ""
											: row3.dnuper;

									rowtFileOutputDelimited_2[10] = row3.iddnuper == null ? ""
											: row3.iddnuper;

									rowtFileOutputDelimited_2[11] = row3.ccodro == null ? ""
											: row3.ccodro;

									rowtFileOutputDelimited_2[12] = row3.ccodem == null ? ""
											: row3.ccodem;

									rowtFileOutputDelimited_2[13] = row3.gdesip == null ? ""
											: row3.gdesip;

									rowtFileOutputDelimited_2[14] = row3.gtoper == null ? ""
											: row3.gtoper;

									rowtFileOutputDelimited_2[15] = row3.ccoqua == null ? ""
											: row3.ccoqua;

									rowtFileOutputDelimited_2[16] = row3.dnatpr == null ? ""
											: row3.dnatpr;

									rowtFileOutputDelimited_2[17] = row3.ccogrm == null ? ""
											: row3.ccogrm;

									rowtFileOutputDelimited_2[18] = row3.dsglpm == null ? ""
											: row3.dsglpm;

									rowtFileOutputDelimited_2[19] = row3.dforme == null ? ""
											: row3.dforme;

									rowtFileOutputDelimited_2[20] = row3.ddenom == null ? ""
											: row3.ddenom;

									rowtFileOutputDelimited_2[21] = row3.gtyp3 == null ? ""
											: row3.gtyp3;

									rowtFileOutputDelimited_2[22] = row3.gtyp4 == null ? ""
											: row3.gtyp4;

									rowtFileOutputDelimited_2[23] = row3.gtyp5 == null ? ""
											: row3.gtyp5;

									rowtFileOutputDelimited_2[24] = row3.gtyp6 == null ? ""
											: row3.gtyp6;

									rowtFileOutputDelimited_2[25] = row3.dlign3 == null ? ""
											: row3.dlign3;

									rowtFileOutputDelimited_2[26] = row3.dlign4 == null ? ""
											: row3.dlign4;

									rowtFileOutputDelimited_2[27] = row3.dlign5 == null ? ""
											: row3.dlign5;

									rowtFileOutputDelimited_2[28] = row3.dlign6 == null ? ""
											: row3.dlign6;

									rowtFileOutputDelimited_2[29] = row3.ccopay == null ? ""
											: row3.ccopay;

									rowtFileOutputDelimited_2[30] = row3.ccodep1a2 == null ? ""
											: row3.ccodep1a2;

									rowtFileOutputDelimited_2[31] = row3.ccodira == null ? ""
											: row3.ccodira;

									rowtFileOutputDelimited_2[32] = row3.ccocom_adr == null ? ""
											: row3.ccocom_adr;

									rowtFileOutputDelimited_2[33] = row3.ccovoi == null ? ""
											: row3.ccovoi;

									rowtFileOutputDelimited_2[34] = row3.ccoriv == null ? ""
											: row3.ccoriv;

									rowtFileOutputDelimited_2[35] = row3.dnvoiri == null ? ""
											: row3.dnvoiri;

									rowtFileOutputDelimited_2[36] = row3.dindic == null ? ""
											: row3.dindic;

									rowtFileOutputDelimited_2[37] = row3.ccopos == null ? ""
											: row3.ccopos;

									rowtFileOutputDelimited_2[38] = row3.dqualp == null ? ""
											: row3.dqualp;

									rowtFileOutputDelimited_2[39] = row3.dnomlp == null ? ""
											: row3.dnomlp;

									rowtFileOutputDelimited_2[40] = row3.dprnlp == null ? ""
											: row3.dprnlp;

									rowtFileOutputDelimited_2[41] = row3.jdatnss == null ? ""
											: row3.jdatnss;

									rowtFileOutputDelimited_2[42] = row3.dldnss == null ? ""
											: row3.dldnss;

									rowtFileOutputDelimited_2[43] = row3.epxnee == null ? ""
											: row3.epxnee;

									rowtFileOutputDelimited_2[44] = row3.dnomcp == null ? ""
											: row3.dnomcp;

									rowtFileOutputDelimited_2[45] = row3.dprncp == null ? ""
											: row3.dprncp;

									rowtFileOutputDelimited_2[46] = row3.dsiren == null ? ""
											: row3.dsiren;

									nb_line_tFileOutputDelimited_2++;
									CsvWritertFileOutputDelimited_2
											.writeNext(rowtFileOutputDelimited_2);

									tos_count_tFileOutputDelimited_2++;

									/**
									 * [tFileOutputDelimited_2 main ] stop
									 */

								} // End of branch "row3"

							} // End of branch "row2"

							/**
							 * [tFileInputDelimited_2 end ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							nb_line_tFileInputDelimited_2++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_2 != null) {
								csvReadertFileInputDelimited_2.close();
							}
						}
						if (csvReadertFileInputDelimited_2 != null) {
							globalMap.put("tFileInputDelimited_2_NB_LINE",
									nb_line_tFileInputDelimited_2);
						}
					}

					ok_Hash.put("tFileInputDelimited_2", true);
					end_Hash.put("tFileInputDelimited_2",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_2 end ] stop
					 */

					/**
					 * [tFilterRow_1 end ] start
					 */

					currentComponent = "tFilterRow_1";

					globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
					globalMap.put("tFilterRow_1_NB_LINE_OK",
							nb_line_ok_tFilterRow_1);
					globalMap.put("tFilterRow_1_NB_LINE_REJECT",
							nb_line_reject_tFilterRow_1);

					ok_Hash.put("tFilterRow_1", true);
					end_Hash.put("tFilterRow_1", System.currentTimeMillis());

					/**
					 * [tFilterRow_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape2_affectprop_parcelle = new byte[0];
		static byte[] commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[0];

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String comptepropcommunal;

		public String getComptepropcommunal() {
			return this.comptepropcommunal;
		}

		public String dnuper;

		public String getDnuper() {
			return this.dnuper;
		}

		public String dnulp;

		public String getDnulp() {
			return this.dnulp;
		}

		public String ccodro;

		public String getCcodro() {
			return this.ccodro;
		}

		public String ccodem;

		public String getCcodem() {
			return this.ccodem;
		}

		public String dnatpr;

		public String getDnatpr() {
			return this.dnatpr;
		}

		public String ccogrm;

		public String getCcogrm() {
			return this.ccogrm;
		}

		public String dforme;

		public String getDforme() {
			return this.dforme;
		}

		public String ddenom;

		public String getDdenom() {
			return this.ddenom;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape2_affectprop_parcelle,
						0, length);
				strReturn = new String(
						commonByteArray_MAJIC_etape2_affectprop_parcelle, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape2_affectprop_parcelle) {

				try {

					int length = 0;

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.id_parc = readString(dis);

					this.ccodep = readString(dis);

					this.ccocom = readString(dis);

					this.dnupro = readString(dis);

					this.comptepropcommunal = readString(dis);

					this.dnuper = readString(dis);

					this.dnulp = readString(dis);

					this.ccodro = readString(dis);

					this.ccodem = readString(dis);

					this.dnatpr = readString(dis);

					this.ccogrm = readString(dis);

					this.dforme = readString(dis);

					this.ddenom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.comptepropcommunal, dos);

				// String

				writeString(this.dnuper, dos);

				// String

				writeString(this.dnulp, dos);

				// String

				writeString(this.ccodro, dos);

				// String

				writeString(this.ccodem, dos);

				// String

				writeString(this.dnatpr, dos);

				// String

				writeString(this.ccogrm, dos);

				// String

				writeString(this.dforme, dos);

				// String

				writeString(this.ddenom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",id_parc=" + id_parc);
			sb.append(",ccodep=" + ccodep);
			sb.append(",ccocom=" + ccocom);
			sb.append(",dnupro=" + dnupro);
			sb.append(",comptepropcommunal=" + comptepropcommunal);
			sb.append(",dnuper=" + dnuper);
			sb.append(",dnulp=" + dnulp);
			sb.append(",ccodro=" + ccodro);
			sb.append(",ccodem=" + ccodem);
			sb.append(",dnatpr=" + dnatpr);
			sb.append(",ccogrm=" + ccogrm);
			sb.append(",dforme=" + dforme);
			sb.append(",ddenom=" + ddenom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape2_affectprop_parcelle = new byte[0];
		static byte[] commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dcntpa;

		public String getDcntpa() {
			return this.dcntpa;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dreflf;

		public String getDreflf() {
			return this.dreflf;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String cprsecr;

		public String getCprsecr() {
			return this.cprsecr;
		}

		public String ccosecr;

		public String getCcosecr() {
			return this.ccosecr;
		}

		public String dnuplar;

		public String getDnuplar() {
			return this.dnuplar;
		}

		public String dnupld;

		public String getDnupld() {
			return this.dnupld;
		}

		public String gurbpa;

		public String getGurbpa() {
			return this.gurbpa;
		}

		public String dparpi;

		public String getDparpi() {
			return this.dparpi;
		}

		public String ccoarp;

		public String getCcoarp() {
			return this.ccoarp;
		}

		public String gparnf;

		public String getGparnf() {
			return this.gparnf;
		}

		public String gparbat;

		public String getGparbat() {
			return this.gparbat;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape2_affectprop_parcelle,
						0, length);
				strReturn = new String(
						commonByteArray_MAJIC_etape2_affectprop_parcelle, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape2_affectprop_parcelle) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.article = readString(dis);

					this.id_parc = readString(dis);

					this.dcntpa = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.jdatat = readString(dis);

					this.dreflf = readString(dis);

					this.gpdl = readString(dis);

					this.cprsecr = readString(dis);

					this.ccosecr = readString(dis);

					this.dnuplar = readString(dis);

					this.dnupld = readString(dis);

					this.gurbpa = readString(dis);

					this.dparpi = readString(dis);

					this.ccoarp = readString(dis);

					this.gparnf = readString(dis);

					this.gparbat = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dcntpa, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dreflf, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.cprsecr, dos);

				// String

				writeString(this.ccosecr, dos);

				// String

				writeString(this.dnuplar, dos);

				// String

				writeString(this.dnupld, dos);

				// String

				writeString(this.gurbpa, dos);

				// String

				writeString(this.dparpi, dos);

				// String

				writeString(this.ccoarp, dos);

				// String

				writeString(this.gparnf, dos);

				// String

				writeString(this.gparbat, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",article=" + article);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dcntpa=" + dcntpa);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dreflf=" + dreflf);
			sb.append(",gpdl=" + gpdl);
			sb.append(",cprsecr=" + cprsecr);
			sb.append(",ccosecr=" + ccosecr);
			sb.append(",dnuplar=" + dnuplar);
			sb.append(",dnupld=" + dnupld);
			sb.append(",gurbpa=" + gurbpa);
			sb.append(",dparpi=" + dparpi);
			sb.append(",ccoarp=" + ccoarp);
			sb.append(",gparnf=" + gparnf);
			sb.append(",gparbat=" + gparbat);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape2_affectprop_parcelle = new byte[0];
		static byte[] commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dcntpa;

		public String getDcntpa() {
			return this.dcntpa;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dreflf;

		public String getDreflf() {
			return this.dreflf;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String cprsecr;

		public String getCprsecr() {
			return this.cprsecr;
		}

		public String ccosecr;

		public String getCcosecr() {
			return this.ccosecr;
		}

		public String dnuplar;

		public String getDnuplar() {
			return this.dnuplar;
		}

		public String dnupld;

		public String getDnupld() {
			return this.dnupld;
		}

		public String gurbpa;

		public String getGurbpa() {
			return this.gurbpa;
		}

		public String dparpi;

		public String getDparpi() {
			return this.dparpi;
		}

		public String ccoarp;

		public String getCcoarp() {
			return this.ccoarp;
		}

		public String gparnf;

		public String getGparnf() {
			return this.gparnf;
		}

		public String gparbat;

		public String getGparbat() {
			return this.gparbat;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape2_affectprop_parcelle,
						0, length);
				strReturn = new String(
						commonByteArray_MAJIC_etape2_affectprop_parcelle, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape2_affectprop_parcelle) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.article = readString(dis);

					this.id_parc = readString(dis);

					this.dcntpa = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.jdatat = readString(dis);

					this.dreflf = readString(dis);

					this.gpdl = readString(dis);

					this.cprsecr = readString(dis);

					this.ccosecr = readString(dis);

					this.dnuplar = readString(dis);

					this.dnupld = readString(dis);

					this.gurbpa = readString(dis);

					this.dparpi = readString(dis);

					this.ccoarp = readString(dis);

					this.gparnf = readString(dis);

					this.gparbat = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dcntpa, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dreflf, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.cprsecr, dos);

				// String

				writeString(this.ccosecr, dos);

				// String

				writeString(this.dnuplar, dos);

				// String

				writeString(this.dnupld, dos);

				// String

				writeString(this.gurbpa, dos);

				// String

				writeString(this.dparpi, dos);

				// String

				writeString(this.ccoarp, dos);

				// String

				writeString(this.gparnf, dos);

				// String

				writeString(this.gparbat, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",article=" + article);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dcntpa=" + dcntpa);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dreflf=" + dreflf);
			sb.append(",gpdl=" + gpdl);
			sb.append(",cprsecr=" + cprsecr);
			sb.append(",ccosecr=" + ccosecr);
			sb.append(",dnuplar=" + dnuplar);
			sb.append(",dnupld=" + dnupld);
			sb.append(",gurbpa=" + gurbpa);
			sb.append(",dparpi=" + dparpi);
			sb.append(",ccoarp=" + ccoarp);
			sb.append(",gparnf=" + gparnf);
			sb.append(",gparbat=" + gparbat);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tMap_1_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_1_TMAP_OUT", false);
				start_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_1_TMAP_OUT";

				int tos_count_tMap_1_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row4Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1_TMAP_OUT__Struct {
				}
				Var__tMap_1_TMAP_OUT__Struct Var__tMap_1_TMAP_OUT = new Var__tMap_1_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_1_1 implements
						Comparable<SortableRow_tMap_1_1>,
						routines.system.IPersistableRow<SortableRow_tMap_1_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row4__ccodep;
					String exprKey_row4__ccocom;
					String exprKey_row4__dnupro;

					// row1
					String row1__ccodep;
					String row1__ccodir;
					String row1__ccocom;
					String row1__ccopre;
					String row1__ccosec;
					String row1__dnupla;
					String row1__article;
					String row1__id_parc;
					String row1__dcntpa;
					String row1__dsrpar;
					String row1__dnupro;
					String row1__jdatat;
					String row1__dreflf;
					String row1__gpdl;
					String row1__cprsecr;
					String row1__ccosecr;
					String row1__dnuplar;
					String row1__dnupld;
					String row1__gurbpa;
					String row1__dparpi;
					String row1__ccoarp;
					String row1__gparnf;
					String row1__gparbat;
					String row1__dnvoiri;
					String row1__dindic;
					String row1__ccovoi;
					String row1__ccoriv;
					String row1__ccocif;

					public void fillFrom(row1Struct row1,
							String exprKey_row4__ccodep,
							String exprKey_row4__ccocom,
							String exprKey_row4__dnupro) {

						this.row1__ccodep = row1.ccodep;
						this.row1__ccodir = row1.ccodir;
						this.row1__ccocom = row1.ccocom;
						this.row1__ccopre = row1.ccopre;
						this.row1__ccosec = row1.ccosec;
						this.row1__dnupla = row1.dnupla;
						this.row1__article = row1.article;
						this.row1__id_parc = row1.id_parc;
						this.row1__dcntpa = row1.dcntpa;
						this.row1__dsrpar = row1.dsrpar;
						this.row1__dnupro = row1.dnupro;
						this.row1__jdatat = row1.jdatat;
						this.row1__dreflf = row1.dreflf;
						this.row1__gpdl = row1.gpdl;
						this.row1__cprsecr = row1.cprsecr;
						this.row1__ccosecr = row1.ccosecr;
						this.row1__dnuplar = row1.dnuplar;
						this.row1__dnupld = row1.dnupld;
						this.row1__gurbpa = row1.gurbpa;
						this.row1__dparpi = row1.dparpi;
						this.row1__ccoarp = row1.ccoarp;
						this.row1__gparnf = row1.gparnf;
						this.row1__gparbat = row1.gparbat;
						this.row1__dnvoiri = row1.dnvoiri;
						this.row1__dindic = row1.dindic;
						this.row1__ccovoi = row1.ccovoi;
						this.row1__ccoriv = row1.ccoriv;
						this.row1__ccocif = row1.ccocif;
						this.exprKey_row4__ccodep = exprKey_row4__ccodep;
						this.exprKey_row4__ccocom = exprKey_row4__ccocom;
						this.exprKey_row4__dnupro = exprKey_row4__dnupro;

					}

					public void copyDataTo(row1Struct row1) {

						row1.ccodep = this.row1__ccodep;
						row1.ccodir = this.row1__ccodir;
						row1.ccocom = this.row1__ccocom;
						row1.ccopre = this.row1__ccopre;
						row1.ccosec = this.row1__ccosec;
						row1.dnupla = this.row1__dnupla;
						row1.article = this.row1__article;
						row1.id_parc = this.row1__id_parc;
						row1.dcntpa = this.row1__dcntpa;
						row1.dsrpar = this.row1__dsrpar;
						row1.dnupro = this.row1__dnupro;
						row1.jdatat = this.row1__jdatat;
						row1.dreflf = this.row1__dreflf;
						row1.gpdl = this.row1__gpdl;
						row1.cprsecr = this.row1__cprsecr;
						row1.ccosecr = this.row1__ccosecr;
						row1.dnuplar = this.row1__dnuplar;
						row1.dnupld = this.row1__dnupld;
						row1.gurbpa = this.row1__gurbpa;
						row1.dparpi = this.row1__dparpi;
						row1.ccoarp = this.row1__ccoarp;
						row1.gparnf = this.row1__gparnf;
						row1.gparbat = this.row1__gparbat;
						row1.dnvoiri = this.row1__dnvoiri;
						row1.dindic = this.row1__dindic;
						row1.ccovoi = this.row1__ccovoi;
						row1.ccoriv = this.row1__ccoriv;
						row1.ccocif = this.row1__ccocif;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row1__ccodep");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccodep));

						sb.append(", ");

						sb.append("row1__ccodir");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccodir));

						sb.append(", ");

						sb.append("row1__ccocom");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccocom));

						sb.append(", ");

						sb.append("row1__ccopre");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccopre));

						sb.append(", ");

						sb.append("row1__ccosec");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccosec));

						sb.append(", ");

						sb.append("row1__dnupla");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dnupla));

						sb.append(", ");

						sb.append("row1__article");
						sb.append("=");
						sb.append(String.valueOf(this.row1__article));

						sb.append(", ");

						sb.append("row1__id_parc");
						sb.append("=");
						sb.append(String.valueOf(this.row1__id_parc));

						sb.append(", ");

						sb.append("row1__dcntpa");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dcntpa));

						sb.append(", ");

						sb.append("row1__dsrpar");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dsrpar));

						sb.append(", ");

						sb.append("row1__dnupro");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dnupro));

						sb.append(", ");

						sb.append("row1__jdatat");
						sb.append("=");
						sb.append(String.valueOf(this.row1__jdatat));

						sb.append(", ");

						sb.append("row1__dreflf");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dreflf));

						sb.append(", ");

						sb.append("row1__gpdl");
						sb.append("=");
						sb.append(String.valueOf(this.row1__gpdl));

						sb.append(", ");

						sb.append("row1__cprsecr");
						sb.append("=");
						sb.append(String.valueOf(this.row1__cprsecr));

						sb.append(", ");

						sb.append("row1__ccosecr");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccosecr));

						sb.append(", ");

						sb.append("row1__dnuplar");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dnuplar));

						sb.append(", ");

						sb.append("row1__dnupld");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dnupld));

						sb.append(", ");

						sb.append("row1__gurbpa");
						sb.append("=");
						sb.append(String.valueOf(this.row1__gurbpa));

						sb.append(", ");

						sb.append("row1__dparpi");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dparpi));

						sb.append(", ");

						sb.append("row1__ccoarp");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccoarp));

						sb.append(", ");

						sb.append("row1__gparnf");
						sb.append("=");
						sb.append(String.valueOf(this.row1__gparnf));

						sb.append(", ");

						sb.append("row1__gparbat");
						sb.append("=");
						sb.append(String.valueOf(this.row1__gparbat));

						sb.append(", ");

						sb.append("row1__dnvoiri");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dnvoiri));

						sb.append(", ");

						sb.append("row1__dindic");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dindic));

						sb.append(", ");

						sb.append("row1__ccovoi");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccovoi));

						sb.append(", ");

						sb.append("row1__ccoriv");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccoriv));

						sb.append(", ");

						sb.append("row1__ccocif");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccocif));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_1_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row4__ccodep,
								other.exprKey_row4__ccodep);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row4__ccocom,
								other.exprKey_row4__ccocom);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row4__dnupro,
								other.exprKey_row4__dnupro);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row1Struct.commonByteArrayLock_MAJIC_etape2_affectprop_parcelle) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccodep = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccodep = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccodir = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccodir = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccocom = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccocom = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccopre = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccopre = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccosec = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccosec = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dnupla = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dnupla = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__article = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__article = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__id_parc = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__id_parc = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dcntpa = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dcntpa = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dsrpar = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dsrpar = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dnupro = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dnupro = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__jdatat = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__jdatat = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dreflf = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dreflf = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__gpdl = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__gpdl = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__cprsecr = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__cprsecr = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccosecr = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccosecr = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dnuplar = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dnuplar = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dnupld = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dnupld = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__gurbpa = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__gurbpa = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dparpi = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dparpi = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccoarp = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccoarp = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__gparnf = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__gparnf = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__gparbat = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__gparbat = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dnvoiri = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dnvoiri = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dindic = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__dindic = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccovoi = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccovoi = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccoriv = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccoriv = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccocif = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.row1__ccocif = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row4__ccodep = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.exprKey_row4__ccodep = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row4__ccocom = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.exprKey_row4__ccocom = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row4__dnupro = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
									this.exprKey_row4__dnupro = new String(
											row1Struct.commonByteArray_MAJIC_etape2_affectprop_parcelle,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row1__ccodep == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccodep.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccodir == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccodir.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccocom.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccopre == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccopre.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccosec == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccosec.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dnupla == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dnupla.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__article == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__article
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__id_parc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__id_parc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dcntpa == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dcntpa.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dsrpar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dsrpar.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dnupro == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dnupro.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__jdatat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__jdatat.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dreflf == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dreflf.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__gpdl == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__gpdl.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__cprsecr == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__cprsecr
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccosecr == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccosecr
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dnuplar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dnuplar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dnupld == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dnupld.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__gurbpa == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__gurbpa.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dparpi == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dparpi.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccoarp == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccoarp.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__gparnf == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__gparnf.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__gparbat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__gparbat
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dnvoiri == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dnvoiri
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dindic == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dindic.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccovoi == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccovoi.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccoriv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccoriv.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccocif == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccocif.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row4__ccodep == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row4__ccodep
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row4__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row4__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row4__dnupro == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row4__dnupro
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1> fsi_tMap_1_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1>(
						context.temp_path + "/" + jobName + "_tMapData_" + pid
								+ "_tMap_1_1", 2000000) {
					public SortableRow_tMap_1_1 createRowInstance() {
						return new SortableRow_tMap_1_1();
					}
				};

				fsi_tMap_1_1.initPut();

				/**
				 * [tMap_1_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.target_path + "article10.csv"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.ccodep = null;

								row1.ccodir = null;

								row1.ccocom = null;

								row1.ccopre = null;

								row1.ccosec = null;

								row1.dnupla = null;

								row1.article = null;

								row1.id_parc = null;

								row1.dcntpa = null;

								row1.dsrpar = null;

								row1.dnupro = null;

								row1.jdatat = null;

								row1.dreflf = null;

								row1.gpdl = null;

								row1.cprsecr = null;

								row1.ccosecr = null;

								row1.dnuplar = null;

								row1.dnupld = null;

								row1.gurbpa = null;

								row1.dparpi = null;

								row1.ccoarp = null;

								row1.gparnf = null;

								row1.gparbat = null;

								row1.dnvoiri = null;

								row1.dindic = null;

								row1.ccovoi = null;

								row1.ccoriv = null;

								row1.ccocif = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccodep = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccodep = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccodir = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccodir = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccocom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccocom = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccopre = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccopre = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccosec = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccosec = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnupla = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnupla = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.article = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.article = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.id_parc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.id_parc = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dcntpa = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dcntpa = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dsrpar = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dsrpar = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnupro = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnupro = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.jdatat = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.jdatat = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dreflf = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dreflf = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.gpdl = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.gpdl = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.cprsecr = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.cprsecr = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccosecr = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccosecr = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnuplar = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnuplar = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnupld = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnupld = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.gurbpa = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.gurbpa = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dparpi = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dparpi = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccoarp = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccoarp = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.gparnf = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.gparnf = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.gparbat = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.gparbat = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnvoiri = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnvoiri = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 24;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dindic = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dindic = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 25;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccovoi = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccovoi = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 26;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccoriv = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccoriv = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 27;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccocif = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccocif = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_1_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							String exprKey_row4__ccodep = row1.ccodep;

							String exprKey_row4__ccocom = row1.ccocom;

							String exprKey_row4__dnupro = row1.dnupro;

							SortableRow_tMap_1_1 sortableRow_tMap_1_1 = fsi_tMap_1_1
									.getNextFreeRow();

							sortableRow_tMap_1_1.fillFrom(row1,
									exprKey_row4__ccodep, exprKey_row4__ccocom,
									exprKey_row4__dnupro);

							fsi_tMap_1_1.put(sortableRow_tMap_1_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1_TMAP_OUT = false;
							boolean mainRowRejected_tMap_1_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_1_TMAP_OUT++;

							/**
							 * [tMap_1_TMAP_OUT main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_1_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1_TMAP_OUT", true);
				end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_1_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.target_path + "propparcelle.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											false), "ISO-8859-15"));

					if (filetFileOutputDelimited_1.length() == 0) {

						outtFileOutputDelimited_1.write("ccopre");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ccosec");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("dnupla");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("id_parc");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ccodep");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ccocom");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("dnupro");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("comptepropcommunal");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("dnuper");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("dnulp");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ccodro");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ccodem");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("dnatpr");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ccogrm");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("dforme");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ddenom");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.flush();
					}

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tMap_1_TMAP_IN begin ] start
					 */

					ok_Hash.put("tMap_1_TMAP_IN", false);
					start_Hash
							.put("tMap_1_TMAP_IN", System.currentTimeMillis());
					currentComponent = "tMap_1_TMAP_IN";

					int tos_count_tMap_1_TMAP_IN = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1_TMAP_IN__Struct {
					}
					Var__tMap_1_TMAP_IN__Struct Var__tMap_1_TMAP_IN = new Var__tMap_1_TMAP_IN__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out1Struct out1_tmp = new out1Struct();
					// ###############################

					/**
					 * [tMap_1_TMAP_IN begin ] stop
					 */
					/**
					 * [tMap_1_TMAP_IN main ] start
					 */

					currentComponent = "tMap_1_TMAP_IN";

					boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

					fsi_tMap_1_1.endPut();

					if (row1 == null) {
						row1 = new row1Struct();
					}

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1_TMAP_IN = false;
					boolean mainRowRejected_tMap_1_TMAP_IN = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row4"
					// /////////////////////////////////////////////

					SortableRow_tMap_1_1 rsc_tMap_1_1;

					tHash_Lookup_row4.initGet();

					fsi_tMap_1_1.initGet();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=true

					rejectedInnerJoin_tMap_1_TMAP_IN = false;

					while (fsi_tMap_1_1.hasNext()) { // G_TM_M_250 loop "1"

						// CALL close loop of lookup '1'

						rsc_tMap_1_1 = (SortableRow_tMap_1_1) fsi_tMap_1_1
								.next();
						rsc_tMap_1_1.copyDataTo(row1);

						rejectedInnerJoin_tMap_1_TMAP_IN = rsc_tMap_1_1.is__rejectedInnerJoin;

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

							row4HashKey.ccodep = rsc_tMap_1_1.exprKey_row4__ccodep;

							row4HashKey.ccocom = rsc_tMap_1_1.exprKey_row4__ccocom;

							row4HashKey.dnupro = rsc_tMap_1_1.exprKey_row4__dnupro;

							tHash_Lookup_row4.lookup(row4HashKey);

							if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1_TMAP_IN = true;

							} // G_TM_M_090

						} // G_TM_M_020

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1_TMAP_IN__Struct Var = Var__tMap_1_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

							if (!rejectedInnerJoin_tMap_1_TMAP_IN) {

								// # Output table : 'out1'
								out1_tmp.ccopre = row1.ccopre;
								out1_tmp.ccosec = row1.ccosec;
								out1_tmp.dnupla = row1.dnupla;
								out1_tmp.id_parc = row1.id_parc;
								out1_tmp.ccodep = row1.ccodep;
								out1_tmp.ccocom = row1.ccocom;
								out1_tmp.dnupro = row1.dnupro;
								out1_tmp.comptepropcommunal = row4.comptepropcommunal;
								out1_tmp.dnuper = row4.dnuper;
								out1_tmp.dnulp = row4.dnulp;
								out1_tmp.ccodro = row4.ccodro;
								out1_tmp.ccodem = row4.ccodem;
								out1_tmp.dnatpr = row4.dnatpr;
								out1_tmp.ccogrm = row4.ccogrm;
								out1_tmp.dforme = row4.dforme;
								out1_tmp.ddenom = row4.ddenom;
								out1 = out1_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1_TMAP_IN = false;

						tos_count_tMap_1_TMAP_IN++;

						/**
						 * [tMap_1_TMAP_IN main ] stop
						 */
						// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

							if (out1.ccopre != null) {

								sb_tFileOutputDelimited_1.append(

								out1.ccopre

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.ccosec != null) {

								sb_tFileOutputDelimited_1.append(

								out1.ccosec

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.dnupla != null) {

								sb_tFileOutputDelimited_1.append(

								out1.dnupla

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.id_parc != null) {

								sb_tFileOutputDelimited_1.append(

								out1.id_parc

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.ccodep != null) {

								sb_tFileOutputDelimited_1.append(

								out1.ccodep

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.ccocom != null) {

								sb_tFileOutputDelimited_1.append(

								out1.ccocom

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.dnupro != null) {

								sb_tFileOutputDelimited_1.append(

								out1.dnupro

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.comptepropcommunal != null) {

								sb_tFileOutputDelimited_1.append(

								out1.comptepropcommunal

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.dnuper != null) {

								sb_tFileOutputDelimited_1.append(

								out1.dnuper

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.dnulp != null) {

								sb_tFileOutputDelimited_1.append(

								out1.dnulp

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.ccodro != null) {

								sb_tFileOutputDelimited_1.append(

								out1.ccodro

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.ccodem != null) {

								sb_tFileOutputDelimited_1.append(

								out1.ccodem

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.dnatpr != null) {

								sb_tFileOutputDelimited_1.append(

								out1.dnatpr

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.ccogrm != null) {

								sb_tFileOutputDelimited_1.append(

								out1.ccogrm

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.dforme != null) {

								sb_tFileOutputDelimited_1.append(

								out1.dforme

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (out1.ddenom != null) {

								sb_tFileOutputDelimited_1.append(

								out1.ddenom

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "out1"

					} // G_TM_M_250 close loop read file data '1'

					/**
					 * [tMap_1_TMAP_IN end ] start
					 */

					currentComponent = "tMap_1_TMAP_IN";

					// ###############################
					// # Lookup hashes releasing
					fsi_tMap_1_1.endGet();

					if (tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove("tHash_Lookup_row4");

					// ###############################

					ok_Hash.put("tMap_1_TMAP_IN", true);
					end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

					/**
					 * [tMap_1_TMAP_IN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape2_affectprop_parcelle = new byte[0];
		static byte[] commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String comptepropcommunal;

		public String getComptepropcommunal() {
			return this.comptepropcommunal;
		}

		public String cgroup;

		public String getCgroup() {
			return this.cgroup;
		}

		public String dnumcp;

		public String getDnumcp() {
			return this.dnumcp;
		}

		public String dnulp;

		public String getDnulp() {
			return this.dnulp;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dnuper;

		public String getDnuper() {
			return this.dnuper;
		}

		public String iddnuper;

		public String getIddnuper() {
			return this.iddnuper;
		}

		public String ccodro;

		public String getCcodro() {
			return this.ccodro;
		}

		public String ccodem;

		public String getCcodem() {
			return this.ccodem;
		}

		public String gdesip;

		public String getGdesip() {
			return this.gdesip;
		}

		public String gtoper;

		public String getGtoper() {
			return this.gtoper;
		}

		public String ccoqua;

		public String getCcoqua() {
			return this.ccoqua;
		}

		public String dnatpr;

		public String getDnatpr() {
			return this.dnatpr;
		}

		public String ccogrm;

		public String getCcogrm() {
			return this.ccogrm;
		}

		public String dsglpm;

		public String getDsglpm() {
			return this.dsglpm;
		}

		public String dforme;

		public String getDforme() {
			return this.dforme;
		}

		public String ddenom;

		public String getDdenom() {
			return this.ddenom;
		}

		public String gtyp3;

		public String getGtyp3() {
			return this.gtyp3;
		}

		public String gtyp4;

		public String getGtyp4() {
			return this.gtyp4;
		}

		public String gtyp5;

		public String getGtyp5() {
			return this.gtyp5;
		}

		public String gtyp6;

		public String getGtyp6() {
			return this.gtyp6;
		}

		public String dlign3;

		public String getDlign3() {
			return this.dlign3;
		}

		public String dlign4;

		public String getDlign4() {
			return this.dlign4;
		}

		public String dlign5;

		public String getDlign5() {
			return this.dlign5;
		}

		public String dlign6;

		public String getDlign6() {
			return this.dlign6;
		}

		public String ccopay;

		public String getCcopay() {
			return this.ccopay;
		}

		public String ccodep1a2;

		public String getCcodep1a2() {
			return this.ccodep1a2;
		}

		public String ccodira;

		public String getCcodira() {
			return this.ccodira;
		}

		public String ccocom_adr;

		public String getCcocom_adr() {
			return this.ccocom_adr;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccopos;

		public String getCcopos() {
			return this.ccopos;
		}

		public String dqualp;

		public String getDqualp() {
			return this.dqualp;
		}

		public String dnomlp;

		public String getDnomlp() {
			return this.dnomlp;
		}

		public String dprnlp;

		public String getDprnlp() {
			return this.dprnlp;
		}

		public String jdatnss;

		public String getJdatnss() {
			return this.jdatnss;
		}

		public String dldnss;

		public String getDldnss() {
			return this.dldnss;
		}

		public String epxnee;

		public String getEpxnee() {
			return this.epxnee;
		}

		public String dnomcp;

		public String getDnomcp() {
			return this.dnomcp;
		}

		public String dprncp;

		public String getDprncp() {
			return this.dprncp;
		}

		public String dsiren;

		public String getDsiren() {
			return this.dsiren;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccodep == null) ? 0 : this.ccodep.hashCode());

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime * result
						+ ((this.dnupro == null) ? 0 : this.dnupro.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ccodep == null) {
				if (other.ccodep != null)
					return false;
			} else if (!this.ccodep.equals(other.ccodep))
				return false;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.dnupro == null) {
				if (other.dnupro != null)
					return false;
			} else if (!this.dnupro.equals(other.dnupro))
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ccodep = this.ccodep;
			other.ccodir = this.ccodir;
			other.ccocom = this.ccocom;
			other.dnupro = this.dnupro;
			other.comptepropcommunal = this.comptepropcommunal;
			other.cgroup = this.cgroup;
			other.dnumcp = this.dnumcp;
			other.dnulp = this.dnulp;
			other.ccocif = this.ccocif;
			other.dnuper = this.dnuper;
			other.iddnuper = this.iddnuper;
			other.ccodro = this.ccodro;
			other.ccodem = this.ccodem;
			other.gdesip = this.gdesip;
			other.gtoper = this.gtoper;
			other.ccoqua = this.ccoqua;
			other.dnatpr = this.dnatpr;
			other.ccogrm = this.ccogrm;
			other.dsglpm = this.dsglpm;
			other.dforme = this.dforme;
			other.ddenom = this.ddenom;
			other.gtyp3 = this.gtyp3;
			other.gtyp4 = this.gtyp4;
			other.gtyp5 = this.gtyp5;
			other.gtyp6 = this.gtyp6;
			other.dlign3 = this.dlign3;
			other.dlign4 = this.dlign4;
			other.dlign5 = this.dlign5;
			other.dlign6 = this.dlign6;
			other.ccopay = this.ccopay;
			other.ccodep1a2 = this.ccodep1a2;
			other.ccodira = this.ccodira;
			other.ccocom_adr = this.ccocom_adr;
			other.ccovoi = this.ccovoi;
			other.ccoriv = this.ccoriv;
			other.dnvoiri = this.dnvoiri;
			other.dindic = this.dindic;
			other.ccopos = this.ccopos;
			other.dqualp = this.dqualp;
			other.dnomlp = this.dnomlp;
			other.dprnlp = this.dprnlp;
			other.jdatnss = this.jdatnss;
			other.dldnss = this.dldnss;
			other.epxnee = this.epxnee;
			other.dnomcp = this.dnomcp;
			other.dprncp = this.dprncp;
			other.dsiren = this.dsiren;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ccodep = this.ccodep;
			other.ccocom = this.ccocom;
			other.dnupro = this.dnupro;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape2_affectprop_parcelle.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape2_affectprop_parcelle.length == 0) {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape2_affectprop_parcelle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape2_affectprop_parcelle,
						0, length);
				strReturn = new String(
						commonByteArray_MAJIC_etape2_affectprop_parcelle, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape2_affectprop_parcelle) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccocom = readString(dis);

					this.dnupro = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.dnupro, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ccodir = readString(dis, ois);

				this.comptepropcommunal = readString(dis, ois);

				this.cgroup = readString(dis, ois);

				this.dnumcp = readString(dis, ois);

				this.dnulp = readString(dis, ois);

				this.ccocif = readString(dis, ois);

				this.dnuper = readString(dis, ois);

				this.iddnuper = readString(dis, ois);

				this.ccodro = readString(dis, ois);

				this.ccodem = readString(dis, ois);

				this.gdesip = readString(dis, ois);

				this.gtoper = readString(dis, ois);

				this.ccoqua = readString(dis, ois);

				this.dnatpr = readString(dis, ois);

				this.ccogrm = readString(dis, ois);

				this.dsglpm = readString(dis, ois);

				this.dforme = readString(dis, ois);

				this.ddenom = readString(dis, ois);

				this.gtyp3 = readString(dis, ois);

				this.gtyp4 = readString(dis, ois);

				this.gtyp5 = readString(dis, ois);

				this.gtyp6 = readString(dis, ois);

				this.dlign3 = readString(dis, ois);

				this.dlign4 = readString(dis, ois);

				this.dlign5 = readString(dis, ois);

				this.dlign6 = readString(dis, ois);

				this.ccopay = readString(dis, ois);

				this.ccodep1a2 = readString(dis, ois);

				this.ccodira = readString(dis, ois);

				this.ccocom_adr = readString(dis, ois);

				this.ccovoi = readString(dis, ois);

				this.ccoriv = readString(dis, ois);

				this.dnvoiri = readString(dis, ois);

				this.dindic = readString(dis, ois);

				this.ccopos = readString(dis, ois);

				this.dqualp = readString(dis, ois);

				this.dnomlp = readString(dis, ois);

				this.dprnlp = readString(dis, ois);

				this.jdatnss = readString(dis, ois);

				this.dldnss = readString(dis, ois);

				this.epxnee = readString(dis, ois);

				this.dnomcp = readString(dis, ois);

				this.dprncp = readString(dis, ois);

				this.dsiren = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ccodir, dos, oos);

				writeString(this.comptepropcommunal, dos, oos);

				writeString(this.cgroup, dos, oos);

				writeString(this.dnumcp, dos, oos);

				writeString(this.dnulp, dos, oos);

				writeString(this.ccocif, dos, oos);

				writeString(this.dnuper, dos, oos);

				writeString(this.iddnuper, dos, oos);

				writeString(this.ccodro, dos, oos);

				writeString(this.ccodem, dos, oos);

				writeString(this.gdesip, dos, oos);

				writeString(this.gtoper, dos, oos);

				writeString(this.ccoqua, dos, oos);

				writeString(this.dnatpr, dos, oos);

				writeString(this.ccogrm, dos, oos);

				writeString(this.dsglpm, dos, oos);

				writeString(this.dforme, dos, oos);

				writeString(this.ddenom, dos, oos);

				writeString(this.gtyp3, dos, oos);

				writeString(this.gtyp4, dos, oos);

				writeString(this.gtyp5, dos, oos);

				writeString(this.gtyp6, dos, oos);

				writeString(this.dlign3, dos, oos);

				writeString(this.dlign4, dos, oos);

				writeString(this.dlign5, dos, oos);

				writeString(this.dlign6, dos, oos);

				writeString(this.ccopay, dos, oos);

				writeString(this.ccodep1a2, dos, oos);

				writeString(this.ccodira, dos, oos);

				writeString(this.ccocom_adr, dos, oos);

				writeString(this.ccovoi, dos, oos);

				writeString(this.ccoriv, dos, oos);

				writeString(this.dnvoiri, dos, oos);

				writeString(this.dindic, dos, oos);

				writeString(this.ccopos, dos, oos);

				writeString(this.dqualp, dos, oos);

				writeString(this.dnomlp, dos, oos);

				writeString(this.dprnlp, dos, oos);

				writeString(this.jdatnss, dos, oos);

				writeString(this.dldnss, dos, oos);

				writeString(this.epxnee, dos, oos);

				writeString(this.dnomcp, dos, oos);

				writeString(this.dprncp, dos, oos);

				writeString(this.dsiren, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",dnupro=" + dnupro);
			sb.append(",comptepropcommunal=" + comptepropcommunal);
			sb.append(",cgroup=" + cgroup);
			sb.append(",dnumcp=" + dnumcp);
			sb.append(",dnulp=" + dnulp);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dnuper=" + dnuper);
			sb.append(",iddnuper=" + iddnuper);
			sb.append(",ccodro=" + ccodro);
			sb.append(",ccodem=" + ccodem);
			sb.append(",gdesip=" + gdesip);
			sb.append(",gtoper=" + gtoper);
			sb.append(",ccoqua=" + ccoqua);
			sb.append(",dnatpr=" + dnatpr);
			sb.append(",ccogrm=" + ccogrm);
			sb.append(",dsglpm=" + dsglpm);
			sb.append(",dforme=" + dforme);
			sb.append(",ddenom=" + ddenom);
			sb.append(",gtyp3=" + gtyp3);
			sb.append(",gtyp4=" + gtyp4);
			sb.append(",gtyp5=" + gtyp5);
			sb.append(",gtyp6=" + gtyp6);
			sb.append(",dlign3=" + dlign3);
			sb.append(",dlign4=" + dlign4);
			sb.append(",dlign5=" + dlign5);
			sb.append(",dlign6=" + dlign6);
			sb.append(",ccopay=" + ccopay);
			sb.append(",ccodep1a2=" + ccodep1a2);
			sb.append(",ccodira=" + ccodira);
			sb.append(",ccocom_adr=" + ccocom_adr);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccopos=" + ccopos);
			sb.append(",dqualp=" + dqualp);
			sb.append(",dnomlp=" + dnomlp);
			sb.append(",dprnlp=" + dprnlp);
			sb.append(",jdatnss=" + jdatnss);
			sb.append(",dldnss=" + dldnss);
			sb.append(",epxnee=" + epxnee);
			sb.append(",dnomcp=" + dnomcp);
			sb.append(",dprncp=" + dprncp);
			sb.append(",dsiren=" + dsiren);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccodep, other.ccodep);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.dnupro, other.dnupro);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row4";

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row4) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row4Struct> tHash_Lookup_row4 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row4Struct>(
						matchingModeEnum_row4,
						context.temp_path + "/" + jobName + "_tMapData_" + pid
								+ "_Lookup_row4_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row4Struct createRowInstance() {
								return new row4Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row4.initPut();

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.target_path + "proprietaires_valid.csv"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row4 = null;

						row4 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row4 = new row4Struct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.ccodep = null;

								row4.ccodir = null;

								row4.ccocom = null;

								row4.dnupro = null;

								row4.comptepropcommunal = null;

								row4.cgroup = null;

								row4.dnumcp = null;

								row4.dnulp = null;

								row4.ccocif = null;

								row4.dnuper = null;

								row4.iddnuper = null;

								row4.ccodro = null;

								row4.ccodem = null;

								row4.gdesip = null;

								row4.gtoper = null;

								row4.ccoqua = null;

								row4.dnatpr = null;

								row4.ccogrm = null;

								row4.dsglpm = null;

								row4.dforme = null;

								row4.ddenom = null;

								row4.gtyp3 = null;

								row4.gtyp4 = null;

								row4.gtyp5 = null;

								row4.gtyp6 = null;

								row4.dlign3 = null;

								row4.dlign4 = null;

								row4.dlign5 = null;

								row4.dlign6 = null;

								row4.ccopay = null;

								row4.ccodep1a2 = null;

								row4.ccodira = null;

								row4.ccocom_adr = null;

								row4.ccovoi = null;

								row4.ccoriv = null;

								row4.dnvoiri = null;

								row4.dindic = null;

								row4.ccopos = null;

								row4.dqualp = null;

								row4.dnomlp = null;

								row4.dprnlp = null;

								row4.jdatnss = null;

								row4.dldnss = null;

								row4.epxnee = null;

								row4.dnomcp = null;

								row4.dprncp = null;

								row4.dsiren = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccodep = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccodep = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccodir = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccodir = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccocom = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccocom = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dnupro = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dnupro = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.comptepropcommunal = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.comptepropcommunal = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.cgroup = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.cgroup = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dnumcp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dnumcp = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dnulp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dnulp = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccocif = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccocif = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dnuper = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dnuper = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.iddnuper = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.iddnuper = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccodro = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccodro = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccodem = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccodem = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.gdesip = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.gdesip = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.gtoper = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.gtoper = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 15;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccoqua = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccoqua = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 16;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dnatpr = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dnatpr = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 17;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccogrm = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccogrm = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 18;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dsglpm = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dsglpm = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 19;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dforme = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dforme = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 20;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ddenom = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ddenom = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 21;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.gtyp3 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.gtyp3 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 22;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.gtyp4 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.gtyp4 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 23;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.gtyp5 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.gtyp5 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 24;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.gtyp6 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.gtyp6 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 25;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dlign3 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dlign3 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 26;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dlign4 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dlign4 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 27;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dlign5 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dlign5 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 28;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dlign6 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dlign6 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 29;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccopay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccopay = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 30;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccodep1a2 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccodep1a2 = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 31;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccodira = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccodira = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 32;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccocom_adr = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccocom_adr = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 33;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccovoi = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccovoi = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 34;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccoriv = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccoriv = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 35;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dnvoiri = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dnvoiri = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 36;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dindic = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dindic = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 37;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.ccopos = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.ccopos = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 38;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dqualp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dqualp = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 39;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dnomlp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dnomlp = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 40;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dprnlp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dprnlp = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 41;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.jdatnss = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.jdatnss = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 42;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dldnss = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dldnss = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 43;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.epxnee = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.epxnee = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 44;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dnomcp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dnomcp = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 45;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dprncp = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dprncp = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 46;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.dsiren = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.dsiren = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tAdvancedHash_row4 main ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							row4Struct row4_HashRow = tHash_Lookup_row4
									.getNextFreeRow();

							row4_HashRow.ccodep = row4.ccodep;

							row4_HashRow.ccodir = row4.ccodir;

							row4_HashRow.ccocom = row4.ccocom;

							row4_HashRow.dnupro = row4.dnupro;

							row4_HashRow.comptepropcommunal = row4.comptepropcommunal;

							row4_HashRow.cgroup = row4.cgroup;

							row4_HashRow.dnumcp = row4.dnumcp;

							row4_HashRow.dnulp = row4.dnulp;

							row4_HashRow.ccocif = row4.ccocif;

							row4_HashRow.dnuper = row4.dnuper;

							row4_HashRow.iddnuper = row4.iddnuper;

							row4_HashRow.ccodro = row4.ccodro;

							row4_HashRow.ccodem = row4.ccodem;

							row4_HashRow.gdesip = row4.gdesip;

							row4_HashRow.gtoper = row4.gtoper;

							row4_HashRow.ccoqua = row4.ccoqua;

							row4_HashRow.dnatpr = row4.dnatpr;

							row4_HashRow.ccogrm = row4.ccogrm;

							row4_HashRow.dsglpm = row4.dsglpm;

							row4_HashRow.dforme = row4.dforme;

							row4_HashRow.ddenom = row4.ddenom;

							row4_HashRow.gtyp3 = row4.gtyp3;

							row4_HashRow.gtyp4 = row4.gtyp4;

							row4_HashRow.gtyp5 = row4.gtyp5;

							row4_HashRow.gtyp6 = row4.gtyp6;

							row4_HashRow.dlign3 = row4.dlign3;

							row4_HashRow.dlign4 = row4.dlign4;

							row4_HashRow.dlign5 = row4.dlign5;

							row4_HashRow.dlign6 = row4.dlign6;

							row4_HashRow.ccopay = row4.ccopay;

							row4_HashRow.ccodep1a2 = row4.ccodep1a2;

							row4_HashRow.ccodira = row4.ccodira;

							row4_HashRow.ccocom_adr = row4.ccocom_adr;

							row4_HashRow.ccovoi = row4.ccovoi;

							row4_HashRow.ccoriv = row4.ccoriv;

							row4_HashRow.dnvoiri = row4.dnvoiri;

							row4_HashRow.dindic = row4.dindic;

							row4_HashRow.ccopos = row4.ccopos;

							row4_HashRow.dqualp = row4.dqualp;

							row4_HashRow.dnomlp = row4.dnomlp;

							row4_HashRow.dprnlp = row4.dprnlp;

							row4_HashRow.jdatnss = row4.jdatnss;

							row4_HashRow.dldnss = row4.dldnss;

							row4_HashRow.epxnee = row4.epxnee;

							row4_HashRow.dnomcp = row4.dnomcp;

							row4_HashRow.dprncp = row4.dprncp;

							row4_HashRow.dsiren = row4.dsiren;

							tHash_Lookup_row4.put(row4_HashRow);

							tos_count_tAdvancedHash_row4++;

							/**
							 * [tAdvancedHash_row4 main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final etape2_affectprop_parcelle etape2_affectprop_parcelleClass = new etape2_affectprop_parcelle();

		int exitCode = etape2_affectprop_parcelleClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = etape2_affectprop_parcelle.class
					.getClassLoader().getResourceAsStream(
							"majic/etape2_affectprop_parcelle_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.extfichier = (String) context.getProperty("extfichier");
			context.target_path = (String) context.getProperty("target_path");
			context.temp_path = (String) context.getProperty("temp_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("extfichier")) {
				context.extfichier = (String) parentContextMap
						.get("extfichier");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
			if (parentContextMap.containsKey("temp_path")) {
				context.temp_path = (String) parentContextMap.get("temp_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {

			e_tFileInputDelimited_2.printStackTrace();
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : etape2_affectprop_parcelle");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 259339 characters generated by Talend Open Studio for Data Integration on the
 * 8 janvier 2014 18:58:38 CET
 ************************************************************************************************/
