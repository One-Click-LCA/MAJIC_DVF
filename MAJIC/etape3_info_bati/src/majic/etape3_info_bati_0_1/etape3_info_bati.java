// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package majic.etape3_info_bati_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.OpenStreetMap;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.GeometryUtility;
import routines.GeometryOperation;
import routines.GeoOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: etape3_info_bati Purpose: cr√©ation d'une table batiment<br>
 * Description:  <br>
 * @author thomas.brosset@quelleville.fr
 * @version 5.3.1.r104014
 * @status 
 */
public class etape3_info_bati implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (externals_path != null) {

				this.setProperty("externals_path", externals_path.toString());

			}

			if (extfichier != null) {

				this.setProperty("extfichier", extfichier.toString());

			}

			if (nbat10 != null) {

				this.setProperty("nbat10", nbat10.toString());

			}

			if (source_path != null) {

				this.setProperty("source_path", source_path.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

			if (temp_path != null) {

				this.setProperty("temp_path", temp_path.toString());

			}

		}

		public String externals_path;

		public String getExternals_path() {
			return this.externals_path;
		}

		public String extfichier;

		public String getExtfichier() {
			return this.extfichier;
		}

		public String nbat10;

		public String getNbat10() {
			return this.nbat10;
		}

		public String source_path;

		public String getSource_path() {
			return this.source_path;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}

		public String temp_path;

		public String getTemp_path() {
			return this.temp_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "etape3_info_bati";
	private final String projectName = "MAJIC";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					etape3_info_bati.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(etape3_info_bati.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileExist_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileExist_1", System.currentTimeMillis());

		status = "failure";

		tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileDelete_1", System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class tab_bati_hab_totalStruct implements
			routines.system.IPersistableRow<tab_bati_hab_totalStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.dnupro = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",dnupro=" + dnupro);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tab_bati_hab_totalStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class table_bati_act_totalStruct implements
			routines.system.IPersistableRow<table_bati_act_totalStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.dnupro = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",dnupro=" + dnupro);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(table_bati_act_totalStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tab_bati_dep_totalStruct implements
			routines.system.IPersistableRow<tab_bati_dep_totalStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.dnupro = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",dnupro=" + dnupro);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tab_bati_dep_totalStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class table_bati_habStruct implements
			routines.system.IPersistableRow<table_bati_habStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String libelle_nature;

		public String getLibelle_nature() {
			return this.libelle_nature;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String nature_occupation;

		public String getNature_occupation() {
			return this.nature_occupation;
		}

		public Integer jannat;

		public Integer getJannat() {
			return this.jannat;
		}

		public Integer hlmsem;

		public Integer getHlmsem() {
			return this.hlmsem;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String dniv;

		public String getDniv() {
			return this.dniv;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.id_parc = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.dnupro = readString(dis);

					this.dnubat = readString(dis);

					this.jdatat = readString(dis);

					this.dteloc = readString(dis);

					this.type_local = readString(dis);

					this.dnatlc = readString(dis);

					this.libelle_nature = readString(dis);

					this.cconlc = readString(dis);

					this.nature_occupation = readString(dis);

					this.jannat = readInteger(dis);

					this.hlmsem = readInteger(dis);

					this.dnbniv = readString(dis);

					this.dniv = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.dnubat, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dteloc, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.dnatlc, dos);

				// String

				writeString(this.libelle_nature, dos);

				// String

				writeString(this.cconlc, dos);

				// String

				writeString(this.nature_occupation, dos);

				// Integer

				writeInteger(this.jannat, dos);

				// Integer

				writeInteger(this.hlmsem, dos);

				// String

				writeString(this.dnbniv, dos);

				// String

				writeString(this.dniv, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parc=" + id_parc);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",dnubat=" + dnubat);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dteloc=" + dteloc);
			sb.append(",type_local=" + type_local);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",libelle_nature=" + libelle_nature);
			sb.append(",cconlc=" + cconlc);
			sb.append(",nature_occupation=" + nature_occupation);
			sb.append(",jannat=" + String.valueOf(jannat));
			sb.append(",hlmsem=" + String.valueOf(hlmsem));
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",dniv=" + dniv);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(table_bati_habStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class table_bati_actStruct
			implements
			routines.system.IPersistableComparableLookupRow<table_bati_actStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String libelle_nature;

		public String getLibelle_nature() {
			return this.libelle_nature;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String nature_occupation;

		public String getNature_occupation() {
			return this.nature_occupation;
		}

		public Integer jannat;

		public Integer getJannat() {
			return this.jannat;
		}

		public Integer hlmsem;

		public Integer getHlmsem() {
			return this.hlmsem;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String dniv;

		public String getDniv() {
			return this.dniv;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime * result
						+ ((this.invar == null) ? 0 : this.invar.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final table_bati_actStruct other = (table_bati_actStruct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.invar == null) {
				if (other.invar != null)
					return false;
			} else if (!this.invar.equals(other.invar))
				return false;

			return true;
		}

		public void copyDataTo(table_bati_actStruct other) {

			other.id_parc = this.id_parc;
			other.ccocom = this.ccocom;
			other.invar = this.invar;
			other.dnupro = this.dnupro;
			other.dnubat = this.dnubat;
			other.jdatat = this.jdatat;
			other.dteloc = this.dteloc;
			other.type_local = this.type_local;
			other.dnatlc = this.dnatlc;
			other.libelle_nature = this.libelle_nature;
			other.cconlc = this.cconlc;
			other.nature_occupation = this.nature_occupation;
			other.jannat = this.jannat;
			other.hlmsem = this.hlmsem;
			other.dnbniv = this.dnbniv;
			other.dniv = this.dniv;

		}

		public void copyKeysDataTo(table_bati_actStruct other) {

			other.ccocom = this.ccocom;
			other.invar = this.invar;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.invar = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_parc = readString(dis, ois);

				this.dnupro = readString(dis, ois);

				this.dnubat = readString(dis, ois);

				this.jdatat = readString(dis, ois);

				this.dteloc = readString(dis, ois);

				this.type_local = readString(dis, ois);

				this.dnatlc = readString(dis, ois);

				this.libelle_nature = readString(dis, ois);

				this.cconlc = readString(dis, ois);

				this.nature_occupation = readString(dis, ois);

				this.jannat = readInteger(dis, ois);

				this.hlmsem = readInteger(dis, ois);

				this.dnbniv = readString(dis, ois);

				this.dniv = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.id_parc, dos, oos);

				writeString(this.dnupro, dos, oos);

				writeString(this.dnubat, dos, oos);

				writeString(this.jdatat, dos, oos);

				writeString(this.dteloc, dos, oos);

				writeString(this.type_local, dos, oos);

				writeString(this.dnatlc, dos, oos);

				writeString(this.libelle_nature, dos, oos);

				writeString(this.cconlc, dos, oos);

				writeString(this.nature_occupation, dos, oos);

				writeInteger(this.jannat, dos, oos);

				writeInteger(this.hlmsem, dos, oos);

				writeString(this.dnbniv, dos, oos);

				writeString(this.dniv, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parc=" + id_parc);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",dnubat=" + dnubat);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dteloc=" + dteloc);
			sb.append(",type_local=" + type_local);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",libelle_nature=" + libelle_nature);
			sb.append(",cconlc=" + cconlc);
			sb.append(",nature_occupation=" + nature_occupation);
			sb.append(",jannat=" + String.valueOf(jannat));
			sb.append(",hlmsem=" + String.valueOf(hlmsem));
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",dniv=" + dniv);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(table_bati_actStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.invar, other.invar);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class table_bati_depStruct implements
			routines.system.IPersistableRow<table_bati_depStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String libelle_nature;

		public String getLibelle_nature() {
			return this.libelle_nature;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String nature_occupation;

		public String getNature_occupation() {
			return this.nature_occupation;
		}

		public Integer jannat;

		public Integer getJannat() {
			return this.jannat;
		}

		public Integer hlmsem;

		public Integer getHlmsem() {
			return this.hlmsem;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String dniv;

		public String getDniv() {
			return this.dniv;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.id_parc = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.dnupro = readString(dis);

					this.dnubat = readString(dis);

					this.jdatat = readString(dis);

					this.dteloc = readString(dis);

					this.type_local = readString(dis);

					this.dnatlc = readString(dis);

					this.libelle_nature = readString(dis);

					this.cconlc = readString(dis);

					this.nature_occupation = readString(dis);

					this.jannat = readInteger(dis);

					this.hlmsem = readInteger(dis);

					this.dnbniv = readString(dis);

					this.dniv = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.dnubat, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dteloc, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.dnatlc, dos);

				// String

				writeString(this.libelle_nature, dos);

				// String

				writeString(this.cconlc, dos);

				// String

				writeString(this.nature_occupation, dos);

				// Integer

				writeInteger(this.jannat, dos);

				// Integer

				writeInteger(this.hlmsem, dos);

				// String

				writeString(this.dnbniv, dos);

				// String

				writeString(this.dniv, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parc=" + id_parc);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",dnubat=" + dnubat);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dteloc=" + dteloc);
			sb.append(",type_local=" + type_local);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",libelle_nature=" + libelle_nature);
			sb.append(",cconlc=" + cconlc);
			sb.append(",nature_occupation=" + nature_occupation);
			sb.append(",jannat=" + String.valueOf(jannat));
			sb.append(",hlmsem=" + String.valueOf(hlmsem));
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",dniv=" + dniv);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(table_bati_depStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public String desc;

		public String getDesc() {
			return this.desc;
		}

		public String dniv;

		public String getDniv() {
			return this.dniv;
		}

		public String dpor;

		public String getDpor() {
			return this.dpor;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dvoilib;

		public String getDvoilib() {
			return this.dvoilib;
		}

		public String cleinvar;

		public String getCleinvar() {
			return this.cleinvar;
		}

		public String locinc;

		public String getLocinc() {
			return this.locinc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.id_parc = readString(dis);

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.article = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.dnubat = readString(dis);

					this.desc = readString(dis);

					this.dniv = readString(dis);

					this.dpor = readString(dis);

					this.ccoriv = readString(dis);

					this.ccovoi = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccocif = readString(dis);

					this.dvoilib = readString(dis);

					this.cleinvar = readString(dis);

					this.locinc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.dnubat, dos);

				// String

				writeString(this.desc, dos);

				// String

				writeString(this.dniv, dos);

				// String

				writeString(this.dpor, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.dvoilib, dos);

				// String

				writeString(this.cleinvar, dos);

				// String

				writeString(this.locinc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parc=" + id_parc);
			sb.append(",ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",article=" + article);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",dnubat=" + dnubat);
			sb.append(",desc=" + desc);
			sb.append(",dniv=" + dniv);
			sb.append(",dpor=" + dpor);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dvoilib=" + dvoilib);
			sb.append(",cleinvar=" + cleinvar);
			sb.append(",locinc=" + locinc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public String desc;

		public String getDesc() {
			return this.desc;
		}

		public String dniv;

		public String getDniv() {
			return this.dniv;
		}

		public String dpor;

		public String getDpor() {
			return this.dpor;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dvoilib;

		public String getDvoilib() {
			return this.dvoilib;
		}

		public String cleinvar;

		public String getCleinvar() {
			return this.cleinvar;
		}

		public String locinc;

		public String getLocinc() {
			return this.locinc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.id_parc = readString(dis);

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.article = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.dnubat = readString(dis);

					this.desc = readString(dis);

					this.dniv = readString(dis);

					this.dpor = readString(dis);

					this.ccoriv = readString(dis);

					this.ccovoi = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccocif = readString(dis);

					this.dvoilib = readString(dis);

					this.cleinvar = readString(dis);

					this.locinc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.dnubat, dos);

				// String

				writeString(this.desc, dos);

				// String

				writeString(this.dniv, dos);

				// String

				writeString(this.dpor, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.dvoilib, dos);

				// String

				writeString(this.cleinvar, dos);

				// String

				writeString(this.locinc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parc=" + id_parc);
			sb.append(",ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",article=" + article);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",dnubat=" + dnubat);
			sb.append(",desc=" + desc);
			sb.append(",dniv=" + dniv);
			sb.append(",dpor=" + dpor);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dvoilib=" + dvoilib);
			sb.append(",cleinvar=" + cleinvar);
			sb.append(",locinc=" + locinc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_6Process(globalMap);
				tFileInputDelimited_8Process(globalMap);
				tFileInputDelimited_7Process(globalMap);

				row1Struct row1 = new row1Struct();
				table_bati_habStruct table_bati_hab = new table_bati_habStruct();
				tab_bati_hab_totalStruct tab_bati_hab_total = new tab_bati_hab_totalStruct();
				table_bati_actStruct table_bati_act = new table_bati_actStruct();
				table_bati_act_totalStruct table_bati_act_total = new table_bati_act_totalStruct();
				table_bati_depStruct table_bati_dep = new table_bati_depStruct();
				tab_bati_dep_totalStruct tab_bati_dep_total = new tab_bati_dep_totalStruct();

				/**
				 * [tMap_1_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_1_TMAP_OUT", false);
				start_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_1_TMAP_OUT";

				int tos_count_tMap_1_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1_TMAP_OUT__Struct {
				}
				Var__tMap_1_TMAP_OUT__Struct Var__tMap_1_TMAP_OUT = new Var__tMap_1_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_1_1 implements
						Comparable<SortableRow_tMap_1_1>,
						routines.system.IPersistableRow<SortableRow_tMap_1_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row2__ccodep;
					String exprKey_row2__ccocom;
					String exprKey_row2__invar;

					// row1
					String row1__id_parc;
					String row1__ccodep;
					String row1__ccodir;
					String row1__ccocom;
					String row1__invar;
					String row1__article;
					String row1__ccopre;
					String row1__ccosec;
					String row1__dnupla;
					String row1__dnubat;
					String row1__desc;
					String row1__dniv;
					String row1__dpor;
					String row1__ccoriv;
					String row1__ccovoi;
					String row1__dnvoiri;
					String row1__dindic;
					String row1__ccocif;
					String row1__dvoilib;
					String row1__cleinvar;
					String row1__locinc;

					public void fillFrom(row1Struct row1,
							String exprKey_row2__ccodep,
							String exprKey_row2__ccocom,
							String exprKey_row2__invar) {

						this.row1__id_parc = row1.id_parc;
						this.row1__ccodep = row1.ccodep;
						this.row1__ccodir = row1.ccodir;
						this.row1__ccocom = row1.ccocom;
						this.row1__invar = row1.invar;
						this.row1__article = row1.article;
						this.row1__ccopre = row1.ccopre;
						this.row1__ccosec = row1.ccosec;
						this.row1__dnupla = row1.dnupla;
						this.row1__dnubat = row1.dnubat;
						this.row1__desc = row1.desc;
						this.row1__dniv = row1.dniv;
						this.row1__dpor = row1.dpor;
						this.row1__ccoriv = row1.ccoriv;
						this.row1__ccovoi = row1.ccovoi;
						this.row1__dnvoiri = row1.dnvoiri;
						this.row1__dindic = row1.dindic;
						this.row1__ccocif = row1.ccocif;
						this.row1__dvoilib = row1.dvoilib;
						this.row1__cleinvar = row1.cleinvar;
						this.row1__locinc = row1.locinc;
						this.exprKey_row2__ccodep = exprKey_row2__ccodep;
						this.exprKey_row2__ccocom = exprKey_row2__ccocom;
						this.exprKey_row2__invar = exprKey_row2__invar;

					}

					public void copyDataTo(row1Struct row1) {

						row1.id_parc = this.row1__id_parc;
						row1.ccodep = this.row1__ccodep;
						row1.ccodir = this.row1__ccodir;
						row1.ccocom = this.row1__ccocom;
						row1.invar = this.row1__invar;
						row1.article = this.row1__article;
						row1.ccopre = this.row1__ccopre;
						row1.ccosec = this.row1__ccosec;
						row1.dnupla = this.row1__dnupla;
						row1.dnubat = this.row1__dnubat;
						row1.desc = this.row1__desc;
						row1.dniv = this.row1__dniv;
						row1.dpor = this.row1__dpor;
						row1.ccoriv = this.row1__ccoriv;
						row1.ccovoi = this.row1__ccovoi;
						row1.dnvoiri = this.row1__dnvoiri;
						row1.dindic = this.row1__dindic;
						row1.ccocif = this.row1__ccocif;
						row1.dvoilib = this.row1__dvoilib;
						row1.cleinvar = this.row1__cleinvar;
						row1.locinc = this.row1__locinc;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row1__id_parc");
						sb.append("=");
						sb.append(String.valueOf(this.row1__id_parc));

						sb.append(", ");

						sb.append("row1__ccodep");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccodep));

						sb.append(", ");

						sb.append("row1__ccodir");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccodir));

						sb.append(", ");

						sb.append("row1__ccocom");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccocom));

						sb.append(", ");

						sb.append("row1__invar");
						sb.append("=");
						sb.append(String.valueOf(this.row1__invar));

						sb.append(", ");

						sb.append("row1__article");
						sb.append("=");
						sb.append(String.valueOf(this.row1__article));

						sb.append(", ");

						sb.append("row1__ccopre");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccopre));

						sb.append(", ");

						sb.append("row1__ccosec");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccosec));

						sb.append(", ");

						sb.append("row1__dnupla");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dnupla));

						sb.append(", ");

						sb.append("row1__dnubat");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dnubat));

						sb.append(", ");

						sb.append("row1__desc");
						sb.append("=");
						sb.append(String.valueOf(this.row1__desc));

						sb.append(", ");

						sb.append("row1__dniv");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dniv));

						sb.append(", ");

						sb.append("row1__dpor");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dpor));

						sb.append(", ");

						sb.append("row1__ccoriv");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccoriv));

						sb.append(", ");

						sb.append("row1__ccovoi");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccovoi));

						sb.append(", ");

						sb.append("row1__dnvoiri");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dnvoiri));

						sb.append(", ");

						sb.append("row1__dindic");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dindic));

						sb.append(", ");

						sb.append("row1__ccocif");
						sb.append("=");
						sb.append(String.valueOf(this.row1__ccocif));

						sb.append(", ");

						sb.append("row1__dvoilib");
						sb.append("=");
						sb.append(String.valueOf(this.row1__dvoilib));

						sb.append(", ");

						sb.append("row1__cleinvar");
						sb.append("=");
						sb.append(String.valueOf(this.row1__cleinvar));

						sb.append(", ");

						sb.append("row1__locinc");
						sb.append("=");
						sb.append(String.valueOf(this.row1__locinc));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_1_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row2__ccodep,
								other.exprKey_row2__ccodep);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row2__ccocom,
								other.exprKey_row2__ccocom);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row2__invar,
								other.exprKey_row2__invar);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row1Struct.commonByteArrayLock_MAJIC_etape3_info_bati) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.row1__id_parc = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__id_parc = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccodep = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__ccodep = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccodir = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__ccodir = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccocom = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__ccocom = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__invar = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__invar = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__article = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__article = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccopre = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__ccopre = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccosec = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__ccosec = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dnupla = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__dnupla = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dnubat = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__dnubat = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__desc = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__desc = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dniv = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__dniv = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dpor = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__dpor = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccoriv = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__ccoriv = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccovoi = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__ccovoi = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dnvoiri = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__dnvoiri = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dindic = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__dindic = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__ccocif = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__ccocif = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__dvoilib = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__dvoilib = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__cleinvar = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__cleinvar = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row1__locinc = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.row1__locinc = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row2__ccodep = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row2__ccodep = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row2__ccocom = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row2__ccocom = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row2__invar = null;
								} else {
									if (length > row1Struct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& row1Struct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											row1Struct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row2__invar = new String(
											row1Struct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row1__id_parc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__id_parc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccodep == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccodep.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccodir == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccodir.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccocom.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__invar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__invar.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__article == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__article
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccopre == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccopre.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccosec == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccosec.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dnupla == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dnupla.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dnubat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dnubat.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__desc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__desc.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dniv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dniv.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dpor == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dpor.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccoriv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccoriv.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccovoi == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccovoi.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dnvoiri == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dnvoiri
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dindic == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dindic.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__ccocif == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__ccocif.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__dvoilib == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__dvoilib
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__cleinvar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__cleinvar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row1__locinc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row1__locinc.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row2__ccodep == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row2__ccodep
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row2__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row2__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row2__invar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row2__invar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1> fsi_tMap_1_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1>(
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_tMap_1_1", 2000000) {
					public SortableRow_tMap_1_1 createRowInstance() {
						return new SortableRow_tMap_1_1();
					}
				};

				fsi_tMap_1_1.initPut();

				/**
				 * [tMap_1_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.target_path + "bati_article00.csv"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.id_parc = null;

								row1.ccodep = null;

								row1.ccodir = null;

								row1.ccocom = null;

								row1.invar = null;

								row1.article = null;

								row1.ccopre = null;

								row1.ccosec = null;

								row1.dnupla = null;

								row1.dnubat = null;

								row1.desc = null;

								row1.dniv = null;

								row1.dpor = null;

								row1.ccoriv = null;

								row1.ccovoi = null;

								row1.dnvoiri = null;

								row1.dindic = null;

								row1.ccocif = null;

								row1.dvoilib = null;

								row1.cleinvar = null;

								row1.locinc = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.id_parc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.id_parc = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccodep = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccodep = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccodir = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccodir = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccocom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccocom = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.invar = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.invar = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.article = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.article = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccopre = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccopre = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccosec = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccosec = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnupla = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnupla = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnubat = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnubat = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.desc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.desc = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dniv = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dniv = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dpor = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dpor = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccoriv = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccoriv = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccovoi = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccovoi = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnvoiri = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnvoiri = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dindic = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dindic = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccocif = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccocif = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dvoilib = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dvoilib = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.cleinvar = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.cleinvar = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.locinc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.locinc = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_1_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							String exprKey_row2__ccodep = row1.ccodep;

							String exprKey_row2__ccocom = row1.ccocom;

							String exprKey_row2__invar = row1.invar;

							SortableRow_tMap_1_1 sortableRow_tMap_1_1 = fsi_tMap_1_1
									.getNextFreeRow();

							sortableRow_tMap_1_1.fillFrom(row1,
									exprKey_row2__ccodep, exprKey_row2__ccocom,
									exprKey_row2__invar);

							fsi_tMap_1_1.put(sortableRow_tMap_1_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1_TMAP_OUT = false;
							boolean mainRowRejected_tMap_1_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_1_TMAP_OUT++;

							/**
							 * [tMap_1_TMAP_OUT main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_1_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1_TMAP_OUT", true);
				end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_1_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_3_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_3_TMAP_OUT", false);
				start_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_3_TMAP_OUT";

				int tos_count_tMap_3_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row3Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3_TMAP_OUT__Struct {
					int val_zero;
					int val_1;
					int dsueic1;
					int dsueic2;
					int dsueic3;
					int dsueic4;
					int dsupdc;
				}
				Var__tMap_3_TMAP_OUT__Struct Var__tMap_3_TMAP_OUT = new Var__tMap_3_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_3_1 implements
						Comparable<SortableRow_tMap_3_1>,
						routines.system.IPersistableRow<SortableRow_tMap_3_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row3__ccocom;
					String exprKey_row3__invar;

					// table_bati_hab
					String table_bati_hab__id_parc;
					String table_bati_hab__ccocom;
					String table_bati_hab__invar;
					String table_bati_hab__dnupro;
					String table_bati_hab__dnubat;
					String table_bati_hab__jdatat;
					String table_bati_hab__dteloc;
					String table_bati_hab__type_local;
					String table_bati_hab__dnatlc;
					String table_bati_hab__libelle_nature;
					String table_bati_hab__cconlc;
					String table_bati_hab__nature_occupation;
					Integer table_bati_hab__jannat;
					Integer table_bati_hab__hlmsem;
					String table_bati_hab__dnbniv;
					String table_bati_hab__dniv;

					public void fillFrom(table_bati_habStruct table_bati_hab,
							String exprKey_row3__ccocom,
							String exprKey_row3__invar) {

						this.table_bati_hab__id_parc = table_bati_hab.id_parc;
						this.table_bati_hab__ccocom = table_bati_hab.ccocom;
						this.table_bati_hab__invar = table_bati_hab.invar;
						this.table_bati_hab__dnupro = table_bati_hab.dnupro;
						this.table_bati_hab__dnubat = table_bati_hab.dnubat;
						this.table_bati_hab__jdatat = table_bati_hab.jdatat;
						this.table_bati_hab__dteloc = table_bati_hab.dteloc;
						this.table_bati_hab__type_local = table_bati_hab.type_local;
						this.table_bati_hab__dnatlc = table_bati_hab.dnatlc;
						this.table_bati_hab__libelle_nature = table_bati_hab.libelle_nature;
						this.table_bati_hab__cconlc = table_bati_hab.cconlc;
						this.table_bati_hab__nature_occupation = table_bati_hab.nature_occupation;
						this.table_bati_hab__jannat = table_bati_hab.jannat;
						this.table_bati_hab__hlmsem = table_bati_hab.hlmsem;
						this.table_bati_hab__dnbniv = table_bati_hab.dnbniv;
						this.table_bati_hab__dniv = table_bati_hab.dniv;
						this.exprKey_row3__ccocom = exprKey_row3__ccocom;
						this.exprKey_row3__invar = exprKey_row3__invar;

					}

					public void copyDataTo(table_bati_habStruct table_bati_hab) {

						table_bati_hab.id_parc = this.table_bati_hab__id_parc;
						table_bati_hab.ccocom = this.table_bati_hab__ccocom;
						table_bati_hab.invar = this.table_bati_hab__invar;
						table_bati_hab.dnupro = this.table_bati_hab__dnupro;
						table_bati_hab.dnubat = this.table_bati_hab__dnubat;
						table_bati_hab.jdatat = this.table_bati_hab__jdatat;
						table_bati_hab.dteloc = this.table_bati_hab__dteloc;
						table_bati_hab.type_local = this.table_bati_hab__type_local;
						table_bati_hab.dnatlc = this.table_bati_hab__dnatlc;
						table_bati_hab.libelle_nature = this.table_bati_hab__libelle_nature;
						table_bati_hab.cconlc = this.table_bati_hab__cconlc;
						table_bati_hab.nature_occupation = this.table_bati_hab__nature_occupation;
						table_bati_hab.jannat = this.table_bati_hab__jannat;
						table_bati_hab.hlmsem = this.table_bati_hab__hlmsem;
						table_bati_hab.dnbniv = this.table_bati_hab__dnbniv;
						table_bati_hab.dniv = this.table_bati_hab__dniv;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("table_bati_hab__id_parc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__id_parc));

						sb.append(", ");

						sb.append("table_bati_hab__ccocom");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__ccocom));

						sb.append(", ");

						sb.append("table_bati_hab__invar");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__invar));

						sb.append(", ");

						sb.append("table_bati_hab__dnupro");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__dnupro));

						sb.append(", ");

						sb.append("table_bati_hab__dnubat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__dnubat));

						sb.append(", ");

						sb.append("table_bati_hab__jdatat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__jdatat));

						sb.append(", ");

						sb.append("table_bati_hab__dteloc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__dteloc));

						sb.append(", ");

						sb.append("table_bati_hab__type_local");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_hab__type_local));

						sb.append(", ");

						sb.append("table_bati_hab__dnatlc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__dnatlc));

						sb.append(", ");

						sb.append("table_bati_hab__libelle_nature");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_hab__libelle_nature));

						sb.append(", ");

						sb.append("table_bati_hab__cconlc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__cconlc));

						sb.append(", ");

						sb.append("table_bati_hab__nature_occupation");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_hab__nature_occupation));

						sb.append(", ");

						sb.append("table_bati_hab__jannat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__jannat));

						sb.append(", ");

						sb.append("table_bati_hab__hlmsem");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__hlmsem));

						sb.append(", ");

						sb.append("table_bati_hab__dnbniv");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__dnbniv));

						sb.append(", ");

						sb.append("table_bati_hab__dniv");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_hab__dniv));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_3_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row3__ccocom,
								other.exprKey_row3__ccocom);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row3__invar,
								other.exprKey_row3__invar);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (table_bati_habStruct.commonByteArrayLock_MAJIC_etape3_info_bati) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__id_parc = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__id_parc = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__ccocom = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__ccocom = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__invar = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__invar = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__dnupro = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__dnupro = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__dnubat = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__dnubat = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__jdatat = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__jdatat = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__dteloc = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__dteloc = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__type_local = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__type_local = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__dnatlc = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__dnatlc = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__libelle_nature = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__libelle_nature = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__cconlc = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__cconlc = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__nature_occupation = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__nature_occupation = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.table_bati_hab__jannat = null;
								} else {
									this.table_bati_hab__jannat = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.table_bati_hab__hlmsem = null;
								} else {
									this.table_bati_hab__hlmsem = dis.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__dnbniv = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__dnbniv = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_hab__dniv = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_hab__dniv = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row3__ccocom = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row3__ccocom = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row3__invar = null;
								} else {
									if (length > table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row3__invar = new String(
											table_bati_habStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.table_bati_hab__id_parc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__id_parc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__invar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__invar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__dnupro == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__dnupro
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__dnubat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__dnubat
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__jdatat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__jdatat
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__dteloc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__dteloc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__type_local == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__type_local
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__dnatlc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__dnatlc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__libelle_nature == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__libelle_nature
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__cconlc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__cconlc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__nature_occupation == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__nature_occupation
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__jannat == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.table_bati_hab__jannat);
							}

							if (this.table_bati_hab__hlmsem == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.table_bati_hab__hlmsem);
							}

							if (this.table_bati_hab__dnbniv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__dnbniv
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_hab__dniv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_hab__dniv
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row3__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row3__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row3__invar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row3__invar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_1> fsi_tMap_3_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_1>(
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_tMap_3_1", 2000000) {
					public SortableRow_tMap_3_1 createRowInstance() {
						return new SortableRow_tMap_3_1();
					}
				};

				fsi_tMap_3_1.initPut();

				/**
				 * [tMap_3_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_4_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_4_TMAP_OUT", false);
				start_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_4_TMAP_OUT";

				int tos_count_tMap_4_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4_TMAP_OUT__Struct {
					int val_zero;
					int val_1;
				}
				Var__tMap_4_TMAP_OUT__Struct Var__tMap_4_TMAP_OUT = new Var__tMap_4_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_4_1 implements
						Comparable<SortableRow_tMap_4_1>,
						routines.system.IPersistableRow<SortableRow_tMap_4_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row9__ccocom;
					String exprKey_row9__invar;

					// table_bati_act
					String table_bati_act__id_parc;
					String table_bati_act__ccocom;
					String table_bati_act__invar;
					String table_bati_act__dnupro;
					String table_bati_act__dnubat;
					String table_bati_act__jdatat;
					String table_bati_act__dteloc;
					String table_bati_act__type_local;
					String table_bati_act__dnatlc;
					String table_bati_act__libelle_nature;
					String table_bati_act__cconlc;
					String table_bati_act__nature_occupation;
					Integer table_bati_act__jannat;
					Integer table_bati_act__hlmsem;
					String table_bati_act__dnbniv;
					String table_bati_act__dniv;

					public void fillFrom(table_bati_actStruct table_bati_act,
							String exprKey_row9__ccocom,
							String exprKey_row9__invar) {

						this.table_bati_act__id_parc = table_bati_act.id_parc;
						this.table_bati_act__ccocom = table_bati_act.ccocom;
						this.table_bati_act__invar = table_bati_act.invar;
						this.table_bati_act__dnupro = table_bati_act.dnupro;
						this.table_bati_act__dnubat = table_bati_act.dnubat;
						this.table_bati_act__jdatat = table_bati_act.jdatat;
						this.table_bati_act__dteloc = table_bati_act.dteloc;
						this.table_bati_act__type_local = table_bati_act.type_local;
						this.table_bati_act__dnatlc = table_bati_act.dnatlc;
						this.table_bati_act__libelle_nature = table_bati_act.libelle_nature;
						this.table_bati_act__cconlc = table_bati_act.cconlc;
						this.table_bati_act__nature_occupation = table_bati_act.nature_occupation;
						this.table_bati_act__jannat = table_bati_act.jannat;
						this.table_bati_act__hlmsem = table_bati_act.hlmsem;
						this.table_bati_act__dnbniv = table_bati_act.dnbniv;
						this.table_bati_act__dniv = table_bati_act.dniv;
						this.exprKey_row9__ccocom = exprKey_row9__ccocom;
						this.exprKey_row9__invar = exprKey_row9__invar;

					}

					public void copyDataTo(table_bati_actStruct table_bati_act) {

						table_bati_act.id_parc = this.table_bati_act__id_parc;
						table_bati_act.ccocom = this.table_bati_act__ccocom;
						table_bati_act.invar = this.table_bati_act__invar;
						table_bati_act.dnupro = this.table_bati_act__dnupro;
						table_bati_act.dnubat = this.table_bati_act__dnubat;
						table_bati_act.jdatat = this.table_bati_act__jdatat;
						table_bati_act.dteloc = this.table_bati_act__dteloc;
						table_bati_act.type_local = this.table_bati_act__type_local;
						table_bati_act.dnatlc = this.table_bati_act__dnatlc;
						table_bati_act.libelle_nature = this.table_bati_act__libelle_nature;
						table_bati_act.cconlc = this.table_bati_act__cconlc;
						table_bati_act.nature_occupation = this.table_bati_act__nature_occupation;
						table_bati_act.jannat = this.table_bati_act__jannat;
						table_bati_act.hlmsem = this.table_bati_act__hlmsem;
						table_bati_act.dnbniv = this.table_bati_act__dnbniv;
						table_bati_act.dniv = this.table_bati_act__dniv;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("table_bati_act__id_parc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__id_parc));

						sb.append(", ");

						sb.append("table_bati_act__ccocom");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__ccocom));

						sb.append(", ");

						sb.append("table_bati_act__invar");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__invar));

						sb.append(", ");

						sb.append("table_bati_act__dnupro");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__dnupro));

						sb.append(", ");

						sb.append("table_bati_act__dnubat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__dnubat));

						sb.append(", ");

						sb.append("table_bati_act__jdatat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__jdatat));

						sb.append(", ");

						sb.append("table_bati_act__dteloc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__dteloc));

						sb.append(", ");

						sb.append("table_bati_act__type_local");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_act__type_local));

						sb.append(", ");

						sb.append("table_bati_act__dnatlc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__dnatlc));

						sb.append(", ");

						sb.append("table_bati_act__libelle_nature");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_act__libelle_nature));

						sb.append(", ");

						sb.append("table_bati_act__cconlc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__cconlc));

						sb.append(", ");

						sb.append("table_bati_act__nature_occupation");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_act__nature_occupation));

						sb.append(", ");

						sb.append("table_bati_act__jannat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__jannat));

						sb.append(", ");

						sb.append("table_bati_act__hlmsem");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__hlmsem));

						sb.append(", ");

						sb.append("table_bati_act__dnbniv");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__dnbniv));

						sb.append(", ");

						sb.append("table_bati_act__dniv");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_act__dniv));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_4_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row9__ccocom,
								other.exprKey_row9__ccocom);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row9__invar,
								other.exprKey_row9__invar);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (table_bati_actStruct.commonByteArrayLock_MAJIC_etape3_info_bati) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__id_parc = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__id_parc = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__ccocom = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__ccocom = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__invar = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__invar = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__dnupro = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__dnupro = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__dnubat = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__dnubat = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__jdatat = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__jdatat = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__dteloc = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__dteloc = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__type_local = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__type_local = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__dnatlc = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__dnatlc = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__libelle_nature = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__libelle_nature = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__cconlc = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__cconlc = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__nature_occupation = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__nature_occupation = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.table_bati_act__jannat = null;
								} else {
									this.table_bati_act__jannat = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.table_bati_act__hlmsem = null;
								} else {
									this.table_bati_act__hlmsem = dis.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__dnbniv = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__dnbniv = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_act__dniv = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_act__dniv = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row9__ccocom = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row9__ccocom = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row9__invar = null;
								} else {
									if (length > table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row9__invar = new String(
											table_bati_actStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.table_bati_act__id_parc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__id_parc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__invar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__invar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__dnupro == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__dnupro
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__dnubat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__dnubat
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__jdatat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__jdatat
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__dteloc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__dteloc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__type_local == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__type_local
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__dnatlc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__dnatlc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__libelle_nature == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__libelle_nature
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__cconlc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__cconlc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__nature_occupation == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__nature_occupation
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__jannat == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.table_bati_act__jannat);
							}

							if (this.table_bati_act__hlmsem == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.table_bati_act__hlmsem);
							}

							if (this.table_bati_act__dnbniv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__dnbniv
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_act__dniv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_act__dniv
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row9__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row9__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row9__invar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row9__invar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_4_1> fsi_tMap_4_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_4_1>(
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_tMap_4_1", 2000000) {
					public SortableRow_tMap_4_1 createRowInstance() {
						return new SortableRow_tMap_4_1();
					}
				};

				fsi_tMap_4_1.initPut();

				/**
				 * [tMap_4_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_5_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_5_TMAP_OUT", false);
				start_Hash.put("tMap_5_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_5_TMAP_OUT";

				int tos_count_tMap_5_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row18Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5_TMAP_OUT__Struct {
					int val_zero;
					int val_1;
				}
				Var__tMap_5_TMAP_OUT__Struct Var__tMap_5_TMAP_OUT = new Var__tMap_5_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_5_1 implements
						Comparable<SortableRow_tMap_5_1>,
						routines.system.IPersistableRow<SortableRow_tMap_5_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row18__ccocom;
					String exprKey_row18__invar;

					// table_bati_dep
					String table_bati_dep__id_parc;
					String table_bati_dep__ccocom;
					String table_bati_dep__invar;
					String table_bati_dep__dnupro;
					String table_bati_dep__dnubat;
					String table_bati_dep__jdatat;
					String table_bati_dep__dteloc;
					String table_bati_dep__type_local;
					String table_bati_dep__dnatlc;
					String table_bati_dep__libelle_nature;
					String table_bati_dep__cconlc;
					String table_bati_dep__nature_occupation;
					Integer table_bati_dep__jannat;
					Integer table_bati_dep__hlmsem;
					String table_bati_dep__dnbniv;
					String table_bati_dep__dniv;

					public void fillFrom(table_bati_depStruct table_bati_dep,
							String exprKey_row18__ccocom,
							String exprKey_row18__invar) {

						this.table_bati_dep__id_parc = table_bati_dep.id_parc;
						this.table_bati_dep__ccocom = table_bati_dep.ccocom;
						this.table_bati_dep__invar = table_bati_dep.invar;
						this.table_bati_dep__dnupro = table_bati_dep.dnupro;
						this.table_bati_dep__dnubat = table_bati_dep.dnubat;
						this.table_bati_dep__jdatat = table_bati_dep.jdatat;
						this.table_bati_dep__dteloc = table_bati_dep.dteloc;
						this.table_bati_dep__type_local = table_bati_dep.type_local;
						this.table_bati_dep__dnatlc = table_bati_dep.dnatlc;
						this.table_bati_dep__libelle_nature = table_bati_dep.libelle_nature;
						this.table_bati_dep__cconlc = table_bati_dep.cconlc;
						this.table_bati_dep__nature_occupation = table_bati_dep.nature_occupation;
						this.table_bati_dep__jannat = table_bati_dep.jannat;
						this.table_bati_dep__hlmsem = table_bati_dep.hlmsem;
						this.table_bati_dep__dnbniv = table_bati_dep.dnbniv;
						this.table_bati_dep__dniv = table_bati_dep.dniv;
						this.exprKey_row18__ccocom = exprKey_row18__ccocom;
						this.exprKey_row18__invar = exprKey_row18__invar;

					}

					public void copyDataTo(table_bati_depStruct table_bati_dep) {

						table_bati_dep.id_parc = this.table_bati_dep__id_parc;
						table_bati_dep.ccocom = this.table_bati_dep__ccocom;
						table_bati_dep.invar = this.table_bati_dep__invar;
						table_bati_dep.dnupro = this.table_bati_dep__dnupro;
						table_bati_dep.dnubat = this.table_bati_dep__dnubat;
						table_bati_dep.jdatat = this.table_bati_dep__jdatat;
						table_bati_dep.dteloc = this.table_bati_dep__dteloc;
						table_bati_dep.type_local = this.table_bati_dep__type_local;
						table_bati_dep.dnatlc = this.table_bati_dep__dnatlc;
						table_bati_dep.libelle_nature = this.table_bati_dep__libelle_nature;
						table_bati_dep.cconlc = this.table_bati_dep__cconlc;
						table_bati_dep.nature_occupation = this.table_bati_dep__nature_occupation;
						table_bati_dep.jannat = this.table_bati_dep__jannat;
						table_bati_dep.hlmsem = this.table_bati_dep__hlmsem;
						table_bati_dep.dnbniv = this.table_bati_dep__dnbniv;
						table_bati_dep.dniv = this.table_bati_dep__dniv;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("table_bati_dep__id_parc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__id_parc));

						sb.append(", ");

						sb.append("table_bati_dep__ccocom");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__ccocom));

						sb.append(", ");

						sb.append("table_bati_dep__invar");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__invar));

						sb.append(", ");

						sb.append("table_bati_dep__dnupro");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__dnupro));

						sb.append(", ");

						sb.append("table_bati_dep__dnubat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__dnubat));

						sb.append(", ");

						sb.append("table_bati_dep__jdatat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__jdatat));

						sb.append(", ");

						sb.append("table_bati_dep__dteloc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__dteloc));

						sb.append(", ");

						sb.append("table_bati_dep__type_local");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_dep__type_local));

						sb.append(", ");

						sb.append("table_bati_dep__dnatlc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__dnatlc));

						sb.append(", ");

						sb.append("table_bati_dep__libelle_nature");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_dep__libelle_nature));

						sb.append(", ");

						sb.append("table_bati_dep__cconlc");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__cconlc));

						sb.append(", ");

						sb.append("table_bati_dep__nature_occupation");
						sb.append("=");
						sb.append(String
								.valueOf(this.table_bati_dep__nature_occupation));

						sb.append(", ");

						sb.append("table_bati_dep__jannat");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__jannat));

						sb.append(", ");

						sb.append("table_bati_dep__hlmsem");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__hlmsem));

						sb.append(", ");

						sb.append("table_bati_dep__dnbniv");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__dnbniv));

						sb.append(", ");

						sb.append("table_bati_dep__dniv");
						sb.append("=");
						sb.append(String.valueOf(this.table_bati_dep__dniv));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_5_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row18__ccocom,
								other.exprKey_row18__ccocom);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row18__invar,
								other.exprKey_row18__invar);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (table_bati_depStruct.commonByteArrayLock_MAJIC_etape3_info_bati) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__id_parc = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__id_parc = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__ccocom = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__ccocom = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__invar = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__invar = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__dnupro = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__dnupro = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__dnubat = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__dnubat = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__jdatat = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__jdatat = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__dteloc = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__dteloc = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__type_local = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__type_local = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__dnatlc = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__dnatlc = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__libelle_nature = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__libelle_nature = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__cconlc = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__cconlc = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__nature_occupation = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__nature_occupation = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.table_bati_dep__jannat = null;
								} else {
									this.table_bati_dep__jannat = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.table_bati_dep__hlmsem = null;
								} else {
									this.table_bati_dep__hlmsem = dis.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__dnbniv = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__dnbniv = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.table_bati_dep__dniv = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.table_bati_dep__dniv = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row18__ccocom = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row18__ccocom = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row18__invar = null;
								} else {
									if (length > table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length) {
										if (length < 1024
												&& table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati.length == 0) {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
										} else {
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
									this.exprKey_row18__invar = new String(
											table_bati_depStruct.commonByteArray_MAJIC_etape3_info_bati,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.table_bati_dep__id_parc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__id_parc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__invar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__invar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__dnupro == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__dnupro
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__dnubat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__dnubat
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__jdatat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__jdatat
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__dteloc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__dteloc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__type_local == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__type_local
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__dnatlc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__dnatlc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__libelle_nature == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__libelle_nature
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__cconlc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__cconlc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__nature_occupation == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__nature_occupation
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__jannat == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.table_bati_dep__jannat);
							}

							if (this.table_bati_dep__hlmsem == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.table_bati_dep__hlmsem);
							}

							if (this.table_bati_dep__dnbniv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__dnbniv
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.table_bati_dep__dniv == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.table_bati_dep__dniv
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row18__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row18__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row18__invar == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row18__invar
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_5_1> fsi_tMap_5_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_5_1>(
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_tMap_5_1", 2000000) {
					public SortableRow_tMap_5_1 createRowInstance() {
						return new SortableRow_tMap_5_1();
					}
				};

				fsi_tMap_5_1.initPut();

				/**
				 * [tMap_5_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_1_TMAP_IN", false);
				start_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());
				currentComponent = "tMap_1_TMAP_IN";

				int tos_count_tMap_1_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1_TMAP_IN__Struct {
				}
				Var__tMap_1_TMAP_IN__Struct Var__tMap_1_TMAP_IN = new Var__tMap_1_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				table_bati_habStruct table_bati_hab_tmp = new table_bati_habStruct();
				table_bati_actStruct table_bati_act_tmp = new table_bati_actStruct();
				table_bati_depStruct table_bati_dep_tmp = new table_bati_depStruct();
				// ###############################

				/**
				 * [tMap_1_TMAP_IN begin ] stop
				 */
				/**
				 * [tMap_1_TMAP_IN main ] start
				 */

				currentComponent = "tMap_1_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

				fsi_tMap_1_1.endPut();

				if (row1 == null) {
					row1 = new row1Struct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_1_TMAP_IN = false;
				boolean mainRowRejected_tMap_1_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row2"
				// /////////////////////////////////////////////

				SortableRow_tMap_1_1 rsc_tMap_1_1;

				tHash_Lookup_row2.initGet();

				fsi_tMap_1_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_1_TMAP_IN = false;

				while (fsi_tMap_1_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_1_1 = (SortableRow_tMap_1_1) fsi_tMap_1_1.next();
					rsc_tMap_1_1.copyDataTo(row1);

					rejectedInnerJoin_tMap_1_TMAP_IN = rsc_tMap_1_1.is__rejectedInnerJoin;

					boolean forceLooprow2 = false;

					row2Struct row2ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

						row2HashKey.ccodep = rsc_tMap_1_1.exprKey_row2__ccodep;

						row2HashKey.ccocom = rsc_tMap_1_1.exprKey_row2__ccocom;

						row2HashKey.invar = rsc_tMap_1_1.exprKey_row2__invar;

						tHash_Lookup_row2.lookup(row2HashKey);

					} // G_TM_M_020

					row2Struct row2 = null;

					row2Struct fromLookup_row2 = null;
					row2 = row2Default;

					if (tHash_Lookup_row2 != null
							&& tHash_Lookup_row2.hasNext()) { // G 099

						fromLookup_row2 = tHash_Lookup_row2.next();

					} // G 099

					if (fromLookup_row2 != null) {
						row2 = fromLookup_row2;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1_TMAP_IN__Struct Var = Var__tMap_1_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						table_bati_hab = null;
						table_bati_act = null;
						table_bati_dep = null;

						boolean rejected_tMap_1_TMAP_IN = true;

						// # Output table : 'table_bati_hab'
						// # Filter conditions
						if (

						row2.dteloc.equals("1") || row2.dteloc.equals("2")

						) {
							rejected_tMap_1_TMAP_IN = false;
							table_bati_hab_tmp.id_parc = row1.id_parc;
							table_bati_hab_tmp.ccocom = row1.ccocom;
							table_bati_hab_tmp.invar = row1.invar;
							table_bati_hab_tmp.dnupro = row2.dnupro;
							table_bati_hab_tmp.dnubat = row1.dnubat;
							table_bati_hab_tmp.jdatat = row2.jdatat;
							table_bati_hab_tmp.dteloc = row2.dteloc;
							table_bati_hab_tmp.type_local = row2.type_local;
							table_bati_hab_tmp.dnatlc = row2.dnatlc;
							table_bati_hab_tmp.libelle_nature = row2.libelle_nature_bien;
							table_bati_hab_tmp.cconlc = row2.cconlc;
							table_bati_hab_tmp.nature_occupation = row2.nature_occupation;
							table_bati_hab_tmp.jannat = row2.jannat;
							table_bati_hab_tmp.hlmsem = row2.hlmsem;
							table_bati_hab_tmp.dnbniv = row2.dnbniv;
							table_bati_hab_tmp.dniv = row1.dniv;
							table_bati_hab = table_bati_hab_tmp;
						} // closing filter/reject

						// # Output table : 'table_bati_act'
						// # Filter conditions
						if (

						row2.dteloc.equals("4")

						) {
							rejected_tMap_1_TMAP_IN = false;
							table_bati_act_tmp.id_parc = row1.id_parc;
							table_bati_act_tmp.ccocom = row1.ccocom;
							table_bati_act_tmp.invar = row1.invar;
							table_bati_act_tmp.dnupro = row2.dnupro;
							table_bati_act_tmp.dnubat = row1.dnubat;
							table_bati_act_tmp.jdatat = row2.jdatat;
							table_bati_act_tmp.dteloc = row2.dteloc;
							table_bati_act_tmp.type_local = row2.type_local;
							table_bati_act_tmp.dnatlc = row2.dnatlc;
							table_bati_act_tmp.libelle_nature = row2.libelle_nature_bien;
							table_bati_act_tmp.cconlc = row2.cconlc;
							table_bati_act_tmp.nature_occupation = row2.nature_occupation;
							table_bati_act_tmp.jannat = row2.jannat;
							table_bati_act_tmp.hlmsem = row2.hlmsem;
							table_bati_act_tmp.dnbniv = row2.dnbniv;
							table_bati_act_tmp.dniv = row1.dniv;
							table_bati_act = table_bati_act_tmp;
						} // closing filter/reject
							// ###### START REJECTS #####

						// # Output reject table : 'table_bati_dep'
						// # Filter conditions
						if (rejected_tMap_1_TMAP_IN) {
							table_bati_dep_tmp.id_parc = row1.id_parc;
							table_bati_dep_tmp.ccocom = row1.ccocom;
							table_bati_dep_tmp.invar = row1.invar;
							table_bati_dep_tmp.dnupro = row2.dnupro;
							table_bati_dep_tmp.dnubat = row1.dnubat;
							table_bati_dep_tmp.jdatat = row2.jdatat;
							table_bati_dep_tmp.dteloc = row2.dteloc;
							table_bati_dep_tmp.type_local = row2.type_local;
							table_bati_dep_tmp.dnatlc = row2.dnatlc;
							table_bati_dep_tmp.libelle_nature = row2.libelle_nature_bien;
							table_bati_dep_tmp.cconlc = row2.cconlc;
							table_bati_dep_tmp.nature_occupation = row2.nature_occupation;
							table_bati_dep_tmp.jannat = row2.jannat;
							table_bati_dep_tmp.hlmsem = row2.hlmsem;
							table_bati_dep_tmp.dnbniv = row2.dnbniv;
							table_bati_dep_tmp.dniv = row1.dniv;
							table_bati_dep = table_bati_dep_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1_TMAP_IN = false;

					tos_count_tMap_1_TMAP_IN++;

					/**
					 * [tMap_1_TMAP_IN main ] stop
					 */
					// Start of branch "table_bati_hab"
					if (table_bati_hab != null) {

						/**
						 * [tMap_3_TMAP_OUT main ] start
						 */

						currentComponent = "tMap_3_TMAP_OUT";

						boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;

						hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;

						String exprKey_row3__ccocom = table_bati_hab.ccocom;

						String exprKey_row3__invar = table_bati_hab.invar;

						SortableRow_tMap_3_1 sortableRow_tMap_3_1 = fsi_tMap_3_1
								.getNextFreeRow();

						sortableRow_tMap_3_1.fillFrom(table_bati_hab,
								exprKey_row3__ccocom, exprKey_row3__invar);

						fsi_tMap_3_1.put(sortableRow_tMap_3_1);

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3_TMAP_OUT = false;
						boolean mainRowRejected_tMap_3_TMAP_OUT = false;

						// ###############################

						tos_count_tMap_3_TMAP_OUT++;

						/**
						 * [tMap_3_TMAP_OUT main ] stop
						 */

					} // End of branch "table_bati_hab"

					// Start of branch "table_bati_act"
					if (table_bati_act != null) {

						/**
						 * [tMap_4_TMAP_OUT main ] start
						 */

						currentComponent = "tMap_4_TMAP_OUT";

						boolean hasCasePrimitiveKeyWithNull_tMap_4_TMAP_OUT = false;

						hasCasePrimitiveKeyWithNull_tMap_4_TMAP_OUT = false;

						String exprKey_row9__ccocom = table_bati_act.ccocom;

						String exprKey_row9__invar = table_bati_act.invar;

						SortableRow_tMap_4_1 sortableRow_tMap_4_1 = fsi_tMap_4_1
								.getNextFreeRow();

						sortableRow_tMap_4_1.fillFrom(table_bati_act,
								exprKey_row9__ccocom, exprKey_row9__invar);

						fsi_tMap_4_1.put(sortableRow_tMap_4_1);

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4_TMAP_OUT = false;
						boolean mainRowRejected_tMap_4_TMAP_OUT = false;

						// ###############################

						tos_count_tMap_4_TMAP_OUT++;

						/**
						 * [tMap_4_TMAP_OUT main ] stop
						 */

					} // End of branch "table_bati_act"

					// Start of branch "table_bati_dep"
					if (table_bati_dep != null) {

						/**
						 * [tMap_5_TMAP_OUT main ] start
						 */

						currentComponent = "tMap_5_TMAP_OUT";

						boolean hasCasePrimitiveKeyWithNull_tMap_5_TMAP_OUT = false;

						hasCasePrimitiveKeyWithNull_tMap_5_TMAP_OUT = false;

						String exprKey_row18__ccocom = table_bati_dep.ccocom;

						String exprKey_row18__invar = table_bati_dep.invar;

						SortableRow_tMap_5_1 sortableRow_tMap_5_1 = fsi_tMap_5_1
								.getNextFreeRow();

						sortableRow_tMap_5_1.fillFrom(table_bati_dep,
								exprKey_row18__ccocom, exprKey_row18__invar);

						fsi_tMap_5_1.put(sortableRow_tMap_5_1);

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5_TMAP_OUT = false;
						boolean mainRowRejected_tMap_5_TMAP_OUT = false;

						// ###############################

						tos_count_tMap_5_TMAP_OUT++;

						/**
						 * [tMap_5_TMAP_OUT main ] stop
						 */

					} // End of branch "table_bati_dep"

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_1_TMAP_IN end ] start
				 */

				currentComponent = "tMap_1_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_1_1.endGet();

				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_1_TMAP_IN", true);
				end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_1_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_5_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_5_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5_TMAP_OUT", true);
				end_Hash.put("tMap_5_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_5_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.target_path + "bati_info_temp.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					isFileGenerated_tFileOutputDelimited_3 = false;
				}

				String[] headColutFileOutputDelimited_3 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_3 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_3[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_3 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_3[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_3 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_3[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_3[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
				csvSettings_tFileOutputDelimited_3.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;
				try {
					CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_3,
													true), "UTF-8")));
					CsvWritertFileOutputDelimited_3
							.setSeparator(csvSettings_tFileOutputDelimited_3
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_3
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_3.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_3
										.getRowDelim());
					}

					CsvWritertFileOutputDelimited_3
							.setEscapeChar(csvSettings_tFileOutputDelimited_3
									.getEscapeChar());
					CsvWritertFileOutputDelimited_3
							.setQuoteChar(csvSettings_tFileOutputDelimited_3
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_3
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_3 begin ] stop
					 */

					/**
					 * [tMap_5_TMAP_IN begin ] start
					 */

					ok_Hash.put("tMap_5_TMAP_IN", false);
					start_Hash
							.put("tMap_5_TMAP_IN", System.currentTimeMillis());
					currentComponent = "tMap_5_TMAP_IN";

					int tos_count_tMap_5_TMAP_IN = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_5_TMAP_IN__Struct {
						int val_zero;
						int val_1;
					}
					Var__tMap_5_TMAP_IN__Struct Var__tMap_5_TMAP_IN = new Var__tMap_5_TMAP_IN__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					tab_bati_dep_totalStruct tab_bati_dep_total_tmp = new tab_bati_dep_totalStruct();
					// ###############################

					/**
					 * [tMap_5_TMAP_IN begin ] stop
					 */
					/**
					 * [tMap_5_TMAP_IN main ] start
					 */

					currentComponent = "tMap_5_TMAP_IN";

					boolean hasCasePrimitiveKeyWithNull_tMap_5_TMAP_IN = false;

					fsi_tMap_5_1.endPut();

					if (table_bati_dep == null) {
						table_bati_dep = new table_bati_depStruct();
					}

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_5_TMAP_IN = false;
					boolean mainRowRejected_tMap_5_TMAP_IN = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row18"
					// /////////////////////////////////////////////

					SortableRow_tMap_5_1 rsc_tMap_5_1;

					tHash_Lookup_row18.initGet();

					fsi_tMap_5_1.initGet();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=true

					rejectedInnerJoin_tMap_5_TMAP_IN = false;

					while (fsi_tMap_5_1.hasNext()) { // G_TM_M_250 loop "1"

						// CALL close loop of lookup '1'

						rsc_tMap_5_1 = (SortableRow_tMap_5_1) fsi_tMap_5_1
								.next();
						rsc_tMap_5_1.copyDataTo(table_bati_dep);

						rejectedInnerJoin_tMap_5_TMAP_IN = rsc_tMap_5_1.is__rejectedInnerJoin;

						boolean forceLooprow18 = false;

						row18Struct row18ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5_TMAP_IN = false;

							row18HashKey.ccocom = rsc_tMap_5_1.exprKey_row18__ccocom;

							row18HashKey.invar = rsc_tMap_5_1.exprKey_row18__invar;

							tHash_Lookup_row18.lookup(row18HashKey);

						} // G_TM_M_020

						row18Struct row18 = null;

						row18Struct fromLookup_row18 = null;
						row18 = row18Default;

						if (tHash_Lookup_row18 != null
								&& tHash_Lookup_row18.hasNext()) { // G 099

							fromLookup_row18 = tHash_Lookup_row18.next();

						} // G 099

						if (fromLookup_row18 != null) {
							row18 = fromLookup_row18;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5_TMAP_IN__Struct Var = Var__tMap_5_TMAP_IN;
							Var.val_zero = 0;
							Var.val_1 = 1;// ###############################
							// ###############################
							// # Output tables

							tab_bati_dep_total = null;

							// # Output table : 'tab_bati_dep_total'
							tab_bati_dep_total_tmp.ccocom = table_bati_dep.ccocom;
							tab_bati_dep_total_tmp.id_parc = table_bati_dep.id_parc;
							tab_bati_dep_total_tmp.dnubat = table_bati_dep.dnubat;
							tab_bati_dep_total_tmp.nb_niv = !Relational
									.ISNULL(table_bati_dep.dnbniv)
									&& !table_bati_dep.dnbniv.equals("") ? Integer
									.parseInt(table_bati_dep.dnbniv) : 0;
							tab_bati_dep_total_tmp.shon_totale = !Relational
									.ISNULL(row18.dsudep)
									&& row18.dsudep.equals("") ? Integer
									.parseInt(row18.dsudep) : 0;
							tab_bati_dep_total_tmp.shon_habitat = Var.val_zero;
							tab_bati_dep_total_tmp.shon_activite = Var.val_zero;
							tab_bati_dep_total_tmp.nb_logts = Var.val_zero;
							tab_bati_dep_total_tmp.nb_logts_hlm = Var.val_zero;
							tab_bati_dep_total_tmp.nb_logts_sem = Var.val_zero;
							tab_bati_dep_total_tmp.nb_logts_hlm_sem = Var.val_zero;
							tab_bati_dep_total_tmp.nb_logts_vacants = Var.val_zero;
							tab_bati_dep_total_tmp.nb_logts_prop_occup = Var.val_zero;
							tab_bati_dep_total_tmp.nb_logts_loc = Var.val_zero;
							tab_bati_dep_total_tmp.nb_locaux = Var.val_1;
							tab_bati_dep_total_tmp.nb_locaux_vacants = !Relational
									.ISNULL(table_bati_hab.dnatlc)
									&& table_bati_hab.dnatlc.equals("V") ? 1
									: 0;
							;
							tab_bati_dep_total_tmp.dnupro = table_bati_dep.dnupro;
							tab_bati_dep_total_tmp.nature_local = table_bati_dep.libelle_nature;
							tab_bati_dep_total_tmp.type_local = table_bati_dep.type_local;
							tab_bati_dep_total_tmp.annee_constr_min = table_bati_dep.jannat;
							tab_bati_dep_total_tmp.annee_constr_max = table_bati_dep.jannat;
							tab_bati_dep_total_tmp.annee_constr_moy = table_bati_dep.jannat;
							tab_bati_dep_total = tab_bati_dep_total_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5_TMAP_IN = false;

						tos_count_tMap_5_TMAP_IN++;

						/**
						 * [tMap_5_TMAP_IN main ] stop
						 */
						// Start of branch "tab_bati_dep_total"
						if (tab_bati_dep_total != null) {

							/**
							 * [tFileOutputDelimited_3 main ] start
							 */

							currentComponent = "tFileOutputDelimited_3";

							String[] rowtFileOutputDelimited_3 = new String[22];

							rowtFileOutputDelimited_3[0] = tab_bati_dep_total.ccocom == null ? ""
									: tab_bati_dep_total.ccocom;

							rowtFileOutputDelimited_3[1] = tab_bati_dep_total.id_parc == null ? ""
									: tab_bati_dep_total.id_parc;

							rowtFileOutputDelimited_3[2] = tab_bati_dep_total.dnubat == null ? ""
									: tab_bati_dep_total.dnubat;

							rowtFileOutputDelimited_3[3] = tab_bati_dep_total.nb_niv == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_niv);

							rowtFileOutputDelimited_3[4] = tab_bati_dep_total.shon_totale == null ? ""
									: String.valueOf(tab_bati_dep_total.shon_totale);

							rowtFileOutputDelimited_3[5] = tab_bati_dep_total.shon_habitat == null ? ""
									: String.valueOf(tab_bati_dep_total.shon_habitat);

							rowtFileOutputDelimited_3[6] = tab_bati_dep_total.shon_activite == null ? ""
									: String.valueOf(tab_bati_dep_total.shon_activite);

							rowtFileOutputDelimited_3[7] = tab_bati_dep_total.nb_logts == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_logts);

							rowtFileOutputDelimited_3[8] = tab_bati_dep_total.nb_logts_hlm == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_logts_hlm);

							rowtFileOutputDelimited_3[9] = tab_bati_dep_total.nb_logts_sem == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_logts_sem);

							rowtFileOutputDelimited_3[10] = tab_bati_dep_total.nb_logts_hlm_sem == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_logts_hlm_sem);

							rowtFileOutputDelimited_3[11] = tab_bati_dep_total.nb_logts_vacants == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_logts_vacants);

							rowtFileOutputDelimited_3[12] = tab_bati_dep_total.nb_logts_prop_occup == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_logts_prop_occup);

							rowtFileOutputDelimited_3[13] = tab_bati_dep_total.nb_logts_loc == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_logts_loc);

							rowtFileOutputDelimited_3[14] = tab_bati_dep_total.nb_locaux == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_locaux);

							rowtFileOutputDelimited_3[15] = tab_bati_dep_total.nb_locaux_vacants == null ? ""
									: String.valueOf(tab_bati_dep_total.nb_locaux_vacants);

							rowtFileOutputDelimited_3[16] = tab_bati_dep_total.dnupro == null ? ""
									: tab_bati_dep_total.dnupro;

							rowtFileOutputDelimited_3[17] = tab_bati_dep_total.nature_local == null ? ""
									: tab_bati_dep_total.nature_local;

							rowtFileOutputDelimited_3[18] = tab_bati_dep_total.type_local == null ? ""
									: tab_bati_dep_total.type_local;

							rowtFileOutputDelimited_3[19] = tab_bati_dep_total.annee_constr_min == null ? ""
									: String.valueOf(tab_bati_dep_total.annee_constr_min);

							rowtFileOutputDelimited_3[20] = tab_bati_dep_total.annee_constr_max == null ? ""
									: String.valueOf(tab_bati_dep_total.annee_constr_max);

							rowtFileOutputDelimited_3[21] = tab_bati_dep_total.annee_constr_moy == null ? ""
									: String.valueOf(tab_bati_dep_total.annee_constr_moy);

							nb_line_tFileOutputDelimited_3++;
							CsvWritertFileOutputDelimited_3
									.writeNext(rowtFileOutputDelimited_3);

							tos_count_tFileOutputDelimited_3++;

							/**
							 * [tFileOutputDelimited_3 main ] stop
							 */

						} // End of branch "tab_bati_dep_total"

					} // G_TM_M_250 close loop read file data '1'

					/**
					 * [tMap_5_TMAP_IN end ] start
					 */

					currentComponent = "tMap_5_TMAP_IN";

					// ###############################
					// # Lookup hashes releasing
					fsi_tMap_5_1.endGet();

					if (tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove("tHash_Lookup_row18");

					// ###############################

					ok_Hash.put("tMap_5_TMAP_IN", true);
					end_Hash.put("tMap_5_TMAP_IN", System.currentTimeMillis());

					/**
					 * [tMap_5_TMAP_IN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

				} finally {

					if (CsvWritertFileOutputDelimited_3 != null) {
						CsvWritertFileOutputDelimited_3.close();
					}
					globalMap.put("tFileOutputDelimited_3_NB_LINE",
							nb_line_tFileOutputDelimited_3);
				} // finally

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_4_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_4_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4_TMAP_OUT", true);
				end_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_4_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.target_path + "bati_info_temp.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				if (filetFileOutputDelimited_4.exists()) {
					isFileGenerated_tFileOutputDelimited_4 = false;
				}

				String[] headColutFileOutputDelimited_4 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_4 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_4[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_4 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_4[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_4 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_4[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_4[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_4 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
				csvSettings_tFileOutputDelimited_4.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_4.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_4.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;
				try {
					CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_4,
													true), "UTF-8")));
					CsvWritertFileOutputDelimited_4
							.setSeparator(csvSettings_tFileOutputDelimited_4
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_4
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_4.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_4
										.getRowDelim());
					}

					CsvWritertFileOutputDelimited_4
							.setEscapeChar(csvSettings_tFileOutputDelimited_4
									.getEscapeChar());
					CsvWritertFileOutputDelimited_4
							.setQuoteChar(csvSettings_tFileOutputDelimited_4
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_4
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_4 begin ] stop
					 */

					/**
					 * [tMap_4_TMAP_IN begin ] start
					 */

					ok_Hash.put("tMap_4_TMAP_IN", false);
					start_Hash
							.put("tMap_4_TMAP_IN", System.currentTimeMillis());
					currentComponent = "tMap_4_TMAP_IN";

					int tos_count_tMap_4_TMAP_IN = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_4_TMAP_IN__Struct {
						int val_zero;
						int val_1;
					}
					Var__tMap_4_TMAP_IN__Struct Var__tMap_4_TMAP_IN = new Var__tMap_4_TMAP_IN__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					table_bati_act_totalStruct table_bati_act_total_tmp = new table_bati_act_totalStruct();
					// ###############################

					/**
					 * [tMap_4_TMAP_IN begin ] stop
					 */
					/**
					 * [tMap_4_TMAP_IN main ] start
					 */

					currentComponent = "tMap_4_TMAP_IN";

					boolean hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

					fsi_tMap_4_1.endPut();

					if (table_bati_act == null) {
						table_bati_act = new table_bati_actStruct();
					}

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_4_TMAP_IN = false;
					boolean mainRowRejected_tMap_4_TMAP_IN = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row9"
					// /////////////////////////////////////////////

					SortableRow_tMap_4_1 rsc_tMap_4_1;

					tHash_Lookup_row9.initGet();

					fsi_tMap_4_1.initGet();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=true

					rejectedInnerJoin_tMap_4_TMAP_IN = false;

					while (fsi_tMap_4_1.hasNext()) { // G_TM_M_250 loop "1"

						// CALL close loop of lookup '1'

						rsc_tMap_4_1 = (SortableRow_tMap_4_1) fsi_tMap_4_1
								.next();
						rsc_tMap_4_1.copyDataTo(table_bati_act);

						rejectedInnerJoin_tMap_4_TMAP_IN = rsc_tMap_4_1.is__rejectedInnerJoin;

						boolean forceLooprow9 = false;

						row9Struct row9ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

							row9HashKey.ccocom = rsc_tMap_4_1.exprKey_row9__ccocom;

							row9HashKey.invar = rsc_tMap_4_1.exprKey_row9__invar;

							tHash_Lookup_row9.lookup(row9HashKey);

						} // G_TM_M_020

						row9Struct row9 = null;

						row9Struct fromLookup_row9 = null;
						row9 = row9Default;

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.hasNext()) { // G 099

							fromLookup_row9 = tHash_Lookup_row9.next();

						} // G 099

						if (fromLookup_row9 != null) {
							row9 = fromLookup_row9;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4_TMAP_IN__Struct Var = Var__tMap_4_TMAP_IN;
							Var.val_zero = 0;
							Var.val_1 = 1;// ###############################
							// ###############################
							// # Output tables

							table_bati_act_total = null;

							// # Output table : 'table_bati_act_total'
							table_bati_act_total_tmp.ccocom = table_bati_act.ccocom;
							table_bati_act_total_tmp.id_parc = table_bati_act.id_parc;
							table_bati_act_total_tmp.dnubat = table_bati_act.dnubat;
							table_bati_act_total_tmp.nb_niv = !Relational
									.ISNULL(table_bati_act.dnbniv)
									&& !table_bati_act.dnbniv.equals("") ? Integer
									.parseInt(table_bati_act.dnbniv) : 0;
							table_bati_act_total_tmp.shon_totale = !Relational
									.ISNULL(row9.vsurzt)
									&& !row9.vsurzt.equals("") ? Integer
									.parseInt(row9.vsurzt) : 0;
							table_bati_act_total_tmp.shon_habitat = Var.val_zero;
							table_bati_act_total_tmp.shon_activite = !Relational
									.ISNULL(row9.vsurzt)
									&& !row9.vsurzt.equals("") ? Integer
									.parseInt(row9.vsurzt) : 0;
							table_bati_act_total_tmp.nb_logts = Var.val_zero;
							table_bati_act_total_tmp.nb_logts_hlm = Var.val_zero;
							table_bati_act_total_tmp.nb_logts_sem = Var.val_zero;
							table_bati_act_total_tmp.nb_logts_hlm_sem = Var.val_zero;
							table_bati_act_total_tmp.nb_logts_vacants = Var.val_zero;
							table_bati_act_total_tmp.nb_logts_prop_occup = Var.val_zero;
							table_bati_act_total_tmp.nb_logts_loc = Var.val_zero;
							table_bati_act_total_tmp.nb_locaux = Var.val_1;
							table_bati_act_total_tmp.nb_locaux_vacants = !Relational
									.ISNULL(table_bati_hab.dnatlc)
									&& table_bati_hab.dnatlc.equals("V") ? 1
									: 0;
							;
							table_bati_act_total_tmp.dnupro = table_bati_act.dnupro;
							table_bati_act_total_tmp.nature_local = table_bati_act.libelle_nature;
							table_bati_act_total_tmp.type_local = table_bati_act.type_local;
							table_bati_act_total_tmp.annee_constr_min = table_bati_act.jannat;
							table_bati_act_total_tmp.annee_constr_max = table_bati_act.jannat;
							table_bati_act_total_tmp.annee_constr_moy = table_bati_act.jannat;
							table_bati_act_total = table_bati_act_total_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4_TMAP_IN = false;

						tos_count_tMap_4_TMAP_IN++;

						/**
						 * [tMap_4_TMAP_IN main ] stop
						 */
						// Start of branch "table_bati_act_total"
						if (table_bati_act_total != null) {

							/**
							 * [tFileOutputDelimited_4 main ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							String[] rowtFileOutputDelimited_4 = new String[22];

							rowtFileOutputDelimited_4[0] = table_bati_act_total.ccocom == null ? ""
									: table_bati_act_total.ccocom;

							rowtFileOutputDelimited_4[1] = table_bati_act_total.id_parc == null ? ""
									: table_bati_act_total.id_parc;

							rowtFileOutputDelimited_4[2] = table_bati_act_total.dnubat == null ? ""
									: table_bati_act_total.dnubat;

							rowtFileOutputDelimited_4[3] = table_bati_act_total.nb_niv == null ? ""
									: String.valueOf(table_bati_act_total.nb_niv);

							rowtFileOutputDelimited_4[4] = table_bati_act_total.shon_totale == null ? ""
									: String.valueOf(table_bati_act_total.shon_totale);

							rowtFileOutputDelimited_4[5] = table_bati_act_total.shon_habitat == null ? ""
									: String.valueOf(table_bati_act_total.shon_habitat);

							rowtFileOutputDelimited_4[6] = table_bati_act_total.shon_activite == null ? ""
									: String.valueOf(table_bati_act_total.shon_activite);

							rowtFileOutputDelimited_4[7] = table_bati_act_total.nb_logts == null ? ""
									: String.valueOf(table_bati_act_total.nb_logts);

							rowtFileOutputDelimited_4[8] = table_bati_act_total.nb_logts_hlm == null ? ""
									: String.valueOf(table_bati_act_total.nb_logts_hlm);

							rowtFileOutputDelimited_4[9] = table_bati_act_total.nb_logts_sem == null ? ""
									: String.valueOf(table_bati_act_total.nb_logts_sem);

							rowtFileOutputDelimited_4[10] = table_bati_act_total.nb_logts_hlm_sem == null ? ""
									: String.valueOf(table_bati_act_total.nb_logts_hlm_sem);

							rowtFileOutputDelimited_4[11] = table_bati_act_total.nb_logts_vacants == null ? ""
									: String.valueOf(table_bati_act_total.nb_logts_vacants);

							rowtFileOutputDelimited_4[12] = table_bati_act_total.nb_logts_prop_occup == null ? ""
									: String.valueOf(table_bati_act_total.nb_logts_prop_occup);

							rowtFileOutputDelimited_4[13] = table_bati_act_total.nb_logts_loc == null ? ""
									: String.valueOf(table_bati_act_total.nb_logts_loc);

							rowtFileOutputDelimited_4[14] = table_bati_act_total.nb_locaux == null ? ""
									: String.valueOf(table_bati_act_total.nb_locaux);

							rowtFileOutputDelimited_4[15] = table_bati_act_total.nb_locaux_vacants == null ? ""
									: String.valueOf(table_bati_act_total.nb_locaux_vacants);

							rowtFileOutputDelimited_4[16] = table_bati_act_total.dnupro == null ? ""
									: table_bati_act_total.dnupro;

							rowtFileOutputDelimited_4[17] = table_bati_act_total.nature_local == null ? ""
									: table_bati_act_total.nature_local;

							rowtFileOutputDelimited_4[18] = table_bati_act_total.type_local == null ? ""
									: table_bati_act_total.type_local;

							rowtFileOutputDelimited_4[19] = table_bati_act_total.annee_constr_min == null ? ""
									: String.valueOf(table_bati_act_total.annee_constr_min);

							rowtFileOutputDelimited_4[20] = table_bati_act_total.annee_constr_max == null ? ""
									: String.valueOf(table_bati_act_total.annee_constr_max);

							rowtFileOutputDelimited_4[21] = table_bati_act_total.annee_constr_moy == null ? ""
									: String.valueOf(table_bati_act_total.annee_constr_moy);

							nb_line_tFileOutputDelimited_4++;
							CsvWritertFileOutputDelimited_4
									.writeNext(rowtFileOutputDelimited_4);

							tos_count_tFileOutputDelimited_4++;

							/**
							 * [tFileOutputDelimited_4 main ] stop
							 */

						} // End of branch "table_bati_act_total"

					} // G_TM_M_250 close loop read file data '1'

					/**
					 * [tMap_4_TMAP_IN end ] start
					 */

					currentComponent = "tMap_4_TMAP_IN";

					// ###############################
					// # Lookup hashes releasing
					fsi_tMap_4_1.endGet();

					if (tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove("tHash_Lookup_row9");

					// ###############################

					ok_Hash.put("tMap_4_TMAP_IN", true);
					end_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());

					/**
					 * [tMap_4_TMAP_IN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

				} finally {

					if (CsvWritertFileOutputDelimited_4 != null) {
						CsvWritertFileOutputDelimited_4.close();
					}
					globalMap.put("tFileOutputDelimited_4_NB_LINE",
							nb_line_tFileOutputDelimited_4);
				} // finally

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_3_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_3_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3_TMAP_OUT", true);
				end_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_3_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.target_path + "bati_info_temp.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					isFileGenerated_tFileOutputDelimited_2 = false;
				}

				String[] headColutFileOutputDelimited_2 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
				try {
					CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_2,
													true), "UTF-8")));
					CsvWritertFileOutputDelimited_2
							.setSeparator(csvSettings_tFileOutputDelimited_2
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_2
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_2.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_2
										.getRowDelim());
					}

					CsvWritertFileOutputDelimited_2
							.setEscapeChar(csvSettings_tFileOutputDelimited_2
									.getEscapeChar());
					CsvWritertFileOutputDelimited_2
							.setQuoteChar(csvSettings_tFileOutputDelimited_2
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_2
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tMap_3_TMAP_IN begin ] start
					 */

					ok_Hash.put("tMap_3_TMAP_IN", false);
					start_Hash
							.put("tMap_3_TMAP_IN", System.currentTimeMillis());
					currentComponent = "tMap_3_TMAP_IN";

					int tos_count_tMap_3_TMAP_IN = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_3_TMAP_IN__Struct {
						int val_zero;
						int val_1;
						int dsueic1;
						int dsueic2;
						int dsueic3;
						int dsueic4;
						int dsupdc;
					}
					Var__tMap_3_TMAP_IN__Struct Var__tMap_3_TMAP_IN = new Var__tMap_3_TMAP_IN__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					tab_bati_hab_totalStruct tab_bati_hab_total_tmp = new tab_bati_hab_totalStruct();
					// ###############################

					/**
					 * [tMap_3_TMAP_IN begin ] stop
					 */
					/**
					 * [tMap_3_TMAP_IN main ] start
					 */

					currentComponent = "tMap_3_TMAP_IN";

					boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;

					fsi_tMap_3_1.endPut();

					if (table_bati_hab == null) {
						table_bati_hab = new table_bati_habStruct();
					}

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3_TMAP_IN = false;
					boolean mainRowRejected_tMap_3_TMAP_IN = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row3"
					// /////////////////////////////////////////////

					SortableRow_tMap_3_1 rsc_tMap_3_1;

					tHash_Lookup_row3.initGet();

					fsi_tMap_3_1.initGet();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=true

					rejectedInnerJoin_tMap_3_TMAP_IN = false;

					while (fsi_tMap_3_1.hasNext()) { // G_TM_M_250 loop "1"

						// CALL close loop of lookup '1'

						rsc_tMap_3_1 = (SortableRow_tMap_3_1) fsi_tMap_3_1
								.next();
						rsc_tMap_3_1.copyDataTo(table_bati_hab);

						rejectedInnerJoin_tMap_3_TMAP_IN = rsc_tMap_3_1.is__rejectedInnerJoin;

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;

							row3HashKey.ccocom = rsc_tMap_3_1.exprKey_row3__ccocom;

							row3HashKey.invar = rsc_tMap_3_1.exprKey_row3__invar;

							tHash_Lookup_row3.lookup(row3HashKey);

						} // G_TM_M_020

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3_TMAP_IN__Struct Var = Var__tMap_3_TMAP_IN;
							Var.val_zero = 0;
							Var.val_1 = 1;
							Var.dsueic1 = !Relational.ISNULL(row3.dsueic1)
									&& !row3.dsueic3.equals("") ? Integer
									.parseInt(row3.dsueic1) : 0;
							Var.dsueic2 = !Relational.ISNULL(row3.dsueic2)
									&& !row3.dsueic3.equals("") ? Integer
									.parseInt(row3.dsueic2) : 0;
							Var.dsueic3 = !Relational.ISNULL(row3.dsueic3)
									&& !row3.dsueic3.equals("") ? Integer
									.parseInt(row3.dsueic3) : 0;
							Var.dsueic4 = !Relational.ISNULL(row3.dsueic4)
									&& !row3.dsueic3.equals("") ? Integer
									.parseInt(row3.dsueic4) : 0;
							Var.dsupdc = !Relational.ISNULL(row3.dsupdc)
									&& !row3.dsueic3.equals("") ? Integer
									.parseInt(row3.dsupdc) : 0;// ###############################
							// ###############################
							// # Output tables

							tab_bati_hab_total = null;

							// # Output table : 'tab_bati_hab_total'
							tab_bati_hab_total_tmp.ccocom = table_bati_hab.ccocom;
							tab_bati_hab_total_tmp.id_parc = table_bati_hab.id_parc;
							tab_bati_hab_total_tmp.dnubat = table_bati_hab.dnubat;
							tab_bati_hab_total_tmp.nb_niv = !Relational
									.ISNULL(table_bati_hab.dnbniv)
									&& !table_bati_hab.dnbniv.equals("") ? Integer
									.parseInt(table_bati_hab.dnbniv) : 0;
							tab_bati_hab_total_tmp.shon_totale = Var.dsueic1
									+ Var.dsueic2 + Var.dsueic3 + Var.dsueic4
									+ Var.dsupdc;
							tab_bati_hab_total_tmp.shon_habitat = Var.dsueic1
									+ Var.dsueic2 + Var.dsueic3 + Var.dsueic4
									+ Var.dsupdc;
							tab_bati_hab_total_tmp.shon_activite = Var.val_zero;
							tab_bati_hab_total_tmp.nb_logts = Var.val_1;
							tab_bati_hab_total_tmp.nb_logts_hlm = (!Relational
									.ISNULL(table_bati_hab.hlmsem) && table_bati_hab.hlmsem == 5) ? 1
									: 0;
							tab_bati_hab_total_tmp.nb_logts_sem = (!Relational
									.ISNULL(table_bati_hab.hlmsem) && table_bati_hab.hlmsem == 6) ? 1
									: 0;
							tab_bati_hab_total_tmp.nb_logts_hlm_sem = !Relational
									.ISNULL(table_bati_hab.hlmsem)
									&& (table_bati_hab.hlmsem == 5 || table_bati_hab.hlmsem == 6) ? 1
									: 0;
							tab_bati_hab_total_tmp.nb_logts_vacants = !Relational
									.ISNULL(table_bati_hab.dnatlc)
									&& table_bati_hab.dnatlc.equals("V") ? 1
									: 0;
							;
							tab_bati_hab_total_tmp.nb_logts_prop_occup = !Relational
									.ISNULL(table_bati_hab.dnatlc)
									&& (table_bati_hab.dnatlc.equals("P") || table_bati_hab.dnatlc
											.equals("D")) ? 1 : 0;
							;
							tab_bati_hab_total_tmp.nb_logts_loc = !Relational
									.ISNULL(table_bati_hab.dnatlc)
									&& (table_bati_hab.dnatlc.equals("A")
											|| table_bati_hab.dnatlc
													.equals("L") || table_bati_hab.dnatlc
											.equals("T")) ? 1 : 0;
							;
							tab_bati_hab_total_tmp.nb_locaux = Var.val_1;
							tab_bati_hab_total_tmp.nb_locaux_vacants = !Relational
									.ISNULL(table_bati_hab.dnatlc)
									&& table_bati_hab.dnatlc.equals("V") ? 1
									: 0;
							;
							tab_bati_hab_total_tmp.dnupro = table_bati_hab.dnupro;
							tab_bati_hab_total_tmp.nature_local = table_bati_hab.libelle_nature;
							tab_bati_hab_total_tmp.type_local = table_bati_hab.type_local;
							tab_bati_hab_total_tmp.annee_constr_min = table_bati_hab.jannat;
							tab_bati_hab_total_tmp.annee_constr_max = table_bati_hab.jannat;
							tab_bati_hab_total_tmp.annee_constr_moy = table_bati_hab.jannat;
							tab_bati_hab_total = tab_bati_hab_total_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3_TMAP_IN = false;

						tos_count_tMap_3_TMAP_IN++;

						/**
						 * [tMap_3_TMAP_IN main ] stop
						 */
						// Start of branch "tab_bati_hab_total"
						if (tab_bati_hab_total != null) {

							/**
							 * [tFileOutputDelimited_2 main ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							String[] rowtFileOutputDelimited_2 = new String[22];

							rowtFileOutputDelimited_2[0] = tab_bati_hab_total.ccocom == null ? ""
									: tab_bati_hab_total.ccocom;

							rowtFileOutputDelimited_2[1] = tab_bati_hab_total.id_parc == null ? ""
									: tab_bati_hab_total.id_parc;

							rowtFileOutputDelimited_2[2] = tab_bati_hab_total.dnubat == null ? ""
									: tab_bati_hab_total.dnubat;

							rowtFileOutputDelimited_2[3] = tab_bati_hab_total.nb_niv == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_niv);

							rowtFileOutputDelimited_2[4] = tab_bati_hab_total.shon_totale == null ? ""
									: String.valueOf(tab_bati_hab_total.shon_totale);

							rowtFileOutputDelimited_2[5] = tab_bati_hab_total.shon_habitat == null ? ""
									: String.valueOf(tab_bati_hab_total.shon_habitat);

							rowtFileOutputDelimited_2[6] = tab_bati_hab_total.shon_activite == null ? ""
									: String.valueOf(tab_bati_hab_total.shon_activite);

							rowtFileOutputDelimited_2[7] = tab_bati_hab_total.nb_logts == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_logts);

							rowtFileOutputDelimited_2[8] = tab_bati_hab_total.nb_logts_hlm == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_logts_hlm);

							rowtFileOutputDelimited_2[9] = tab_bati_hab_total.nb_logts_sem == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_logts_sem);

							rowtFileOutputDelimited_2[10] = tab_bati_hab_total.nb_logts_hlm_sem == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_logts_hlm_sem);

							rowtFileOutputDelimited_2[11] = tab_bati_hab_total.nb_logts_vacants == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_logts_vacants);

							rowtFileOutputDelimited_2[12] = tab_bati_hab_total.nb_logts_prop_occup == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_logts_prop_occup);

							rowtFileOutputDelimited_2[13] = tab_bati_hab_total.nb_logts_loc == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_logts_loc);

							rowtFileOutputDelimited_2[14] = tab_bati_hab_total.nb_locaux == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_locaux);

							rowtFileOutputDelimited_2[15] = tab_bati_hab_total.nb_locaux_vacants == null ? ""
									: String.valueOf(tab_bati_hab_total.nb_locaux_vacants);

							rowtFileOutputDelimited_2[16] = tab_bati_hab_total.dnupro == null ? ""
									: tab_bati_hab_total.dnupro;

							rowtFileOutputDelimited_2[17] = tab_bati_hab_total.nature_local == null ? ""
									: tab_bati_hab_total.nature_local;

							rowtFileOutputDelimited_2[18] = tab_bati_hab_total.type_local == null ? ""
									: tab_bati_hab_total.type_local;

							rowtFileOutputDelimited_2[19] = tab_bati_hab_total.annee_constr_min == null ? ""
									: String.valueOf(tab_bati_hab_total.annee_constr_min);

							rowtFileOutputDelimited_2[20] = tab_bati_hab_total.annee_constr_max == null ? ""
									: String.valueOf(tab_bati_hab_total.annee_constr_max);

							rowtFileOutputDelimited_2[21] = tab_bati_hab_total.annee_constr_moy == null ? ""
									: String.valueOf(tab_bati_hab_total.annee_constr_moy);

							nb_line_tFileOutputDelimited_2++;
							CsvWritertFileOutputDelimited_2
									.writeNext(rowtFileOutputDelimited_2);

							tos_count_tFileOutputDelimited_2++;

							/**
							 * [tFileOutputDelimited_2 main ] stop
							 */

						} // End of branch "tab_bati_hab_total"

					} // G_TM_M_250 close loop read file data '1'

					/**
					 * [tMap_3_TMAP_IN end ] start
					 */

					currentComponent = "tMap_3_TMAP_IN";

					// ###############################
					// # Lookup hashes releasing
					fsi_tMap_3_1.endGet();

					if (tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove("tHash_Lookup_row3");

					// ###############################

					ok_Hash.put("tMap_3_TMAP_IN", true);
					end_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());

					/**
					 * [tMap_3_TMAP_IN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String libelle_nature_bien;

		public String getLibelle_nature_bien() {
			return this.libelle_nature_bien;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String nature_occupation;

		public String getNature_occupation() {
			return this.nature_occupation;
		}

		public Integer jannat;

		public Integer getJannat() {
			return this.jannat;
		}

		public Integer hlmsem;

		public Integer getHlmsem() {
			return this.hlmsem;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccodep == null) ? 0 : this.ccodep.hashCode());

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime * result
						+ ((this.invar == null) ? 0 : this.invar.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ccodep == null) {
				if (other.ccodep != null)
					return false;
			} else if (!this.ccodep.equals(other.ccodep))
				return false;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.invar == null) {
				if (other.invar != null)
					return false;
			} else if (!this.invar.equals(other.invar))
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ccodep = this.ccodep;
			other.ccocom = this.ccocom;
			other.invar = this.invar;
			other.dnupro = this.dnupro;
			other.dteloc = this.dteloc;
			other.type_local = this.type_local;
			other.cconlc = this.cconlc;
			other.libelle_nature_bien = this.libelle_nature_bien;
			other.dnatlc = this.dnatlc;
			other.nature_occupation = this.nature_occupation;
			other.jannat = this.jannat;
			other.hlmsem = this.hlmsem;
			other.dnbniv = this.dnbniv;
			other.jdatat = this.jdatat;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ccodep = this.ccodep;
			other.ccocom = this.ccocom;
			other.invar = this.invar;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.dnupro = readString(dis, ois);

				this.dteloc = readString(dis, ois);

				this.type_local = readString(dis, ois);

				this.cconlc = readString(dis, ois);

				this.libelle_nature_bien = readString(dis, ois);

				this.dnatlc = readString(dis, ois);

				this.nature_occupation = readString(dis, ois);

				this.jannat = readInteger(dis, ois);

				this.hlmsem = readInteger(dis, ois);

				this.dnbniv = readString(dis, ois);

				this.jdatat = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.dnupro, dos, oos);

				writeString(this.dteloc, dos, oos);

				writeString(this.type_local, dos, oos);

				writeString(this.cconlc, dos, oos);

				writeString(this.libelle_nature_bien, dos, oos);

				writeString(this.dnatlc, dos, oos);

				writeString(this.nature_occupation, dos, oos);

				writeInteger(this.jannat, dos, oos);

				writeInteger(this.hlmsem, dos, oos);

				writeString(this.dnbniv, dos, oos);

				writeString(this.jdatat, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",dteloc=" + dteloc);
			sb.append(",type_local=" + type_local);
			sb.append(",cconlc=" + cconlc);
			sb.append(",libelle_nature_bien=" + libelle_nature_bien);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",nature_occupation=" + nature_occupation);
			sb.append(",jannat=" + String.valueOf(jannat));
			sb.append(",hlmsem=" + String.valueOf(hlmsem));
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",jdatat=" + jdatat);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccodep, other.ccodep);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.invar, other.invar);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class bati_natureStruct implements
			routines.system.IPersistableRow<bati_natureStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String libelle_nature_bien;

		public String getLibelle_nature_bien() {
			return this.libelle_nature_bien;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String nature_occupation;

		public String getNature_occupation() {
			return this.nature_occupation;
		}

		public String jannat;

		public String getJannat() {
			return this.jannat;
		}

		public String hlmsem;

		public String getHlmsem() {
			return this.hlmsem;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.dnupro = readString(dis);

					this.dteloc = readString(dis);

					this.type_local = readString(dis);

					this.cconlc = readString(dis);

					this.libelle_nature_bien = readString(dis);

					this.dnatlc = readString(dis);

					this.nature_occupation = readString(dis);

					this.jannat = readString(dis);

					this.hlmsem = readString(dis);

					this.dnbniv = readString(dis);

					this.jdatat = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.dteloc, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.cconlc, dos);

				// String

				writeString(this.libelle_nature_bien, dos);

				// String

				writeString(this.dnatlc, dos);

				// String

				writeString(this.nature_occupation, dos);

				// String

				writeString(this.jannat, dos);

				// String

				writeString(this.hlmsem, dos);

				// String

				writeString(this.dnbniv, dos);

				// String

				writeString(this.jdatat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",dteloc=" + dteloc);
			sb.append(",type_local=" + type_local);
			sb.append(",cconlc=" + cconlc);
			sb.append(",libelle_nature_bien=" + libelle_nature_bien);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",nature_occupation=" + nature_occupation);
			sb.append(",jannat=" + jannat);
			sb.append(",hlmsem=" + hlmsem);
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",jdatat=" + jdatat);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(bati_natureStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dnufnl;

		public String getDnufnl() {
			return this.dnufnl;
		}

		public String ccoeva;

		public String getCcoeva() {
			return this.ccoeva;
		}

		public String ccitvl;

		public String getCcitvl() {
			return this.ccitvl;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String gtauom;

		public String getGtauom() {
			return this.gtauom;
		}

		public String dcomrd;

		public String getDcomrd() {
			return this.dcomrd;
		}

		public String ccoplc;

		public String getCcoplc() {
			return this.ccoplc;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String dvltrt;

		public String getDvltrt() {
			return this.dvltrt;
		}

		public String ccoape;

		public String getCcoape() {
			return this.ccoape;
		}

		public String cc48lc;

		public String getCc48lc() {
			return this.cc48lc;
		}

		public String dloy48a;

		public String getDloy48a() {
			return this.dloy48a;
		}

		public String top48a;

		public String getTop48a() {
			return this.top48a;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String dnupas;

		public String getDnupas() {
			return this.dnupas;
		}

		public String gnexcf;

		public String getGnexcf() {
			return this.gnexcf;
		}

		public String dtaucf;

		public String getDtaucf() {
			return this.dtaucf;
		}

		public String cchpr;

		public String getCchpr() {
			return this.cchpr;
		}

		public String jannat;

		public String getJannat() {
			return this.jannat;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String hlmsem;

		public String getHlmsem() {
			return this.hlmsem;
		}

		public String postel;

		public String getPostel() {
			return this.postel;
		}

		public String dnatcg;

		public String getDnatcg() {
			return this.dnatcg;
		}

		public String jdatcgl;

		public String getJdatcgl() {
			return this.jdatcgl;
		}

		public String dnutbx;

		public String getDnutbx() {
			return this.dnutbx;
		}

		public String dvltla;

		public String getDvltla() {
			return this.dvltla;
		}

		public String janloc;

		public String getJanloc() {
			return this.janloc;
		}

		public String ccsloc;

		public String getCcsloc() {
			return this.ccsloc;
		}

		public String fburx;

		public String getFburx() {
			return this.fburx;
		}

		public String gimtom;

		public String getGimtom() {
			return this.gimtom;
		}

		public String cbtabt;

		public String getCbtabt() {
			return this.cbtabt;
		}

		public String jdtabt;

		public String getJdtabt() {
			return this.jdtabt;
		}

		public String jrtabt;

		public String getJrtabt() {
			return this.jrtabt;
		}

		public String jacloc;

		public String getJacloc() {
			return this.jacloc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.article = readString(dis);

					this.gpdl = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.jdatat = readString(dis);

					this.dnufnl = readString(dis);

					this.ccoeva = readString(dis);

					this.ccitvl = readString(dis);

					this.dteloc = readString(dis);

					this.gtauom = readString(dis);

					this.dcomrd = readString(dis);

					this.ccoplc = readString(dis);

					this.cconlc = readString(dis);

					this.dvltrt = readString(dis);

					this.ccoape = readString(dis);

					this.cc48lc = readString(dis);

					this.dloy48a = readString(dis);

					this.top48a = readString(dis);

					this.dnatlc = readString(dis);

					this.dnupas = readString(dis);

					this.gnexcf = readString(dis);

					this.dtaucf = readString(dis);

					this.cchpr = readString(dis);

					this.jannat = readString(dis);

					this.dnbniv = readString(dis);

					this.hlmsem = readString(dis);

					this.postel = readString(dis);

					this.dnatcg = readString(dis);

					this.jdatcgl = readString(dis);

					this.dnutbx = readString(dis);

					this.dvltla = readString(dis);

					this.janloc = readString(dis);

					this.ccsloc = readString(dis);

					this.fburx = readString(dis);

					this.gimtom = readString(dis);

					this.cbtabt = readString(dis);

					this.jdtabt = readString(dis);

					this.jrtabt = readString(dis);

					this.jacloc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dnufnl, dos);

				// String

				writeString(this.ccoeva, dos);

				// String

				writeString(this.ccitvl, dos);

				// String

				writeString(this.dteloc, dos);

				// String

				writeString(this.gtauom, dos);

				// String

				writeString(this.dcomrd, dos);

				// String

				writeString(this.ccoplc, dos);

				// String

				writeString(this.cconlc, dos);

				// String

				writeString(this.dvltrt, dos);

				// String

				writeString(this.ccoape, dos);

				// String

				writeString(this.cc48lc, dos);

				// String

				writeString(this.dloy48a, dos);

				// String

				writeString(this.top48a, dos);

				// String

				writeString(this.dnatlc, dos);

				// String

				writeString(this.dnupas, dos);

				// String

				writeString(this.gnexcf, dos);

				// String

				writeString(this.dtaucf, dos);

				// String

				writeString(this.cchpr, dos);

				// String

				writeString(this.jannat, dos);

				// String

				writeString(this.dnbniv, dos);

				// String

				writeString(this.hlmsem, dos);

				// String

				writeString(this.postel, dos);

				// String

				writeString(this.dnatcg, dos);

				// String

				writeString(this.jdatcgl, dos);

				// String

				writeString(this.dnutbx, dos);

				// String

				writeString(this.dvltla, dos);

				// String

				writeString(this.janloc, dos);

				// String

				writeString(this.ccsloc, dos);

				// String

				writeString(this.fburx, dos);

				// String

				writeString(this.gimtom, dos);

				// String

				writeString(this.cbtabt, dos);

				// String

				writeString(this.jdtabt, dos);

				// String

				writeString(this.jrtabt, dos);

				// String

				writeString(this.jacloc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",article=" + article);
			sb.append(",gpdl=" + gpdl);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dnufnl=" + dnufnl);
			sb.append(",ccoeva=" + ccoeva);
			sb.append(",ccitvl=" + ccitvl);
			sb.append(",dteloc=" + dteloc);
			sb.append(",gtauom=" + gtauom);
			sb.append(",dcomrd=" + dcomrd);
			sb.append(",ccoplc=" + ccoplc);
			sb.append(",cconlc=" + cconlc);
			sb.append(",dvltrt=" + dvltrt);
			sb.append(",ccoape=" + ccoape);
			sb.append(",cc48lc=" + cc48lc);
			sb.append(",dloy48a=" + dloy48a);
			sb.append(",top48a=" + top48a);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",dnupas=" + dnupas);
			sb.append(",gnexcf=" + gnexcf);
			sb.append(",dtaucf=" + dtaucf);
			sb.append(",cchpr=" + cchpr);
			sb.append(",jannat=" + jannat);
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",hlmsem=" + hlmsem);
			sb.append(",postel=" + postel);
			sb.append(",dnatcg=" + dnatcg);
			sb.append(",jdatcgl=" + jdatcgl);
			sb.append(",dnutbx=" + dnutbx);
			sb.append(",dvltla=" + dvltla);
			sb.append(",janloc=" + janloc);
			sb.append(",ccsloc=" + ccsloc);
			sb.append(",fburx=" + fburx);
			sb.append(",gimtom=" + gimtom);
			sb.append(",cbtabt=" + cbtabt);
			sb.append(",jdtabt=" + jdtabt);
			sb.append(",jrtabt=" + jrtabt);
			sb.append(",jacloc=" + jacloc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dnufnl;

		public String getDnufnl() {
			return this.dnufnl;
		}

		public String ccoeva;

		public String getCcoeva() {
			return this.ccoeva;
		}

		public String ccitvl;

		public String getCcitvl() {
			return this.ccitvl;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String gtauom;

		public String getGtauom() {
			return this.gtauom;
		}

		public String dcomrd;

		public String getDcomrd() {
			return this.dcomrd;
		}

		public String ccoplc;

		public String getCcoplc() {
			return this.ccoplc;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String dvltrt;

		public String getDvltrt() {
			return this.dvltrt;
		}

		public String ccoape;

		public String getCcoape() {
			return this.ccoape;
		}

		public String cc48lc;

		public String getCc48lc() {
			return this.cc48lc;
		}

		public String dloy48a;

		public String getDloy48a() {
			return this.dloy48a;
		}

		public String top48a;

		public String getTop48a() {
			return this.top48a;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String dnupas;

		public String getDnupas() {
			return this.dnupas;
		}

		public String gnexcf;

		public String getGnexcf() {
			return this.gnexcf;
		}

		public String dtaucf;

		public String getDtaucf() {
			return this.dtaucf;
		}

		public String cchpr;

		public String getCchpr() {
			return this.cchpr;
		}

		public String jannat;

		public String getJannat() {
			return this.jannat;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String hlmsem;

		public String getHlmsem() {
			return this.hlmsem;
		}

		public String postel;

		public String getPostel() {
			return this.postel;
		}

		public String dnatcg;

		public String getDnatcg() {
			return this.dnatcg;
		}

		public String jdatcgl;

		public String getJdatcgl() {
			return this.jdatcgl;
		}

		public String dnutbx;

		public String getDnutbx() {
			return this.dnutbx;
		}

		public String dvltla;

		public String getDvltla() {
			return this.dvltla;
		}

		public String janloc;

		public String getJanloc() {
			return this.janloc;
		}

		public String ccsloc;

		public String getCcsloc() {
			return this.ccsloc;
		}

		public String fburx;

		public String getFburx() {
			return this.fburx;
		}

		public String gimtom;

		public String getGimtom() {
			return this.gimtom;
		}

		public String cbtabt;

		public String getCbtabt() {
			return this.cbtabt;
		}

		public String jdtabt;

		public String getJdtabt() {
			return this.jdtabt;
		}

		public String jrtabt;

		public String getJrtabt() {
			return this.jrtabt;
		}

		public String jacloc;

		public String getJacloc() {
			return this.jacloc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.article = readString(dis);

					this.gpdl = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.jdatat = readString(dis);

					this.dnufnl = readString(dis);

					this.ccoeva = readString(dis);

					this.ccitvl = readString(dis);

					this.dteloc = readString(dis);

					this.gtauom = readString(dis);

					this.dcomrd = readString(dis);

					this.ccoplc = readString(dis);

					this.cconlc = readString(dis);

					this.dvltrt = readString(dis);

					this.ccoape = readString(dis);

					this.cc48lc = readString(dis);

					this.dloy48a = readString(dis);

					this.top48a = readString(dis);

					this.dnatlc = readString(dis);

					this.dnupas = readString(dis);

					this.gnexcf = readString(dis);

					this.dtaucf = readString(dis);

					this.cchpr = readString(dis);

					this.jannat = readString(dis);

					this.dnbniv = readString(dis);

					this.hlmsem = readString(dis);

					this.postel = readString(dis);

					this.dnatcg = readString(dis);

					this.jdatcgl = readString(dis);

					this.dnutbx = readString(dis);

					this.dvltla = readString(dis);

					this.janloc = readString(dis);

					this.ccsloc = readString(dis);

					this.fburx = readString(dis);

					this.gimtom = readString(dis);

					this.cbtabt = readString(dis);

					this.jdtabt = readString(dis);

					this.jrtabt = readString(dis);

					this.jacloc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dnufnl, dos);

				// String

				writeString(this.ccoeva, dos);

				// String

				writeString(this.ccitvl, dos);

				// String

				writeString(this.dteloc, dos);

				// String

				writeString(this.gtauom, dos);

				// String

				writeString(this.dcomrd, dos);

				// String

				writeString(this.ccoplc, dos);

				// String

				writeString(this.cconlc, dos);

				// String

				writeString(this.dvltrt, dos);

				// String

				writeString(this.ccoape, dos);

				// String

				writeString(this.cc48lc, dos);

				// String

				writeString(this.dloy48a, dos);

				// String

				writeString(this.top48a, dos);

				// String

				writeString(this.dnatlc, dos);

				// String

				writeString(this.dnupas, dos);

				// String

				writeString(this.gnexcf, dos);

				// String

				writeString(this.dtaucf, dos);

				// String

				writeString(this.cchpr, dos);

				// String

				writeString(this.jannat, dos);

				// String

				writeString(this.dnbniv, dos);

				// String

				writeString(this.hlmsem, dos);

				// String

				writeString(this.postel, dos);

				// String

				writeString(this.dnatcg, dos);

				// String

				writeString(this.jdatcgl, dos);

				// String

				writeString(this.dnutbx, dos);

				// String

				writeString(this.dvltla, dos);

				// String

				writeString(this.janloc, dos);

				// String

				writeString(this.ccsloc, dos);

				// String

				writeString(this.fburx, dos);

				// String

				writeString(this.gimtom, dos);

				// String

				writeString(this.cbtabt, dos);

				// String

				writeString(this.jdtabt, dos);

				// String

				writeString(this.jrtabt, dos);

				// String

				writeString(this.jacloc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",article=" + article);
			sb.append(",gpdl=" + gpdl);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dnufnl=" + dnufnl);
			sb.append(",ccoeva=" + ccoeva);
			sb.append(",ccitvl=" + ccitvl);
			sb.append(",dteloc=" + dteloc);
			sb.append(",gtauom=" + gtauom);
			sb.append(",dcomrd=" + dcomrd);
			sb.append(",ccoplc=" + ccoplc);
			sb.append(",cconlc=" + cconlc);
			sb.append(",dvltrt=" + dvltrt);
			sb.append(",ccoape=" + ccoape);
			sb.append(",cc48lc=" + cc48lc);
			sb.append(",dloy48a=" + dloy48a);
			sb.append(",top48a=" + top48a);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",dnupas=" + dnupas);
			sb.append(",gnexcf=" + gnexcf);
			sb.append(",dtaucf=" + dtaucf);
			sb.append(",cchpr=" + cchpr);
			sb.append(",jannat=" + jannat);
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",hlmsem=" + hlmsem);
			sb.append(",postel=" + postel);
			sb.append(",dnatcg=" + dnatcg);
			sb.append(",jdatcgl=" + jdatcgl);
			sb.append(",dnutbx=" + dnutbx);
			sb.append(",dvltla=" + dvltla);
			sb.append(",janloc=" + janloc);
			sb.append(",ccsloc=" + ccsloc);
			sb.append(",fburx=" + fburx);
			sb.append(",gimtom=" + gimtom);
			sb.append(",cbtabt=" + cbtabt);
			sb.append(",jdtabt=" + jdtabt);
			sb.append(",jrtabt=" + jrtabt);
			sb.append(",jacloc=" + jacloc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_4Process(globalMap);
				tFileInputDelimited_5Process(globalMap);

				row5Struct row5 = new row5Struct();
				bati_natureStruct bati_nature = new bati_natureStruct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tJavaRow_1 - inputs:(bati_nature)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2)
				// outputs:(table_bati_hab,table_bati_act,table_bati_dep)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct> tHash_Lookup_row2 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row2Struct>(
						matchingModeEnum_row2,
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_Lookup_row2_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row2Struct createRowInstance() {
								return new row2Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row2.initPut();

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());
				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				bati_natureStruct bati_nature_tmp = new bati_natureStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				context.target_path + "bati_article10.csv"/**
				 * End field
				 * tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row5 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row5 = new row5Struct();
						try {

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row5.ccodep = null;

								row5.ccodir = null;

								row5.ccocom = null;

								row5.invar = null;

								row5.article = null;

								row5.gpdl = null;

								row5.dsrpar = null;

								row5.dnupro = null;

								row5.jdatat = null;

								row5.dnufnl = null;

								row5.ccoeva = null;

								row5.ccitvl = null;

								row5.dteloc = null;

								row5.gtauom = null;

								row5.dcomrd = null;

								row5.ccoplc = null;

								row5.cconlc = null;

								row5.dvltrt = null;

								row5.ccoape = null;

								row5.cc48lc = null;

								row5.dloy48a = null;

								row5.top48a = null;

								row5.dnatlc = null;

								row5.dnupas = null;

								row5.gnexcf = null;

								row5.dtaucf = null;

								row5.cchpr = null;

								row5.jannat = null;

								row5.dnbniv = null;

								row5.hlmsem = null;

								row5.postel = null;

								row5.dnatcg = null;

								row5.jdatcgl = null;

								row5.dnutbx = null;

								row5.dvltla = null;

								row5.janloc = null;

								row5.ccsloc = null;

								row5.fburx = null;

								row5.gimtom = null;

								row5.cbtabt = null;

								row5.jdtabt = null;

								row5.jrtabt = null;

								row5.jacloc = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.ccodep = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.ccodep = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.ccodir = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.ccodir = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.ccocom = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.ccocom = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.invar = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.invar = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.article = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.article = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.gpdl = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.gpdl = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dsrpar = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dsrpar = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dnupro = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dnupro = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.jdatat = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.jdatat = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dnufnl = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dnufnl = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.ccoeva = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.ccoeva = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.ccitvl = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.ccitvl = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dteloc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dteloc = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.gtauom = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.gtauom = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dcomrd = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dcomrd = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.ccoplc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.ccoplc = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.cconlc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.cconlc = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dvltrt = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dvltrt = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.ccoape = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.ccoape = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.cc48lc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.cc48lc = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dloy48a = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dloy48a = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.top48a = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.top48a = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dnatlc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dnatlc = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dnupas = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dnupas = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 24;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.gnexcf = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.gnexcf = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 25;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dtaucf = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dtaucf = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 26;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.cchpr = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.cchpr = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 27;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.jannat = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.jannat = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 28;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dnbniv = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dnbniv = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 29;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.hlmsem = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.hlmsem = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 30;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.postel = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.postel = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 31;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dnatcg = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dnatcg = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 32;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.jdatcgl = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.jdatcgl = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 33;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dnutbx = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dnutbx = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 34;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.dvltla = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.dvltla = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 35;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.janloc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.janloc = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 36;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.ccsloc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.ccsloc = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 37;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.fburx = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.fburx = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 38;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.gimtom = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.gimtom = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 39;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.cbtabt = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.cbtabt = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 40;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.jdtabt = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.jdtabt = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 41;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.jrtabt = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.jrtabt = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 42;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row5.jacloc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row5.jacloc = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row6"
							// /////////////////////////////////////////////

							boolean forceLooprow6 = false;

							row6Struct row6ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								row6HashKey.code_nature = row5.cconlc;

								row6HashKey.hashCodeDirty = true;

								tHash_Lookup_row6.lookup(row6HashKey);

								if (!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

									forceLooprow6 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow6 = true;
							} // G 21

							row6Struct row6 = null;

							while ((tHash_Lookup_row6 != null && tHash_Lookup_row6
									.hasNext()) || forceLooprow6) { // G_TM_M_043

								// CALL close loop of lookup 'row6'

								row6Struct fromLookup_row6 = null;
								row6 = row6Default;

								if (!forceLooprow6) { // G 46

									fromLookup_row6 = tHash_Lookup_row6.next();

									if (fromLookup_row6 != null) {
										row6 = fromLookup_row6;
									}

								} // G 46

								forceLooprow6 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row7"
								// /////////////////////////////////////////////

								boolean forceLooprow7 = false;

								row7Struct row7ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row7HashKey.DNATLC = row5.dnatlc;

									row7HashKey.hashCodeDirty = true;

									tHash_Lookup_row7.lookup(row7HashKey);

									if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

										forceLooprow7 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow7 = true;
								} // G 21

								row7Struct row7 = null;

								while ((tHash_Lookup_row7 != null && tHash_Lookup_row7
										.hasNext()) || forceLooprow7) { // G_TM_M_043

									// CALL close loop of lookup 'row7'

									row7Struct fromLookup_row7 = null;
									row7 = row7Default;

									if (!forceLooprow7) { // G 46

										fromLookup_row7 = tHash_Lookup_row7
												.next();

										if (fromLookup_row7 != null) {
											row7 = fromLookup_row7;
										}

									} // G 46

									forceLooprow7 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row8"
									// /////////////////////////////////////////////

									boolean forceLooprow8 = false;

									row8Struct row8ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_2 = false;

										row8HashKey.dteloc = row5.dteloc;

										row8HashKey.hashCodeDirty = true;

										tHash_Lookup_row8.lookup(row8HashKey);

									} // G_TM_M_020

									if (tHash_Lookup_row8 != null
											&& tHash_Lookup_row8
													.getCount(row8HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.dteloc = '"
										// + row8HashKey.dteloc + "'");
									} // G 071

									row8Struct row8 = null;

									row8Struct fromLookup_row8 = null;
									row8 = row8Default;

									if (tHash_Lookup_row8 != null
											&& tHash_Lookup_row8.hasNext()) { // G
																				// 099

										fromLookup_row8 = tHash_Lookup_row8
												.next();

									} // G 099

									if (fromLookup_row8 != null) {
										row8 = fromLookup_row8;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
										// ###############################
										// # Output tables

										bati_nature = null;

										// # Output table : 'bati_nature'
										bati_nature_tmp.ccodep = row5.ccodep;
										bati_nature_tmp.ccocom = row5.ccocom;
										bati_nature_tmp.invar = row5.invar;
										bati_nature_tmp.dnupro = row5.dnupro;
										bati_nature_tmp.dteloc = row5.dteloc;
										bati_nature_tmp.type_local = row8.Signification;
										bati_nature_tmp.cconlc = row5.cconlc;
										bati_nature_tmp.libelle_nature_bien = row6.libelle_nature;
										bati_nature_tmp.dnatlc = row5.dnatlc;
										bati_nature_tmp.nature_occupation = row7.Signification;
										bati_nature_tmp.jannat = row5.jannat;
										bati_nature_tmp.hlmsem = row5.hlmsem;
										bati_nature_tmp.dnbniv = row5.dnbniv;
										bati_nature_tmp.jdatat = row5.jdatat;
										bati_nature = bati_nature_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */
									// Start of branch "bati_nature"
									if (bati_nature != null) {

										/**
										 * [tJavaRow_1 main ] start
										 */

										currentComponent = "tJavaRow_1";

										// Code generate according to input
										// schema and output schema
										row2.ccodep = bati_nature.ccodep;
										row2.ccocom = bati_nature.ccocom;
										row2.invar = bati_nature.invar;
										row2.dnupro = bati_nature.dnupro;
										row2.dteloc = bati_nature.dteloc;
										row2.type_local = bati_nature.type_local;
										row2.cconlc = bati_nature.cconlc;
										row2.libelle_nature_bien = bati_nature.libelle_nature_bien;
										row2.dnatlc = bati_nature.dnatlc;
										row2.nature_occupation = bati_nature.nature_occupation;

										// formatage date
										/*
										 * // La date n'a pas besoin d'√™tre
										 * stock√©e sous forme de date. // Dans
										 * les fichiers DGI, elle est entr√©e sur
										 * 4 caract√®res // Le champ a besoin
										 * d'√™tre de type entier pour pouvoir
										 * extraire minimum et maximum if
										 * (bati_nature.jannat.length() == 8){
										 * row2.jannat =
										 * TalendDate.parseDate("ddMMyyyy",
										 * bati_nature.jannat);} else { if
										 * (bati_nature.jannat.length() == 4){
										 * row2.jannat =
										 * TalendDate.parseDate("ddMMyyyy",
										 * "0101"+bati_nature.jannat);} else {
										 * row2.jannat = null;} };
										 */
										if (!Relational
												.ISNULL(bati_nature.jannat)
												&& !bati_nature.jannat
														.equals("")) {
											row2.jannat = Integer
													.parseInt(bati_nature.jannat);
										} else {
											row2.jannat = 0;
										}
										; // endif

										// test logement hlm
										if (!Relational
												.ISNULL(bati_nature.hlmsem)
												&& !bati_nature.hlmsem
														.equals(""))
										// { row2.hlmsem = 1;} else {row2.hlmsem
										// = 0;};
										{
											row2.hlmsem = Integer
													.parseInt(bati_nature.hlmsem);
										} else {
											row2.hlmsem = 0;
										}
										; // endif

										row2.dnbniv = bati_nature.dnbniv;
										row2.jdatat = bati_nature.jdatat;

										nb_line_tJavaRow_1++;

										tos_count_tJavaRow_1++;

										/**
										 * [tJavaRow_1 main ] stop
										 */

										/**
										 * [tAdvancedHash_row2 main ] start
										 */

										currentComponent = "tAdvancedHash_row2";

										row2Struct row2_HashRow = tHash_Lookup_row2
												.getNextFreeRow();

										row2_HashRow.ccodep = row2.ccodep;

										row2_HashRow.ccocom = row2.ccocom;

										row2_HashRow.invar = row2.invar;

										row2_HashRow.dnupro = row2.dnupro;

										row2_HashRow.dteloc = row2.dteloc;

										row2_HashRow.type_local = row2.type_local;

										row2_HashRow.cconlc = row2.cconlc;

										row2_HashRow.libelle_nature_bien = row2.libelle_nature_bien;

										row2_HashRow.dnatlc = row2.dnatlc;

										row2_HashRow.nature_occupation = row2.nature_occupation;

										row2_HashRow.jannat = row2.jannat;

										row2_HashRow.hlmsem = row2.hlmsem;

										row2_HashRow.dnbniv = row2.dnbniv;

										row2_HashRow.jdatat = row2.jdatat;

										tHash_Lookup_row2.put(row2_HashRow);

										tos_count_tAdvancedHash_row2++;

										/**
										 * [tAdvancedHash_row2 main ] stop
										 */

									} // End of branch "bati_nature"

								} // close loop of lookup 'row7' // G_TM_M_043

							} // close loop of lookup 'row6' // G_TM_M_043

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row8");

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_nature;

		public Integer getId_nature() {
			return this.id_nature;
		}

		public String code_nature;

		public String getCode_nature() {
			return this.code_nature;
		}

		public String libelle_nature;

		public String getLibelle_nature() {
			return this.libelle_nature;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.code_nature == null) ? 0 : this.code_nature
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.code_nature == null) {
				if (other.code_nature != null)
					return false;
			} else if (!this.code_nature.equals(other.code_nature))
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id_nature = this.id_nature;
			other.code_nature = this.code_nature;
			other.libelle_nature = this.libelle_nature;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.code_nature = this.code_nature;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.code_nature = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_nature, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_nature = readInteger(dis, ois);

				this.libelle_nature = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id_nature, dos, oos);

				writeString(this.libelle_nature, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_nature=" + String.valueOf(id_nature));
			sb.append(",code_nature=" + code_nature);
			sb.append(",libelle_nature=" + libelle_nature);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_nature,
					other.code_nature);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row6";

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_2) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_2 - inputs:(row5,row6,row7,row8)
				// outputs:(bati_nature)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.externals_path + "libnature.csv"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"windows-1252");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"windows-1252")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 0; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_3.readNext()) {

								totalLinetFileInputDelimited_3++;

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"windows-1252");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"windows-1252")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 0; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row6 = null;

						row6 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row6 = new row6Struct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row6.id_nature = null;

								row6.code_nature = null;

								row6.libelle_nature = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.id_nature = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row6.id_nature = null;
									}

								} else {
									row6.id_nature = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.code_nature = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.code_nature = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.libelle_nature = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.libelle_nature = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tAdvancedHash_row6 main ] start
							 */

							currentComponent = "tAdvancedHash_row6";

							row6Struct row6_HashRow = new row6Struct();

							row6_HashRow.id_nature = row6.id_nature;

							row6_HashRow.code_nature = row6.code_nature;

							row6_HashRow.libelle_nature = row6.libelle_nature;

							tHash_Lookup_row6.put(row6_HashRow);

							tos_count_tAdvancedHash_row6++;

							/**
							 * [tAdvancedHash_row6 main ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DNATLC;

		public String getDNATLC() {
			return this.DNATLC;
		}

		public String Signification;

		public String getSignification() {
			return this.Signification;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.DNATLC == null) ? 0 : this.DNATLC.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.DNATLC == null) {
				if (other.DNATLC != null)
					return false;
			} else if (!this.DNATLC.equals(other.DNATLC))
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.DNATLC = this.DNATLC;
			other.Signification = this.Signification;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.DNATLC = this.DNATLC;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.DNATLC = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DNATLC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Signification = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Signification, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DNATLC=" + DNATLC);
			sb.append(",Signification=" + Signification);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DNATLC, other.DNATLC);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tFileInputDelimited_4 -
				// inputs:(after_tFileInputDelimited_2) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_2 - inputs:(row5,row6,row7,row8)
				// outputs:(bati_nature)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				context.externals_path + "nature occupation local.csv"/**
				 * End
				 * field tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"UTF-16");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"UTF-16")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_4.readNext()) {

								totalLinetFileInputDelimited_4++;

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"UTF-16");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"UTF-16")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						row7 = null;

						row7 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row7 = new row7Struct();
						try {

							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row7.DNATLC = null;

								row7.Signification = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row7.DNATLC = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row7.DNATLC = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row7.Signification = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row7.Signification = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tAdvancedHash_row7 main ] start
							 */

							currentComponent = "tAdvancedHash_row7";

							row7Struct row7_HashRow = new row7Struct();

							row7_HashRow.DNATLC = row7.DNATLC;

							row7_HashRow.Signification = row7.Signification;

							tHash_Lookup_row7.put(row7_HashRow);

							tos_count_tAdvancedHash_row7++;

							/**
							 * [tAdvancedHash_row7 main ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String Signification;

		public String getSignification() {
			return this.Signification;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.dteloc == null) ? 0 : this.dteloc.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.dteloc == null) {
				if (other.dteloc != null)
					return false;
			} else if (!this.dteloc.equals(other.dteloc))
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.dteloc = this.dteloc;
			other.Signification = this.Signification;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.dteloc = this.dteloc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.dteloc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.dteloc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Signification = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Signification, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dteloc=" + dteloc);
			sb.append(",Signification=" + Signification);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.dteloc, other.dteloc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tFileInputDelimited_5 -
				// inputs:(after_tFileInputDelimited_2) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_2 - inputs:(row5,row6,row7,row8)
				// outputs:(bati_nature)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /**
				 * Start field
				 * tFileInputDelimited_5:FILENAME
				 */
				context.externals_path + "typelocal.csv"/**
				 * End field
				 * tFileInputDelimited_5:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0],
									"UTF-16LE");
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_5)),
													"UTF-16LE")),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_5
								.setEscapeChar(csvReadertFileInputDelimited_5
										.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5
									.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_5.readNext()) {

								totalLinetFileInputDelimited_5++;

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
									: totalLinetFileInputDelimited_5
											- footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0],
										"UTF-16LE");
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_5)),
														"UTF-16LE")),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_5
									.setEscapeChar(csvReadertFileInputDelimited_5
											.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5
								.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_5 != 0
							&& csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
								.getValues();

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						row8 = null;

						row8 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row8 = new row8Struct();
						try {

							if (rowtFileInputDelimited_5.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row8.dteloc = null;

								row8.Signification = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row8.dteloc = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row8.dteloc = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row8.Signification = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row8.Signification = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tAdvancedHash_row8 main ] start
							 */

							currentComponent = "tAdvancedHash_row8";

							row8Struct row8_HashRow = new row8Struct();

							row8_HashRow.dteloc = row8.dteloc;

							row8_HashRow.Signification = row8.Signification;

							tHash_Lookup_row8.put(row8_HashRow);

							tos_count_tAdvancedHash_row8++;

							/**
							 * [tAdvancedHash_row8 main ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String cconad1;

		public String getCconad1() {
			return this.cconad1;
		}

		public String dsueic1;

		public String getDsueic1() {
			return this.dsueic1;
		}

		public String dcimei1;

		public String getDcimei1() {
			return this.dcimei1;
		}

		public String cconad2;

		public String getCconad2() {
			return this.cconad2;
		}

		public String dsueic2;

		public String getDsueic2() {
			return this.dsueic2;
		}

		public String dcimei2;

		public String getDcimei2() {
			return this.dcimei2;
		}

		public String cconad3;

		public String getCconad3() {
			return this.cconad3;
		}

		public String dsueic3;

		public String getDsueic3() {
			return this.dsueic3;
		}

		public String dcimei3;

		public String getDcimei3() {
			return this.dcimei3;
		}

		public String cconad4;

		public String getCconad4() {
			return this.cconad4;
		}

		public String dsueic4;

		public String getDsueic4() {
			return this.dsueic4;
		}

		public String dcimei4;

		public String getDcimei4() {
			return this.dcimei4;
		}

		public String geaulc;

		public String getGeaulc() {
			return this.geaulc;
		}

		public String gelelc;

		public String getGelelc() {
			return this.gelelc;
		}

		public String gesclc;

		public String getGesclc() {
			return this.gesclc;
		}

		public String ggazlc;

		public String getGgazlc() {
			return this.ggazlc;
		}

		public String gasclc;

		public String getGasclc() {
			return this.gasclc;
		}

		public String gchclc;

		public String getGchclc() {
			return this.gchclc;
		}

		public String gvorlc;

		public String getGvorlc() {
			return this.gvorlc;
		}

		public String gteglc;

		public String getGteglc() {
			return this.gteglc;
		}

		public String dnbbai;

		public String getDnbbai() {
			return this.dnbbai;
		}

		public String dnbdou;

		public String getDnbdou() {
			return this.dnbdou;
		}

		public String dnblav;

		public String getDnblav() {
			return this.dnblav;
		}

		public String dnbwc;

		public String getDnbwc() {
			return this.dnbwc;
		}

		public String deqdha;

		public String getDeqdha() {
			return this.deqdha;
		}

		public String dnbppr;

		public String getDnbppr() {
			return this.dnbppr;
		}

		public String dnbsam;

		public String getDnbsam() {
			return this.dnbsam;
		}

		public String dnbcha;

		public String getDnbcha() {
			return this.dnbcha;
		}

		public String dnbcu8;

		public String getDnbcu8() {
			return this.dnbcu8;
		}

		public String dnbcu9;

		public String getDnbcu9() {
			return this.dnbcu9;
		}

		public String dnbsea;

		public String getDnbsea() {
			return this.dnbsea;
		}

		public String dnbann;

		public String getDnbann() {
			return this.dnbann;
		}

		public String dnbpdc;

		public String getDnbpdc() {
			return this.dnbpdc;
		}

		public String dsupdc;

		public String getDsupdc() {
			return this.dsupdc;
		}

		public String dmatgm;

		public String getDmatgm() {
			return this.dmatgm;
		}

		public String dmatto;

		public String getDmatto() {
			return this.dmatto;
		}

		public String jannat;

		public String getJannat() {
			return this.jannat;
		}

		public String detent;

		public String getDetent() {
			return this.detent;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime * result
						+ ((this.invar == null) ? 0 : this.invar.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.invar == null) {
				if (other.invar != null)
					return false;
			} else if (!this.invar.equals(other.invar))
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ccodep = this.ccodep;
			other.ccodir = this.ccodir;
			other.ccocom = this.ccocom;
			other.invar = this.invar;
			other.dnupev = this.dnupev;
			other.article = this.article;
			other.dnudes = this.dnudes;
			other.cconad1 = this.cconad1;
			other.dsueic1 = this.dsueic1;
			other.dcimei1 = this.dcimei1;
			other.cconad2 = this.cconad2;
			other.dsueic2 = this.dsueic2;
			other.dcimei2 = this.dcimei2;
			other.cconad3 = this.cconad3;
			other.dsueic3 = this.dsueic3;
			other.dcimei3 = this.dcimei3;
			other.cconad4 = this.cconad4;
			other.dsueic4 = this.dsueic4;
			other.dcimei4 = this.dcimei4;
			other.geaulc = this.geaulc;
			other.gelelc = this.gelelc;
			other.gesclc = this.gesclc;
			other.ggazlc = this.ggazlc;
			other.gasclc = this.gasclc;
			other.gchclc = this.gchclc;
			other.gvorlc = this.gvorlc;
			other.gteglc = this.gteglc;
			other.dnbbai = this.dnbbai;
			other.dnbdou = this.dnbdou;
			other.dnblav = this.dnblav;
			other.dnbwc = this.dnbwc;
			other.deqdha = this.deqdha;
			other.dnbppr = this.dnbppr;
			other.dnbsam = this.dnbsam;
			other.dnbcha = this.dnbcha;
			other.dnbcu8 = this.dnbcu8;
			other.dnbcu9 = this.dnbcu9;
			other.dnbsea = this.dnbsea;
			other.dnbann = this.dnbann;
			other.dnbpdc = this.dnbpdc;
			other.dsupdc = this.dsupdc;
			other.dmatgm = this.dmatgm;
			other.dmatto = this.dmatto;
			other.jannat = this.jannat;
			other.detent = this.detent;
			other.dnbniv = this.dnbniv;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ccocom = this.ccocom;
			other.invar = this.invar;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.invar = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ccodep = readString(dis, ois);

				this.ccodir = readString(dis, ois);

				this.dnupev = readString(dis, ois);

				this.article = readString(dis, ois);

				this.dnudes = readString(dis, ois);

				this.cconad1 = readString(dis, ois);

				this.dsueic1 = readString(dis, ois);

				this.dcimei1 = readString(dis, ois);

				this.cconad2 = readString(dis, ois);

				this.dsueic2 = readString(dis, ois);

				this.dcimei2 = readString(dis, ois);

				this.cconad3 = readString(dis, ois);

				this.dsueic3 = readString(dis, ois);

				this.dcimei3 = readString(dis, ois);

				this.cconad4 = readString(dis, ois);

				this.dsueic4 = readString(dis, ois);

				this.dcimei4 = readString(dis, ois);

				this.geaulc = readString(dis, ois);

				this.gelelc = readString(dis, ois);

				this.gesclc = readString(dis, ois);

				this.ggazlc = readString(dis, ois);

				this.gasclc = readString(dis, ois);

				this.gchclc = readString(dis, ois);

				this.gvorlc = readString(dis, ois);

				this.gteglc = readString(dis, ois);

				this.dnbbai = readString(dis, ois);

				this.dnbdou = readString(dis, ois);

				this.dnblav = readString(dis, ois);

				this.dnbwc = readString(dis, ois);

				this.deqdha = readString(dis, ois);

				this.dnbppr = readString(dis, ois);

				this.dnbsam = readString(dis, ois);

				this.dnbcha = readString(dis, ois);

				this.dnbcu8 = readString(dis, ois);

				this.dnbcu9 = readString(dis, ois);

				this.dnbsea = readString(dis, ois);

				this.dnbann = readString(dis, ois);

				this.dnbpdc = readString(dis, ois);

				this.dsupdc = readString(dis, ois);

				this.dmatgm = readString(dis, ois);

				this.dmatto = readString(dis, ois);

				this.jannat = readString(dis, ois);

				this.detent = readString(dis, ois);

				this.dnbniv = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ccodep, dos, oos);

				writeString(this.ccodir, dos, oos);

				writeString(this.dnupev, dos, oos);

				writeString(this.article, dos, oos);

				writeString(this.dnudes, dos, oos);

				writeString(this.cconad1, dos, oos);

				writeString(this.dsueic1, dos, oos);

				writeString(this.dcimei1, dos, oos);

				writeString(this.cconad2, dos, oos);

				writeString(this.dsueic2, dos, oos);

				writeString(this.dcimei2, dos, oos);

				writeString(this.cconad3, dos, oos);

				writeString(this.dsueic3, dos, oos);

				writeString(this.dcimei3, dos, oos);

				writeString(this.cconad4, dos, oos);

				writeString(this.dsueic4, dos, oos);

				writeString(this.dcimei4, dos, oos);

				writeString(this.geaulc, dos, oos);

				writeString(this.gelelc, dos, oos);

				writeString(this.gesclc, dos, oos);

				writeString(this.ggazlc, dos, oos);

				writeString(this.gasclc, dos, oos);

				writeString(this.gchclc, dos, oos);

				writeString(this.gvorlc, dos, oos);

				writeString(this.gteglc, dos, oos);

				writeString(this.dnbbai, dos, oos);

				writeString(this.dnbdou, dos, oos);

				writeString(this.dnblav, dos, oos);

				writeString(this.dnbwc, dos, oos);

				writeString(this.deqdha, dos, oos);

				writeString(this.dnbppr, dos, oos);

				writeString(this.dnbsam, dos, oos);

				writeString(this.dnbcha, dos, oos);

				writeString(this.dnbcu8, dos, oos);

				writeString(this.dnbcu9, dos, oos);

				writeString(this.dnbsea, dos, oos);

				writeString(this.dnbann, dos, oos);

				writeString(this.dnbpdc, dos, oos);

				writeString(this.dsupdc, dos, oos);

				writeString(this.dmatgm, dos, oos);

				writeString(this.dmatto, dos, oos);

				writeString(this.jannat, dos, oos);

				writeString(this.detent, dos, oos);

				writeString(this.dnbniv, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",cconad1=" + cconad1);
			sb.append(",dsueic1=" + dsueic1);
			sb.append(",dcimei1=" + dcimei1);
			sb.append(",cconad2=" + cconad2);
			sb.append(",dsueic2=" + dsueic2);
			sb.append(",dcimei2=" + dcimei2);
			sb.append(",cconad3=" + cconad3);
			sb.append(",dsueic3=" + dsueic3);
			sb.append(",dcimei3=" + dcimei3);
			sb.append(",cconad4=" + cconad4);
			sb.append(",dsueic4=" + dsueic4);
			sb.append(",dcimei4=" + dcimei4);
			sb.append(",geaulc=" + geaulc);
			sb.append(",gelelc=" + gelelc);
			sb.append(",gesclc=" + gesclc);
			sb.append(",ggazlc=" + ggazlc);
			sb.append(",gasclc=" + gasclc);
			sb.append(",gchclc=" + gchclc);
			sb.append(",gvorlc=" + gvorlc);
			sb.append(",gteglc=" + gteglc);
			sb.append(",dnbbai=" + dnbbai);
			sb.append(",dnbdou=" + dnbdou);
			sb.append(",dnblav=" + dnblav);
			sb.append(",dnbwc=" + dnbwc);
			sb.append(",deqdha=" + deqdha);
			sb.append(",dnbppr=" + dnbppr);
			sb.append(",dnbsam=" + dnbsam);
			sb.append(",dnbcha=" + dnbcha);
			sb.append(",dnbcu8=" + dnbcu8);
			sb.append(",dnbcu9=" + dnbcu9);
			sb.append(",dnbsea=" + dnbsea);
			sb.append(",dnbann=" + dnbann);
			sb.append(",dnbpdc=" + dnbpdc);
			sb.append(",dsupdc=" + dsupdc);
			sb.append(",dmatgm=" + dmatgm);
			sb.append(",dmatto=" + dmatto);
			sb.append(",jannat=" + jannat);
			sb.append(",detent=" + detent);
			sb.append(",dnbniv=" + dnbniv);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.invar, other.invar);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row3";

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tFileInputDelimited_6 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_3 - inputs:(table_bati_hab,row3)
				// outputs:(tab_bati_hab_total)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row3Struct> tHash_Lookup_row3 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row3Struct>(
						matchingModeEnum_row3,
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_Lookup_row3_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row3Struct createRowInstance() {
								return new row3Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row3.initPut();

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /**
				 * Start field
				 * tFileInputDelimited_6:FILENAME
				 */
				context.target_path + "bati_article40.csv"/**
				 * End field
				 * tFileInputDelimited_6:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_6)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6
								.setEscapeChar(csvReadertFileInputDelimited_6
										.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_6.readNext()) {

								rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
										.getValues();
								if (!(rowtFileInputDelimited_6.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_6[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_6++;

								}

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
									: totalLinetFileInputDelimited_6
											- footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_6)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6
									.setEscapeChar(csvReadertFileInputDelimited_6
											.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_6 != 0
							&& csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
								.getValues();

						if (rowtFileInputDelimited_6.length == 1
								&& ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row3 = null;

						row3 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row3 = new row3Struct();
						try {

							if (rowtFileInputDelimited_6.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row3.ccodep = null;

								row3.ccodir = null;

								row3.ccocom = null;

								row3.invar = null;

								row3.dnupev = null;

								row3.article = null;

								row3.dnudes = null;

								row3.cconad1 = null;

								row3.dsueic1 = null;

								row3.dcimei1 = null;

								row3.cconad2 = null;

								row3.dsueic2 = null;

								row3.dcimei2 = null;

								row3.cconad3 = null;

								row3.dsueic3 = null;

								row3.dcimei3 = null;

								row3.cconad4 = null;

								row3.dsueic4 = null;

								row3.dcimei4 = null;

								row3.geaulc = null;

								row3.gelelc = null;

								row3.gesclc = null;

								row3.ggazlc = null;

								row3.gasclc = null;

								row3.gchclc = null;

								row3.gvorlc = null;

								row3.gteglc = null;

								row3.dnbbai = null;

								row3.dnbdou = null;

								row3.dnblav = null;

								row3.dnbwc = null;

								row3.deqdha = null;

								row3.dnbppr = null;

								row3.dnbsam = null;

								row3.dnbcha = null;

								row3.dnbcu8 = null;

								row3.dnbcu9 = null;

								row3.dnbsea = null;

								row3.dnbann = null;

								row3.dnbpdc = null;

								row3.dsupdc = null;

								row3.dmatgm = null;

								row3.dmatto = null;

								row3.jannat = null;

								row3.detent = null;

								row3.dnbniv = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.ccodep = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.ccodep = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.ccodir = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.ccodir = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.ccocom = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.ccocom = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 3;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.invar = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.invar = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 4;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnupev = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnupev = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 5;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.article = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.article = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 6;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnudes = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnudes = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 7;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.cconad1 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.cconad1 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 8;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dsueic1 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dsueic1 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 9;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dcimei1 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dcimei1 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 10;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.cconad2 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.cconad2 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 11;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dsueic2 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dsueic2 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 12;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dcimei2 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dcimei2 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 13;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.cconad3 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.cconad3 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 14;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dsueic3 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dsueic3 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 15;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dcimei3 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dcimei3 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 16;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.cconad4 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.cconad4 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 17;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dsueic4 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dsueic4 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 18;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dcimei4 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dcimei4 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 19;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.geaulc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.geaulc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 20;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.gelelc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.gelelc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 21;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.gesclc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.gesclc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 22;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.ggazlc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.ggazlc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 23;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.gasclc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.gasclc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 24;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.gchclc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.gchclc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 25;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.gvorlc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.gvorlc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 26;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.gteglc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.gteglc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 27;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbbai = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbbai = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 28;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbdou = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbdou = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 29;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnblav = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnblav = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 30;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbwc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbwc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 31;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.deqdha = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.deqdha = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 32;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbppr = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbppr = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 33;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbsam = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbsam = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 34;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbcha = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbcha = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 35;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbcu8 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbcu8 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 36;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbcu9 = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbcu9 = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 37;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbsea = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbsea = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 38;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbann = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbann = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 39;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbpdc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbpdc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 40;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dsupdc = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dsupdc = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 41;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dmatgm = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dmatgm = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 42;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dmatto = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dmatto = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 43;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.jannat = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.jannat = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 44;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.detent = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.detent = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 45;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row3.dnbniv = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row3.dnbniv = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tAdvancedHash_row3 main ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							row3Struct row3_HashRow = tHash_Lookup_row3
									.getNextFreeRow();

							row3_HashRow.ccodep = row3.ccodep;

							row3_HashRow.ccodir = row3.ccodir;

							row3_HashRow.ccocom = row3.ccocom;

							row3_HashRow.invar = row3.invar;

							row3_HashRow.dnupev = row3.dnupev;

							row3_HashRow.article = row3.article;

							row3_HashRow.dnudes = row3.dnudes;

							row3_HashRow.cconad1 = row3.cconad1;

							row3_HashRow.dsueic1 = row3.dsueic1;

							row3_HashRow.dcimei1 = row3.dcimei1;

							row3_HashRow.cconad2 = row3.cconad2;

							row3_HashRow.dsueic2 = row3.dsueic2;

							row3_HashRow.dcimei2 = row3.dcimei2;

							row3_HashRow.cconad3 = row3.cconad3;

							row3_HashRow.dsueic3 = row3.dsueic3;

							row3_HashRow.dcimei3 = row3.dcimei3;

							row3_HashRow.cconad4 = row3.cconad4;

							row3_HashRow.dsueic4 = row3.dsueic4;

							row3_HashRow.dcimei4 = row3.dcimei4;

							row3_HashRow.geaulc = row3.geaulc;

							row3_HashRow.gelelc = row3.gelelc;

							row3_HashRow.gesclc = row3.gesclc;

							row3_HashRow.ggazlc = row3.ggazlc;

							row3_HashRow.gasclc = row3.gasclc;

							row3_HashRow.gchclc = row3.gchclc;

							row3_HashRow.gvorlc = row3.gvorlc;

							row3_HashRow.gteglc = row3.gteglc;

							row3_HashRow.dnbbai = row3.dnbbai;

							row3_HashRow.dnbdou = row3.dnbdou;

							row3_HashRow.dnblav = row3.dnblav;

							row3_HashRow.dnbwc = row3.dnbwc;

							row3_HashRow.deqdha = row3.deqdha;

							row3_HashRow.dnbppr = row3.dnbppr;

							row3_HashRow.dnbsam = row3.dnbsam;

							row3_HashRow.dnbcha = row3.dnbcha;

							row3_HashRow.dnbcu8 = row3.dnbcu8;

							row3_HashRow.dnbcu9 = row3.dnbcu9;

							row3_HashRow.dnbsea = row3.dnbsea;

							row3_HashRow.dnbann = row3.dnbann;

							row3_HashRow.dnbpdc = row3.dnbpdc;

							row3_HashRow.dsupdc = row3.dsupdc;

							row3_HashRow.dmatgm = row3.dmatgm;

							row3_HashRow.dmatto = row3.dmatto;

							row3_HashRow.jannat = row3.jannat;

							row3_HashRow.detent = row3.detent;

							row3_HashRow.dnbniv = row3.dnbniv;

							tHash_Lookup_row3.put(row3_HashRow);

							tos_count_tAdvancedHash_row3++;

							/**
							 * [tAdvancedHash_row3 main ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								nb_line_tFileInputDelimited_6);
					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String dsudep;

		public String getDsudep() {
			return this.dsudep;
		}

		public String cconad;

		public String getCconad() {
			return this.cconad;
		}

		public String asitet;

		public String getAsitet() {
			return this.asitet;
		}

		public String dmatgm;

		public String getDmatgm() {
			return this.dmatgm;
		}

		public String dmatto;

		public String getDmatto() {
			return this.dmatto;
		}

		public String detent;

		public String getDetent() {
			return this.detent;
		}

		public String geaulc;

		public String getGeaulc() {
			return this.geaulc;
		}

		public String gelelc;

		public String getGelelc() {
			return this.gelelc;
		}

		public String gchclc;

		public String getGchclc() {
			return this.gchclc;
		}

		public String dnbbai;

		public String getDnbbai() {
			return this.dnbbai;
		}

		public String dnbdou;

		public String getDnbdou() {
			return this.dnbdou;
		}

		public String dnblav;

		public String getDnblav() {
			return this.dnblav;
		}

		public String dnbwc;

		public String getDnbwc() {
			return this.dnbwc;
		}

		public String deqtlc;

		public String getDeqtlc() {
			return this.deqtlc;
		}

		public String dcimlc;

		public String getDcimlc() {
			return this.dcimlc;
		}

		public String dcetde;

		public String getDcetde() {
			return this.dcetde;
		}

		public String dcspde;

		public String getDcspde() {
			return this.dcspde;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime * result
						+ ((this.invar == null) ? 0 : this.invar.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.invar == null) {
				if (other.invar != null)
					return false;
			} else if (!this.invar.equals(other.invar))
				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.ccodep = this.ccodep;
			other.ccodir = this.ccodir;
			other.ccocom = this.ccocom;
			other.invar = this.invar;
			other.dnupev = this.dnupev;
			other.article = this.article;
			other.dnudes = this.dnudes;
			other.dsudep = this.dsudep;
			other.cconad = this.cconad;
			other.asitet = this.asitet;
			other.dmatgm = this.dmatgm;
			other.dmatto = this.dmatto;
			other.detent = this.detent;
			other.geaulc = this.geaulc;
			other.gelelc = this.gelelc;
			other.gchclc = this.gchclc;
			other.dnbbai = this.dnbbai;
			other.dnbdou = this.dnbdou;
			other.dnblav = this.dnblav;
			other.dnbwc = this.dnbwc;
			other.deqtlc = this.deqtlc;
			other.dcimlc = this.dcimlc;
			other.dcetde = this.dcetde;
			other.dcspde = this.dcspde;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.ccocom = this.ccocom;
			other.invar = this.invar;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.invar = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ccodep = readString(dis, ois);

				this.ccodir = readString(dis, ois);

				this.dnupev = readString(dis, ois);

				this.article = readString(dis, ois);

				this.dnudes = readString(dis, ois);

				this.dsudep = readString(dis, ois);

				this.cconad = readString(dis, ois);

				this.asitet = readString(dis, ois);

				this.dmatgm = readString(dis, ois);

				this.dmatto = readString(dis, ois);

				this.detent = readString(dis, ois);

				this.geaulc = readString(dis, ois);

				this.gelelc = readString(dis, ois);

				this.gchclc = readString(dis, ois);

				this.dnbbai = readString(dis, ois);

				this.dnbdou = readString(dis, ois);

				this.dnblav = readString(dis, ois);

				this.dnbwc = readString(dis, ois);

				this.deqtlc = readString(dis, ois);

				this.dcimlc = readString(dis, ois);

				this.dcetde = readString(dis, ois);

				this.dcspde = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ccodep, dos, oos);

				writeString(this.ccodir, dos, oos);

				writeString(this.dnupev, dos, oos);

				writeString(this.article, dos, oos);

				writeString(this.dnudes, dos, oos);

				writeString(this.dsudep, dos, oos);

				writeString(this.cconad, dos, oos);

				writeString(this.asitet, dos, oos);

				writeString(this.dmatgm, dos, oos);

				writeString(this.dmatto, dos, oos);

				writeString(this.detent, dos, oos);

				writeString(this.geaulc, dos, oos);

				writeString(this.gelelc, dos, oos);

				writeString(this.gchclc, dos, oos);

				writeString(this.dnbbai, dos, oos);

				writeString(this.dnbdou, dos, oos);

				writeString(this.dnblav, dos, oos);

				writeString(this.dnbwc, dos, oos);

				writeString(this.deqtlc, dos, oos);

				writeString(this.dcimlc, dos, oos);

				writeString(this.dcetde, dos, oos);

				writeString(this.dcspde, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",dsudep=" + dsudep);
			sb.append(",cconad=" + cconad);
			sb.append(",asitet=" + asitet);
			sb.append(",dmatgm=" + dmatgm);
			sb.append(",dmatto=" + dmatto);
			sb.append(",detent=" + detent);
			sb.append(",geaulc=" + geaulc);
			sb.append(",gelelc=" + gelelc);
			sb.append(",gchclc=" + gchclc);
			sb.append(",dnbbai=" + dnbbai);
			sb.append(",dnbdou=" + dnbdou);
			sb.append(",dnblav=" + dnblav);
			sb.append(",dnbwc=" + dnbwc);
			sb.append(",deqtlc=" + deqtlc);
			sb.append(",dcimlc=" + dcimlc);
			sb.append(",dcetde=" + dcetde);
			sb.append(",dcspde=" + dcspde);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.invar, other.invar);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tFileInputDelimited_8 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_5 - inputs:(table_bati_dep,row18)
				// outputs:(tab_bati_dep_total)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row18Struct> tHash_Lookup_row18 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row18Struct>(
						matchingModeEnum_row18,
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_Lookup_row18_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row18Struct createRowInstance() {
								return new row18Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row18.initPut();

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.target_path + "bati_article60.csv"/**
				 * End field
				 * tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						row18 = null;

						row18 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row18 = new row18Struct();
						try {

							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row18.ccodep = null;

								row18.ccodir = null;

								row18.ccocom = null;

								row18.invar = null;

								row18.dnupev = null;

								row18.article = null;

								row18.dnudes = null;

								row18.dsudep = null;

								row18.cconad = null;

								row18.asitet = null;

								row18.dmatgm = null;

								row18.dmatto = null;

								row18.detent = null;

								row18.geaulc = null;

								row18.gelelc = null;

								row18.gchclc = null;

								row18.dnbbai = null;

								row18.dnbdou = null;

								row18.dnblav = null;

								row18.dnbwc = null;

								row18.deqtlc = null;

								row18.dcimlc = null;

								row18.dcetde = null;

								row18.dcspde = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.ccodep = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.ccodep = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.ccodir = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.ccodir = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 2;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.ccocom = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.ccocom = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 3;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.invar = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.invar = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 4;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dnupev = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dnupev = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 5;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.article = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.article = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 6;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dnudes = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dnudes = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 7;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dsudep = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dsudep = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 8;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.cconad = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.cconad = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 9;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.asitet = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.asitet = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 10;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dmatgm = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dmatgm = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 11;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dmatto = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dmatto = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 12;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.detent = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.detent = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 13;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.geaulc = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.geaulc = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 14;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.gelelc = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.gelelc = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 15;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.gchclc = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.gchclc = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 16;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dnbbai = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dnbbai = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 17;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dnbdou = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dnbdou = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 18;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dnblav = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dnblav = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 19;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dnbwc = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dnbwc = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 20;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.deqtlc = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.deqtlc = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 21;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dcimlc = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dcimlc = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 22;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dcetde = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dcetde = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 23;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row18.dcspde = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row18.dcspde = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tAdvancedHash_row18 main ] start
							 */

							currentComponent = "tAdvancedHash_row18";

							row18Struct row18_HashRow = tHash_Lookup_row18
									.getNextFreeRow();

							row18_HashRow.ccodep = row18.ccodep;

							row18_HashRow.ccodir = row18.ccodir;

							row18_HashRow.ccocom = row18.ccocom;

							row18_HashRow.invar = row18.invar;

							row18_HashRow.dnupev = row18.dnupev;

							row18_HashRow.article = row18.article;

							row18_HashRow.dnudes = row18.dnudes;

							row18_HashRow.dsudep = row18.dsudep;

							row18_HashRow.cconad = row18.cconad;

							row18_HashRow.asitet = row18.asitet;

							row18_HashRow.dmatgm = row18.dmatgm;

							row18_HashRow.dmatto = row18.dmatto;

							row18_HashRow.detent = row18.detent;

							row18_HashRow.geaulc = row18.geaulc;

							row18_HashRow.gelelc = row18.gelelc;

							row18_HashRow.gchclc = row18.gchclc;

							row18_HashRow.dnbbai = row18.dnbbai;

							row18_HashRow.dnbdou = row18.dnbdou;

							row18_HashRow.dnblav = row18.dnblav;

							row18_HashRow.dnbwc = row18.dnbwc;

							row18_HashRow.deqtlc = row18.deqtlc;

							row18_HashRow.dcimlc = row18.dcimlc;

							row18_HashRow.dcetde = row18.dcetde;

							row18_HashRow.dcspde = row18.dcspde;

							tHash_Lookup_row18.put(row18_HashRow);

							tos_count_tAdvancedHash_row18++;

							/**
							 * [tAdvancedHash_row18 main ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape3_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape3_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String vsupot;

		public String getVsupot() {
			return this.vsupot;
		}

		public String vsurz1;

		public String getVsurz1() {
			return this.vsurz1;
		}

		public String vsurz2;

		public String getVsurz2() {
			return this.vsurz2;
		}

		public String vsurz3;

		public String getVsurz3() {
			return this.vsurz3;
		}

		public String vsurzt;

		public String getVsurzt() {
			return this.vsurzt;
		}

		public String vsurb1;

		public String getVsurb1() {
			return this.vsurb1;
		}

		public String vsurb2;

		public String getVsurb2() {
			return this.vsurb2;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime * result
						+ ((this.invar == null) ? 0 : this.invar.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.invar == null) {
				if (other.invar != null)
					return false;
			} else if (!this.invar.equals(other.invar))
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.ccodep = this.ccodep;
			other.ccodir = this.ccodir;
			other.ccocom = this.ccocom;
			other.invar = this.invar;
			other.dnupev = this.dnupev;
			other.article = this.article;
			other.dnudes = this.dnudes;
			other.vsupot = this.vsupot;
			other.vsurz1 = this.vsurz1;
			other.vsurz2 = this.vsurz2;
			other.vsurz3 = this.vsurz3;
			other.vsurzt = this.vsurzt;
			other.vsurb1 = this.vsurb1;
			other.vsurb2 = this.vsurb2;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.ccocom = this.ccocom;
			other.invar = this.invar;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape3_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape3_info_bati.length == 0) {
						commonByteArray_MAJIC_etape3_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape3_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape3_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape3_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape3_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.invar = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ccodep = readString(dis, ois);

				this.ccodir = readString(dis, ois);

				this.dnupev = readString(dis, ois);

				this.article = readString(dis, ois);

				this.dnudes = readString(dis, ois);

				this.vsupot = readString(dis, ois);

				this.vsurz1 = readString(dis, ois);

				this.vsurz2 = readString(dis, ois);

				this.vsurz3 = readString(dis, ois);

				this.vsurzt = readString(dis, ois);

				this.vsurb1 = readString(dis, ois);

				this.vsurb2 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ccodep, dos, oos);

				writeString(this.ccodir, dos, oos);

				writeString(this.dnupev, dos, oos);

				writeString(this.article, dos, oos);

				writeString(this.dnudes, dos, oos);

				writeString(this.vsupot, dos, oos);

				writeString(this.vsurz1, dos, oos);

				writeString(this.vsurz2, dos, oos);

				writeString(this.vsurz3, dos, oos);

				writeString(this.vsurzt, dos, oos);

				writeString(this.vsurb1, dos, oos);

				writeString(this.vsurb2, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",vsupot=" + vsupot);
			sb.append(",vsurz1=" + vsurz1);
			sb.append(",vsurz2=" + vsurz2);
			sb.append(",vsurz3=" + vsurz3);
			sb.append(",vsurzt=" + vsurzt);
			sb.append(",vsurb1=" + vsurb1);
			sb.append(",vsurb2=" + vsurb2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.invar, other.invar);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row9";

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tFileInputDelimited_7 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row9,row9) |
				// target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
				// linked node: tMap_4 - inputs:(table_bati_act,row9)
				// outputs:(table_bati_act_total)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct> tHash_Lookup_row9 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct>(
						matchingModeEnum_row9,
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_Lookup_row9_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row9Struct createRowInstance() {
								return new row9Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row9.initPut();

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				context.target_path + "bati_article50.csv"/**
				 * End field
				 * tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('"');

						csvReadertFileInputDelimited_7
								.setEscapeChar(csvReadertFileInputDelimited_7
										.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('"');

							csvReadertFileInputDelimited_7
									.setEscapeChar(csvReadertFileInputDelimited_7
											.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row9 = null;

						row9 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row9 = new row9Struct();
						try {

							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row9.ccodep = null;

								row9.ccodir = null;

								row9.ccocom = null;

								row9.invar = null;

								row9.dnupev = null;

								row9.article = null;

								row9.dnudes = null;

								row9.vsupot = null;

								row9.vsurz1 = null;

								row9.vsurz2 = null;

								row9.vsurz3 = null;

								row9.vsurzt = null;

								row9.vsurb1 = null;

								row9.vsurb2 = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.ccodep = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.ccodep = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.ccodir = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.ccodir = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.ccocom = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.ccocom = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.invar = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.invar = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 4;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.dnupev = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.dnupev = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 5;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.article = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.article = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 6;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.dnudes = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.dnudes = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 7;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.vsupot = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.vsupot = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 8;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.vsurz1 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.vsurz1 = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 9;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.vsurz2 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.vsurz2 = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 10;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.vsurz3 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.vsurz3 = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 11;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.vsurzt = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.vsurzt = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 12;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.vsurb1 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.vsurb1 = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 13;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row9.vsurb2 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row9.vsurb2 = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tAdvancedHash_row9 main ] start
							 */

							currentComponent = "tAdvancedHash_row9";

							row9Struct row9_HashRow = tHash_Lookup_row9
									.getNextFreeRow();

							row9_HashRow.ccodep = row9.ccodep;

							row9_HashRow.ccodir = row9.ccodir;

							row9_HashRow.ccocom = row9.ccocom;

							row9_HashRow.invar = row9.invar;

							row9_HashRow.dnupev = row9.dnupev;

							row9_HashRow.article = row9.article;

							row9_HashRow.dnudes = row9.dnudes;

							row9_HashRow.vsupot = row9.vsupot;

							row9_HashRow.vsurz1 = row9.vsurz1;

							row9_HashRow.vsurz2 = row9.vsurz2;

							row9_HashRow.vsurz3 = row9.vsurz3;

							row9_HashRow.vsurzt = row9.vsurzt;

							row9_HashRow.vsurb1 = row9.vsurb1;

							row9_HashRow.vsurb2 = row9.vsurb2;

							tHash_Lookup_row9.put(row9_HashRow);

							tos_count_tAdvancedHash_row9++;

							/**
							 * [tAdvancedHash_row9 main ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_1 begin ] start
				 */

				ok_Hash.put("tFileExist_1", false);
				start_Hash.put("tFileExist_1", System.currentTimeMillis());
				currentComponent = "tFileExist_1";

				int tos_count_tFileExist_1 = 0;

				/**
				 * [tFileExist_1 begin ] stop
				 */
				/**
				 * [tFileExist_1 main ] start
				 */

				currentComponent = "tFileExist_1";

				java.io.File file_tFileExist_1 = new java.io.File(
						context.target_path + "bati_info_temp.csv");
				if (!file_tFileExist_1.exists()) {
					globalMap.put("tFileExist_1_EXISTS", false);
				} else {
					globalMap.put("tFileExist_1_EXISTS", true);
				}

				globalMap.put("tFileExist_1_FILENAME", context.target_path
						+ "bati_info_temp.csv");

				tos_count_tFileExist_1++;

				/**
				 * [tFileExist_1 main ] stop
				 */
				/**
				 * [tFileExist_1 end ] start
				 */

				currentComponent = "tFileExist_1";

				ok_Hash.put("tFileExist_1", true);
				end_Hash.put("tFileExist_1", System.currentTimeMillis());

				tFileDelete_1Process(globalMap);

				/**
				 * [tFileExist_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());
				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */
				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						context.target_path + "bati_info_temp.csv");
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exists or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", context.target_path
						+ "bati_info_temp.csv");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */
				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tFileDelete_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final etape3_info_bati etape3_info_batiClass = new etape3_info_bati();

		int exitCode = etape3_info_batiClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = etape3_info_bati.class
					.getClassLoader().getResourceAsStream(
							"majic/etape3_info_bati_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.externals_path = (String) context
					.getProperty("externals_path");
			context.extfichier = (String) context.getProperty("extfichier");
			context.nbat10 = (String) context.getProperty("nbat10");
			context.source_path = (String) context.getProperty("source_path");
			context.target_path = (String) context.getProperty("target_path");
			context.temp_path = (String) context.getProperty("temp_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("externals_path")) {
				context.externals_path = (String) parentContextMap
						.get("externals_path");
			}
			if (parentContextMap.containsKey("extfichier")) {
				context.extfichier = (String) parentContextMap
						.get("extfichier");
			}
			if (parentContextMap.containsKey("nbat10")) {
				context.nbat10 = (String) parentContextMap.get("nbat10");
			}
			if (parentContextMap.containsKey("source_path")) {
				context.source_path = (String) parentContextMap
						.get("source_path");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
			if (parentContextMap.containsKey("temp_path")) {
				context.temp_path = (String) parentContextMap.get("temp_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileExist_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileExist_1) {

			e_tFileExist_1.printStackTrace();
			globalMap.put("tFileExist_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : etape3_info_bati");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 569995 characters generated by Talend Open Studio for Data Integration on the
 * 8 janvier 2014 18:58:43 CET
 ************************************************************************************************/
