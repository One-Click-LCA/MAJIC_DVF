// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package majic.etape4_info_bati_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.OpenStreetMap;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.GeometryUtility;
import routines.GeometryOperation;
import routines.GeoOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: etape4_info_bati Purpose: <br>
 * Description:  <br>
 * @author thomas.brosset@quelleville.fr
 * @version 5.3.1.r104014
 * @status 
 */
public class etape4_info_bati implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (extfichier != null) {

				this.setProperty("extfichier", extfichier.toString());

			}

			if (nbat10 != null) {

				this.setProperty("nbat10", nbat10.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

		}

		public String extfichier;

		public String getExtfichier() {
			return this.extfichier;
		}

		public String nbat10;

		public String getNbat10() {
			return this.nbat10;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "etape4_info_bati";
	private final String projectName = "MAJIC";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					etape4_info_bati.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(etape4_info_bati.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_1_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_1_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_1_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_3_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_3_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_5_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_5_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_6_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_6_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_9_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_9_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_9_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_9_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_3_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_3_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_11_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_11_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_11_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_11_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_10_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_10_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_10_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_10_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_4_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_4_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_12_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_12_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_12_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_12_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_2_AGGIN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_3 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_prop;

		public Integer getNb_prop() {
			return this.nb_prop;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_prop = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_prop, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_prop=" + String.valueOf(nb_prop));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_5 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_prop;

		public Integer getNb_prop() {
			return this.nb_prop;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_prop = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_prop, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_prop=" + String.valueOf(nb_prop));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public Integer nb_prop;

		public Integer getNb_prop() {
			return this.nb_prop;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nb_prop = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// Integer

				writeInteger(this.nb_prop, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nb_prop=" + String.valueOf(nb_prop));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_6 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public Integer nb_prop;

		public Integer getNb_prop() {
			return this.nb_prop;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nb_prop = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// Integer

				writeInteger(this.nb_prop, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nb_prop=" + String.valueOf(nb_prop));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nature_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.nature_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nature_local=" + nature_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_11 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_11> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nature_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.nature_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nature_local=" + nature_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_11 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nature_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.nature_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nature_local=" + nature_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_3 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nature_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.nature_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nature_local=" + nature_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nature_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.nature_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nature_local=" + nature_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_9 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_9> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nature_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.nature_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nature_local=" + nature_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_9 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_12 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_12> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_12 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_4 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_4> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_10 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_10> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_10 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nb_prop;

		public String getNb_prop() {
			return this.nb_prop;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nb_prop = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nb_prop, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nb_prop=" + nb_prop);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nb_prop;

		public String getNb_prop() {
			return this.nb_prop;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nb_prop = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nb_prop, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nb_prop=" + nb_prop);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nb_prop;

		public String getNb_prop() {
			return this.nb_prop;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nb_prop = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nb_prop, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nb_prop=" + nb_prop);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nb_prop;

		public String getNb_prop() {
			return this.nb_prop;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nb_prop = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nb_prop, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nb_prop=" + nb_prop);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nb_prop;

		public String getNb_prop() {
			return this.nb_prop;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nb_prop = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nb_prop, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nb_prop=" + nb_prop);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nb_prop;

		public String getNb_prop() {
			return this.nb_prop;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nb_prop = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nb_prop, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nb_prop=" + nb_prop);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape4_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape4_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nb_prop;

		public String getNb_prop() {
			return this.nb_prop;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape4_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape4_info_bati.length == 0) {
						commonByteArray_MAJIC_etape4_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape4_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape4_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape4_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape4_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nb_prop = readString(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nb_prop, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nb_prop=" + nb_prop);
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row3Struct row3 = new row3Struct();
				row16Struct row16 = new row16Struct();
				row2Struct row2 = new row2Struct();
				row15Struct row15 = new row15Struct();
				row9Struct row9 = new row9Struct();
				row10Struct row10 = new row10Struct();
				row13Struct row13 = new row13Struct();
				row12Struct row12 = new row12Struct();
				row18Struct row18 = new row18Struct();
				row20Struct row20 = new row20Struct();
				row22Struct row22 = new row22Struct();
				row24Struct row24 = new row24Struct();
				row19Struct row19 = new row19Struct();
				row21Struct row21 = new row21Struct();
				row23Struct row23 = new row23Struct();
				row25Struct row25 = new row25Struct();
				row6Struct row6 = new row6Struct();
				row14Struct row14 = new row14Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_1_AGGOUT";

				int tos_count_tAggregateRow_1_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					String dnubat;
					String nature_local;
					String type_local;
					Integer nb_niv_max;
					Integer shon_totale_sum;
					Integer shon_habitat_sum;
					Integer shon_activite_sum;
					Integer nb_logts_sum;
					Integer nb_logts_hlm_sum;
					Integer nb_logts_sem_sum;
					Integer nb_logts_hlm_sem_sum;
					Integer nb_logts_vacants_sum;
					Integer nb_logts_prop_occup_sum;
					Integer nb_logts_loc_sum;
					Integer nb_locaux_sum;
					Integer nb_locaux_vacants_sum;
					Integer annee_constr_min_min;
					Integer annee_constr_max_max;
					Double annee_constr_moy_sum;
					int annee_constr_moy_count = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							result = prime
									* result
									+ ((this.dnubat == null) ? 0 : this.dnubat
											.hashCode());

							result = prime
									* result
									+ ((this.nature_local == null) ? 0
											: this.nature_local.hashCode());

							result = prime
									* result
									+ ((this.type_local == null) ? 0
											: this.type_local.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						if (this.dnubat == null) {
							if (other.dnubat != null)
								return false;
						} else if (!this.dnubat.equals(other.dnubat))
							return false;

						if (this.nature_local == null) {
							if (other.nature_local != null)
								return false;
						} else if (!this.nature_local
								.equals(other.nature_local))
							return false;

						if (this.type_local == null) {
							if (other.type_local != null)
								return false;
						} else if (!this.type_local.equals(other.type_local))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGOUT", false);
				start_Hash.put("tAggregateRow_5_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_5_AGGOUT";

				int tos_count_tAggregateRow_5_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

				class AggCountDistinctValuesStruct_nb_prop_tAggregateRow_5 { // G_OutBegin_AggR_1100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					String dnubat;
					String nb_prop;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							result = prime
									* result
									+ ((this.dnubat == null) ? 0 : this.dnubat
											.hashCode());

							result = prime
									* result
									+ ((this.nb_prop == null) ? 0
											: this.nb_prop.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggCountDistinctValuesStruct_nb_prop_tAggregateRow_5 other = (AggCountDistinctValuesStruct_nb_prop_tAggregateRow_5) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						if (this.dnubat == null) {
							if (other.dnubat != null)
								return false;
						} else if (!this.dnubat.equals(other.dnubat))
							return false;

						if (this.nb_prop == null) {
							if (other.nb_prop != null)
								return false;
						} else if (!this.nb_prop.equals(other.nb_prop))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_1100

				class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					String dnubat;
					java.util.Set<AggCountDistinctValuesStruct_nb_prop_tAggregateRow_5> distinctValues_nb_prop = new java.util.HashSet<AggCountDistinctValuesStruct_nb_prop_tAggregateRow_5>();

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							result = prime
									* result
									+ ((this.dnubat == null) ? 0 : this.dnubat
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						if (this.dnubat == null) {
							if (other.dnubat != null)
								return false;
						} else if (!this.dnubat.equals(other.dnubat))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
				AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
				java.util.Map<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5>();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_6_AGGOUT", false);
				start_Hash.put("tAggregateRow_6_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_6_AGGOUT";

				int tos_count_tAggregateRow_6_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_6 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_6 utilClass_tAggregateRow_6 = new UtilClass_tAggregateRow_6();

				class AggCountDistinctValuesStruct_nb_prop_tAggregateRow_6 { // G_OutBegin_AggR_1100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					String nb_prop;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							result = prime
									* result
									+ ((this.nb_prop == null) ? 0
											: this.nb_prop.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggCountDistinctValuesStruct_nb_prop_tAggregateRow_6 other = (AggCountDistinctValuesStruct_nb_prop_tAggregateRow_6) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						if (this.nb_prop == null) {
							if (other.nb_prop != null)
								return false;
						} else if (!this.nb_prop.equals(other.nb_prop))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_1100

				class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					java.util.Set<AggCountDistinctValuesStruct_nb_prop_tAggregateRow_6> distinctValues_nb_prop = new java.util.HashSet<AggCountDistinctValuesStruct_nb_prop_tAggregateRow_6>();

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
				AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
				java.util.Map<AggOperationStruct_tAggregateRow_6, AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6, AggOperationStruct_tAggregateRow_6>();

				/**
				 * [tAggregateRow_6_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_9_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_9_AGGOUT", false);
				start_Hash.put("tAggregateRow_9_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_9_AGGOUT";

				int tos_count_tAggregateRow_9_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_9 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_9 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					String nature_local;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							result = prime
									* result
									+ ((this.nature_local == null) ? 0
											: this.nature_local.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_9 other = (AggOperationStruct_tAggregateRow_9) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						if (this.nature_local == null) {
							if (other.nature_local != null)
								return false;
						} else if (!this.nature_local
								.equals(other.nature_local))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_9 operation_result_tAggregateRow_9 = null;
				AggOperationStruct_tAggregateRow_9 operation_finder_tAggregateRow_9 = new AggOperationStruct_tAggregateRow_9();
				java.util.Map<AggOperationStruct_tAggregateRow_9, AggOperationStruct_tAggregateRow_9> hash_tAggregateRow_9 = new java.util.HashMap<AggOperationStruct_tAggregateRow_9, AggOperationStruct_tAggregateRow_9>();

				/**
				 * [tAggregateRow_9_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_10_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_10_AGGOUT", false);
				start_Hash.put("tAggregateRow_10_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_10_AGGOUT";

				int tos_count_tAggregateRow_10_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_10 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_10 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					String type_local;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							result = prime
									* result
									+ ((this.type_local == null) ? 0
											: this.type_local.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_10 other = (AggOperationStruct_tAggregateRow_10) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						if (this.type_local == null) {
							if (other.type_local != null)
								return false;
						} else if (!this.type_local.equals(other.type_local))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_10 operation_result_tAggregateRow_10 = null;
				AggOperationStruct_tAggregateRow_10 operation_finder_tAggregateRow_10 = new AggOperationStruct_tAggregateRow_10();
				java.util.Map<AggOperationStruct_tAggregateRow_10, AggOperationStruct_tAggregateRow_10> hash_tAggregateRow_10 = new java.util.HashMap<AggOperationStruct_tAggregateRow_10, AggOperationStruct_tAggregateRow_10>();

				/**
				 * [tAggregateRow_10_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_2_AGGOUT";

				int tos_count_tAggregateRow_2_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					Integer nb_niv_max;
					Integer shon_totale_sum;
					Integer shon_habitat_sum;
					Integer shon_activite_sum;
					Integer nb_logts_sum;
					Integer nb_logts_hlm_sum;
					Integer nb_logts_sem_sum;
					Integer nb_logts_hlm_sem_sum;
					Integer nb_logts_vacants_sum;
					Integer nb_logts_prop_occup_sum;
					Integer nb_logts_loc_sum;
					Integer nb_locaux_sum;
					Integer nb_locaux_vacants_sum;
					Integer annee_constr_min_min;
					Integer annee_constr_max_max;
					Integer annee_constr_moy_max;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());
				currentComponent = "tReplicate_1";

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.target_path + "bati_info_temp.csv"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 0; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 0; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.ccocom = null;

								row1.id_parc = null;

								row1.dnubat = null;

								row1.nb_niv = null;

								row1.shon_totale = null;

								row1.shon_habitat = null;

								row1.shon_activite = null;

								row1.nb_logts = null;

								row1.nb_logts_hlm = null;

								row1.nb_logts_sem = null;

								row1.nb_logts_hlm_sem = null;

								row1.nb_logts_vacants = null;

								row1.nb_logts_prop_occup = null;

								row1.nb_logts_loc = null;

								row1.nb_locaux = null;

								row1.nb_locaux_vacants = null;

								row1.nb_prop = null;

								row1.nature_local = null;

								row1.type_local = null;

								row1.annee_constr_min = null;

								row1.annee_constr_max = null;

								row1.annee_constr_moy = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ccocom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ccocom = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.id_parc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.id_parc = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dnubat = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.dnubat = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_niv = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_niv = null;
									}

								} else {
									row1.nb_niv = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.shon_totale = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.shon_totale = null;
									}

								} else {
									row1.shon_totale = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.shon_habitat = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.shon_habitat = null;
									}

								} else {
									row1.shon_habitat = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.shon_activite = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.shon_activite = null;
									}

								} else {
									row1.shon_activite = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_logts = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_logts = null;
									}

								} else {
									row1.nb_logts = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_logts_hlm = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_logts_hlm = null;
									}

								} else {
									row1.nb_logts_hlm = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_logts_sem = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_logts_sem = null;
									}

								} else {
									row1.nb_logts_sem = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_logts_hlm_sem = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_logts_hlm_sem = null;
									}

								} else {
									row1.nb_logts_hlm_sem = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_logts_vacants = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_logts_vacants = null;
									}

								} else {
									row1.nb_logts_vacants = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_logts_prop_occup = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_logts_prop_occup = null;
									}

								} else {
									row1.nb_logts_prop_occup = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_logts_loc = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_logts_loc = null;
									}

								} else {
									row1.nb_logts_loc = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_locaux = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_locaux = null;
									}

								} else {
									row1.nb_locaux = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.nb_locaux_vacants = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.nb_locaux_vacants = null;
									}

								} else {
									row1.nb_locaux_vacants = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.nb_prop = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.nb_prop = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.nature_local = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.nature_local = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.type_local = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.type_local = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.annee_constr_min = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.annee_constr_min = null;
									}

								} else {
									row1.annee_constr_min = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.annee_constr_max = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.annee_constr_max = null;
									}

								} else {
									row1.annee_constr_max = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.annee_constr_moy = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.annee_constr_moy = null;
									}

								} else {
									row1.annee_constr_moy = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tReplicate_1 main ] start
							 */

							currentComponent = "tReplicate_1";

							row3 = new row3Struct();

							row3.ccocom = row1.ccocom;
							row3.id_parc = row1.id_parc;
							row3.dnubat = row1.dnubat;
							row3.nb_niv = row1.nb_niv;
							row3.shon_totale = row1.shon_totale;
							row3.shon_habitat = row1.shon_habitat;
							row3.shon_activite = row1.shon_activite;
							row3.nb_logts = row1.nb_logts;
							row3.nb_logts_hlm = row1.nb_logts_hlm;
							row3.nb_logts_sem = row1.nb_logts_sem;
							row3.nb_logts_hlm_sem = row1.nb_logts_hlm_sem;
							row3.nb_logts_vacants = row1.nb_logts_vacants;
							row3.nb_logts_prop_occup = row1.nb_logts_prop_occup;
							row3.nb_logts_loc = row1.nb_logts_loc;
							row3.nb_locaux = row1.nb_locaux;
							row3.nb_locaux_vacants = row1.nb_locaux_vacants;
							row3.nb_prop = row1.nb_prop;
							row3.nature_local = row1.nature_local;
							row3.type_local = row1.type_local;
							row3.annee_constr_min = row1.annee_constr_min;
							row3.annee_constr_max = row1.annee_constr_max;
							row3.annee_constr_moy = row1.annee_constr_moy;
							row9 = new row9Struct();

							row9.ccocom = row1.ccocom;
							row9.id_parc = row1.id_parc;
							row9.dnubat = row1.dnubat;
							row9.nb_niv = row1.nb_niv;
							row9.shon_totale = row1.shon_totale;
							row9.shon_habitat = row1.shon_habitat;
							row9.shon_activite = row1.shon_activite;
							row9.nb_logts = row1.nb_logts;
							row9.nb_logts_hlm = row1.nb_logts_hlm;
							row9.nb_logts_sem = row1.nb_logts_sem;
							row9.nb_logts_hlm_sem = row1.nb_logts_hlm_sem;
							row9.nb_logts_vacants = row1.nb_logts_vacants;
							row9.nb_logts_prop_occup = row1.nb_logts_prop_occup;
							row9.nb_logts_loc = row1.nb_logts_loc;
							row9.nb_locaux = row1.nb_locaux;
							row9.nb_locaux_vacants = row1.nb_locaux_vacants;
							row9.nb_prop = row1.nb_prop;
							row9.nature_local = row1.nature_local;
							row9.type_local = row1.type_local;
							row9.annee_constr_min = row1.annee_constr_min;
							row9.annee_constr_max = row1.annee_constr_max;
							row9.annee_constr_moy = row1.annee_constr_moy;
							row13 = new row13Struct();

							row13.ccocom = row1.ccocom;
							row13.id_parc = row1.id_parc;
							row13.dnubat = row1.dnubat;
							row13.nb_niv = row1.nb_niv;
							row13.shon_totale = row1.shon_totale;
							row13.shon_habitat = row1.shon_habitat;
							row13.shon_activite = row1.shon_activite;
							row13.nb_logts = row1.nb_logts;
							row13.nb_logts_hlm = row1.nb_logts_hlm;
							row13.nb_logts_sem = row1.nb_logts_sem;
							row13.nb_logts_hlm_sem = row1.nb_logts_hlm_sem;
							row13.nb_logts_vacants = row1.nb_logts_vacants;
							row13.nb_logts_prop_occup = row1.nb_logts_prop_occup;
							row13.nb_logts_loc = row1.nb_logts_loc;
							row13.nb_locaux = row1.nb_locaux;
							row13.nb_locaux_vacants = row1.nb_locaux_vacants;
							row13.nb_prop = row1.nb_prop;
							row13.nature_local = row1.nature_local;
							row13.type_local = row1.type_local;
							row13.annee_constr_min = row1.annee_constr_min;
							row13.annee_constr_max = row1.annee_constr_max;
							row13.annee_constr_moy = row1.annee_constr_moy;
							row18 = new row18Struct();

							row18.ccocom = row1.ccocom;
							row18.id_parc = row1.id_parc;
							row18.dnubat = row1.dnubat;
							row18.nb_niv = row1.nb_niv;
							row18.shon_totale = row1.shon_totale;
							row18.shon_habitat = row1.shon_habitat;
							row18.shon_activite = row1.shon_activite;
							row18.nb_logts = row1.nb_logts;
							row18.nb_logts_hlm = row1.nb_logts_hlm;
							row18.nb_logts_sem = row1.nb_logts_sem;
							row18.nb_logts_hlm_sem = row1.nb_logts_hlm_sem;
							row18.nb_logts_vacants = row1.nb_logts_vacants;
							row18.nb_logts_prop_occup = row1.nb_logts_prop_occup;
							row18.nb_logts_loc = row1.nb_logts_loc;
							row18.nb_locaux = row1.nb_locaux;
							row18.nb_locaux_vacants = row1.nb_locaux_vacants;
							row18.nb_prop = row1.nb_prop;
							row18.nature_local = row1.nature_local;
							row18.type_local = row1.type_local;
							row18.annee_constr_min = row1.annee_constr_min;
							row18.annee_constr_max = row1.annee_constr_max;
							row18.annee_constr_moy = row1.annee_constr_moy;
							row19 = new row19Struct();

							row19.ccocom = row1.ccocom;
							row19.id_parc = row1.id_parc;
							row19.dnubat = row1.dnubat;
							row19.nb_niv = row1.nb_niv;
							row19.shon_totale = row1.shon_totale;
							row19.shon_habitat = row1.shon_habitat;
							row19.shon_activite = row1.shon_activite;
							row19.nb_logts = row1.nb_logts;
							row19.nb_logts_hlm = row1.nb_logts_hlm;
							row19.nb_logts_sem = row1.nb_logts_sem;
							row19.nb_logts_hlm_sem = row1.nb_logts_hlm_sem;
							row19.nb_logts_vacants = row1.nb_logts_vacants;
							row19.nb_logts_prop_occup = row1.nb_logts_prop_occup;
							row19.nb_logts_loc = row1.nb_logts_loc;
							row19.nb_locaux = row1.nb_locaux;
							row19.nb_locaux_vacants = row1.nb_locaux_vacants;
							row19.nb_prop = row1.nb_prop;
							row19.nature_local = row1.nature_local;
							row19.type_local = row1.type_local;
							row19.annee_constr_min = row1.annee_constr_min;
							row19.annee_constr_max = row1.annee_constr_max;
							row19.annee_constr_moy = row1.annee_constr_moy;
							row6 = new row6Struct();

							row6.ccocom = row1.ccocom;
							row6.id_parc = row1.id_parc;
							row6.dnubat = row1.dnubat;
							row6.nb_niv = row1.nb_niv;
							row6.shon_totale = row1.shon_totale;
							row6.shon_habitat = row1.shon_habitat;
							row6.shon_activite = row1.shon_activite;
							row6.nb_logts = row1.nb_logts;
							row6.nb_logts_hlm = row1.nb_logts_hlm;
							row6.nb_logts_sem = row1.nb_logts_sem;
							row6.nb_logts_hlm_sem = row1.nb_logts_hlm_sem;
							row6.nb_logts_vacants = row1.nb_logts_vacants;
							row6.nb_logts_prop_occup = row1.nb_logts_prop_occup;
							row6.nb_logts_loc = row1.nb_logts_loc;
							row6.nb_locaux = row1.nb_locaux;
							row6.nb_locaux_vacants = row1.nb_locaux_vacants;
							row6.nb_prop = row1.nb_prop;
							row6.nature_local = row1.nature_local;
							row6.type_local = row1.type_local;
							row6.annee_constr_min = row1.annee_constr_min;
							row6.annee_constr_max = row1.annee_constr_max;
							row6.annee_constr_moy = row1.annee_constr_moy;

							tos_count_tReplicate_1++;

							/**
							 * [tReplicate_1 main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_1_AGGOUT";

							operation_finder_tAggregateRow_1.ccocom = row3.ccocom;
							operation_finder_tAggregateRow_1.id_parc = row3.id_parc;
							operation_finder_tAggregateRow_1.dnubat = row3.dnubat;
							operation_finder_tAggregateRow_1.nature_local = row3.nature_local;
							operation_finder_tAggregateRow_1.type_local = row3.type_local;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							boolean isFirstAdd_tAggregateRow_1 = false;

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.ccocom = operation_finder_tAggregateRow_1.ccocom;
								operation_result_tAggregateRow_1.id_parc = operation_finder_tAggregateRow_1.id_parc;
								operation_result_tAggregateRow_1.dnubat = operation_finder_tAggregateRow_1.dnubat;
								operation_result_tAggregateRow_1.nature_local = operation_finder_tAggregateRow_1.nature_local;
								operation_result_tAggregateRow_1.type_local = operation_finder_tAggregateRow_1.type_local;

								isFirstAdd_tAggregateRow_1 = true;

								hash_tAggregateRow_1.put(
										operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_1.nb_niv_max == null
									|| row3.nb_niv > operation_result_tAggregateRow_1.nb_niv_max

							) {
								operation_result_tAggregateRow_1.nb_niv_max = row3.nb_niv;
							}

							if (operation_result_tAggregateRow_1.shon_totale_sum == null) {
								operation_result_tAggregateRow_1.shon_totale_sum = (int) 0;
							}

							if (row3.shon_totale != null)
								operation_result_tAggregateRow_1.shon_totale_sum += row3.shon_totale;
							if (operation_result_tAggregateRow_1.shon_habitat_sum == null) {
								operation_result_tAggregateRow_1.shon_habitat_sum = (int) 0;
							}

							if (row3.shon_habitat != null)
								operation_result_tAggregateRow_1.shon_habitat_sum += row3.shon_habitat;
							if (operation_result_tAggregateRow_1.shon_activite_sum == null) {
								operation_result_tAggregateRow_1.shon_activite_sum = (int) 0;
							}

							if (row3.shon_activite != null)
								operation_result_tAggregateRow_1.shon_activite_sum += row3.shon_activite;
							if (operation_result_tAggregateRow_1.nb_logts_sum == null) {
								operation_result_tAggregateRow_1.nb_logts_sum = (int) 0;
							}

							if (row3.nb_logts != null)
								operation_result_tAggregateRow_1.nb_logts_sum += row3.nb_logts;
							if (operation_result_tAggregateRow_1.nb_logts_hlm_sum == null) {
								operation_result_tAggregateRow_1.nb_logts_hlm_sum = (int) 0;
							}

							if (row3.nb_logts_hlm != null)
								operation_result_tAggregateRow_1.nb_logts_hlm_sum += row3.nb_logts_hlm;
							if (operation_result_tAggregateRow_1.nb_logts_sem_sum == null) {
								operation_result_tAggregateRow_1.nb_logts_sem_sum = (int) 0;
							}

							if (row3.nb_logts_sem != null)
								operation_result_tAggregateRow_1.nb_logts_sem_sum += row3.nb_logts_sem;
							if (operation_result_tAggregateRow_1.nb_logts_hlm_sem_sum == null) {
								operation_result_tAggregateRow_1.nb_logts_hlm_sem_sum = (int) 0;
							}

							if (row3.nb_logts_hlm_sem != null)
								operation_result_tAggregateRow_1.nb_logts_hlm_sem_sum += row3.nb_logts_hlm_sem;
							if (operation_result_tAggregateRow_1.nb_logts_vacants_sum == null) {
								operation_result_tAggregateRow_1.nb_logts_vacants_sum = (int) 0;
							}

							if (row3.nb_logts_vacants != null)
								operation_result_tAggregateRow_1.nb_logts_vacants_sum += row3.nb_logts_vacants;
							if (operation_result_tAggregateRow_1.nb_logts_prop_occup_sum == null) {
								operation_result_tAggregateRow_1.nb_logts_prop_occup_sum = (int) 0;
							}

							if (row3.nb_logts_prop_occup != null)
								operation_result_tAggregateRow_1.nb_logts_prop_occup_sum += row3.nb_logts_prop_occup;
							if (operation_result_tAggregateRow_1.nb_logts_loc_sum == null) {
								operation_result_tAggregateRow_1.nb_logts_loc_sum = (int) 0;
							}

							if (row3.nb_logts_loc != null)
								operation_result_tAggregateRow_1.nb_logts_loc_sum += row3.nb_logts_loc;
							if (operation_result_tAggregateRow_1.nb_locaux_sum == null) {
								operation_result_tAggregateRow_1.nb_locaux_sum = (int) 0;
							}

							if (row3.nb_locaux != null)
								operation_result_tAggregateRow_1.nb_locaux_sum += row3.nb_locaux;
							if (operation_result_tAggregateRow_1.nb_locaux_vacants_sum == null) {
								operation_result_tAggregateRow_1.nb_locaux_vacants_sum = (int) 0;
							}

							if (row3.nb_locaux_vacants != null)
								operation_result_tAggregateRow_1.nb_locaux_vacants_sum += row3.nb_locaux_vacants;
							if (operation_result_tAggregateRow_1.annee_constr_min_min == null
									|| row3.annee_constr_min < operation_result_tAggregateRow_1.annee_constr_min_min

							) {
								operation_result_tAggregateRow_1.annee_constr_min_min = row3.annee_constr_min;
							}

							if (operation_result_tAggregateRow_1.annee_constr_max_max == null
									|| row3.annee_constr_max > operation_result_tAggregateRow_1.annee_constr_max_max

							) {
								operation_result_tAggregateRow_1.annee_constr_max_max = row3.annee_constr_max;
							}

							operation_result_tAggregateRow_1.annee_constr_moy_count++;

							if (operation_result_tAggregateRow_1.annee_constr_moy_sum == null) {
								operation_result_tAggregateRow_1.annee_constr_moy_sum = (double) 0;
							}

							if (row3.annee_constr_moy != null)
								operation_result_tAggregateRow_1.annee_constr_moy_sum += row3.annee_constr_moy;

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_5_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_5_AGGOUT";

							operation_finder_tAggregateRow_5.ccocom = row9.ccocom;
							operation_finder_tAggregateRow_5.id_parc = row9.id_parc;
							operation_finder_tAggregateRow_5.dnubat = row9.dnubat;

							operation_finder_tAggregateRow_5.hashCodeDirty = true;

							operation_result_tAggregateRow_5 = hash_tAggregateRow_5
									.get(operation_finder_tAggregateRow_5);

							if (operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

								operation_result_tAggregateRow_5.ccocom = operation_finder_tAggregateRow_5.ccocom;
								operation_result_tAggregateRow_5.id_parc = operation_finder_tAggregateRow_5.id_parc;
								operation_result_tAggregateRow_5.dnubat = operation_finder_tAggregateRow_5.dnubat;

								hash_tAggregateRow_5.put(
										operation_result_tAggregateRow_5,
										operation_result_tAggregateRow_5);

							} // G_OutMain_AggR_001

							AggCountDistinctValuesStruct_nb_prop_tAggregateRow_5 countDistinctValues_nb_prop_tAggregateRow_5 = new AggCountDistinctValuesStruct_nb_prop_tAggregateRow_5();

							countDistinctValues_nb_prop_tAggregateRow_5.ccocom = row9.ccocom;
							countDistinctValues_nb_prop_tAggregateRow_5.id_parc = row9.id_parc;
							countDistinctValues_nb_prop_tAggregateRow_5.dnubat = row9.dnubat;

							countDistinctValues_nb_prop_tAggregateRow_5.nb_prop = row9.nb_prop;
							operation_result_tAggregateRow_5.distinctValues_nb_prop
									.add(countDistinctValues_nb_prop_tAggregateRow_5);

							tos_count_tAggregateRow_5_AGGOUT++;

							/**
							 * [tAggregateRow_5_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_6_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_6_AGGOUT";

							operation_finder_tAggregateRow_6.ccocom = row13.ccocom;
							operation_finder_tAggregateRow_6.id_parc = row13.id_parc;

							operation_finder_tAggregateRow_6.hashCodeDirty = true;

							operation_result_tAggregateRow_6 = hash_tAggregateRow_6
									.get(operation_finder_tAggregateRow_6);

							if (operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

								operation_result_tAggregateRow_6.ccocom = operation_finder_tAggregateRow_6.ccocom;
								operation_result_tAggregateRow_6.id_parc = operation_finder_tAggregateRow_6.id_parc;

								hash_tAggregateRow_6.put(
										operation_result_tAggregateRow_6,
										operation_result_tAggregateRow_6);

							} // G_OutMain_AggR_001

							AggCountDistinctValuesStruct_nb_prop_tAggregateRow_6 countDistinctValues_nb_prop_tAggregateRow_6 = new AggCountDistinctValuesStruct_nb_prop_tAggregateRow_6();

							countDistinctValues_nb_prop_tAggregateRow_6.ccocom = row13.ccocom;
							countDistinctValues_nb_prop_tAggregateRow_6.id_parc = row13.id_parc;

							countDistinctValues_nb_prop_tAggregateRow_6.nb_prop = row13.nb_prop;
							operation_result_tAggregateRow_6.distinctValues_nb_prop
									.add(countDistinctValues_nb_prop_tAggregateRow_6);

							tos_count_tAggregateRow_6_AGGOUT++;

							/**
							 * [tAggregateRow_6_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_9_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_9_AGGOUT";

							operation_finder_tAggregateRow_9.ccocom = row18.ccocom;
							operation_finder_tAggregateRow_9.id_parc = row18.id_parc;
							operation_finder_tAggregateRow_9.nature_local = row18.nature_local;

							operation_finder_tAggregateRow_9.hashCodeDirty = true;

							operation_result_tAggregateRow_9 = hash_tAggregateRow_9
									.get(operation_finder_tAggregateRow_9);

							if (operation_result_tAggregateRow_9 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_9 = new AggOperationStruct_tAggregateRow_9();

								operation_result_tAggregateRow_9.ccocom = operation_finder_tAggregateRow_9.ccocom;
								operation_result_tAggregateRow_9.id_parc = operation_finder_tAggregateRow_9.id_parc;
								operation_result_tAggregateRow_9.nature_local = operation_finder_tAggregateRow_9.nature_local;

								hash_tAggregateRow_9.put(
										operation_result_tAggregateRow_9,
										operation_result_tAggregateRow_9);

							} // G_OutMain_AggR_001

							tos_count_tAggregateRow_9_AGGOUT++;

							/**
							 * [tAggregateRow_9_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_10_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_10_AGGOUT";

							operation_finder_tAggregateRow_10.ccocom = row19.ccocom;
							operation_finder_tAggregateRow_10.id_parc = row19.id_parc;
							operation_finder_tAggregateRow_10.type_local = row19.type_local;

							operation_finder_tAggregateRow_10.hashCodeDirty = true;

							operation_result_tAggregateRow_10 = hash_tAggregateRow_10
									.get(operation_finder_tAggregateRow_10);

							if (operation_result_tAggregateRow_10 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_10 = new AggOperationStruct_tAggregateRow_10();

								operation_result_tAggregateRow_10.ccocom = operation_finder_tAggregateRow_10.ccocom;
								operation_result_tAggregateRow_10.id_parc = operation_finder_tAggregateRow_10.id_parc;
								operation_result_tAggregateRow_10.type_local = operation_finder_tAggregateRow_10.type_local;

								hash_tAggregateRow_10.put(
										operation_result_tAggregateRow_10,
										operation_result_tAggregateRow_10);

							} // G_OutMain_AggR_001

							tos_count_tAggregateRow_10_AGGOUT++;

							/**
							 * [tAggregateRow_10_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_2_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_2_AGGOUT";

							operation_finder_tAggregateRow_2.ccocom = row6.ccocom;
							operation_finder_tAggregateRow_2.id_parc = row6.id_parc;

							operation_finder_tAggregateRow_2.hashCodeDirty = true;

							operation_result_tAggregateRow_2 = hash_tAggregateRow_2
									.get(operation_finder_tAggregateRow_2);

							boolean isFirstAdd_tAggregateRow_2 = false;

							if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

								operation_result_tAggregateRow_2.ccocom = operation_finder_tAggregateRow_2.ccocom;
								operation_result_tAggregateRow_2.id_parc = operation_finder_tAggregateRow_2.id_parc;

								isFirstAdd_tAggregateRow_2 = true;

								hash_tAggregateRow_2.put(
										operation_result_tAggregateRow_2,
										operation_result_tAggregateRow_2);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_2.nb_niv_max == null
									|| row6.nb_niv > operation_result_tAggregateRow_2.nb_niv_max

							) {
								operation_result_tAggregateRow_2.nb_niv_max = row6.nb_niv;
							}

							if (operation_result_tAggregateRow_2.shon_totale_sum == null) {
								operation_result_tAggregateRow_2.shon_totale_sum = (int) 0;
							}

							if (row6.shon_totale != null)
								operation_result_tAggregateRow_2.shon_totale_sum += row6.shon_totale;
							if (operation_result_tAggregateRow_2.shon_habitat_sum == null) {
								operation_result_tAggregateRow_2.shon_habitat_sum = (int) 0;
							}

							if (row6.shon_habitat != null)
								operation_result_tAggregateRow_2.shon_habitat_sum += row6.shon_habitat;
							if (operation_result_tAggregateRow_2.shon_activite_sum == null) {
								operation_result_tAggregateRow_2.shon_activite_sum = (int) 0;
							}

							if (row6.shon_activite != null)
								operation_result_tAggregateRow_2.shon_activite_sum += row6.shon_activite;
							if (operation_result_tAggregateRow_2.nb_logts_sum == null) {
								operation_result_tAggregateRow_2.nb_logts_sum = (int) 0;
							}

							if (row6.nb_logts != null)
								operation_result_tAggregateRow_2.nb_logts_sum += row6.nb_logts;
							if (operation_result_tAggregateRow_2.nb_logts_hlm_sum == null) {
								operation_result_tAggregateRow_2.nb_logts_hlm_sum = (int) 0;
							}

							if (row6.nb_logts_hlm != null)
								operation_result_tAggregateRow_2.nb_logts_hlm_sum += row6.nb_logts_hlm;
							if (operation_result_tAggregateRow_2.nb_logts_sem_sum == null) {
								operation_result_tAggregateRow_2.nb_logts_sem_sum = (int) 0;
							}

							if (row6.nb_logts_sem != null)
								operation_result_tAggregateRow_2.nb_logts_sem_sum += row6.nb_logts_sem;
							if (operation_result_tAggregateRow_2.nb_logts_hlm_sem_sum == null) {
								operation_result_tAggregateRow_2.nb_logts_hlm_sem_sum = (int) 0;
							}

							if (row6.nb_logts_hlm_sem != null)
								operation_result_tAggregateRow_2.nb_logts_hlm_sem_sum += row6.nb_logts_hlm_sem;
							if (operation_result_tAggregateRow_2.nb_logts_vacants_sum == null) {
								operation_result_tAggregateRow_2.nb_logts_vacants_sum = (int) 0;
							}

							if (row6.nb_logts_vacants != null)
								operation_result_tAggregateRow_2.nb_logts_vacants_sum += row6.nb_logts_vacants;
							if (operation_result_tAggregateRow_2.nb_logts_prop_occup_sum == null) {
								operation_result_tAggregateRow_2.nb_logts_prop_occup_sum = (int) 0;
							}

							if (row6.nb_logts_prop_occup != null)
								operation_result_tAggregateRow_2.nb_logts_prop_occup_sum += row6.nb_logts_prop_occup;
							if (operation_result_tAggregateRow_2.nb_logts_loc_sum == null) {
								operation_result_tAggregateRow_2.nb_logts_loc_sum = (int) 0;
							}

							if (row6.nb_logts_loc != null)
								operation_result_tAggregateRow_2.nb_logts_loc_sum += row6.nb_logts_loc;
							if (operation_result_tAggregateRow_2.nb_locaux_sum == null) {
								operation_result_tAggregateRow_2.nb_locaux_sum = (int) 0;
							}

							if (row6.nb_locaux != null)
								operation_result_tAggregateRow_2.nb_locaux_sum += row6.nb_locaux;
							if (operation_result_tAggregateRow_2.nb_locaux_vacants_sum == null) {
								operation_result_tAggregateRow_2.nb_locaux_vacants_sum = (int) 0;
							}

							if (row6.nb_locaux_vacants != null)
								operation_result_tAggregateRow_2.nb_locaux_vacants_sum += row6.nb_locaux_vacants;
							if (operation_result_tAggregateRow_2.annee_constr_min_min == null
									|| row6.annee_constr_min < operation_result_tAggregateRow_2.annee_constr_min_min

							) {
								operation_result_tAggregateRow_2.annee_constr_min_min = row6.annee_constr_min;
							}

							if (operation_result_tAggregateRow_2.annee_constr_max_max == null
									|| row6.annee_constr_max > operation_result_tAggregateRow_2.annee_constr_max_max

							) {
								operation_result_tAggregateRow_2.annee_constr_max_max = row6.annee_constr_max;
							}

							if (operation_result_tAggregateRow_2.annee_constr_moy_max == null
									|| row6.annee_constr_moy > operation_result_tAggregateRow_2.annee_constr_moy_max

							) {
								operation_result_tAggregateRow_2.annee_constr_moy_max = row6.annee_constr_moy;
							}

							tos_count_tAggregateRow_2_AGGOUT++;

							/**
							 * [tAggregateRow_2_AGGOUT main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_2_AGGOUT";

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.target_path + "bati_infos_temp4.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);

				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /**
				 * Start field
				 * tFileOutputDelimited_6:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
				 * Start
				 * field tFileOutputDelimited_6:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;
				try {
					outtFileOutputDelimited_6 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_6,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_6 begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN begin ] start
					 */

					ok_Hash.put("tAggregateRow_2_AGGIN", false);
					start_Hash.put("tAggregateRow_2_AGGIN",
							System.currentTimeMillis());
					currentComponent = "tAggregateRow_2_AGGIN";

					int tos_count_tAggregateRow_2_AGGIN = 0;

					java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
							.values();

					globalMap.put("tAggregateRow_2_NB_LINE",
							values_tAggregateRow_2.size());

					for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

						/**
						 * [tAggregateRow_2_AGGIN begin ] stop
						 */
						/**
						 * [tAggregateRow_2_AGGIN main ] start
						 */

						currentComponent = "tAggregateRow_2_AGGIN";

						row14.ccocom = aggregated_row_tAggregateRow_2.ccocom;

						row14.id_parc = aggregated_row_tAggregateRow_2.id_parc;

						row14.nb_niv = aggregated_row_tAggregateRow_2.nb_niv_max;
						row14.shon_totale = aggregated_row_tAggregateRow_2.shon_totale_sum;
						row14.shon_habitat = aggregated_row_tAggregateRow_2.shon_habitat_sum;
						row14.shon_activite = aggregated_row_tAggregateRow_2.shon_activite_sum;
						row14.nb_logts = aggregated_row_tAggregateRow_2.nb_logts_sum;
						row14.nb_logts_hlm = aggregated_row_tAggregateRow_2.nb_logts_hlm_sum;
						row14.nb_logts_sem = aggregated_row_tAggregateRow_2.nb_logts_sem_sum;
						row14.nb_logts_hlm_sem = aggregated_row_tAggregateRow_2.nb_logts_hlm_sem_sum;
						row14.nb_logts_vacants = aggregated_row_tAggregateRow_2.nb_logts_vacants_sum;
						row14.nb_logts_prop_occup = aggregated_row_tAggregateRow_2.nb_logts_prop_occup_sum;
						row14.nb_logts_loc = aggregated_row_tAggregateRow_2.nb_logts_loc_sum;
						row14.nb_locaux = aggregated_row_tAggregateRow_2.nb_locaux_sum;
						row14.nb_locaux_vacants = aggregated_row_tAggregateRow_2.nb_locaux_vacants_sum;

						row14.annee_constr_min = aggregated_row_tAggregateRow_2.annee_constr_min_min;
						row14.annee_constr_max = aggregated_row_tAggregateRow_2.annee_constr_max_max;
						row14.annee_constr_moy = aggregated_row_tAggregateRow_2.annee_constr_moy_max;

						tos_count_tAggregateRow_2_AGGIN++;

						/**
						 * [tAggregateRow_2_AGGIN main ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 main ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();

						if (row14.ccocom != null) {

							sb_tFileOutputDelimited_6.append(

							row14.ccocom

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.id_parc != null) {

							sb_tFileOutputDelimited_6.append(

							row14.id_parc

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_niv != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_niv

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.shon_totale != null) {

							sb_tFileOutputDelimited_6.append(

							row14.shon_totale

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.shon_habitat != null) {

							sb_tFileOutputDelimited_6.append(

							row14.shon_habitat

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.shon_activite != null) {

							sb_tFileOutputDelimited_6.append(

							row14.shon_activite

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_logts != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_logts

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_logts_hlm != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_logts_hlm

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_logts_sem != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_logts_sem

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_logts_hlm_sem != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_logts_hlm_sem

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_logts_vacants != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_logts_vacants

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_logts_prop_occup != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_logts_prop_occup

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_logts_loc != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_logts_loc

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_locaux != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_locaux

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.nb_locaux_vacants != null) {

							sb_tFileOutputDelimited_6.append(

							row14.nb_locaux_vacants

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.annee_constr_min != null) {

							sb_tFileOutputDelimited_6.append(

							row14.annee_constr_min

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.annee_constr_max != null) {

							sb_tFileOutputDelimited_6.append(

							row14.annee_constr_max

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);

						if (row14.annee_constr_moy != null) {

							sb_tFileOutputDelimited_6.append(

							row14.annee_constr_moy

							);

						}

						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

						nb_line_tFileOutputDelimited_6++;

						outtFileOutputDelimited_6
								.write(sb_tFileOutputDelimited_6.toString());

						tos_count_tFileOutputDelimited_6++;

						/**
						 * [tFileOutputDelimited_6 main ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGIN end ] start
						 */

						currentComponent = "tAggregateRow_2_AGGIN";

					} // G_AggR_600

					ok_Hash.put("tAggregateRow_2_AGGIN", true);
					end_Hash.put("tAggregateRow_2_AGGIN",
							System.currentTimeMillis());

					/**
					 * [tAggregateRow_2_AGGIN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 end ] start
					 */

					currentComponent = "tFileOutputDelimited_6";

				} finally {
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}
					globalMap.put("tFileOutputDelimited_6_NB_LINE",
							nb_line_tFileOutputDelimited_6);
					globalMap.put("tFileOutputDelimited_6_FILE_NAME",
							fileName_tFileOutputDelimited_6);
				} // finally

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

				/**
				 * [tAggregateRow_10_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_10_AGGOUT";

				ok_Hash.put("tAggregateRow_10_AGGOUT", true);
				end_Hash.put("tAggregateRow_10_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_10_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_4_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortOut", false);
				start_Hash
						.put("tSortRow_4_SortOut", System.currentTimeMillis());
				currentComponent = "tSortRow_4_SortOut";

				int tos_count_tSortRow_4_SortOut = 0;

				class Comparablerow21Struct extends row21Struct implements
						Comparable<Comparablerow21Struct> {

					public int compareTo(Comparablerow21Struct other) {

						if (this.ccocom == null && other.ccocom != null) {
							return -1;

						} else if (this.ccocom != null && other.ccocom == null) {
							return 1;

						} else if (this.ccocom != null && other.ccocom != null) {
							if (!this.ccocom.equals(other.ccocom)) {
								return this.ccocom.compareTo(other.ccocom);
							}
						}
						if (this.id_parc == null && other.id_parc != null) {
							return -1;

						} else if (this.id_parc != null
								&& other.id_parc == null) {
							return 1;

						} else if (this.id_parc != null
								&& other.id_parc != null) {
							if (!this.id_parc.equals(other.id_parc)) {
								return this.id_parc.compareTo(other.id_parc);
							}
						}
						if (this.type_local == null && other.type_local != null) {
							return -1;

						} else if (this.type_local != null
								&& other.type_local == null) {
							return 1;

						} else if (this.type_local != null
								&& other.type_local != null) {
							if (!this.type_local.equals(other.type_local)) {
								return this.type_local
										.compareTo(other.type_local);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow21Struct> list_tSortRow_4_SortOut = new java.util.ArrayList<Comparablerow21Struct>();

				/**
				 * [tSortRow_4_SortOut begin ] stop
				 */

				/**
				 * [tAggregateRow_10_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_10_AGGIN", false);
				start_Hash.put("tAggregateRow_10_AGGIN",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_10_AGGIN";

				int tos_count_tAggregateRow_10_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_10> values_tAggregateRow_10 = hash_tAggregateRow_10
						.values();

				globalMap.put("tAggregateRow_10_NB_LINE",
						values_tAggregateRow_10.size());

				for (AggOperationStruct_tAggregateRow_10 aggregated_row_tAggregateRow_10 : values_tAggregateRow_10) { // G_AggR_600

					/**
					 * [tAggregateRow_10_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_10_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_10_AGGIN";

					row21.ccocom = aggregated_row_tAggregateRow_10.ccocom;

					row21.id_parc = aggregated_row_tAggregateRow_10.id_parc;

					row21.type_local = aggregated_row_tAggregateRow_10.type_local;

					tos_count_tAggregateRow_10_AGGIN++;

					/**
					 * [tAggregateRow_10_AGGIN main ] stop
					 */

					/**
					 * [tSortRow_4_SortOut main ] start
					 */

					currentComponent = "tSortRow_4_SortOut";

					Comparablerow21Struct arrayRowtSortRow_4_SortOut = new Comparablerow21Struct();

					arrayRowtSortRow_4_SortOut.ccocom = row21.ccocom;
					arrayRowtSortRow_4_SortOut.id_parc = row21.id_parc;
					arrayRowtSortRow_4_SortOut.type_local = row21.type_local;
					list_tSortRow_4_SortOut.add(arrayRowtSortRow_4_SortOut);

					tos_count_tSortRow_4_SortOut++;

					/**
					 * [tSortRow_4_SortOut main ] stop
					 */

					/**
					 * [tAggregateRow_10_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_10_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_10_AGGIN", true);
				end_Hash.put("tAggregateRow_10_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_10_AGGIN end ] stop
				 */

				/**
				 * [tSortRow_4_SortOut end ] start
				 */

				currentComponent = "tSortRow_4_SortOut";

				row21Struct[] array_tSortRow_4_SortOut = list_tSortRow_4_SortOut
						.toArray(new Comparablerow21Struct[0]);

				java.util.Arrays.sort(array_tSortRow_4_SortOut);

				globalMap.put("tSortRow_4", array_tSortRow_4_SortOut);

				ok_Hash.put("tSortRow_4_SortOut", true);
				end_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortOut end ] stop
				 */

				/**
				 * [tAggregateRow_12_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_12_AGGOUT", false);
				start_Hash.put("tAggregateRow_12_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_12_AGGOUT";

				int tos_count_tAggregateRow_12_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_12 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_12 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_12 utilClass_tAggregateRow_12 = new UtilClass_tAggregateRow_12();

				class AggOperationStruct_tAggregateRow_12 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					StringBuilder type_local_list = new StringBuilder();
					boolean type_local_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_12 other = (AggOperationStruct_tAggregateRow_12) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_12 operation_result_tAggregateRow_12 = null;
				AggOperationStruct_tAggregateRow_12 operation_finder_tAggregateRow_12 = new AggOperationStruct_tAggregateRow_12();
				java.util.Map<AggOperationStruct_tAggregateRow_12, AggOperationStruct_tAggregateRow_12> hash_tAggregateRow_12 = new java.util.HashMap<AggOperationStruct_tAggregateRow_12, AggOperationStruct_tAggregateRow_12>();

				String delimiter_tAggregateRow_12 = ",";

				/**
				 * [tAggregateRow_12_AGGOUT begin ] stop
				 */

				/**
				 * [tSortRow_4_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortIn", false);
				start_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());
				currentComponent = "tSortRow_4_SortIn";

				int tos_count_tSortRow_4_SortIn = 0;

				row21Struct[] array_tSortRow_4_SortIn = (row21Struct[]) globalMap
						.get("tSortRow_4");

				int nb_line_tSortRow_4_SortIn = 0;

				row21Struct current_tSortRow_4_SortIn = null;

				for (int i_tSortRow_4_SortIn = 0; i_tSortRow_4_SortIn < array_tSortRow_4_SortIn.length; i_tSortRow_4_SortIn++) {
					current_tSortRow_4_SortIn = array_tSortRow_4_SortIn[i_tSortRow_4_SortIn];
					row23.ccocom = current_tSortRow_4_SortIn.ccocom;
					row23.id_parc = current_tSortRow_4_SortIn.id_parc;
					row23.type_local = current_tSortRow_4_SortIn.type_local;
					// increase number of line sorted
					nb_line_tSortRow_4_SortIn++;

					/**
					 * [tSortRow_4_SortIn begin ] stop
					 */
					/**
					 * [tSortRow_4_SortIn main ] start
					 */

					currentComponent = "tSortRow_4_SortIn";

					tos_count_tSortRow_4_SortIn++;

					/**
					 * [tSortRow_4_SortIn main ] stop
					 */

					/**
					 * [tAggregateRow_12_AGGOUT main ] start
					 */

					currentComponent = "tAggregateRow_12_AGGOUT";

					operation_finder_tAggregateRow_12.ccocom = row23.ccocom;
					operation_finder_tAggregateRow_12.id_parc = row23.id_parc;

					operation_finder_tAggregateRow_12.hashCodeDirty = true;

					operation_result_tAggregateRow_12 = hash_tAggregateRow_12
							.get(operation_finder_tAggregateRow_12);

					if (operation_result_tAggregateRow_12 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_12 = new AggOperationStruct_tAggregateRow_12();

						operation_result_tAggregateRow_12.ccocom = operation_finder_tAggregateRow_12.ccocom;
						operation_result_tAggregateRow_12.id_parc = operation_finder_tAggregateRow_12.id_parc;

						hash_tAggregateRow_12.put(
								operation_result_tAggregateRow_12,
								operation_result_tAggregateRow_12);

					} // G_OutMain_AggR_001

					if (operation_result_tAggregateRow_12.type_local_list
							.length() > 0) {
						operation_result_tAggregateRow_12.type_local_list
								.append(",");
					} else if (operation_result_tAggregateRow_12.type_local_list_firstEmpty) {
						operation_result_tAggregateRow_12.type_local_list
								.append(",");
					}
					if (operation_result_tAggregateRow_12.type_local_list != null) {
						if (operation_result_tAggregateRow_12.type_local_list_firstEmpty == false
								&& ("").equals(String.valueOf(row23.type_local))) {
							operation_result_tAggregateRow_12.type_local_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_12.type_local_list = operation_result_tAggregateRow_12.type_local_list
								.append(String.valueOf(row23.type_local));
					}

					tos_count_tAggregateRow_12_AGGOUT++;

					/**
					 * [tAggregateRow_12_AGGOUT main ] stop
					 */

					/**
					 * [tSortRow_4_SortIn end ] start
					 */

					currentComponent = "tSortRow_4_SortIn";

				}

				globalMap.put("tSortRow_4_SortIn_NB_LINE",
						nb_line_tSortRow_4_SortIn);

				ok_Hash.put("tSortRow_4_SortIn", true);
				end_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortIn end ] stop
				 */

				/**
				 * [tAggregateRow_12_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_12_AGGOUT";

				ok_Hash.put("tAggregateRow_12_AGGOUT", true);
				end_Hash.put("tAggregateRow_12_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_12_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_10", false);
				start_Hash.put("tFileOutputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_10";

				int tos_count_tFileOutputDelimited_10 = 0;

				String fileName_tFileOutputDelimited_10 = "";
				fileName_tFileOutputDelimited_10 = (new java.io.File(
						context.target_path + "bati_infos_temp6.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_10 = null;
				String extension_tFileOutputDelimited_10 = null;
				String directory_tFileOutputDelimited_10 = null;
				if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
							.substring(0, fileName_tFileOutputDelimited_10
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					}
					directory_tFileOutputDelimited_10 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_10 = true;
				java.io.File filetFileOutputDelimited_10 = new java.io.File(
						fileName_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME",
						fileName_tFileOutputDelimited_10);

				int nb_line_tFileOutputDelimited_10 = 0;
				int splitEvery_tFileOutputDelimited_10 = 1000;
				int splitedFileNo_tFileOutputDelimited_10 = 0;
				int currentRow_tFileOutputDelimited_10 = 0;

				final String OUT_DELIM_tFileOutputDelimited_10 = /**
				 * Start field
				 * tFileOutputDelimited_10:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_10:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_10 = /**
				 * Start
				 * field tFileOutputDelimited_10:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_10:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_10 != null
						&& directory_tFileOutputDelimited_10.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
							directory_tFileOutputDelimited_10);
					if (!dir_tFileOutputDelimited_10.exists()) {
						dir_tFileOutputDelimited_10.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_10 = null;
				try {
					outtFileOutputDelimited_10 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_10,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_10 begin ] stop
					 */

					/**
					 * [tAggregateRow_12_AGGIN begin ] start
					 */

					ok_Hash.put("tAggregateRow_12_AGGIN", false);
					start_Hash.put("tAggregateRow_12_AGGIN",
							System.currentTimeMillis());
					currentComponent = "tAggregateRow_12_AGGIN";

					int tos_count_tAggregateRow_12_AGGIN = 0;

					java.util.Collection<AggOperationStruct_tAggregateRow_12> values_tAggregateRow_12 = hash_tAggregateRow_12
							.values();

					globalMap.put("tAggregateRow_12_NB_LINE",
							values_tAggregateRow_12.size());

					for (AggOperationStruct_tAggregateRow_12 aggregated_row_tAggregateRow_12 : values_tAggregateRow_12) { // G_AggR_600

						/**
						 * [tAggregateRow_12_AGGIN begin ] stop
						 */
						/**
						 * [tAggregateRow_12_AGGIN main ] start
						 */

						currentComponent = "tAggregateRow_12_AGGIN";

						row25.ccocom = aggregated_row_tAggregateRow_12.ccocom;

						row25.id_parc = aggregated_row_tAggregateRow_12.id_parc;

						row25.type_local = aggregated_row_tAggregateRow_12.type_local_list
								.toString();

						tos_count_tAggregateRow_12_AGGIN++;

						/**
						 * [tAggregateRow_12_AGGIN main ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 main ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

						StringBuilder sb_tFileOutputDelimited_10 = new StringBuilder();

						if (row25.ccocom != null) {

							sb_tFileOutputDelimited_10.append(

							row25.ccocom

							);

						}

						sb_tFileOutputDelimited_10
								.append(OUT_DELIM_tFileOutputDelimited_10);

						if (row25.id_parc != null) {

							sb_tFileOutputDelimited_10.append(

							row25.id_parc

							);

						}

						sb_tFileOutputDelimited_10
								.append(OUT_DELIM_tFileOutputDelimited_10);

						if (row25.type_local != null) {

							sb_tFileOutputDelimited_10.append(

							row25.type_local

							);

						}

						sb_tFileOutputDelimited_10
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);

						nb_line_tFileOutputDelimited_10++;

						outtFileOutputDelimited_10
								.write(sb_tFileOutputDelimited_10.toString());

						tos_count_tFileOutputDelimited_10++;

						/**
						 * [tFileOutputDelimited_10 main ] stop
						 */

						/**
						 * [tAggregateRow_12_AGGIN end ] start
						 */

						currentComponent = "tAggregateRow_12_AGGIN";

					} // G_AggR_600

					ok_Hash.put("tAggregateRow_12_AGGIN", true);
					end_Hash.put("tAggregateRow_12_AGGIN",
							System.currentTimeMillis());

					/**
					 * [tAggregateRow_12_AGGIN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_10 end ] start
					 */

					currentComponent = "tFileOutputDelimited_10";

				} finally {
					if (outtFileOutputDelimited_10 != null) {
						outtFileOutputDelimited_10.flush();
						outtFileOutputDelimited_10.close();
					}
					globalMap.put("tFileOutputDelimited_10_NB_LINE",
							nb_line_tFileOutputDelimited_10);
					globalMap.put("tFileOutputDelimited_10_FILE_NAME",
							fileName_tFileOutputDelimited_10);
				} // finally

				ok_Hash.put("tFileOutputDelimited_10", true);
				end_Hash.put("tFileOutputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_10 end ] stop
				 */

				/**
				 * [tAggregateRow_9_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_9_AGGOUT";

				ok_Hash.put("tAggregateRow_9_AGGOUT", true);
				end_Hash.put("tAggregateRow_9_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_9_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortOut", false);
				start_Hash
						.put("tSortRow_3_SortOut", System.currentTimeMillis());
				currentComponent = "tSortRow_3_SortOut";

				int tos_count_tSortRow_3_SortOut = 0;

				class Comparablerow20Struct extends row20Struct implements
						Comparable<Comparablerow20Struct> {

					public int compareTo(Comparablerow20Struct other) {

						if (this.ccocom == null && other.ccocom != null) {
							return -1;

						} else if (this.ccocom != null && other.ccocom == null) {
							return 1;

						} else if (this.ccocom != null && other.ccocom != null) {
							if (!this.ccocom.equals(other.ccocom)) {
								return this.ccocom.compareTo(other.ccocom);
							}
						}
						if (this.id_parc == null && other.id_parc != null) {
							return -1;

						} else if (this.id_parc != null
								&& other.id_parc == null) {
							return 1;

						} else if (this.id_parc != null
								&& other.id_parc != null) {
							if (!this.id_parc.equals(other.id_parc)) {
								return this.id_parc.compareTo(other.id_parc);
							}
						}
						if (this.nature_local == null
								&& other.nature_local != null) {
							return -1;

						} else if (this.nature_local != null
								&& other.nature_local == null) {
							return 1;

						} else if (this.nature_local != null
								&& other.nature_local != null) {
							if (!this.nature_local.equals(other.nature_local)) {
								return this.nature_local
										.compareTo(other.nature_local);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow20Struct> list_tSortRow_3_SortOut = new java.util.ArrayList<Comparablerow20Struct>();

				/**
				 * [tSortRow_3_SortOut begin ] stop
				 */

				/**
				 * [tAggregateRow_9_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_9_AGGIN", false);
				start_Hash.put("tAggregateRow_9_AGGIN",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_9_AGGIN";

				int tos_count_tAggregateRow_9_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_9> values_tAggregateRow_9 = hash_tAggregateRow_9
						.values();

				globalMap.put("tAggregateRow_9_NB_LINE",
						values_tAggregateRow_9.size());

				for (AggOperationStruct_tAggregateRow_9 aggregated_row_tAggregateRow_9 : values_tAggregateRow_9) { // G_AggR_600

					/**
					 * [tAggregateRow_9_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_9_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_9_AGGIN";

					row20.ccocom = aggregated_row_tAggregateRow_9.ccocom;

					row20.id_parc = aggregated_row_tAggregateRow_9.id_parc;

					row20.nature_local = aggregated_row_tAggregateRow_9.nature_local;

					tos_count_tAggregateRow_9_AGGIN++;

					/**
					 * [tAggregateRow_9_AGGIN main ] stop
					 */

					/**
					 * [tSortRow_3_SortOut main ] start
					 */

					currentComponent = "tSortRow_3_SortOut";

					Comparablerow20Struct arrayRowtSortRow_3_SortOut = new Comparablerow20Struct();

					arrayRowtSortRow_3_SortOut.ccocom = row20.ccocom;
					arrayRowtSortRow_3_SortOut.id_parc = row20.id_parc;
					arrayRowtSortRow_3_SortOut.nature_local = row20.nature_local;
					list_tSortRow_3_SortOut.add(arrayRowtSortRow_3_SortOut);

					tos_count_tSortRow_3_SortOut++;

					/**
					 * [tSortRow_3_SortOut main ] stop
					 */

					/**
					 * [tAggregateRow_9_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_9_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_9_AGGIN", true);
				end_Hash.put("tAggregateRow_9_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_9_AGGIN end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut end ] start
				 */

				currentComponent = "tSortRow_3_SortOut";

				row20Struct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut
						.toArray(new Comparablerow20Struct[0]);

				java.util.Arrays.sort(array_tSortRow_3_SortOut);

				globalMap.put("tSortRow_3", array_tSortRow_3_SortOut);

				ok_Hash.put("tSortRow_3_SortOut", true);
				end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortOut end ] stop
				 */

				/**
				 * [tAggregateRow_11_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_11_AGGOUT", false);
				start_Hash.put("tAggregateRow_11_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_11_AGGOUT";

				int tos_count_tAggregateRow_11_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_11 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_11 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_11 utilClass_tAggregateRow_11 = new UtilClass_tAggregateRow_11();

				class AggOperationStruct_tAggregateRow_11 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					StringBuilder nature_local_list = new StringBuilder();
					boolean nature_local_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_11 other = (AggOperationStruct_tAggregateRow_11) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_11 operation_result_tAggregateRow_11 = null;
				AggOperationStruct_tAggregateRow_11 operation_finder_tAggregateRow_11 = new AggOperationStruct_tAggregateRow_11();
				java.util.Map<AggOperationStruct_tAggregateRow_11, AggOperationStruct_tAggregateRow_11> hash_tAggregateRow_11 = new java.util.HashMap<AggOperationStruct_tAggregateRow_11, AggOperationStruct_tAggregateRow_11>();

				String delimiter_tAggregateRow_11 = ",";

				/**
				 * [tAggregateRow_11_AGGOUT begin ] stop
				 */

				/**
				 * [tSortRow_3_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortIn", false);
				start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());
				currentComponent = "tSortRow_3_SortIn";

				int tos_count_tSortRow_3_SortIn = 0;

				row20Struct[] array_tSortRow_3_SortIn = (row20Struct[]) globalMap
						.get("tSortRow_3");

				int nb_line_tSortRow_3_SortIn = 0;

				row20Struct current_tSortRow_3_SortIn = null;

				for (int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++) {
					current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
					row22.ccocom = current_tSortRow_3_SortIn.ccocom;
					row22.id_parc = current_tSortRow_3_SortIn.id_parc;
					row22.nature_local = current_tSortRow_3_SortIn.nature_local;
					// increase number of line sorted
					nb_line_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn begin ] stop
					 */
					/**
					 * [tSortRow_3_SortIn main ] start
					 */

					currentComponent = "tSortRow_3_SortIn";

					tos_count_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn main ] stop
					 */

					/**
					 * [tAggregateRow_11_AGGOUT main ] start
					 */

					currentComponent = "tAggregateRow_11_AGGOUT";

					operation_finder_tAggregateRow_11.ccocom = row22.ccocom;
					operation_finder_tAggregateRow_11.id_parc = row22.id_parc;

					operation_finder_tAggregateRow_11.hashCodeDirty = true;

					operation_result_tAggregateRow_11 = hash_tAggregateRow_11
							.get(operation_finder_tAggregateRow_11);

					if (operation_result_tAggregateRow_11 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_11 = new AggOperationStruct_tAggregateRow_11();

						operation_result_tAggregateRow_11.ccocom = operation_finder_tAggregateRow_11.ccocom;
						operation_result_tAggregateRow_11.id_parc = operation_finder_tAggregateRow_11.id_parc;

						hash_tAggregateRow_11.put(
								operation_result_tAggregateRow_11,
								operation_result_tAggregateRow_11);

					} // G_OutMain_AggR_001

					if (operation_result_tAggregateRow_11.nature_local_list
							.length() > 0) {
						operation_result_tAggregateRow_11.nature_local_list
								.append(",");
					} else if (operation_result_tAggregateRow_11.nature_local_list_firstEmpty) {
						operation_result_tAggregateRow_11.nature_local_list
								.append(",");
					}
					if (operation_result_tAggregateRow_11.nature_local_list != null) {
						if (operation_result_tAggregateRow_11.nature_local_list_firstEmpty == false
								&& ("").equals(String
										.valueOf(row22.nature_local))) {
							operation_result_tAggregateRow_11.nature_local_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_11.nature_local_list = operation_result_tAggregateRow_11.nature_local_list
								.append(String.valueOf(row22.nature_local));
					}

					tos_count_tAggregateRow_11_AGGOUT++;

					/**
					 * [tAggregateRow_11_AGGOUT main ] stop
					 */

					/**
					 * [tSortRow_3_SortIn end ] start
					 */

					currentComponent = "tSortRow_3_SortIn";

				}

				globalMap.put("tSortRow_3_SortIn_NB_LINE",
						nb_line_tSortRow_3_SortIn);

				ok_Hash.put("tSortRow_3_SortIn", true);
				end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortIn end ] stop
				 */

				/**
				 * [tAggregateRow_11_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_11_AGGOUT";

				ok_Hash.put("tAggregateRow_11_AGGOUT", true);
				end_Hash.put("tAggregateRow_11_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_11_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_9";

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						context.target_path + "bati_infos_temp5.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
							.substring(0, fileName_tFileOutputDelimited_9
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(
						fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",
						fileName_tFileOutputDelimited_9);

				int nb_line_tFileOutputDelimited_9 = 0;
				int splitEvery_tFileOutputDelimited_9 = 1000;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /**
				 * Start field
				 * tFileOutputDelimited_9:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
				 * Start
				 * field tFileOutputDelimited_9:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null
						&& directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
							directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;
				try {
					outtFileOutputDelimited_9 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_9,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_9 begin ] stop
					 */

					/**
					 * [tAggregateRow_11_AGGIN begin ] start
					 */

					ok_Hash.put("tAggregateRow_11_AGGIN", false);
					start_Hash.put("tAggregateRow_11_AGGIN",
							System.currentTimeMillis());
					currentComponent = "tAggregateRow_11_AGGIN";

					int tos_count_tAggregateRow_11_AGGIN = 0;

					java.util.Collection<AggOperationStruct_tAggregateRow_11> values_tAggregateRow_11 = hash_tAggregateRow_11
							.values();

					globalMap.put("tAggregateRow_11_NB_LINE",
							values_tAggregateRow_11.size());

					for (AggOperationStruct_tAggregateRow_11 aggregated_row_tAggregateRow_11 : values_tAggregateRow_11) { // G_AggR_600

						/**
						 * [tAggregateRow_11_AGGIN begin ] stop
						 */
						/**
						 * [tAggregateRow_11_AGGIN main ] start
						 */

						currentComponent = "tAggregateRow_11_AGGIN";

						row24.ccocom = aggregated_row_tAggregateRow_11.ccocom;

						row24.id_parc = aggregated_row_tAggregateRow_11.id_parc;

						row24.nature_local = aggregated_row_tAggregateRow_11.nature_local_list
								.toString();

						tos_count_tAggregateRow_11_AGGIN++;

						/**
						 * [tAggregateRow_11_AGGIN main ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 main ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();

						if (row24.ccocom != null) {

							sb_tFileOutputDelimited_9.append(

							row24.ccocom

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row24.id_parc != null) {

							sb_tFileOutputDelimited_9.append(

							row24.id_parc

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row24.nature_local != null) {

							sb_tFileOutputDelimited_9.append(

							row24.nature_local

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

						nb_line_tFileOutputDelimited_9++;

						outtFileOutputDelimited_9
								.write(sb_tFileOutputDelimited_9.toString());

						tos_count_tFileOutputDelimited_9++;

						/**
						 * [tFileOutputDelimited_9 main ] stop
						 */

						/**
						 * [tAggregateRow_11_AGGIN end ] start
						 */

						currentComponent = "tAggregateRow_11_AGGIN";

					} // G_AggR_600

					ok_Hash.put("tAggregateRow_11_AGGIN", true);
					end_Hash.put("tAggregateRow_11_AGGIN",
							System.currentTimeMillis());

					/**
					 * [tAggregateRow_11_AGGIN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_9 end ] start
					 */

					currentComponent = "tFileOutputDelimited_9";

				} finally {
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}
					globalMap.put("tFileOutputDelimited_9_NB_LINE",
							nb_line_tFileOutputDelimited_9);
					globalMap.put("tFileOutputDelimited_9_FILE_NAME",
							fileName_tFileOutputDelimited_9);
				} // finally

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_6_AGGOUT";

				ok_Hash.put("tAggregateRow_6_AGGOUT", true);
				end_Hash.put("tAggregateRow_6_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_6_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.target_path + "bati_infos_temp2.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;
				try {
					outtFileOutputDelimited_4 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_4,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_4 begin ] stop
					 */

					/**
					 * [tAggregateRow_6_AGGIN begin ] start
					 */

					ok_Hash.put("tAggregateRow_6_AGGIN", false);
					start_Hash.put("tAggregateRow_6_AGGIN",
							System.currentTimeMillis());
					currentComponent = "tAggregateRow_6_AGGIN";

					int tos_count_tAggregateRow_6_AGGIN = 0;

					java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6
							.values();

					globalMap.put("tAggregateRow_6_NB_LINE",
							values_tAggregateRow_6.size());

					for (AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600

						/**
						 * [tAggregateRow_6_AGGIN begin ] stop
						 */
						/**
						 * [tAggregateRow_6_AGGIN main ] start
						 */

						currentComponent = "tAggregateRow_6_AGGIN";

						row12.ccocom = aggregated_row_tAggregateRow_6.ccocom;

						row12.id_parc = aggregated_row_tAggregateRow_6.id_parc;
						row12.nb_prop = (int) aggregated_row_tAggregateRow_6.distinctValues_nb_prop
								.size();

						tos_count_tAggregateRow_6_AGGIN++;

						/**
						 * [tAggregateRow_6_AGGIN main ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 main ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();

						if (row12.ccocom != null) {

							sb_tFileOutputDelimited_4.append(

							row12.ccocom

							);

						}

						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_tFileOutputDelimited_4);

						if (row12.id_parc != null) {

							sb_tFileOutputDelimited_4.append(

							row12.id_parc

							);

						}

						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_tFileOutputDelimited_4);

						if (row12.nb_prop != null) {

							sb_tFileOutputDelimited_4.append(

							row12.nb_prop

							);

						}

						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

						nb_line_tFileOutputDelimited_4++;

						outtFileOutputDelimited_4
								.write(sb_tFileOutputDelimited_4.toString());

						tos_count_tFileOutputDelimited_4++;

						/**
						 * [tFileOutputDelimited_4 main ] stop
						 */

						/**
						 * [tAggregateRow_6_AGGIN end ] start
						 */

						currentComponent = "tAggregateRow_6_AGGIN";

					} // G_AggR_600

					ok_Hash.put("tAggregateRow_6_AGGIN", true);
					end_Hash.put("tAggregateRow_6_AGGIN",
							System.currentTimeMillis());

					/**
					 * [tAggregateRow_6_AGGIN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

				} finally {
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
					globalMap.put("tFileOutputDelimited_4_NB_LINE",
							nb_line_tFileOutputDelimited_4);
					globalMap.put("tFileOutputDelimited_4_FILE_NAME",
							fileName_tFileOutputDelimited_4);
				} // finally

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_5_AGGOUT";

				ok_Hash.put("tAggregateRow_5_AGGOUT", true);
				end_Hash.put("tAggregateRow_5_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.target_path + "bati_infos_temp1.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;
				try {
					outtFileOutputDelimited_3 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_3,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_3 begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN begin ] start
					 */

					ok_Hash.put("tAggregateRow_5_AGGIN", false);
					start_Hash.put("tAggregateRow_5_AGGIN",
							System.currentTimeMillis());
					currentComponent = "tAggregateRow_5_AGGIN";

					int tos_count_tAggregateRow_5_AGGIN = 0;

					java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5
							.values();

					globalMap.put("tAggregateRow_5_NB_LINE",
							values_tAggregateRow_5.size());

					for (AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600

						/**
						 * [tAggregateRow_5_AGGIN begin ] stop
						 */
						/**
						 * [tAggregateRow_5_AGGIN main ] start
						 */

						currentComponent = "tAggregateRow_5_AGGIN";

						row10.ccocom = aggregated_row_tAggregateRow_5.ccocom;

						row10.id_parc = aggregated_row_tAggregateRow_5.id_parc;

						row10.dnubat = aggregated_row_tAggregateRow_5.dnubat;
						row10.nb_prop = (int) aggregated_row_tAggregateRow_5.distinctValues_nb_prop
								.size();

						tos_count_tAggregateRow_5_AGGIN++;

						/**
						 * [tAggregateRow_5_AGGIN main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();

						if (row10.ccocom != null) {

							sb_tFileOutputDelimited_3.append(

							row10.ccocom

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row10.id_parc != null) {

							sb_tFileOutputDelimited_3.append(

							row10.id_parc

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row10.dnubat != null) {

							sb_tFileOutputDelimited_3.append(

							row10.dnubat

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row10.nb_prop != null) {

							sb_tFileOutputDelimited_3.append(

							row10.nb_prop

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;

						outtFileOutputDelimited_3
								.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tAggregateRow_5_AGGIN end ] start
						 */

						currentComponent = "tAggregateRow_5_AGGIN";

					} // G_AggR_600

					ok_Hash.put("tAggregateRow_5_AGGIN", true);
					end_Hash.put("tAggregateRow_5_AGGIN",
							System.currentTimeMillis());

					/**
					 * [tAggregateRow_5_AGGIN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

				} finally {
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
					globalMap.put("tFileOutputDelimited_3_NB_LINE",
							nb_line_tFileOutputDelimited_3);
					globalMap.put("tFileOutputDelimited_3_FILE_NAME",
							fileName_tFileOutputDelimited_3);
				} // finally

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_1_AGGOUT";

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash
						.put("tSortRow_1_SortOut", System.currentTimeMillis());
				currentComponent = "tSortRow_1_SortOut";

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow16Struct extends row16Struct implements
						Comparable<Comparablerow16Struct> {

					public int compareTo(Comparablerow16Struct other) {

						if (this.ccocom == null && other.ccocom != null) {
							return -1;

						} else if (this.ccocom != null && other.ccocom == null) {
							return 1;

						} else if (this.ccocom != null && other.ccocom != null) {
							if (!this.ccocom.equals(other.ccocom)) {
								return this.ccocom.compareTo(other.ccocom);
							}
						}
						if (this.id_parc == null && other.id_parc != null) {
							return -1;

						} else if (this.id_parc != null
								&& other.id_parc == null) {
							return 1;

						} else if (this.id_parc != null
								&& other.id_parc != null) {
							if (!this.id_parc.equals(other.id_parc)) {
								return this.id_parc.compareTo(other.id_parc);
							}
						}
						if (this.dnubat == null && other.dnubat != null) {
							return -1;

						} else if (this.dnubat != null && other.dnubat == null) {
							return 1;

						} else if (this.dnubat != null && other.dnubat != null) {
							if (!this.dnubat.equals(other.dnubat)) {
								return this.dnubat.compareTo(other.dnubat);
							}
						}
						if (this.nature_local == null
								&& other.nature_local != null) {
							return -1;

						} else if (this.nature_local != null
								&& other.nature_local == null) {
							return 1;

						} else if (this.nature_local != null
								&& other.nature_local != null) {
							if (!this.nature_local.equals(other.nature_local)) {
								return this.nature_local
										.compareTo(other.nature_local);
							}
						}
						if (this.type_local == null && other.type_local != null) {
							return -1;

						} else if (this.type_local != null
								&& other.type_local == null) {
							return 1;

						} else if (this.type_local != null
								&& other.type_local != null) {
							if (!this.type_local.equals(other.type_local)) {
								return this.type_local
										.compareTo(other.type_local);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow16Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow16Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE",
						values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_1_AGGIN";

					row16.ccocom = aggregated_row_tAggregateRow_1.ccocom;

					row16.id_parc = aggregated_row_tAggregateRow_1.id_parc;

					row16.dnubat = aggregated_row_tAggregateRow_1.dnubat;

					row16.nb_niv = aggregated_row_tAggregateRow_1.nb_niv_max;
					row16.shon_totale = aggregated_row_tAggregateRow_1.shon_totale_sum;
					row16.shon_habitat = aggregated_row_tAggregateRow_1.shon_habitat_sum;
					row16.shon_activite = aggregated_row_tAggregateRow_1.shon_activite_sum;
					row16.nb_logts = aggregated_row_tAggregateRow_1.nb_logts_sum;
					row16.nb_logts_hlm = aggregated_row_tAggregateRow_1.nb_logts_hlm_sum;
					row16.nb_logts_sem = aggregated_row_tAggregateRow_1.nb_logts_sem_sum;
					row16.nb_logts_hlm_sem = aggregated_row_tAggregateRow_1.nb_logts_hlm_sem_sum;
					row16.nb_logts_vacants = aggregated_row_tAggregateRow_1.nb_logts_vacants_sum;
					row16.nb_logts_prop_occup = aggregated_row_tAggregateRow_1.nb_logts_prop_occup_sum;
					row16.nb_logts_loc = aggregated_row_tAggregateRow_1.nb_logts_loc_sum;
					row16.nb_locaux = aggregated_row_tAggregateRow_1.nb_locaux_sum;
					row16.nb_locaux_vacants = aggregated_row_tAggregateRow_1.nb_locaux_vacants_sum;

					row16.nature_local = aggregated_row_tAggregateRow_1.nature_local;

					row16.type_local = aggregated_row_tAggregateRow_1.type_local;

					row16.annee_constr_min = aggregated_row_tAggregateRow_1.annee_constr_min_min;
					row16.annee_constr_max = aggregated_row_tAggregateRow_1.annee_constr_max_max;
					if (aggregated_row_tAggregateRow_1.annee_constr_moy_count > 0) {

						double row16_annee_constr_moy_temp = (double) aggregated_row_tAggregateRow_1.annee_constr_moy_sum
								/ (double) aggregated_row_tAggregateRow_1.annee_constr_moy_count;

						row16.annee_constr_moy = (int) row16_annee_constr_moy_temp;

					} else {
						String count = "0";

						row16.annee_constr_moy = ParserUtils
								.parseTo_Integer(count);

					}

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tSortRow_1_SortOut main ] start
					 */

					currentComponent = "tSortRow_1_SortOut";

					Comparablerow16Struct arrayRowtSortRow_1_SortOut = new Comparablerow16Struct();

					arrayRowtSortRow_1_SortOut.ccocom = row16.ccocom;
					arrayRowtSortRow_1_SortOut.id_parc = row16.id_parc;
					arrayRowtSortRow_1_SortOut.dnubat = row16.dnubat;
					arrayRowtSortRow_1_SortOut.nb_niv = row16.nb_niv;
					arrayRowtSortRow_1_SortOut.shon_totale = row16.shon_totale;
					arrayRowtSortRow_1_SortOut.shon_habitat = row16.shon_habitat;
					arrayRowtSortRow_1_SortOut.shon_activite = row16.shon_activite;
					arrayRowtSortRow_1_SortOut.nb_logts = row16.nb_logts;
					arrayRowtSortRow_1_SortOut.nb_logts_hlm = row16.nb_logts_hlm;
					arrayRowtSortRow_1_SortOut.nb_logts_sem = row16.nb_logts_sem;
					arrayRowtSortRow_1_SortOut.nb_logts_hlm_sem = row16.nb_logts_hlm_sem;
					arrayRowtSortRow_1_SortOut.nb_logts_vacants = row16.nb_logts_vacants;
					arrayRowtSortRow_1_SortOut.nb_logts_prop_occup = row16.nb_logts_prop_occup;
					arrayRowtSortRow_1_SortOut.nb_logts_loc = row16.nb_logts_loc;
					arrayRowtSortRow_1_SortOut.nb_locaux = row16.nb_locaux;
					arrayRowtSortRow_1_SortOut.nb_locaux_vacants = row16.nb_locaux_vacants;
					arrayRowtSortRow_1_SortOut.nature_local = row16.nature_local;
					arrayRowtSortRow_1_SortOut.type_local = row16.type_local;
					arrayRowtSortRow_1_SortOut.annee_constr_min = row16.annee_constr_min;
					arrayRowtSortRow_1_SortOut.annee_constr_max = row16.annee_constr_max;
					arrayRowtSortRow_1_SortOut.annee_constr_moy = row16.annee_constr_moy;
					list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

					tos_count_tSortRow_1_SortOut++;

					/**
					 * [tSortRow_1_SortOut main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentComponent = "tSortRow_1_SortOut";

				row16Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
						.toArray(new Comparablerow16Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGOUT", false);
				start_Hash.put("tAggregateRow_3_AGGOUT",
						System.currentTimeMillis());
				currentComponent = "tAggregateRow_3_AGGOUT";

				int tos_count_tAggregateRow_3_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

				class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ccocom;
					String id_parc;
					String dnubat;
					Integer nb_niv_max;
					Integer shon_totale_sum;
					Integer shon_habitat_sum;
					Integer shon_activite_sum;
					Integer nb_logts_sum;
					Integer nb_logts_hlm_sum;
					Integer nb_logts_sem_sum;
					Integer nb_logts_hlm_sem_sum;
					Integer nb_logts_vacants_sum;
					Integer nb_logts_prop_occup_sum;
					Integer nb_logts_loc_sum;
					Integer nb_locaux_sum;
					Integer nb_locaux_vacants_sum;
					Integer annee_constr_min_min;
					Integer annee_constr_max_max;
					Double annee_constr_moy_sum;
					int annee_constr_moy_count = 0;
					StringBuilder nature_local_list = new StringBuilder();
					boolean nature_local_list_firstEmpty = false;
					StringBuilder type_local_list = new StringBuilder();
					boolean type_local_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ccocom == null) ? 0 : this.ccocom
											.hashCode());

							result = prime
									* result
									+ ((this.id_parc == null) ? 0
											: this.id_parc.hashCode());

							result = prime
									* result
									+ ((this.dnubat == null) ? 0 : this.dnubat
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;

						if (this.ccocom == null) {
							if (other.ccocom != null)
								return false;
						} else if (!this.ccocom.equals(other.ccocom))
							return false;

						if (this.id_parc == null) {
							if (other.id_parc != null)
								return false;
						} else if (!this.id_parc.equals(other.id_parc))
							return false;

						if (this.dnubat == null) {
							if (other.dnubat != null)
								return false;
						} else if (!this.dnubat.equals(other.dnubat))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
				AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
				java.util.Map<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3>();

				String delimiter_tAggregateRow_3 = ",";

				/**
				 * [tAggregateRow_3_AGGOUT begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				row16Struct[] array_tSortRow_1_SortIn = (row16Struct[]) globalMap
						.get("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				row16Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row2.ccocom = current_tSortRow_1_SortIn.ccocom;
					row2.id_parc = current_tSortRow_1_SortIn.id_parc;
					row2.dnubat = current_tSortRow_1_SortIn.dnubat;
					row2.nb_niv = current_tSortRow_1_SortIn.nb_niv;
					row2.shon_totale = current_tSortRow_1_SortIn.shon_totale;
					row2.shon_habitat = current_tSortRow_1_SortIn.shon_habitat;
					row2.shon_activite = current_tSortRow_1_SortIn.shon_activite;
					row2.nb_logts = current_tSortRow_1_SortIn.nb_logts;
					row2.nb_logts_hlm = current_tSortRow_1_SortIn.nb_logts_hlm;
					row2.nb_logts_sem = current_tSortRow_1_SortIn.nb_logts_sem;
					row2.nb_logts_hlm_sem = current_tSortRow_1_SortIn.nb_logts_hlm_sem;
					row2.nb_logts_vacants = current_tSortRow_1_SortIn.nb_logts_vacants;
					row2.nb_logts_prop_occup = current_tSortRow_1_SortIn.nb_logts_prop_occup;
					row2.nb_logts_loc = current_tSortRow_1_SortIn.nb_logts_loc;
					row2.nb_locaux = current_tSortRow_1_SortIn.nb_locaux;
					row2.nb_locaux_vacants = current_tSortRow_1_SortIn.nb_locaux_vacants;
					row2.nature_local = current_tSortRow_1_SortIn.nature_local;
					row2.type_local = current_tSortRow_1_SortIn.type_local;
					row2.annee_constr_min = current_tSortRow_1_SortIn.annee_constr_min;
					row2.annee_constr_max = current_tSortRow_1_SortIn.annee_constr_max;
					row2.annee_constr_moy = current_tSortRow_1_SortIn.annee_constr_moy;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */
					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGOUT main ] start
					 */

					currentComponent = "tAggregateRow_3_AGGOUT";

					operation_finder_tAggregateRow_3.ccocom = row2.ccocom;
					operation_finder_tAggregateRow_3.id_parc = row2.id_parc;
					operation_finder_tAggregateRow_3.dnubat = row2.dnubat;

					operation_finder_tAggregateRow_3.hashCodeDirty = true;

					operation_result_tAggregateRow_3 = hash_tAggregateRow_3
							.get(operation_finder_tAggregateRow_3);

					boolean isFirstAdd_tAggregateRow_3 = false;

					if (operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

						operation_result_tAggregateRow_3.ccocom = operation_finder_tAggregateRow_3.ccocom;
						operation_result_tAggregateRow_3.id_parc = operation_finder_tAggregateRow_3.id_parc;
						operation_result_tAggregateRow_3.dnubat = operation_finder_tAggregateRow_3.dnubat;

						isFirstAdd_tAggregateRow_3 = true;

						hash_tAggregateRow_3.put(
								operation_result_tAggregateRow_3,
								operation_result_tAggregateRow_3);

					} // G_OutMain_AggR_001

					if (operation_result_tAggregateRow_3.nb_niv_max == null
							|| row2.nb_niv > operation_result_tAggregateRow_3.nb_niv_max

					) {
						operation_result_tAggregateRow_3.nb_niv_max = row2.nb_niv;
					}

					if (operation_result_tAggregateRow_3.shon_totale_sum == null) {
						operation_result_tAggregateRow_3.shon_totale_sum = (int) 0;
					}

					if (row2.shon_totale != null)
						operation_result_tAggregateRow_3.shon_totale_sum += row2.shon_totale;
					if (operation_result_tAggregateRow_3.shon_habitat_sum == null) {
						operation_result_tAggregateRow_3.shon_habitat_sum = (int) 0;
					}

					if (row2.shon_habitat != null)
						operation_result_tAggregateRow_3.shon_habitat_sum += row2.shon_habitat;
					if (operation_result_tAggregateRow_3.shon_activite_sum == null) {
						operation_result_tAggregateRow_3.shon_activite_sum = (int) 0;
					}

					if (row2.shon_activite != null)
						operation_result_tAggregateRow_3.shon_activite_sum += row2.shon_activite;
					if (operation_result_tAggregateRow_3.nb_logts_sum == null) {
						operation_result_tAggregateRow_3.nb_logts_sum = (int) 0;
					}

					if (row2.nb_logts != null)
						operation_result_tAggregateRow_3.nb_logts_sum += row2.nb_logts;
					if (operation_result_tAggregateRow_3.nb_logts_hlm_sum == null) {
						operation_result_tAggregateRow_3.nb_logts_hlm_sum = (int) 0;
					}

					if (row2.nb_logts_hlm != null)
						operation_result_tAggregateRow_3.nb_logts_hlm_sum += row2.nb_logts_hlm;
					if (operation_result_tAggregateRow_3.nb_logts_sem_sum == null) {
						operation_result_tAggregateRow_3.nb_logts_sem_sum = (int) 0;
					}

					if (row2.nb_logts_sem != null)
						operation_result_tAggregateRow_3.nb_logts_sem_sum += row2.nb_logts_sem;
					if (operation_result_tAggregateRow_3.nb_logts_hlm_sem_sum == null) {
						operation_result_tAggregateRow_3.nb_logts_hlm_sem_sum = (int) 0;
					}

					if (row2.nb_logts_hlm_sem != null)
						operation_result_tAggregateRow_3.nb_logts_hlm_sem_sum += row2.nb_logts_hlm_sem;
					if (operation_result_tAggregateRow_3.nb_logts_vacants_sum == null) {
						operation_result_tAggregateRow_3.nb_logts_vacants_sum = (int) 0;
					}

					if (row2.nb_logts_vacants != null)
						operation_result_tAggregateRow_3.nb_logts_vacants_sum += row2.nb_logts_vacants;
					if (operation_result_tAggregateRow_3.nb_logts_prop_occup_sum == null) {
						operation_result_tAggregateRow_3.nb_logts_prop_occup_sum = (int) 0;
					}

					if (row2.nb_logts_prop_occup != null)
						operation_result_tAggregateRow_3.nb_logts_prop_occup_sum += row2.nb_logts_prop_occup;
					if (operation_result_tAggregateRow_3.nb_logts_loc_sum == null) {
						operation_result_tAggregateRow_3.nb_logts_loc_sum = (int) 0;
					}

					if (row2.nb_logts_loc != null)
						operation_result_tAggregateRow_3.nb_logts_loc_sum += row2.nb_logts_loc;
					if (operation_result_tAggregateRow_3.nb_locaux_sum == null) {
						operation_result_tAggregateRow_3.nb_locaux_sum = (int) 0;
					}

					if (row2.nb_locaux != null)
						operation_result_tAggregateRow_3.nb_locaux_sum += row2.nb_locaux;
					if (operation_result_tAggregateRow_3.nb_locaux_vacants_sum == null) {
						operation_result_tAggregateRow_3.nb_locaux_vacants_sum = (int) 0;
					}

					if (row2.nb_locaux_vacants != null)
						operation_result_tAggregateRow_3.nb_locaux_vacants_sum += row2.nb_locaux_vacants;
					if (operation_result_tAggregateRow_3.annee_constr_min_min == null
							|| row2.annee_constr_min < operation_result_tAggregateRow_3.annee_constr_min_min

					) {
						operation_result_tAggregateRow_3.annee_constr_min_min = row2.annee_constr_min;
					}

					if (operation_result_tAggregateRow_3.annee_constr_max_max == null
							|| row2.annee_constr_max > operation_result_tAggregateRow_3.annee_constr_max_max

					) {
						operation_result_tAggregateRow_3.annee_constr_max_max = row2.annee_constr_max;
					}

					operation_result_tAggregateRow_3.annee_constr_moy_count++;

					if (operation_result_tAggregateRow_3.annee_constr_moy_sum == null) {
						operation_result_tAggregateRow_3.annee_constr_moy_sum = (double) 0;
					}

					if (row2.annee_constr_moy != null)
						operation_result_tAggregateRow_3.annee_constr_moy_sum += row2.annee_constr_moy;
					if (operation_result_tAggregateRow_3.nature_local_list
							.length() > 0) {
						operation_result_tAggregateRow_3.nature_local_list
								.append(",");
					} else if (operation_result_tAggregateRow_3.nature_local_list_firstEmpty) {
						operation_result_tAggregateRow_3.nature_local_list
								.append(",");
					}
					if (operation_result_tAggregateRow_3.nature_local_list != null) {
						if (operation_result_tAggregateRow_3.nature_local_list_firstEmpty == false
								&& ("").equals(String
										.valueOf(row2.nature_local))) {
							operation_result_tAggregateRow_3.nature_local_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_3.nature_local_list = operation_result_tAggregateRow_3.nature_local_list
								.append(String.valueOf(row2.nature_local));
					}

					if (operation_result_tAggregateRow_3.type_local_list
							.length() > 0) {
						operation_result_tAggregateRow_3.type_local_list
								.append(",");
					} else if (operation_result_tAggregateRow_3.type_local_list_firstEmpty) {
						operation_result_tAggregateRow_3.type_local_list
								.append(",");
					}
					if (operation_result_tAggregateRow_3.type_local_list != null) {
						if (operation_result_tAggregateRow_3.type_local_list_firstEmpty == false
								&& ("").equals(String.valueOf(row2.type_local))) {
							operation_result_tAggregateRow_3.type_local_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_3.type_local_list = operation_result_tAggregateRow_3.type_local_list
								.append(String.valueOf(row2.type_local));
					}

					tos_count_tAggregateRow_3_AGGOUT++;

					/**
					 * [tAggregateRow_3_AGGOUT main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE",
						nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_3_AGGOUT";

				ok_Hash.put("tAggregateRow_3_AGGOUT", true);
				end_Hash.put("tAggregateRow_3_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.target_path + "bati_infos_temp3.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);

				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /**
				 * Start field
				 * tFileOutputDelimited_5:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
				 * Start
				 * field tFileOutputDelimited_5:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;
				try {
					outtFileOutputDelimited_5 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_5,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_5 begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN begin ] start
					 */

					ok_Hash.put("tAggregateRow_3_AGGIN", false);
					start_Hash.put("tAggregateRow_3_AGGIN",
							System.currentTimeMillis());
					currentComponent = "tAggregateRow_3_AGGIN";

					int tos_count_tAggregateRow_3_AGGIN = 0;

					java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3
							.values();

					globalMap.put("tAggregateRow_3_NB_LINE",
							values_tAggregateRow_3.size());

					for (AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600

						/**
						 * [tAggregateRow_3_AGGIN begin ] stop
						 */
						/**
						 * [tAggregateRow_3_AGGIN main ] start
						 */

						currentComponent = "tAggregateRow_3_AGGIN";

						row15.ccocom = aggregated_row_tAggregateRow_3.ccocom;

						row15.id_parc = aggregated_row_tAggregateRow_3.id_parc;

						row15.dnubat = aggregated_row_tAggregateRow_3.dnubat;

						row15.nb_niv = aggregated_row_tAggregateRow_3.nb_niv_max;
						row15.shon_totale = aggregated_row_tAggregateRow_3.shon_totale_sum;
						row15.shon_habitat = aggregated_row_tAggregateRow_3.shon_habitat_sum;
						row15.shon_activite = aggregated_row_tAggregateRow_3.shon_activite_sum;
						row15.nb_logts = aggregated_row_tAggregateRow_3.nb_logts_sum;
						row15.nb_logts_hlm = aggregated_row_tAggregateRow_3.nb_logts_hlm_sum;
						row15.nb_logts_sem = aggregated_row_tAggregateRow_3.nb_logts_sem_sum;
						row15.nb_logts_hlm_sem = aggregated_row_tAggregateRow_3.nb_logts_hlm_sem_sum;
						row15.nb_logts_vacants = aggregated_row_tAggregateRow_3.nb_logts_vacants_sum;
						row15.nb_logts_prop_occup = aggregated_row_tAggregateRow_3.nb_logts_prop_occup_sum;
						row15.nb_logts_loc = aggregated_row_tAggregateRow_3.nb_logts_loc_sum;
						row15.nb_locaux = aggregated_row_tAggregateRow_3.nb_locaux_sum;
						row15.nb_locaux_vacants = aggregated_row_tAggregateRow_3.nb_locaux_vacants_sum;

						row15.nature_local = aggregated_row_tAggregateRow_3.nature_local_list
								.toString();

						row15.type_local = aggregated_row_tAggregateRow_3.type_local_list
								.toString();

						row15.annee_constr_min = aggregated_row_tAggregateRow_3.annee_constr_min_min;
						row15.annee_constr_max = aggregated_row_tAggregateRow_3.annee_constr_max_max;
						if (aggregated_row_tAggregateRow_3.annee_constr_moy_count > 0) {

							double row15_annee_constr_moy_temp = (double) aggregated_row_tAggregateRow_3.annee_constr_moy_sum
									/ (double) aggregated_row_tAggregateRow_3.annee_constr_moy_count;

							row15.annee_constr_moy = (int) row15_annee_constr_moy_temp;

						} else {
							String count = "0";

							row15.annee_constr_moy = ParserUtils
									.parseTo_Integer(count);

						}

						tos_count_tAggregateRow_3_AGGIN++;

						/**
						 * [tAggregateRow_3_AGGIN main ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 main ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();

						if (row15.ccocom != null) {

							sb_tFileOutputDelimited_5.append(

							row15.ccocom

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.id_parc != null) {

							sb_tFileOutputDelimited_5.append(

							row15.id_parc

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.dnubat != null) {

							sb_tFileOutputDelimited_5.append(

							row15.dnubat

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_niv != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_niv

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.shon_totale != null) {

							sb_tFileOutputDelimited_5.append(

							row15.shon_totale

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.shon_habitat != null) {

							sb_tFileOutputDelimited_5.append(

							row15.shon_habitat

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.shon_activite != null) {

							sb_tFileOutputDelimited_5.append(

							row15.shon_activite

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_logts != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_logts

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_logts_hlm != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_logts_hlm

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_logts_sem != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_logts_sem

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_logts_hlm_sem != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_logts_hlm_sem

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_logts_vacants != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_logts_vacants

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_logts_prop_occup != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_logts_prop_occup

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_logts_loc != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_logts_loc

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_locaux != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_locaux

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nb_locaux_vacants != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nb_locaux_vacants

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.nature_local != null) {

							sb_tFileOutputDelimited_5.append(

							row15.nature_local

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.type_local != null) {

							sb_tFileOutputDelimited_5.append(

							row15.type_local

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.annee_constr_min != null) {

							sb_tFileOutputDelimited_5.append(

							row15.annee_constr_min

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.annee_constr_max != null) {

							sb_tFileOutputDelimited_5.append(

							row15.annee_constr_max

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);

						if (row15.annee_constr_moy != null) {

							sb_tFileOutputDelimited_5.append(

							row15.annee_constr_moy

							);

						}

						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

						nb_line_tFileOutputDelimited_5++;

						outtFileOutputDelimited_5
								.write(sb_tFileOutputDelimited_5.toString());

						tos_count_tFileOutputDelimited_5++;

						/**
						 * [tFileOutputDelimited_5 main ] stop
						 */

						/**
						 * [tAggregateRow_3_AGGIN end ] start
						 */

						currentComponent = "tAggregateRow_3_AGGIN";

					} // G_AggR_600

					ok_Hash.put("tAggregateRow_3_AGGIN", true);
					end_Hash.put("tAggregateRow_3_AGGIN",
							System.currentTimeMillis());

					/**
					 * [tAggregateRow_3_AGGIN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 end ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

				} finally {
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
					globalMap.put("tFileOutputDelimited_5_NB_LINE",
							nb_line_tFileOutputDelimited_5);
					globalMap.put("tFileOutputDelimited_5_FILE_NAME",
							fileName_tFileOutputDelimited_5);
				} // finally

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tAggregateRow_3_AGGIN"
			globalMap.remove("tAggregateRow_3");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tAggregateRow_5_AGGIN"
			globalMap.remove("tAggregateRow_5");

			// free memory for "tAggregateRow_6_AGGIN"
			globalMap.remove("tAggregateRow_6");

			// free memory for "tAggregateRow_11_AGGIN"
			globalMap.remove("tAggregateRow_11");

			// free memory for "tSortRow_3_SortIn"
			globalMap.remove("tSortRow_3");

			// free memory for "tAggregateRow_9_AGGIN"
			globalMap.remove("tAggregateRow_9");

			// free memory for "tAggregateRow_12_AGGIN"
			globalMap.remove("tAggregateRow_12");

			// free memory for "tSortRow_4_SortIn"
			globalMap.remove("tSortRow_4");

			// free memory for "tAggregateRow_10_AGGIN"
			globalMap.remove("tAggregateRow_10");

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final etape4_info_bati etape4_info_batiClass = new etape4_info_bati();

		int exitCode = etape4_info_batiClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = etape4_info_bati.class
					.getClassLoader().getResourceAsStream(
							"majic/etape4_info_bati_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.extfichier = (String) context.getProperty("extfichier");
			context.nbat10 = (String) context.getProperty("nbat10");
			context.target_path = (String) context.getProperty("target_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("extfichier")) {
				context.extfichier = (String) parentContextMap
						.get("extfichier");
			}
			if (parentContextMap.containsKey("nbat10")) {
				context.nbat10 = (String) parentContextMap.get("nbat10");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {

			e_tFileInputDelimited_1.printStackTrace();
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : etape4_info_bati");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 436239 characters generated by Talend Open Studio for Data Integration on the
 * 8 janvier 2014 18:58:49 CET
 ************************************************************************************************/
