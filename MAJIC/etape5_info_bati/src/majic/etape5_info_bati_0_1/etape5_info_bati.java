// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package majic.etape5_info_bati_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.OpenStreetMap;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.GeometryUtility;
import routines.GeometryOperation;
import routines.GeoOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: etape5_info_bati Purpose: <br>
 * Description:  <br>
 * @author thomas.brosset@quelleville.fr
 * @version 5.3.1.r104014
 * @status 
 */
public class etape5_info_bati implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (extfichier != null) {

				this.setProperty("extfichier", extfichier.toString());

			}

			if (nbat10 != null) {

				this.setProperty("nbat10", nbat10.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

		}

		public String extfichier;

		public String getExtfichier() {
			return this.extfichier;
		}

		public String nbat10;

		public String getNbat10() {
			return this.nbat10;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "etape5_info_bati";
	private final String projectName = "MAJIC";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					etape5_info_bati.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(etape5_info_bati.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class synth_batiStruct implements
			routines.system.IPersistableRow<synth_batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		public Integer nb_prop;

		public Integer getNb_prop() {
			return this.nb_prop;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

					this.nb_prop = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

				// Integer

				writeInteger(this.nb_prop, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append(",nb_prop=" + String.valueOf(nb_prop));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(synth_batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime
						* result
						+ ((this.id_parc == null) ? 0 : this.id_parc.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.id_parc == null) {
				if (other.id_parc != null)
					return false;
			} else if (!this.id_parc.equals(other.id_parc))
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;
			other.dnubat = this.dnubat;
			other.nb_niv = this.nb_niv;
			other.shon_totale = this.shon_totale;
			other.shon_habitat = this.shon_habitat;
			other.shon_activite = this.shon_activite;
			other.nb_logts = this.nb_logts;
			other.nb_logts_hlm = this.nb_logts_hlm;
			other.nb_logts_sem = this.nb_logts_sem;
			other.nb_logts_hlm_sem = this.nb_logts_hlm_sem;
			other.nb_logts_vacants = this.nb_logts_vacants;
			other.nb_logts_prop_occup = this.nb_logts_prop_occup;
			other.nb_logts_loc = this.nb_logts_loc;
			other.nb_locaux = this.nb_locaux;
			other.nb_locaux_vacants = this.nb_locaux_vacants;
			other.nature_local = this.nature_local;
			other.type_local = this.type_local;
			other.annee_constr_min = this.annee_constr_min;
			other.annee_constr_max = this.annee_constr_max;
			other.annee_constr_moy = this.annee_constr_moy;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.dnubat = readString(dis, ois);

				this.nb_niv = readInteger(dis, ois);

				this.shon_totale = readInteger(dis, ois);

				this.shon_habitat = readInteger(dis, ois);

				this.shon_activite = readInteger(dis, ois);

				this.nb_logts = readInteger(dis, ois);

				this.nb_logts_hlm = readInteger(dis, ois);

				this.nb_logts_sem = readInteger(dis, ois);

				this.nb_logts_hlm_sem = readInteger(dis, ois);

				this.nb_logts_vacants = readInteger(dis, ois);

				this.nb_logts_prop_occup = readInteger(dis, ois);

				this.nb_logts_loc = readInteger(dis, ois);

				this.nb_locaux = readInteger(dis, ois);

				this.nb_locaux_vacants = readInteger(dis, ois);

				this.nature_local = readString(dis, ois);

				this.type_local = readString(dis, ois);

				this.annee_constr_min = readInteger(dis, ois);

				this.annee_constr_max = readInteger(dis, ois);

				this.annee_constr_moy = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.dnubat, dos, oos);

				writeInteger(this.nb_niv, dos, oos);

				writeInteger(this.shon_totale, dos, oos);

				writeInteger(this.shon_habitat, dos, oos);

				writeInteger(this.shon_activite, dos, oos);

				writeInteger(this.nb_logts, dos, oos);

				writeInteger(this.nb_logts_hlm, dos, oos);

				writeInteger(this.nb_logts_sem, dos, oos);

				writeInteger(this.nb_logts_hlm_sem, dos, oos);

				writeInteger(this.nb_logts_vacants, dos, oos);

				writeInteger(this.nb_logts_prop_occup, dos, oos);

				writeInteger(this.nb_logts_loc, dos, oos);

				writeInteger(this.nb_locaux, dos, oos);

				writeInteger(this.nb_locaux_vacants, dos, oos);

				writeString(this.nature_local, dos, oos);

				writeString(this.type_local, dos, oos);

				writeInteger(this.annee_constr_min, dos, oos);

				writeInteger(this.annee_constr_max, dos, oos);

				writeInteger(this.annee_constr_moy, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_parc, other.id_parc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_4Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_4Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row5Struct row5 = new row5Struct();
				synth_batiStruct synth_bati = new synth_batiStruct();

				/**
				 * [tMap_1_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_1_TMAP_OUT", false);
				start_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_1_TMAP_OUT";

				int tos_count_tMap_1_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row11Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row11Struct>) globalMap
						.get("tHash_Lookup_row11"));

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1_TMAP_OUT__Struct {
				}
				Var__tMap_1_TMAP_OUT__Struct Var__tMap_1_TMAP_OUT = new Var__tMap_1_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_1_1 implements
						Comparable<SortableRow_tMap_1_1>,
						routines.system.IPersistableRow<SortableRow_tMap_1_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row11__ccocom;
					String exprKey_row11__id_parc;
					String exprKey_row11__dnubat;

					// row5
					String row5__ccocom;
					String row5__id_parc;
					String row5__dnubat;
					Integer row5__nb_niv;
					Integer row5__shon_totale;
					Integer row5__shon_habitat;
					Integer row5__shon_activite;
					Integer row5__nb_logts;
					Integer row5__nb_logts_hlm;
					Integer row5__nb_logts_sem;
					Integer row5__nb_logts_hlm_sem;
					Integer row5__nb_logts_vacants;
					Integer row5__nb_logts_prop_occup;
					Integer row5__nb_logts_loc;
					Integer row5__nb_locaux;
					Integer row5__nb_locaux_vacants;
					String row5__nature_local;
					String row5__type_local;
					Integer row5__annee_constr_min;
					Integer row5__annee_constr_max;
					Integer row5__annee_constr_moy;

					public void fillFrom(row5Struct row5,
							String exprKey_row11__ccocom,
							String exprKey_row11__id_parc,
							String exprKey_row11__dnubat) {

						this.row5__ccocom = row5.ccocom;
						this.row5__id_parc = row5.id_parc;
						this.row5__dnubat = row5.dnubat;
						this.row5__nb_niv = row5.nb_niv;
						this.row5__shon_totale = row5.shon_totale;
						this.row5__shon_habitat = row5.shon_habitat;
						this.row5__shon_activite = row5.shon_activite;
						this.row5__nb_logts = row5.nb_logts;
						this.row5__nb_logts_hlm = row5.nb_logts_hlm;
						this.row5__nb_logts_sem = row5.nb_logts_sem;
						this.row5__nb_logts_hlm_sem = row5.nb_logts_hlm_sem;
						this.row5__nb_logts_vacants = row5.nb_logts_vacants;
						this.row5__nb_logts_prop_occup = row5.nb_logts_prop_occup;
						this.row5__nb_logts_loc = row5.nb_logts_loc;
						this.row5__nb_locaux = row5.nb_locaux;
						this.row5__nb_locaux_vacants = row5.nb_locaux_vacants;
						this.row5__nature_local = row5.nature_local;
						this.row5__type_local = row5.type_local;
						this.row5__annee_constr_min = row5.annee_constr_min;
						this.row5__annee_constr_max = row5.annee_constr_max;
						this.row5__annee_constr_moy = row5.annee_constr_moy;
						this.exprKey_row11__ccocom = exprKey_row11__ccocom;
						this.exprKey_row11__id_parc = exprKey_row11__id_parc;
						this.exprKey_row11__dnubat = exprKey_row11__dnubat;

					}

					public void copyDataTo(row5Struct row5) {

						row5.ccocom = this.row5__ccocom;
						row5.id_parc = this.row5__id_parc;
						row5.dnubat = this.row5__dnubat;
						row5.nb_niv = this.row5__nb_niv;
						row5.shon_totale = this.row5__shon_totale;
						row5.shon_habitat = this.row5__shon_habitat;
						row5.shon_activite = this.row5__shon_activite;
						row5.nb_logts = this.row5__nb_logts;
						row5.nb_logts_hlm = this.row5__nb_logts_hlm;
						row5.nb_logts_sem = this.row5__nb_logts_sem;
						row5.nb_logts_hlm_sem = this.row5__nb_logts_hlm_sem;
						row5.nb_logts_vacants = this.row5__nb_logts_vacants;
						row5.nb_logts_prop_occup = this.row5__nb_logts_prop_occup;
						row5.nb_logts_loc = this.row5__nb_logts_loc;
						row5.nb_locaux = this.row5__nb_locaux;
						row5.nb_locaux_vacants = this.row5__nb_locaux_vacants;
						row5.nature_local = this.row5__nature_local;
						row5.type_local = this.row5__type_local;
						row5.annee_constr_min = this.row5__annee_constr_min;
						row5.annee_constr_max = this.row5__annee_constr_max;
						row5.annee_constr_moy = this.row5__annee_constr_moy;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row5__ccocom");
						sb.append("=");
						sb.append(String.valueOf(this.row5__ccocom));

						sb.append(", ");

						sb.append("row5__id_parc");
						sb.append("=");
						sb.append(String.valueOf(this.row5__id_parc));

						sb.append(", ");

						sb.append("row5__dnubat");
						sb.append("=");
						sb.append(String.valueOf(this.row5__dnubat));

						sb.append(", ");

						sb.append("row5__nb_niv");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_niv));

						sb.append(", ");

						sb.append("row5__shon_totale");
						sb.append("=");
						sb.append(String.valueOf(this.row5__shon_totale));

						sb.append(", ");

						sb.append("row5__shon_habitat");
						sb.append("=");
						sb.append(String.valueOf(this.row5__shon_habitat));

						sb.append(", ");

						sb.append("row5__shon_activite");
						sb.append("=");
						sb.append(String.valueOf(this.row5__shon_activite));

						sb.append(", ");

						sb.append("row5__nb_logts");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_logts));

						sb.append(", ");

						sb.append("row5__nb_logts_hlm");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_logts_hlm));

						sb.append(", ");

						sb.append("row5__nb_logts_sem");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_logts_sem));

						sb.append(", ");

						sb.append("row5__nb_logts_hlm_sem");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_logts_hlm_sem));

						sb.append(", ");

						sb.append("row5__nb_logts_vacants");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_logts_vacants));

						sb.append(", ");

						sb.append("row5__nb_logts_prop_occup");
						sb.append("=");
						sb.append(String
								.valueOf(this.row5__nb_logts_prop_occup));

						sb.append(", ");

						sb.append("row5__nb_logts_loc");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_logts_loc));

						sb.append(", ");

						sb.append("row5__nb_locaux");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_locaux));

						sb.append(", ");

						sb.append("row5__nb_locaux_vacants");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nb_locaux_vacants));

						sb.append(", ");

						sb.append("row5__nature_local");
						sb.append("=");
						sb.append(String.valueOf(this.row5__nature_local));

						sb.append(", ");

						sb.append("row5__type_local");
						sb.append("=");
						sb.append(String.valueOf(this.row5__type_local));

						sb.append(", ");

						sb.append("row5__annee_constr_min");
						sb.append("=");
						sb.append(String.valueOf(this.row5__annee_constr_min));

						sb.append(", ");

						sb.append("row5__annee_constr_max");
						sb.append("=");
						sb.append(String.valueOf(this.row5__annee_constr_max));

						sb.append(", ");

						sb.append("row5__annee_constr_moy");
						sb.append("=");
						sb.append(String.valueOf(this.row5__annee_constr_moy));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_1_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row11__ccocom,
								other.exprKey_row11__ccocom);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row11__id_parc,
								other.exprKey_row11__id_parc);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row11__dnubat,
								other.exprKey_row11__dnubat);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row5Struct.commonByteArrayLock_MAJIC_etape5_info_bati) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.row5__ccocom = null;
								} else {
									if (length > row5Struct.commonByteArray_MAJIC_etape5_info_bati.length) {
										if (length < 1024
												&& row5Struct.commonByteArray_MAJIC_etape5_info_bati.length == 0) {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
										} else {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
									this.row5__ccocom = new String(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row5__id_parc = null;
								} else {
									if (length > row5Struct.commonByteArray_MAJIC_etape5_info_bati.length) {
										if (length < 1024
												&& row5Struct.commonByteArray_MAJIC_etape5_info_bati.length == 0) {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
										} else {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
									this.row5__id_parc = new String(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row5__dnubat = null;
								} else {
									if (length > row5Struct.commonByteArray_MAJIC_etape5_info_bati.length) {
										if (length < 1024
												&& row5Struct.commonByteArray_MAJIC_etape5_info_bati.length == 0) {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
										} else {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
									this.row5__dnubat = new String(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_niv = null;
								} else {
									this.row5__nb_niv = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__shon_totale = null;
								} else {
									this.row5__shon_totale = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__shon_habitat = null;
								} else {
									this.row5__shon_habitat = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__shon_activite = null;
								} else {
									this.row5__shon_activite = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_logts = null;
								} else {
									this.row5__nb_logts = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_logts_hlm = null;
								} else {
									this.row5__nb_logts_hlm = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_logts_sem = null;
								} else {
									this.row5__nb_logts_sem = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_logts_hlm_sem = null;
								} else {
									this.row5__nb_logts_hlm_sem = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_logts_vacants = null;
								} else {
									this.row5__nb_logts_vacants = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_logts_prop_occup = null;
								} else {
									this.row5__nb_logts_prop_occup = dis
											.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_logts_loc = null;
								} else {
									this.row5__nb_logts_loc = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_locaux = null;
								} else {
									this.row5__nb_locaux = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__nb_locaux_vacants = null;
								} else {
									this.row5__nb_locaux_vacants = dis
											.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.row5__nature_local = null;
								} else {
									if (length > row5Struct.commonByteArray_MAJIC_etape5_info_bati.length) {
										if (length < 1024
												&& row5Struct.commonByteArray_MAJIC_etape5_info_bati.length == 0) {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
										} else {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
									this.row5__nature_local = new String(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row5__type_local = null;
								} else {
									if (length > row5Struct.commonByteArray_MAJIC_etape5_info_bati.length) {
										if (length < 1024
												&& row5Struct.commonByteArray_MAJIC_etape5_info_bati.length == 0) {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
										} else {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
									this.row5__type_local = new String(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__annee_constr_min = null;
								} else {
									this.row5__annee_constr_min = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__annee_constr_max = null;
								} else {
									this.row5__annee_constr_max = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row5__annee_constr_moy = null;
								} else {
									this.row5__annee_constr_moy = dis.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row11__ccocom = null;
								} else {
									if (length > row5Struct.commonByteArray_MAJIC_etape5_info_bati.length) {
										if (length < 1024
												&& row5Struct.commonByteArray_MAJIC_etape5_info_bati.length == 0) {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
										} else {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
									this.exprKey_row11__ccocom = new String(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row11__id_parc = null;
								} else {
									if (length > row5Struct.commonByteArray_MAJIC_etape5_info_bati.length) {
										if (length < 1024
												&& row5Struct.commonByteArray_MAJIC_etape5_info_bati.length == 0) {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
										} else {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
									this.exprKey_row11__id_parc = new String(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row11__dnubat = null;
								} else {
									if (length > row5Struct.commonByteArray_MAJIC_etape5_info_bati.length) {
										if (length < 1024
												&& row5Struct.commonByteArray_MAJIC_etape5_info_bati.length == 0) {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
										} else {
											row5Struct.commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
										}
									}
									dis.readFully(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
									this.exprKey_row11__dnubat = new String(
											row5Struct.commonByteArray_MAJIC_etape5_info_bati,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row5__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row5__ccocom.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row5__id_parc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row5__id_parc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row5__dnubat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row5__dnubat.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row5__nb_niv == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_niv);
							}

							if (this.row5__shon_totale == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__shon_totale);
							}

							if (this.row5__shon_habitat == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__shon_habitat);
							}

							if (this.row5__shon_activite == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__shon_activite);
							}

							if (this.row5__nb_logts == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_logts);
							}

							if (this.row5__nb_logts_hlm == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_logts_hlm);
							}

							if (this.row5__nb_logts_sem == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_logts_sem);
							}

							if (this.row5__nb_logts_hlm_sem == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_logts_hlm_sem);
							}

							if (this.row5__nb_logts_vacants == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_logts_vacants);
							}

							if (this.row5__nb_logts_prop_occup == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_logts_prop_occup);
							}

							if (this.row5__nb_logts_loc == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_logts_loc);
							}

							if (this.row5__nb_locaux == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_locaux);
							}

							if (this.row5__nb_locaux_vacants == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__nb_locaux_vacants);
							}

							if (this.row5__nature_local == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row5__nature_local
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row5__type_local == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row5__type_local
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row5__annee_constr_min == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__annee_constr_min);
							}

							if (this.row5__annee_constr_max == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__annee_constr_max);
							}

							if (this.row5__annee_constr_moy == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row5__annee_constr_moy);
							}

							if (this.exprKey_row11__ccocom == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row11__ccocom
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row11__id_parc == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row11__id_parc
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row11__dnubat == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row11__dnubat
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1> fsi_tMap_1_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1>(
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_tMap_1_1", 2000000) {
					public SortableRow_tMap_1_1 createRowInstance() {
						return new SortableRow_tMap_1_1();
					}
				};

				fsi_tMap_1_1.initPut();

				/**
				 * [tMap_1_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				try {

					Object filename_tFileInputDelimited_4 = context.target_path
							+ "bati_infos_temp3.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0
								|| random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								context.target_path + "bati_infos_temp3.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null
							&& fid_tFileInputDelimited_4.nextRecord()) {

						row5 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row5.ccocom = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row5.id_parc = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							row5.dnubat = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_niv = ParserUtils.parseTo_Integer(temp);

							} else {

								row5.nb_niv = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 4;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.shon_totale = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.shon_totale = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 5;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.shon_habitat = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.shon_habitat = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 6;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.shon_activite = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.shon_activite = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 7;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_logts = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_logts = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 8;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_logts_hlm = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_logts_hlm = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 9;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_logts_sem = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_logts_sem = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 10;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_logts_hlm_sem = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_logts_hlm_sem = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 11;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_logts_vacants = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_logts_vacants = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 12;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_logts_prop_occup = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_logts_prop_occup = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 13;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_logts_loc = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_logts_loc = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 14;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_locaux = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_locaux = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 15;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.nb_locaux_vacants = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.nb_locaux_vacants = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 16;

							row5.nature_local = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 17;

							row5.type_local = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 18;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.annee_constr_min = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.annee_constr_min = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 19;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.annee_constr_max = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.annee_constr_max = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 20;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								row5.annee_constr_moy = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row5.annee_constr_moy = null;

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_1_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_1_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							String exprKey_row11__ccocom = row5.ccocom;

							String exprKey_row11__id_parc = row5.id_parc;

							String exprKey_row11__dnubat = row5.dnubat;

							SortableRow_tMap_1_1 sortableRow_tMap_1_1 = fsi_tMap_1_1
									.getNextFreeRow();

							sortableRow_tMap_1_1.fillFrom(row5,
									exprKey_row11__ccocom,
									exprKey_row11__id_parc,
									exprKey_row11__dnubat);

							fsi_tMap_1_1.put(sortableRow_tMap_1_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1_TMAP_OUT = false;
							boolean mainRowRejected_tMap_1_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_1_TMAP_OUT++;

							/**
							 * [tMap_1_TMAP_OUT main ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) (context.target_path + "bati_infos_temp3.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								fid_tFileInputDelimited_4.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_1_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_1_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1_TMAP_OUT", true);
				end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_1_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.target_path + "bati_infos.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				String[] headColutFileOutputDelimited_1 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;
				try {
					CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_1,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_1
							.setSeparator(csvSettings_tFileOutputDelimited_1
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_1
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_1.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_1
										.getRowDelim());
					}

					if (filetFileOutputDelimited_1.length() == 0) {

						headColutFileOutputDelimited_1[0] = "ccocom";

						headColutFileOutputDelimited_1[1] = "id_parc";

						headColutFileOutputDelimited_1[2] = "dnubat";

						headColutFileOutputDelimited_1[3] = "nb_niv";

						headColutFileOutputDelimited_1[4] = "shon_totale";

						headColutFileOutputDelimited_1[5] = "shon_habitat";

						headColutFileOutputDelimited_1[6] = "shon_activite";

						headColutFileOutputDelimited_1[7] = "nb_logts";

						headColutFileOutputDelimited_1[8] = "nb_logts_hlm";

						headColutFileOutputDelimited_1[9] = "nb_logts_sem";

						headColutFileOutputDelimited_1[10] = "nb_logts_hlm_sem";

						headColutFileOutputDelimited_1[11] = "nb_logts_vacants";

						headColutFileOutputDelimited_1[12] = "nb_logts_prop_occup";

						headColutFileOutputDelimited_1[13] = "nb_logts_loc";

						headColutFileOutputDelimited_1[14] = "nb_locaux";

						headColutFileOutputDelimited_1[15] = "nb_locaux_vacants";

						headColutFileOutputDelimited_1[16] = "nature_local";

						headColutFileOutputDelimited_1[17] = "type_local";

						headColutFileOutputDelimited_1[18] = "annee_constr_min";

						headColutFileOutputDelimited_1[19] = "annee_constr_max";

						headColutFileOutputDelimited_1[20] = "annee_constr_moy";

						headColutFileOutputDelimited_1[21] = "nb_prop";

						CsvWritertFileOutputDelimited_1
								.writeNext(headColutFileOutputDelimited_1);
						CsvWritertFileOutputDelimited_1.flush();

					}

					CsvWritertFileOutputDelimited_1
							.setEscapeChar(csvSettings_tFileOutputDelimited_1
									.getEscapeChar());
					CsvWritertFileOutputDelimited_1
							.setQuoteChar(csvSettings_tFileOutputDelimited_1
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_1
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tMap_1_TMAP_IN begin ] start
					 */

					ok_Hash.put("tMap_1_TMAP_IN", false);
					start_Hash
							.put("tMap_1_TMAP_IN", System.currentTimeMillis());
					currentComponent = "tMap_1_TMAP_IN";

					int tos_count_tMap_1_TMAP_IN = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1_TMAP_IN__Struct {
					}
					Var__tMap_1_TMAP_IN__Struct Var__tMap_1_TMAP_IN = new Var__tMap_1_TMAP_IN__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					synth_batiStruct synth_bati_tmp = new synth_batiStruct();
					// ###############################

					/**
					 * [tMap_1_TMAP_IN begin ] stop
					 */
					/**
					 * [tMap_1_TMAP_IN main ] start
					 */

					currentComponent = "tMap_1_TMAP_IN";

					boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

					fsi_tMap_1_1.endPut();

					if (row5 == null) {
						row5 = new row5Struct();
					}

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1_TMAP_IN = false;
					boolean mainRowRejected_tMap_1_TMAP_IN = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row11"
					// /////////////////////////////////////////////

					SortableRow_tMap_1_1 rsc_tMap_1_1;

					tHash_Lookup_row11.initGet();

					fsi_tMap_1_1.initGet();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=true

					rejectedInnerJoin_tMap_1_TMAP_IN = false;

					while (fsi_tMap_1_1.hasNext()) { // G_TM_M_250 loop "1"

						// CALL close loop of lookup '1'

						rsc_tMap_1_1 = (SortableRow_tMap_1_1) fsi_tMap_1_1
								.next();
						rsc_tMap_1_1.copyDataTo(row5);

						rejectedInnerJoin_tMap_1_TMAP_IN = rsc_tMap_1_1.is__rejectedInnerJoin;

						boolean forceLooprow11 = false;

						row11Struct row11ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

							row11HashKey.ccocom = rsc_tMap_1_1.exprKey_row11__ccocom;

							row11HashKey.id_parc = rsc_tMap_1_1.exprKey_row11__id_parc;

							row11HashKey.dnubat = rsc_tMap_1_1.exprKey_row11__dnubat;

							tHash_Lookup_row11.lookup(row11HashKey);

						} // G_TM_M_020

						row11Struct row11 = null;

						row11Struct fromLookup_row11 = null;
						row11 = row11Default;

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.hasNext()) { // G 099

							fromLookup_row11 = tHash_Lookup_row11.next();

						} // G 099

						if (fromLookup_row11 != null) {
							row11 = fromLookup_row11;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1_TMAP_IN__Struct Var = Var__tMap_1_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							synth_bati = null;

							// # Output table : 'synth_bati'
							synth_bati_tmp.ccocom = row5.ccocom;
							synth_bati_tmp.id_parc = row5.id_parc;
							synth_bati_tmp.dnubat = row5.dnubat;
							synth_bati_tmp.nb_niv = row5.nb_niv;
							synth_bati_tmp.shon_totale = row5.shon_totale;
							synth_bati_tmp.shon_habitat = row5.shon_habitat;
							synth_bati_tmp.shon_activite = row5.shon_activite;
							synth_bati_tmp.nb_logts = row5.nb_logts;
							synth_bati_tmp.nb_logts_hlm = row5.nb_logts_hlm;
							synth_bati_tmp.nb_logts_sem = row5.nb_logts_sem;
							synth_bati_tmp.nb_logts_hlm_sem = row5.nb_logts_hlm_sem;
							synth_bati_tmp.nb_logts_vacants = row5.nb_logts_vacants;
							synth_bati_tmp.nb_logts_prop_occup = row5.nb_logts_prop_occup;
							synth_bati_tmp.nb_logts_loc = row5.nb_logts_loc;
							synth_bati_tmp.nb_locaux = row5.nb_locaux;
							synth_bati_tmp.nb_locaux_vacants = row5.nb_locaux_vacants;
							synth_bati_tmp.nature_local = row5.nature_local;
							synth_bati_tmp.type_local = row5.type_local;
							synth_bati_tmp.annee_constr_min = row5.annee_constr_min;
							synth_bati_tmp.annee_constr_max = row5.annee_constr_max;
							synth_bati_tmp.annee_constr_moy = row5.annee_constr_moy;
							synth_bati_tmp.nb_prop = row11.nb_prop;
							synth_bati = synth_bati_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1_TMAP_IN = false;

						tos_count_tMap_1_TMAP_IN++;

						/**
						 * [tMap_1_TMAP_IN main ] stop
						 */
						// Start of branch "synth_bati"
						if (synth_bati != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							String[] rowtFileOutputDelimited_1 = new String[22];

							rowtFileOutputDelimited_1[0] = synth_bati.ccocom == null ? ""
									: synth_bati.ccocom;

							rowtFileOutputDelimited_1[1] = synth_bati.id_parc == null ? ""
									: synth_bati.id_parc;

							rowtFileOutputDelimited_1[2] = synth_bati.dnubat == null ? ""
									: synth_bati.dnubat;

							rowtFileOutputDelimited_1[3] = synth_bati.nb_niv == null ? ""
									: String.valueOf(synth_bati.nb_niv);

							rowtFileOutputDelimited_1[4] = synth_bati.shon_totale == null ? ""
									: String.valueOf(synth_bati.shon_totale);

							rowtFileOutputDelimited_1[5] = synth_bati.shon_habitat == null ? ""
									: String.valueOf(synth_bati.shon_habitat);

							rowtFileOutputDelimited_1[6] = synth_bati.shon_activite == null ? ""
									: String.valueOf(synth_bati.shon_activite);

							rowtFileOutputDelimited_1[7] = synth_bati.nb_logts == null ? ""
									: String.valueOf(synth_bati.nb_logts);

							rowtFileOutputDelimited_1[8] = synth_bati.nb_logts_hlm == null ? ""
									: String.valueOf(synth_bati.nb_logts_hlm);

							rowtFileOutputDelimited_1[9] = synth_bati.nb_logts_sem == null ? ""
									: String.valueOf(synth_bati.nb_logts_sem);

							rowtFileOutputDelimited_1[10] = synth_bati.nb_logts_hlm_sem == null ? ""
									: String.valueOf(synth_bati.nb_logts_hlm_sem);

							rowtFileOutputDelimited_1[11] = synth_bati.nb_logts_vacants == null ? ""
									: String.valueOf(synth_bati.nb_logts_vacants);

							rowtFileOutputDelimited_1[12] = synth_bati.nb_logts_prop_occup == null ? ""
									: String.valueOf(synth_bati.nb_logts_prop_occup);

							rowtFileOutputDelimited_1[13] = synth_bati.nb_logts_loc == null ? ""
									: String.valueOf(synth_bati.nb_logts_loc);

							rowtFileOutputDelimited_1[14] = synth_bati.nb_locaux == null ? ""
									: String.valueOf(synth_bati.nb_locaux);

							rowtFileOutputDelimited_1[15] = synth_bati.nb_locaux_vacants == null ? ""
									: String.valueOf(synth_bati.nb_locaux_vacants);

							rowtFileOutputDelimited_1[16] = synth_bati.nature_local == null ? ""
									: synth_bati.nature_local;

							rowtFileOutputDelimited_1[17] = synth_bati.type_local == null ? ""
									: synth_bati.type_local;

							rowtFileOutputDelimited_1[18] = synth_bati.annee_constr_min == null ? ""
									: String.valueOf(synth_bati.annee_constr_min);

							rowtFileOutputDelimited_1[19] = synth_bati.annee_constr_max == null ? ""
									: String.valueOf(synth_bati.annee_constr_max);

							rowtFileOutputDelimited_1[20] = synth_bati.annee_constr_moy == null ? ""
									: String.valueOf(synth_bati.annee_constr_moy);

							rowtFileOutputDelimited_1[21] = synth_bati.nb_prop == null ? ""
									: String.valueOf(synth_bati.nb_prop);

							nb_line_tFileOutputDelimited_1++;
							CsvWritertFileOutputDelimited_1
									.writeNext(rowtFileOutputDelimited_1);

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "synth_bati"

					} // G_TM_M_250 close loop read file data '1'

					/**
					 * [tMap_1_TMAP_IN end ] start
					 */

					currentComponent = "tMap_1_TMAP_IN";

					// ###############################
					// # Lookup hashes releasing
					fsi_tMap_1_1.endGet();

					if (tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove("tHash_Lookup_row11");

					// ###############################

					ok_Hash.put("tMap_1_TMAP_IN", true);
					end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

					/**
					 * [tMap_1_TMAP_IN end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public Integer nb_prop;

		public Integer getNb_prop() {
			return this.nb_prop;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime
						* result
						+ ((this.id_parc == null) ? 0 : this.id_parc.hashCode());

				result = prime * result
						+ ((this.dnubat == null) ? 0 : this.dnubat.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.id_parc == null) {
				if (other.id_parc != null)
					return false;
			} else if (!this.id_parc.equals(other.id_parc))
				return false;

			if (this.dnubat == null) {
				if (other.dnubat != null)
					return false;
			} else if (!this.dnubat.equals(other.dnubat))
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;
			other.dnubat = this.dnubat;
			other.nb_prop = this.nb_prop;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;
			other.dnubat = this.dnubat;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.dnubat = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dnubat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nb_prop = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.nb_prop, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dnubat=" + dnubat);
			sb.append(",nb_prop=" + String.valueOf(nb_prop));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_parc, other.id_parc);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.dnubat, other.dnubat);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row11";

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_4) outputs:(row11,row11) |
				// target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
				// linked node: tMap_1 - inputs:(row5,row11)
				// outputs:(synth_bati)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row11Struct> tHash_Lookup_row11 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row11Struct>(
						matchingModeEnum_row11,
						"/Users/thomasbrosset/Documents/Programmes Stand Alone/TOS_DI-r104014-V5.3.1/workspace/temp"
								+ "/"
								+ jobName
								+ "_tMapData_"
								+ pid
								+ "_Lookup_row11_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row11Struct createRowInstance() {
								return new row11Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row11.initPut();

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = context.target_path
							+ "bati_infos_temp1.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								context.target_path + "bati_infos_temp1.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {

						row11 = null;

						row11 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row11 = new row11Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row11.ccocom = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row11.id_parc = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row11.dnubat = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row11.nb_prop = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row11.nb_prop = null;

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row11 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tAdvancedHash_row11 main ] start
							 */

							currentComponent = "tAdvancedHash_row11";

							row11Struct row11_HashRow = tHash_Lookup_row11
									.getNextFreeRow();

							row11_HashRow.ccocom = row11.ccocom;

							row11_HashRow.id_parc = row11.id_parc;

							row11_HashRow.dnubat = row11.dnubat;

							row11_HashRow.nb_prop = row11.nb_prop;

							tHash_Lookup_row11.put(row11_HashRow);

							tos_count_tAdvancedHash_row11++;

							/**
							 * [tAdvancedHash_row11 main ] stop
							 */

						} // End of branch "row11"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (context.target_path + "bati_infos_temp1.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class synth_bati_parcelleStruct implements
			routines.system.IPersistableRow<synth_bati_parcelleStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public Integer nb_prop;

		public Integer getNb_prop() {
			return this.nb_prop;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.nb_prop = readInteger(dis);

					this.nature_local = readString(dis);

					this.type_local = readString(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// Integer

				writeInteger(this.nb_prop, dos);

				// String

				writeString(this.nature_local, dos);

				// String

				writeString(this.type_local, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",nb_prop=" + String.valueOf(nb_prop));
			sb.append(",nature_local=" + nature_local);
			sb.append(",type_local=" + type_local);
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(synth_bati_parcelleStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_5Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public Integer nb_niv;

		public Integer getNb_niv() {
			return this.nb_niv;
		}

		public Integer shon_totale;

		public Integer getShon_totale() {
			return this.shon_totale;
		}

		public Integer shon_habitat;

		public Integer getShon_habitat() {
			return this.shon_habitat;
		}

		public Integer shon_activite;

		public Integer getShon_activite() {
			return this.shon_activite;
		}

		public Integer nb_logts;

		public Integer getNb_logts() {
			return this.nb_logts;
		}

		public Integer nb_logts_hlm;

		public Integer getNb_logts_hlm() {
			return this.nb_logts_hlm;
		}

		public Integer nb_logts_sem;

		public Integer getNb_logts_sem() {
			return this.nb_logts_sem;
		}

		public Integer nb_logts_hlm_sem;

		public Integer getNb_logts_hlm_sem() {
			return this.nb_logts_hlm_sem;
		}

		public Integer nb_logts_vacants;

		public Integer getNb_logts_vacants() {
			return this.nb_logts_vacants;
		}

		public Integer nb_logts_prop_occup;

		public Integer getNb_logts_prop_occup() {
			return this.nb_logts_prop_occup;
		}

		public Integer nb_logts_loc;

		public Integer getNb_logts_loc() {
			return this.nb_logts_loc;
		}

		public Integer nb_locaux;

		public Integer getNb_locaux() {
			return this.nb_locaux;
		}

		public Integer nb_locaux_vacants;

		public Integer getNb_locaux_vacants() {
			return this.nb_locaux_vacants;
		}

		public Integer annee_constr_min;

		public Integer getAnnee_constr_min() {
			return this.annee_constr_min;
		}

		public Integer annee_constr_max;

		public Integer getAnnee_constr_max() {
			return this.annee_constr_max;
		}

		public Integer annee_constr_moy;

		public Integer getAnnee_constr_moy() {
			return this.annee_constr_moy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

					this.nb_niv = readInteger(dis);

					this.shon_totale = readInteger(dis);

					this.shon_habitat = readInteger(dis);

					this.shon_activite = readInteger(dis);

					this.nb_logts = readInteger(dis);

					this.nb_logts_hlm = readInteger(dis);

					this.nb_logts_sem = readInteger(dis);

					this.nb_logts_hlm_sem = readInteger(dis);

					this.nb_logts_vacants = readInteger(dis);

					this.nb_logts_prop_occup = readInteger(dis);

					this.nb_logts_loc = readInteger(dis);

					this.nb_locaux = readInteger(dis);

					this.nb_locaux_vacants = readInteger(dis);

					this.annee_constr_min = readInteger(dis);

					this.annee_constr_max = readInteger(dis);

					this.annee_constr_moy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

				// Integer

				writeInteger(this.nb_niv, dos);

				// Integer

				writeInteger(this.shon_totale, dos);

				// Integer

				writeInteger(this.shon_habitat, dos);

				// Integer

				writeInteger(this.shon_activite, dos);

				// Integer

				writeInteger(this.nb_logts, dos);

				// Integer

				writeInteger(this.nb_logts_hlm, dos);

				// Integer

				writeInteger(this.nb_logts_sem, dos);

				// Integer

				writeInteger(this.nb_logts_hlm_sem, dos);

				// Integer

				writeInteger(this.nb_logts_vacants, dos);

				// Integer

				writeInteger(this.nb_logts_prop_occup, dos);

				// Integer

				writeInteger(this.nb_logts_loc, dos);

				// Integer

				writeInteger(this.nb_locaux, dos);

				// Integer

				writeInteger(this.nb_locaux_vacants, dos);

				// Integer

				writeInteger(this.annee_constr_min, dos);

				// Integer

				writeInteger(this.annee_constr_max, dos);

				// Integer

				writeInteger(this.annee_constr_moy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nb_niv=" + String.valueOf(nb_niv));
			sb.append(",shon_totale=" + String.valueOf(shon_totale));
			sb.append(",shon_habitat=" + String.valueOf(shon_habitat));
			sb.append(",shon_activite=" + String.valueOf(shon_activite));
			sb.append(",nb_logts=" + String.valueOf(nb_logts));
			sb.append(",nb_logts_hlm=" + String.valueOf(nb_logts_hlm));
			sb.append(",nb_logts_sem=" + String.valueOf(nb_logts_sem));
			sb.append(",nb_logts_hlm_sem=" + String.valueOf(nb_logts_hlm_sem));
			sb.append(",nb_logts_vacants=" + String.valueOf(nb_logts_vacants));
			sb.append(",nb_logts_prop_occup="
					+ String.valueOf(nb_logts_prop_occup));
			sb.append(",nb_logts_loc=" + String.valueOf(nb_logts_loc));
			sb.append(",nb_locaux=" + String.valueOf(nb_locaux));
			sb.append(",nb_locaux_vacants=" + String.valueOf(nb_locaux_vacants));
			sb.append(",annee_constr_min=" + String.valueOf(annee_constr_min));
			sb.append(",annee_constr_max=" + String.valueOf(annee_constr_max));
			sb.append(",annee_constr_moy=" + String.valueOf(annee_constr_moy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_7Process(globalMap);
				tFileInputDelimited_8Process(globalMap);

				row7Struct row7 = new row7Struct();
				synth_bati_parcelleStruct synth_bati_parcelle = new synth_bati_parcelleStruct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.target_path + "bati_infos_parcelle.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				String[] headColutFileOutputDelimited_2 = new String[21];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
				try {
					CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_2,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_2
							.setSeparator(csvSettings_tFileOutputDelimited_2
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_2
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_2.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_2
										.getRowDelim());
					}

					if (filetFileOutputDelimited_2.length() == 0) {

						headColutFileOutputDelimited_2[0] = "ccocom";

						headColutFileOutputDelimited_2[1] = "id_parc";

						headColutFileOutputDelimited_2[2] = "nb_niv";

						headColutFileOutputDelimited_2[3] = "shon_totale";

						headColutFileOutputDelimited_2[4] = "shon_habitat";

						headColutFileOutputDelimited_2[5] = "shon_activite";

						headColutFileOutputDelimited_2[6] = "nb_logts";

						headColutFileOutputDelimited_2[7] = "nb_logts_hlm";

						headColutFileOutputDelimited_2[8] = "nb_logts_sem";

						headColutFileOutputDelimited_2[9] = "nb_logts_hlm_sem";

						headColutFileOutputDelimited_2[10] = "nb_logts_vacants";

						headColutFileOutputDelimited_2[11] = "nb_logts_prop_occup";

						headColutFileOutputDelimited_2[12] = "nb_logts_loc";

						headColutFileOutputDelimited_2[13] = "nb_locaux";

						headColutFileOutputDelimited_2[14] = "nb_locaux_vacants";

						headColutFileOutputDelimited_2[15] = "nb_prop";

						headColutFileOutputDelimited_2[16] = "nature_local";

						headColutFileOutputDelimited_2[17] = "type_local";

						headColutFileOutputDelimited_2[18] = "annee_constr_min";

						headColutFileOutputDelimited_2[19] = "annee_constr_max";

						headColutFileOutputDelimited_2[20] = "annee_constr_moy";

						CsvWritertFileOutputDelimited_2
								.writeNext(headColutFileOutputDelimited_2);
						CsvWritertFileOutputDelimited_2.flush();

					}

					CsvWritertFileOutputDelimited_2
							.setEscapeChar(csvSettings_tFileOutputDelimited_2
									.getEscapeChar());
					CsvWritertFileOutputDelimited_2
							.setQuoteChar(csvSettings_tFileOutputDelimited_2
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_2
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());
					currentComponent = "tMap_2";

					int tos_count_tMap_2 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
							.get("tHash_Lookup_row4"));

					row4Struct row4HashKey = new row4Struct();
					row4Struct row4Default = new row4Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) globalMap
							.get("tHash_Lookup_row26"));

					row26Struct row26HashKey = new row26Struct();
					row26Struct row26Default = new row26Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) globalMap
							.get("tHash_Lookup_row27"));

					row27Struct row27HashKey = new row27Struct();
					row27Struct row27Default = new row27Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_2__Struct {
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					synth_bati_parcelleStruct synth_bati_parcelle_tmp = new synth_bati_parcelleStruct();
					// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_5 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_5", false);
					start_Hash.put("tFileInputDelimited_5",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_5";

					int tos_count_tFileInputDelimited_5 = 0;

					int nb_line_tFileInputDelimited_5 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
					try {

						Object filename_tFileInputDelimited_5 = context.target_path
								+ "bati_infos_temp4.csv";
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
							if (footer_value_tFileInputDelimited_5 > 0
									|| random_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
									context.target_path
											+ "bati_infos_temp4.csv",
									"ISO-8859-15", ";", "\n", true, 0, 0, -1,
									-1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_5 != null
								&& fid_tFileInputDelimited_5.nextRecord()) {

							row7 = null;

							boolean whetherReject_tFileInputDelimited_5 = false;
							row7 = new row7Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_5 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_5 = 0;

								row7.ccocom = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);

								columnIndexWithD_tFileInputDelimited_5 = 1;

								row7.id_parc = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);

								columnIndexWithD_tFileInputDelimited_5 = 2;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_niv = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_niv = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.shon_totale = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.shon_totale = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.shon_habitat = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.shon_habitat = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 5;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.shon_activite = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.shon_activite = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 6;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_logts = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_logts = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 7;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_logts_hlm = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_logts_hlm = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 8;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_logts_sem = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_logts_sem = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 9;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_logts_hlm_sem = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_logts_hlm_sem = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 10;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_logts_vacants = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_logts_vacants = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 11;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_logts_prop_occup = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_logts_prop_occup = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 12;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_logts_loc = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_logts_loc = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 13;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_locaux = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_locaux = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 14;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.nb_locaux_vacants = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.nb_locaux_vacants = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 15;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.annee_constr_min = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.annee_constr_min = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 16;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.annee_constr_max = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.annee_constr_max = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 17;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									row7.annee_constr_moy = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row7.annee_constr_moy = null;

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_5 = true;

								System.err.println(e.getMessage());
								row7 = null;

							}

							/**
							 * [tFileInputDelimited_5 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_5 main ] start
							 */

							currentComponent = "tFileInputDelimited_5";

							tos_count_tFileInputDelimited_5++;

							/**
							 * [tFileInputDelimited_5 main ] stop
							 */
							// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row4"
								// /////////////////////////////////////////////

								boolean forceLooprow4 = false;

								row4Struct row4ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row4HashKey.ccocom = row7.ccocom;

									row4HashKey.id_parc = row7.id_parc;

									row4HashKey.hashCodeDirty = true;

									tHash_Lookup_row4.lookup(row4HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row4 != null
										&& tHash_Lookup_row4
												.getCount(row4HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.ccocom = '"
									// + row4HashKey.ccocom +
									// "', row4.id_parc = '" +
									// row4HashKey.id_parc + "'");
								} // G 071

								row4Struct row4 = null;

								row4Struct fromLookup_row4 = null;
								row4 = row4Default;

								if (tHash_Lookup_row4 != null
										&& tHash_Lookup_row4.hasNext()) { // G
																			// 099

									fromLookup_row4 = tHash_Lookup_row4.next();

								} // G 099

								if (fromLookup_row4 != null) {
									row4 = fromLookup_row4;
								}

								// /////////////////////////////////////////////
								// Starting Lookup Table "row26"
								// /////////////////////////////////////////////

								boolean forceLooprow26 = false;

								row26Struct row26ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row26HashKey.ccocom = row7.ccocom;

									row26HashKey.id_parc = row7.id_parc;

									row26HashKey.hashCodeDirty = true;

									tHash_Lookup_row26.lookup(row26HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row26 != null
										&& tHash_Lookup_row26
												.getCount(row26HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row26' and it contains more one result from keys :  row26.ccocom = '"
									// + row26HashKey.ccocom +
									// "', row26.id_parc = '" +
									// row26HashKey.id_parc + "'");
								} // G 071

								row26Struct row26 = null;

								row26Struct fromLookup_row26 = null;
								row26 = row26Default;

								if (tHash_Lookup_row26 != null
										&& tHash_Lookup_row26.hasNext()) { // G
																			// 099

									fromLookup_row26 = tHash_Lookup_row26
											.next();

								} // G 099

								if (fromLookup_row26 != null) {
									row26 = fromLookup_row26;
								}

								// /////////////////////////////////////////////
								// Starting Lookup Table "row27"
								// /////////////////////////////////////////////

								boolean forceLooprow27 = false;

								row27Struct row27ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row27HashKey.ccocom = row7.ccocom;

									row27HashKey.id_parc = row7.id_parc;

									row27HashKey.hashCodeDirty = true;

									tHash_Lookup_row27.lookup(row27HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row27 != null
										&& tHash_Lookup_row27
												.getCount(row27HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.ccocom = '"
									// + row27HashKey.ccocom +
									// "', row27.id_parc = '" +
									// row27HashKey.id_parc + "'");
								} // G 071

								row27Struct row27 = null;

								row27Struct fromLookup_row27 = null;
								row27 = row27Default;

								if (tHash_Lookup_row27 != null
										&& tHash_Lookup_row27.hasNext()) { // G
																			// 099

									fromLookup_row27 = tHash_Lookup_row27
											.next();

								} // G 099

								if (fromLookup_row27 != null) {
									row27 = fromLookup_row27;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									synth_bati_parcelle = null;

									// # Output table : 'synth_bati_parcelle'
									synth_bati_parcelle_tmp.ccocom = row7.ccocom;
									synth_bati_parcelle_tmp.id_parc = row7.id_parc;
									synth_bati_parcelle_tmp.nb_niv = row7.nb_niv;
									synth_bati_parcelle_tmp.shon_totale = row7.shon_totale;
									synth_bati_parcelle_tmp.shon_habitat = row7.shon_habitat;
									synth_bati_parcelle_tmp.shon_activite = row7.shon_activite;
									synth_bati_parcelle_tmp.nb_logts = row7.nb_logts;
									synth_bati_parcelle_tmp.nb_logts_hlm = row7.nb_logts_hlm;
									synth_bati_parcelle_tmp.nb_logts_sem = row7.nb_logts_sem;
									synth_bati_parcelle_tmp.nb_logts_hlm_sem = row7.nb_logts_hlm_sem;
									synth_bati_parcelle_tmp.nb_logts_vacants = row7.nb_logts_vacants;
									synth_bati_parcelle_tmp.nb_logts_prop_occup = row7.nb_logts_prop_occup;
									synth_bati_parcelle_tmp.nb_logts_loc = row7.nb_logts_loc;
									synth_bati_parcelle_tmp.nb_locaux = row7.nb_locaux;
									synth_bati_parcelle_tmp.nb_locaux_vacants = row7.nb_locaux_vacants;
									synth_bati_parcelle_tmp.nb_prop = row4.nb_prop;
									synth_bati_parcelle_tmp.nature_local = row26.nature_local;
									synth_bati_parcelle_tmp.type_local = row27.type_local;
									synth_bati_parcelle_tmp.annee_constr_min = row7.annee_constr_min;
									synth_bati_parcelle_tmp.annee_constr_max = row7.annee_constr_max;
									synth_bati_parcelle_tmp.annee_constr_moy = row7.annee_constr_moy;
									synth_bati_parcelle = synth_bati_parcelle_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "synth_bati_parcelle"
								if (synth_bati_parcelle != null) {

									/**
									 * [tFileOutputDelimited_2 main ] start
									 */

									currentComponent = "tFileOutputDelimited_2";

									String[] rowtFileOutputDelimited_2 = new String[21];

									rowtFileOutputDelimited_2[0] = synth_bati_parcelle.ccocom == null ? ""
											: synth_bati_parcelle.ccocom;

									rowtFileOutputDelimited_2[1] = synth_bati_parcelle.id_parc == null ? ""
											: synth_bati_parcelle.id_parc;

									rowtFileOutputDelimited_2[2] = synth_bati_parcelle.nb_niv == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_niv);

									rowtFileOutputDelimited_2[3] = synth_bati_parcelle.shon_totale == null ? ""
											: String.valueOf(synth_bati_parcelle.shon_totale);

									rowtFileOutputDelimited_2[4] = synth_bati_parcelle.shon_habitat == null ? ""
											: String.valueOf(synth_bati_parcelle.shon_habitat);

									rowtFileOutputDelimited_2[5] = synth_bati_parcelle.shon_activite == null ? ""
											: String.valueOf(synth_bati_parcelle.shon_activite);

									rowtFileOutputDelimited_2[6] = synth_bati_parcelle.nb_logts == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_logts);

									rowtFileOutputDelimited_2[7] = synth_bati_parcelle.nb_logts_hlm == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_logts_hlm);

									rowtFileOutputDelimited_2[8] = synth_bati_parcelle.nb_logts_sem == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_logts_sem);

									rowtFileOutputDelimited_2[9] = synth_bati_parcelle.nb_logts_hlm_sem == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_logts_hlm_sem);

									rowtFileOutputDelimited_2[10] = synth_bati_parcelle.nb_logts_vacants == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_logts_vacants);

									rowtFileOutputDelimited_2[11] = synth_bati_parcelle.nb_logts_prop_occup == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_logts_prop_occup);

									rowtFileOutputDelimited_2[12] = synth_bati_parcelle.nb_logts_loc == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_logts_loc);

									rowtFileOutputDelimited_2[13] = synth_bati_parcelle.nb_locaux == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_locaux);

									rowtFileOutputDelimited_2[14] = synth_bati_parcelle.nb_locaux_vacants == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_locaux_vacants);

									rowtFileOutputDelimited_2[15] = synth_bati_parcelle.nb_prop == null ? ""
											: String.valueOf(synth_bati_parcelle.nb_prop);

									rowtFileOutputDelimited_2[16] = synth_bati_parcelle.nature_local == null ? ""
											: synth_bati_parcelle.nature_local;

									rowtFileOutputDelimited_2[17] = synth_bati_parcelle.type_local == null ? ""
											: synth_bati_parcelle.type_local;

									rowtFileOutputDelimited_2[18] = synth_bati_parcelle.annee_constr_min == null ? ""
											: String.valueOf(synth_bati_parcelle.annee_constr_min);

									rowtFileOutputDelimited_2[19] = synth_bati_parcelle.annee_constr_max == null ? ""
											: String.valueOf(synth_bati_parcelle.annee_constr_max);

									rowtFileOutputDelimited_2[20] = synth_bati_parcelle.annee_constr_moy == null ? ""
											: String.valueOf(synth_bati_parcelle.annee_constr_moy);

									nb_line_tFileOutputDelimited_2++;
									CsvWritertFileOutputDelimited_2
											.writeNext(rowtFileOutputDelimited_2);

									tos_count_tFileOutputDelimited_2++;

									/**
									 * [tFileOutputDelimited_2 main ] stop
									 */

								} // End of branch "synth_bati_parcelle"

							} // End of branch "row7"

							/**
							 * [tFileInputDelimited_5 end ] start
							 */

							currentComponent = "tFileInputDelimited_5";

						}
					} finally {
						if (!((Object) (context.target_path + "bati_infos_temp4.csv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_5 != null) {
								fid_tFileInputDelimited_5.close();
							}
						}
						if (fid_tFileInputDelimited_5 != null) {
							globalMap.put("tFileInputDelimited_5_NB_LINE",
									fid_tFileInputDelimited_5.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_5", true);
					end_Hash.put("tFileInputDelimited_5",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_5 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove("tHash_Lookup_row4");

					if (tHash_Lookup_row26 != null) {
						tHash_Lookup_row26.endGet();
					}
					globalMap.remove("tHash_Lookup_row26");

					if (tHash_Lookup_row27 != null) {
						tHash_Lookup_row27.endGet();
					}
					globalMap.remove("tHash_Lookup_row27");

					// ###############################

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row26");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row27");

		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public Integer nb_prop;

		public Integer getNb_prop() {
			return this.nb_prop;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime
						* result
						+ ((this.id_parc == null) ? 0 : this.id_parc.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.id_parc == null) {
				if (other.id_parc != null)
					return false;
			} else if (!this.id_parc.equals(other.id_parc))
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;
			other.nb_prop = this.nb_prop;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nb_prop = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.nb_prop, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nb_prop=" + String.valueOf(nb_prop));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_parc, other.id_parc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row4";

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_2 - inputs:(row7,row4,row26,row27)
				// outputs:(synth_bati_parcelle)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = context.target_path
							+ "bati_infos_temp2.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								context.target_path + "bati_infos_temp2.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {

						row4 = null;

						row4 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row4.ccocom = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row4.id_parc = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								row4.nb_prop = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row4.nb_prop = null;

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tAdvancedHash_row4 main ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							row4Struct row4_HashRow = new row4Struct();

							row4_HashRow.ccocom = row4.ccocom;

							row4_HashRow.id_parc = row4.id_parc;

							row4_HashRow.nb_prop = row4.nb_prop;

							tHash_Lookup_row4.put(row4_HashRow);

							tos_count_tAdvancedHash_row4++;

							/**
							 * [tAdvancedHash_row4 main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) (context.target_path + "bati_infos_temp2.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableComparableLookupRow<row26Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String nature_local;

		public String getNature_local() {
			return this.nature_local;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime
						* result
						+ ((this.id_parc == null) ? 0 : this.id_parc.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.id_parc == null) {
				if (other.id_parc != null)
					return false;
			} else if (!this.id_parc.equals(other.id_parc))
				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;
			other.nature_local = this.nature_local;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nature_local = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.nature_local, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",nature_local=" + nature_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_parc, other.id_parc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tAdvancedHash_row26 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row26", false);
				start_Hash.put("tAdvancedHash_row26",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row26";

				int tos_count_tAdvancedHash_row26 = 0;

				// connection name:row26
				// source node:tFileInputDelimited_7 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row26,row26) |
				// target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
				// linked node: tMap_2 - inputs:(row7,row4,row26,row27)
				// outputs:(synth_bati_parcelle)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row26Struct> getLookup(matchingModeEnum_row26);

				globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);

				/**
				 * [tAdvancedHash_row26 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				try {

					Object filename_tFileInputDelimited_7 = context.target_path
							+ "bati_infos_temp5.csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0
								|| random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								context.target_path + "bati_infos_temp5.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null
							&& fid_tFileInputDelimited_7.nextRecord()) {

						row26 = null;

						row26 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row26 = new row26Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							columnIndexWithD_tFileInputDelimited_7 = 0;

							row26.ccocom = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row26.id_parc = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 2;

							row26.nature_local = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row26 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row26"
						if (row26 != null) {

							/**
							 * [tAdvancedHash_row26 main ] start
							 */

							currentComponent = "tAdvancedHash_row26";

							row26Struct row26_HashRow = new row26Struct();

							row26_HashRow.ccocom = row26.ccocom;

							row26_HashRow.id_parc = row26.id_parc;

							row26_HashRow.nature_local = row26.nature_local;

							tHash_Lookup_row26.put(row26_HashRow);

							tos_count_tAdvancedHash_row26++;

							/**
							 * [tAdvancedHash_row26 main ] stop
							 */

						} // End of branch "row26"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) (context.target_path + "bati_infos_temp5.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								fid_tFileInputDelimited_7.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row26 end ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				tHash_Lookup_row26.endPut();

				ok_Hash.put("tAdvancedHash_row26", true);
				end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row26 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements
			routines.system.IPersistableComparableLookupRow<row27Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape5_info_bati = new byte[0];
		static byte[] commonByteArray_MAJIC_etape5_info_bati = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ccocom == null) ? 0 : this.ccocom.hashCode());

				result = prime
						* result
						+ ((this.id_parc == null) ? 0 : this.id_parc.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.ccocom == null) {
				if (other.ccocom != null)
					return false;
			} else if (!this.ccocom.equals(other.ccocom))
				return false;

			if (this.id_parc == null) {
				if (other.id_parc != null)
					return false;
			} else if (!this.id_parc.equals(other.id_parc))
				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;
			other.type_local = this.type_local;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.ccocom = this.ccocom;
			other.id_parc = this.id_parc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape5_info_bati.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape5_info_bati.length == 0) {
						commonByteArray_MAJIC_etape5_info_bati = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape5_info_bati = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape5_info_bati, 0, length);
				strReturn = new String(commonByteArray_MAJIC_etape5_info_bati,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape5_info_bati) {

				try {

					int length = 0;

					this.ccocom = readString(dis);

					this.id_parc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.id_parc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.type_local = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.type_local, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccocom=" + ccocom);
			sb.append(",id_parc=" + id_parc);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ccocom, other.ccocom);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_parc, other.id_parc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row27Struct row27 = new row27Struct();

				/**
				 * [tAdvancedHash_row27 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row27", false);
				start_Hash.put("tAdvancedHash_row27",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row27";

				int tos_count_tAdvancedHash_row27 = 0;

				// connection name:row27
				// source node:tFileInputDelimited_8 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row27,row27) |
				// target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
				// linked node: tMap_2 - inputs:(row7,row4,row26,row27)
				// outputs:(synth_bati_parcelle)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row27Struct> getLookup(matchingModeEnum_row27);

				globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);

				/**
				 * [tAdvancedHash_row27 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				try {

					Object filename_tFileInputDelimited_8 = context.target_path
							+ "bati_infos_temp6.csv";
					if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
						if (footer_value_tFileInputDelimited_8 > 0
								|| random_value_tFileInputDelimited_8 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
								context.target_path + "bati_infos_temp6.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_8 != null
							&& fid_tFileInputDelimited_8.nextRecord()) {

						row27 = null;

						row27 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row27 = new row27Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_8 = 0;

							columnIndexWithD_tFileInputDelimited_8 = 0;

							row27.ccocom = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 1;

							row27.id_parc = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 2;

							row27.type_local = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row27 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row27"
						if (row27 != null) {

							/**
							 * [tAdvancedHash_row27 main ] start
							 */

							currentComponent = "tAdvancedHash_row27";

							row27Struct row27_HashRow = new row27Struct();

							row27_HashRow.ccocom = row27.ccocom;

							row27_HashRow.id_parc = row27.id_parc;

							row27_HashRow.type_local = row27.type_local;

							tHash_Lookup_row27.put(row27_HashRow);

							tos_count_tAdvancedHash_row27++;

							/**
							 * [tAdvancedHash_row27 main ] stop
							 */

						} // End of branch "row27"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

					}
				} finally {
					if (!((Object) (context.target_path + "bati_infos_temp6.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_8 != null) {
							fid_tFileInputDelimited_8.close();
						}
					}
					if (fid_tFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								fid_tFileInputDelimited_8.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row27 end ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				tHash_Lookup_row27.endPut();

				ok_Hash.put("tAdvancedHash_row27", true);
				end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row27 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final etape5_info_bati etape5_info_batiClass = new etape5_info_bati();

		int exitCode = etape5_info_batiClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = etape5_info_bati.class
					.getClassLoader().getResourceAsStream(
							"majic/etape5_info_bati_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.extfichier = (String) context.getProperty("extfichier");
			context.nbat10 = (String) context.getProperty("nbat10");
			context.target_path = (String) context.getProperty("target_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("extfichier")) {
				context.extfichier = (String) parentContextMap
						.get("extfichier");
			}
			if (parentContextMap.containsKey("nbat10")) {
				context.nbat10 = (String) parentContextMap.get("nbat10");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_4) {

			e_tFileInputDelimited_4.printStackTrace();
			globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tFileInputDelimited_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_5) {

			e_tFileInputDelimited_5.printStackTrace();
			globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : etape5_info_bati");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 232698 characters generated by Talend Open Studio for Data Integration on the
 * 8 janvier 2014 18:58:53 CET
 ************************************************************************************************/
