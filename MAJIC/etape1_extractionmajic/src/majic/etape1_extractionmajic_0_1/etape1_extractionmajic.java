// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package majic.etape1_extractionmajic_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.OpenStreetMap;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.GeometryUtility;
import routines.GeometryOperation;
import routines.GeoOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: etape1_extractionmajic Purpose: créer des fichiers csv à partir des fichiers majic bruts<br>
 * Description: Traitement des données brutes majic à partir de la documentation sur le format de données: passage en format csv, création du modèle de données de la dgi <br>
 * @author thomas.brosset@quelleville.fr
 * @version 5.3.1.r104014
 * @status 
 */
public class etape1_extractionmajic implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (externals_path != null) {

				this.setProperty("externals_path", externals_path.toString());

			}

			if (extfichier != null) {

				this.setProperty("extfichier", extfichier.toString());

			}

			if (source_path != null) {

				this.setProperty("source_path", source_path.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

			if (temp_path != null) {

				this.setProperty("temp_path", temp_path.toString());

			}

		}

		public String externals_path;

		public String getExternals_path() {
			return this.externals_path;
		}

		public String extfichier;

		public String getExtfichier() {
			return this.extfichier;
		}

		public String source_path;

		public String getSource_path() {
			return this.source_path;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}

		public String temp_path;

		public String getTemp_path() {
			return this.temp_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "etape1_extractionmajic";
	private final String projectName = "MAJIC";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					etape1_extractionmajic.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(etape1_extractionmajic.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputMSPositional_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputMSPositional_2", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_1", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputMSPositional_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputMSPositional_1", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_10", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_11", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_12", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputMSPositional_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputMSPositional_7", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_7", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_16", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_19", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_17", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_17", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_18", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_18", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputPositional_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputPositional_1", System.currentTimeMillis());

		status = "failure";

		tFileInputPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_19", System.currentTimeMillis());

		status = "failure";

		tFileInputPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_20", System.currentTimeMillis());

		status = "failure";

		tFileInputPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_8", System.currentTimeMillis());

		status = "failure";

		tFileInputPositional_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputMSPositional_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputMSPositional_4", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_13", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_15", System.currentTimeMillis());

		status = "failure";

		tFileInputMSPositional_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputMSPositional_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputMSPositional_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputMSPositional_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputPositional_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputMSPositional_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class newoutStruct implements
			routines.system.IPersistableRow<newoutStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String dcntpa;

		public String getDcntpa() {
			return this.dcntpa;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String idcompteprop;

		public String getIdcompteprop() {
			return this.idcompteprop;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dreflf;

		public String getDreflf() {
			return this.dreflf;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String cprsecr;

		public String getCprsecr() {
			return this.cprsecr;
		}

		public String ccosecr;

		public String getCcosecr() {
			return this.ccosecr;
		}

		public String dnuplar;

		public String getDnuplar() {
			return this.dnuplar;
		}

		public String dnupld;

		public String getDnupld() {
			return this.dnupld;
		}

		public String gurbpa;

		public String getGurbpa() {
			return this.gurbpa;
		}

		public String dparpi;

		public String getDparpi() {
			return this.dparpi;
		}

		public String ccoarp;

		public String getCcoarp() {
			return this.ccoarp;
		}

		public String gparnf;

		public String getGparnf() {
			return this.gparnf;
		}

		public String gparbat;

		public String getGparbat() {
			return this.gparbat;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.article = readString(dis);

					this.id_parc = readString(dis);

					this.dcntpa = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.idcompteprop = readString(dis);

					this.jdatat = readString(dis);

					this.dreflf = readString(dis);

					this.gpdl = readString(dis);

					this.cprsecr = readString(dis);

					this.ccosecr = readString(dis);

					this.dnuplar = readString(dis);

					this.dnupld = readString(dis);

					this.gurbpa = readString(dis);

					this.dparpi = readString(dis);

					this.ccoarp = readString(dis);

					this.gparnf = readString(dis);

					this.gparbat = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.dcntpa, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.idcompteprop, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dreflf, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.cprsecr, dos);

				// String

				writeString(this.ccosecr, dos);

				// String

				writeString(this.dnuplar, dos);

				// String

				writeString(this.dnupld, dos);

				// String

				writeString(this.gurbpa, dos);

				// String

				writeString(this.dparpi, dos);

				// String

				writeString(this.ccoarp, dos);

				// String

				writeString(this.gparnf, dos);

				// String

				writeString(this.gparbat, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",article=" + article);
			sb.append(",id_parc=" + id_parc);
			sb.append(",dcntpa=" + dcntpa);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",idcompteprop=" + idcompteprop);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dreflf=" + dreflf);
			sb.append(",gpdl=" + gpdl);
			sb.append(",cprsecr=" + cprsecr);
			sb.append(",ccosecr=" + ccosecr);
			sb.append(",dnuplar=" + dnuplar);
			sb.append(",dnupld=" + dnupld);
			sb.append(",gurbpa=" + gurbpa);
			sb.append(",dparpi=" + dparpi);
			sb.append(",ccoarp=" + ccoarp);
			sb.append(",gparnf=" + gparnf);
			sb.append(",gparbat=" + gparbat);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(newoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dcntpa;

		public String getDcntpa() {
			return this.dcntpa;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dreflf;

		public String getDreflf() {
			return this.dreflf;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String cprsecr;

		public String getCprsecr() {
			return this.cprsecr;
		}

		public String ccosecr;

		public String getCcosecr() {
			return this.ccosecr;
		}

		public String dnuplar;

		public String getDnuplar() {
			return this.dnuplar;
		}

		public String dnupld;

		public String getDnupld() {
			return this.dnupld;
		}

		public String gurbpa;

		public String getGurbpa() {
			return this.gurbpa;
		}

		public String dparpi;

		public String getDparpi() {
			return this.dparpi;
		}

		public String ccoarp;

		public String getCcoarp() {
			return this.ccoarp;
		}

		public String gparnf;

		public String getGparnf() {
			return this.gparnf;
		}

		public String gparbat;

		public String getGparbat() {
			return this.gparbat;
		}

		public String parrev;

		public String getParrev() {
			return this.parrev;
		}

		public String gpardp;

		public String getGpardp() {
			return this.gpardp;
		}

		public String fviti;

		public String getFviti() {
			return this.fviti;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String gpafpd;

		public String getGpafpd() {
			return this.gpafpd;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.filler = readString(dis);

					this.article = readString(dis);

					this.dcntpa = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.jdatat = readString(dis);

					this.dreflf = readString(dis);

					this.gpdl = readString(dis);

					this.cprsecr = readString(dis);

					this.ccosecr = readString(dis);

					this.dnuplar = readString(dis);

					this.dnupld = readString(dis);

					this.gurbpa = readString(dis);

					this.dparpi = readString(dis);

					this.ccoarp = readString(dis);

					this.gparnf = readString(dis);

					this.gparbat = readString(dis);

					this.parrev = readString(dis);

					this.gpardp = readString(dis);

					this.fviti = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.ccocif = readString(dis);

					this.gpafpd = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dcntpa, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dreflf, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.cprsecr, dos);

				// String

				writeString(this.ccosecr, dos);

				// String

				writeString(this.dnuplar, dos);

				// String

				writeString(this.dnupld, dos);

				// String

				writeString(this.gurbpa, dos);

				// String

				writeString(this.dparpi, dos);

				// String

				writeString(this.ccoarp, dos);

				// String

				writeString(this.gparnf, dos);

				// String

				writeString(this.gparbat, dos);

				// String

				writeString(this.parrev, dos);

				// String

				writeString(this.gpardp, dos);

				// String

				writeString(this.fviti, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.gpafpd, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",filler=" + filler);
			sb.append(",article=" + article);
			sb.append(",dcntpa=" + dcntpa);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dreflf=" + dreflf);
			sb.append(",gpdl=" + gpdl);
			sb.append(",cprsecr=" + cprsecr);
			sb.append(",ccosecr=" + ccosecr);
			sb.append(",dnuplar=" + dnuplar);
			sb.append(",dnupld=" + dnupld);
			sb.append(",gurbpa=" + gurbpa);
			sb.append(",dparpi=" + dparpi);
			sb.append(",ccoarp=" + ccoarp);
			sb.append(",gparnf=" + gparnf);
			sb.append(",gparbat=" + gparbat);
			sb.append(",parrev=" + parrev);
			sb.append(",gpardp=" + gpardp);
			sb.append(",fviti=" + fviti);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",ccocif=" + ccocif);
			sb.append(",gpafpd=" + gpafpd);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class newr2Struct implements
			routines.system.IPersistableRow<newr2Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String ccosub;

		public String getCcosub() {
			return this.ccosub;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dcntsf;

		public String getDcntsf() {
			return this.dcntsf;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String gnexps;

		public String getGnexps() {
			return this.gnexps;
		}

		public String drcsub;

		public String getDrcsub() {
			return this.drcsub;
		}

		public String drcsuba;

		public String getDrcsuba() {
			return this.drcsuba;
		}

		public String ccostn;

		public String getCcostn() {
			return this.ccostn;
		}

		public String cgrnum;

		public String getCgrnum() {
			return this.cgrnum;
		}

		public String dsgrpf;

		public String getDsgrpf() {
			return this.dsgrpf;
		}

		public String dclssf;

		public String getDclssf() {
			return this.dclssf;
		}

		public String cnatsp;

		public String getCnatsp() {
			return this.cnatsp;
		}

		public String drgpos;

		public String getDrgpos() {
			return this.drgpos;
		}

		public String ccoprel;

		public String getCcoprel() {
			return this.ccoprel;
		}

		public String ccosecl;

		public String getCcosecl() {
			return this.ccosecl;
		}

		public String dnuplal;

		public String getDnuplal() {
			return this.dnuplal;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String dnulot;

		public String getDnulot() {
			return this.dnulot;
		}

		public String gnidom;

		public String getGnidom() {
			return this.gnidom;
		}

		public String topja;

		public String getTopja() {
			return this.topja;
		}

		public String datja;

		public String getDatja() {
			return this.datja;
		}

		public String postel;

		public String getPostel() {
			return this.postel;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.ccosub = readString(dis);

					this.article = readString(dis);

					this.dcntsf = readString(dis);

					this.dnupro = readString(dis);

					this.gnexps = readString(dis);

					this.drcsub = readString(dis);

					this.drcsuba = readString(dis);

					this.ccostn = readString(dis);

					this.cgrnum = readString(dis);

					this.dsgrpf = readString(dis);

					this.dclssf = readString(dis);

					this.cnatsp = readString(dis);

					this.drgpos = readString(dis);

					this.ccoprel = readString(dis);

					this.ccosecl = readString(dis);

					this.dnuplal = readString(dis);

					this.dnupdl = readString(dis);

					this.dnulot = readString(dis);

					this.gnidom = readString(dis);

					this.topja = readString(dis);

					this.datja = readString(dis);

					this.postel = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.ccosub, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dcntsf, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.gnexps, dos);

				// String

				writeString(this.drcsub, dos);

				// String

				writeString(this.drcsuba, dos);

				// String

				writeString(this.ccostn, dos);

				// String

				writeString(this.cgrnum, dos);

				// String

				writeString(this.dsgrpf, dos);

				// String

				writeString(this.dclssf, dos);

				// String

				writeString(this.cnatsp, dos);

				// String

				writeString(this.drgpos, dos);

				// String

				writeString(this.ccoprel, dos);

				// String

				writeString(this.ccosecl, dos);

				// String

				writeString(this.dnuplal, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.dnulot, dos);

				// String

				writeString(this.gnidom, dos);

				// String

				writeString(this.topja, dos);

				// String

				writeString(this.datja, dos);

				// String

				writeString(this.postel, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",ccosub=" + ccosub);
			sb.append(",article=" + article);
			sb.append(",dcntsf=" + dcntsf);
			sb.append(",dnupro=" + dnupro);
			sb.append(",gnexps=" + gnexps);
			sb.append(",drcsub=" + drcsub);
			sb.append(",drcsuba=" + drcsuba);
			sb.append(",ccostn=" + ccostn);
			sb.append(",cgrnum=" + cgrnum);
			sb.append(",dsgrpf=" + dsgrpf);
			sb.append(",dclssf=" + dclssf);
			sb.append(",cnatsp=" + cnatsp);
			sb.append(",drgpos=" + drgpos);
			sb.append(",ccoprel=" + ccoprel);
			sb.append(",ccosecl=" + ccosecl);
			sb.append(",dnuplal=" + dnuplal);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",dnulot=" + dnulot);
			sb.append(",gnidom=" + gnidom);
			sb.append(",topja=" + topja);
			sb.append(",datja=" + datja);
			sb.append(",postel=" + postel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(newr2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class newr3Struct implements
			routines.system.IPersistableRow<newr3Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String ccosub;

		public String getCcosub() {
			return this.ccosub;
		}

		public String rnuexn;

		public String getRnuexn() {
			return this.rnuexn;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String vecexn;

		public String getVecexn() {
			return this.vecexn;
		}

		public String ccolloc;

		public String getCcolloc() {
			return this.ccolloc;
		}

		public String pexn;

		public String getPexn() {
			return this.pexn;
		}

		public String gnexts;

		public String getGnexts() {
			return this.gnexts;
		}

		public String jandeb;

		public String getJandeb() {
			return this.jandeb;
		}

		public String jfinex;

		public String getJfinex() {
			return this.jfinex;
		}

		public String rcexnba;

		public String getRcexnba() {
			return this.rcexnba;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.id_parc = readString(dis);

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.ccosub = readString(dis);

					this.rnuexn = readString(dis);

					this.article = readString(dis);

					this.vecexn = readString(dis);

					this.ccolloc = readString(dis);

					this.pexn = readString(dis);

					this.gnexts = readString(dis);

					this.jandeb = readString(dis);

					this.jfinex = readString(dis);

					this.rcexnba = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.ccosub, dos);

				// String

				writeString(this.rnuexn, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.vecexn, dos);

				// String

				writeString(this.ccolloc, dos);

				// String

				writeString(this.pexn, dos);

				// String

				writeString(this.gnexts, dos);

				// String

				writeString(this.jandeb, dos);

				// String

				writeString(this.jfinex, dos);

				// String

				writeString(this.rcexnba, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parc=" + id_parc);
			sb.append(",ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",ccosub=" + ccosub);
			sb.append(",rnuexn=" + rnuexn);
			sb.append(",article=" + article);
			sb.append(",vecexn=" + vecexn);
			sb.append(",ccolloc=" + ccolloc);
			sb.append(",pexn=" + pexn);
			sb.append(",gnexts=" + gnexts);
			sb.append(",jandeb=" + jandeb);
			sb.append(",jfinex=" + jfinex);
			sb.append(",rcexnba=" + rcexnba);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(newr3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class newr4Struct implements
			routines.system.IPersistableRow<newr4Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String ccosub;

		public String getCcosub() {
			return this.ccosub;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String majposa;

		public String getMajposa() {
			return this.majposa;
		}

		public String bisufad;

		public String getBisufad() {
			return this.bisufad;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.id_parc = readString(dis);

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.ccosub = readString(dis);

					this.article = readString(dis);

					this.majposa = readString(dis);

					this.bisufad = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.ccosub, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.majposa, dos);

				// String

				writeString(this.bisufad, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parc=" + id_parc);
			sb.append(",ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",ccosub=" + ccosub);
			sb.append(",article=" + article);
			sb.append(",majposa=" + majposa);
			sb.append(",bisufad=" + bisufad);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(newr4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String line;

		public String getLine() {
			return this.line;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r1Struct implements
			routines.system.IPersistableRow<r1Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dcntpa;

		public String getDcntpa() {
			return this.dcntpa;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dreflf;

		public String getDreflf() {
			return this.dreflf;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String cprsecr;

		public String getCprsecr() {
			return this.cprsecr;
		}

		public String ccosecr;

		public String getCcosecr() {
			return this.ccosecr;
		}

		public String dnuplar;

		public String getDnuplar() {
			return this.dnuplar;
		}

		public String dnupld;

		public String getDnupld() {
			return this.dnupld;
		}

		public String gurbpa;

		public String getGurbpa() {
			return this.gurbpa;
		}

		public String dparpi;

		public String getDparpi() {
			return this.dparpi;
		}

		public String ccoarp;

		public String getCcoarp() {
			return this.ccoarp;
		}

		public String gparnf;

		public String getGparnf() {
			return this.gparnf;
		}

		public String gparbat;

		public String getGparbat() {
			return this.gparbat;
		}

		public String parrev;

		public String getParrev() {
			return this.parrev;
		}

		public String gpardp;

		public String getGpardp() {
			return this.gpardp;
		}

		public String fviti;

		public String getFviti() {
			return this.fviti;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String gpafpd;

		public String getGpafpd() {
			return this.gpafpd;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.filler = readString(dis);

					this.article = readString(dis);

					this.dcntpa = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.jdatat = readString(dis);

					this.dreflf = readString(dis);

					this.gpdl = readString(dis);

					this.cprsecr = readString(dis);

					this.ccosecr = readString(dis);

					this.dnuplar = readString(dis);

					this.dnupld = readString(dis);

					this.gurbpa = readString(dis);

					this.dparpi = readString(dis);

					this.ccoarp = readString(dis);

					this.gparnf = readString(dis);

					this.gparbat = readString(dis);

					this.parrev = readString(dis);

					this.gpardp = readString(dis);

					this.fviti = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.ccocif = readString(dis);

					this.gpafpd = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dcntpa, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dreflf, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.cprsecr, dos);

				// String

				writeString(this.ccosecr, dos);

				// String

				writeString(this.dnuplar, dos);

				// String

				writeString(this.dnupld, dos);

				// String

				writeString(this.gurbpa, dos);

				// String

				writeString(this.dparpi, dos);

				// String

				writeString(this.ccoarp, dos);

				// String

				writeString(this.gparnf, dos);

				// String

				writeString(this.gparbat, dos);

				// String

				writeString(this.parrev, dos);

				// String

				writeString(this.gpardp, dos);

				// String

				writeString(this.fviti, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.gpafpd, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",filler=" + filler);
			sb.append(",article=" + article);
			sb.append(",dcntpa=" + dcntpa);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dreflf=" + dreflf);
			sb.append(",gpdl=" + gpdl);
			sb.append(",cprsecr=" + cprsecr);
			sb.append(",ccosecr=" + ccosecr);
			sb.append(",dnuplar=" + dnuplar);
			sb.append(",dnupld=" + dnupld);
			sb.append(",gurbpa=" + gurbpa);
			sb.append(",dparpi=" + dparpi);
			sb.append(",ccoarp=" + ccoarp);
			sb.append(",gparnf=" + gparnf);
			sb.append(",gparbat=" + gparbat);
			sb.append(",parrev=" + parrev);
			sb.append(",gpardp=" + gpardp);
			sb.append(",fviti=" + fviti);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",ccocif=" + ccocif);
			sb.append(",gpafpd=" + gpafpd);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r2Struct implements
			routines.system.IPersistableRow<r2Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String ccosub;

		public String getCcosub() {
			return this.ccosub;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dcntsf;

		public String getDcntsf() {
			return this.dcntsf;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String gnexps;

		public String getGnexps() {
			return this.gnexps;
		}

		public String drcsub;

		public String getDrcsub() {
			return this.drcsub;
		}

		public String drcsuba;

		public String getDrcsuba() {
			return this.drcsuba;
		}

		public String ccostn;

		public String getCcostn() {
			return this.ccostn;
		}

		public String cgrnum;

		public String getCgrnum() {
			return this.cgrnum;
		}

		public String dsgrpf;

		public String getDsgrpf() {
			return this.dsgrpf;
		}

		public String dclssf;

		public String getDclssf() {
			return this.dclssf;
		}

		public String cnatsp;

		public String getCnatsp() {
			return this.cnatsp;
		}

		public String drgpos;

		public String getDrgpos() {
			return this.drgpos;
		}

		public String ccoprel;

		public String getCcoprel() {
			return this.ccoprel;
		}

		public String ccosecl;

		public String getCcosecl() {
			return this.ccosecl;
		}

		public String dnuplal;

		public String getDnuplal() {
			return this.dnuplal;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String dnulot;

		public String getDnulot() {
			return this.dnulot;
		}

		public String rclsi;

		public String getRclsi() {
			return this.rclsi;
		}

		public String gnidom;

		public String getGnidom() {
			return this.gnidom;
		}

		public String topja;

		public String getTopja() {
			return this.topja;
		}

		public String datja;

		public String getDatja() {
			return this.datja;
		}

		public String postel;

		public String getPostel() {
			return this.postel;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.ccosub = readString(dis);

					this.filler = readString(dis);

					this.article = readString(dis);

					this.dcntsf = readString(dis);

					this.dnupro = readString(dis);

					this.gnexps = readString(dis);

					this.drcsub = readString(dis);

					this.drcsuba = readString(dis);

					this.ccostn = readString(dis);

					this.cgrnum = readString(dis);

					this.dsgrpf = readString(dis);

					this.dclssf = readString(dis);

					this.cnatsp = readString(dis);

					this.drgpos = readString(dis);

					this.ccoprel = readString(dis);

					this.ccosecl = readString(dis);

					this.dnuplal = readString(dis);

					this.dnupdl = readString(dis);

					this.dnulot = readString(dis);

					this.rclsi = readString(dis);

					this.gnidom = readString(dis);

					this.topja = readString(dis);

					this.datja = readString(dis);

					this.postel = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.ccosub, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dcntsf, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.gnexps, dos);

				// String

				writeString(this.drcsub, dos);

				// String

				writeString(this.drcsuba, dos);

				// String

				writeString(this.ccostn, dos);

				// String

				writeString(this.cgrnum, dos);

				// String

				writeString(this.dsgrpf, dos);

				// String

				writeString(this.dclssf, dos);

				// String

				writeString(this.cnatsp, dos);

				// String

				writeString(this.drgpos, dos);

				// String

				writeString(this.ccoprel, dos);

				// String

				writeString(this.ccosecl, dos);

				// String

				writeString(this.dnuplal, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.dnulot, dos);

				// String

				writeString(this.rclsi, dos);

				// String

				writeString(this.gnidom, dos);

				// String

				writeString(this.topja, dos);

				// String

				writeString(this.datja, dos);

				// String

				writeString(this.postel, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",ccosub=" + ccosub);
			sb.append(",filler=" + filler);
			sb.append(",article=" + article);
			sb.append(",dcntsf=" + dcntsf);
			sb.append(",dnupro=" + dnupro);
			sb.append(",gnexps=" + gnexps);
			sb.append(",drcsub=" + drcsub);
			sb.append(",drcsuba=" + drcsuba);
			sb.append(",ccostn=" + ccostn);
			sb.append(",cgrnum=" + cgrnum);
			sb.append(",dsgrpf=" + dsgrpf);
			sb.append(",dclssf=" + dclssf);
			sb.append(",cnatsp=" + cnatsp);
			sb.append(",drgpos=" + drgpos);
			sb.append(",ccoprel=" + ccoprel);
			sb.append(",ccosecl=" + ccosecl);
			sb.append(",dnuplal=" + dnuplal);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",dnulot=" + dnulot);
			sb.append(",rclsi=" + rclsi);
			sb.append(",gnidom=" + gnidom);
			sb.append(",topja=" + topja);
			sb.append(",datja=" + datja);
			sb.append(",postel=" + postel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r3Struct implements
			routines.system.IPersistableRow<r3Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String ccosub;

		public String getCcosub() {
			return this.ccosub;
		}

		public String rnuexn;

		public String getRnuexn() {
			return this.rnuexn;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String vecexn;

		public String getVecexn() {
			return this.vecexn;
		}

		public String ccolloc;

		public String getCcolloc() {
			return this.ccolloc;
		}

		public String pexn;

		public String getPexn() {
			return this.pexn;
		}

		public String gnexts;

		public String getGnexts() {
			return this.gnexts;
		}

		public String jandeb;

		public String getJandeb() {
			return this.jandeb;
		}

		public String jfinex;

		public String getJfinex() {
			return this.jfinex;
		}

		public String fcexn;

		public String getFcexn() {
			return this.fcexn;
		}

		public String fcexna;

		public String getFcexna() {
			return this.fcexna;
		}

		public String rcexna;

		public String getRcexna() {
			return this.rcexna;
		}

		public String rcexnba;

		public String getRcexnba() {
			return this.rcexnba;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String mpexnba;

		public String getMpexnba() {
			return this.mpexnba;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.ccosub = readString(dis);

					this.rnuexn = readString(dis);

					this.article = readString(dis);

					this.vecexn = readString(dis);

					this.ccolloc = readString(dis);

					this.pexn = readString(dis);

					this.gnexts = readString(dis);

					this.jandeb = readString(dis);

					this.jfinex = readString(dis);

					this.fcexn = readString(dis);

					this.fcexna = readString(dis);

					this.rcexna = readString(dis);

					this.rcexnba = readString(dis);

					this.filler = readString(dis);

					this.mpexnba = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.ccosub, dos);

				// String

				writeString(this.rnuexn, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.vecexn, dos);

				// String

				writeString(this.ccolloc, dos);

				// String

				writeString(this.pexn, dos);

				// String

				writeString(this.gnexts, dos);

				// String

				writeString(this.jandeb, dos);

				// String

				writeString(this.jfinex, dos);

				// String

				writeString(this.fcexn, dos);

				// String

				writeString(this.fcexna, dos);

				// String

				writeString(this.rcexna, dos);

				// String

				writeString(this.rcexnba, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.mpexnba, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",ccosub=" + ccosub);
			sb.append(",rnuexn=" + rnuexn);
			sb.append(",article=" + article);
			sb.append(",vecexn=" + vecexn);
			sb.append(",ccolloc=" + ccolloc);
			sb.append(",pexn=" + pexn);
			sb.append(",gnexts=" + gnexts);
			sb.append(",jandeb=" + jandeb);
			sb.append(",jfinex=" + jfinex);
			sb.append(",fcexn=" + fcexn);
			sb.append(",fcexna=" + fcexna);
			sb.append(",rcexna=" + rcexna);
			sb.append(",rcexnba=" + rcexnba);
			sb.append(",filler=" + filler);
			sb.append(",mpexnba=" + mpexnba);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r4Struct implements
			routines.system.IPersistableRow<r4Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String ccosub;

		public String getCcosub() {
			return this.ccosub;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String fller3;

		public String getFller3() {
			return this.fller3;
		}

		public String majposa;

		public String getMajposa() {
			return this.majposa;
		}

		public String filler2;

		public String getFiller2() {
			return this.filler2;
		}

		public String bisufad;

		public String getBisufad() {
			return this.bisufad;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.ccosub = readString(dis);

					this.filler = readString(dis);

					this.article = readString(dis);

					this.fller3 = readString(dis);

					this.majposa = readString(dis);

					this.filler2 = readString(dis);

					this.bisufad = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.ccosub, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.fller3, dos);

				// String

				writeString(this.majposa, dos);

				// String

				writeString(this.filler2, dos);

				// String

				writeString(this.bisufad, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",ccosub=" + ccosub);
			sb.append(",filler=" + filler);
			sb.append(",article=" + article);
			sb.append(",fller3=" + fller3);
			sb.append(",majposa=" + majposa);
			sb.append(",filler2=" + filler2);
			sb.append(",bisufad=" + bisufad);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputMSPositional_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputMSPositional_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				r1Struct r1 = new r1Struct();
				row3Struct row3 = new row3Struct();
				newoutStruct newout = new newoutStruct();
				r2Struct r2 = new r2Struct();
				newr2Struct newr2 = new newr2Struct();
				r3Struct r3 = new r3Struct();
				newr3Struct newr3 = new newr3Struct();
				r4Struct r4 = new r4Struct();
				newr4Struct newr4 = new newr4Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());
				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.target_path + "article10.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);

				String[] headColutFileOutputDelimited_5 = new String[29];
				class CSVBasicSet_tFileOutputDelimited_5 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_5[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_5 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_5[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_5 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_5[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_5[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_5 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
				csvSettings_tFileOutputDelimited_5.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_5.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_5.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;
				try {
					CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_5,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_5
							.setSeparator(csvSettings_tFileOutputDelimited_5
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_5
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_5.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_5
										.getRowDelim());
					}

					if (filetFileOutputDelimited_5.length() == 0) {

						headColutFileOutputDelimited_5[0] = "ccodep";

						headColutFileOutputDelimited_5[1] = "ccodir";

						headColutFileOutputDelimited_5[2] = "ccocom";

						headColutFileOutputDelimited_5[3] = "ccopre";

						headColutFileOutputDelimited_5[4] = "ccosec";

						headColutFileOutputDelimited_5[5] = "dnupla";

						headColutFileOutputDelimited_5[6] = "article";

						headColutFileOutputDelimited_5[7] = "id_parc";

						headColutFileOutputDelimited_5[8] = "dcntpa";

						headColutFileOutputDelimited_5[9] = "dsrpar";

						headColutFileOutputDelimited_5[10] = "dnupro";

						headColutFileOutputDelimited_5[11] = "idcompteprop";

						headColutFileOutputDelimited_5[12] = "jdatat";

						headColutFileOutputDelimited_5[13] = "dreflf";

						headColutFileOutputDelimited_5[14] = "gpdl";

						headColutFileOutputDelimited_5[15] = "cprsecr";

						headColutFileOutputDelimited_5[16] = "ccosecr";

						headColutFileOutputDelimited_5[17] = "dnuplar";

						headColutFileOutputDelimited_5[18] = "dnupld";

						headColutFileOutputDelimited_5[19] = "gurbpa";

						headColutFileOutputDelimited_5[20] = "dparpi";

						headColutFileOutputDelimited_5[21] = "ccoarp";

						headColutFileOutputDelimited_5[22] = "gparnf";

						headColutFileOutputDelimited_5[23] = "gparbat";

						headColutFileOutputDelimited_5[24] = "dnvoiri";

						headColutFileOutputDelimited_5[25] = "dindic";

						headColutFileOutputDelimited_5[26] = "ccovoi";

						headColutFileOutputDelimited_5[27] = "ccoriv";

						headColutFileOutputDelimited_5[28] = "ccocif";

						CsvWritertFileOutputDelimited_5
								.writeNext(headColutFileOutputDelimited_5);
						CsvWritertFileOutputDelimited_5.flush();

					}

					CsvWritertFileOutputDelimited_5
							.setEscapeChar(csvSettings_tFileOutputDelimited_5
									.getEscapeChar());
					CsvWritertFileOutputDelimited_5
							.setQuoteChar(csvSettings_tFileOutputDelimited_5
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_5
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_5 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());
					currentComponent = "tMap_1";

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
						String code_insee;
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					newoutStruct newout_tmp = new newoutStruct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tReplicate_1 begin ] start
					 */

					ok_Hash.put("tReplicate_1", false);
					start_Hash.put("tReplicate_1", System.currentTimeMillis());
					currentComponent = "tReplicate_1";

					int tos_count_tReplicate_1 = 0;

					/**
					 * [tReplicate_1 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_3", false);
					start_Hash.put("tFileOutputDelimited_3",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_3";

					int tos_count_tFileOutputDelimited_3 = 0;

					String fileName_tFileOutputDelimited_3 = "";
					fileName_tFileOutputDelimited_3 = (new java.io.File(
							context.target_path + "article21.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_3 = null;
					String extension_tFileOutputDelimited_3 = null;
					String directory_tFileOutputDelimited_3 = null;
					if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
							extension_tFileOutputDelimited_3 = "";
						} else {
							fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
									.substring(0,
											fileName_tFileOutputDelimited_3
													.lastIndexOf("."));
							extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
									.substring(fileName_tFileOutputDelimited_3
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
									.substring(0,
											fileName_tFileOutputDelimited_3
													.lastIndexOf("."));
							extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
									.substring(fileName_tFileOutputDelimited_3
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
							extension_tFileOutputDelimited_3 = "";
						}
						directory_tFileOutputDelimited_3 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_3 = true;
					java.io.File filetFileOutputDelimited_3 = new java.io.File(
							fileName_tFileOutputDelimited_3);
					globalMap.put("tFileOutputDelimited_3_FILE_NAME",
							fileName_tFileOutputDelimited_3);

					String[] headColutFileOutputDelimited_3 = new String[28];
					class CSVBasicSet_tFileOutputDelimited_3 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_3[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_3 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator(";");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_3[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_3 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_3[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_3[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_3 = 0;
					int splitEvery_tFileOutputDelimited_3 = 1000;
					int splitedFileNo_tFileOutputDelimited_3 = 0;
					int currentRow_tFileOutputDelimited_3 = 0;

					CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
					csvSettings_tFileOutputDelimited_3.setFieldSeparator(";");
					csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_3
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_3 != null
							&& directory_tFileOutputDelimited_3.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
								directory_tFileOutputDelimited_3);
						if (!dir_tFileOutputDelimited_3.exists()) {
							dir_tFileOutputDelimited_3.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;
					try {
						CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_3,
														false), "UTF-8")));
						CsvWritertFileOutputDelimited_3
								.setSeparator(csvSettings_tFileOutputDelimited_3
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_3
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_3
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_3
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_3.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_3
											.getRowDelim());
						}

						if (filetFileOutputDelimited_3.length() == 0) {

							headColutFileOutputDelimited_3[0] = "ccodep";

							headColutFileOutputDelimited_3[1] = "ccodir";

							headColutFileOutputDelimited_3[2] = "ccocom";

							headColutFileOutputDelimited_3[3] = "ccopre";

							headColutFileOutputDelimited_3[4] = "ccosec";

							headColutFileOutputDelimited_3[5] = "dnupla";

							headColutFileOutputDelimited_3[6] = "ccosub";

							headColutFileOutputDelimited_3[7] = "article";

							headColutFileOutputDelimited_3[8] = "dcntsf";

							headColutFileOutputDelimited_3[9] = "dnupro";

							headColutFileOutputDelimited_3[10] = "gnexps";

							headColutFileOutputDelimited_3[11] = "drcsub";

							headColutFileOutputDelimited_3[12] = "drcsuba";

							headColutFileOutputDelimited_3[13] = "ccostn";

							headColutFileOutputDelimited_3[14] = "cgrnum";

							headColutFileOutputDelimited_3[15] = "dsgrpf";

							headColutFileOutputDelimited_3[16] = "dclssf";

							headColutFileOutputDelimited_3[17] = "cnatsp";

							headColutFileOutputDelimited_3[18] = "drgpos";

							headColutFileOutputDelimited_3[19] = "ccoprel";

							headColutFileOutputDelimited_3[20] = "ccosecl";

							headColutFileOutputDelimited_3[21] = "dnuplal";

							headColutFileOutputDelimited_3[22] = "dnupdl";

							headColutFileOutputDelimited_3[23] = "dnulot";

							headColutFileOutputDelimited_3[24] = "gnidom";

							headColutFileOutputDelimited_3[25] = "topja";

							headColutFileOutputDelimited_3[26] = "datja";

							headColutFileOutputDelimited_3[27] = "postel";

							CsvWritertFileOutputDelimited_3
									.writeNext(headColutFileOutputDelimited_3);
							CsvWritertFileOutputDelimited_3.flush();

						}

						CsvWritertFileOutputDelimited_3
								.setEscapeChar(csvSettings_tFileOutputDelimited_3
										.getEscapeChar());
						CsvWritertFileOutputDelimited_3
								.setQuoteChar(csvSettings_tFileOutputDelimited_3
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_3
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_3 begin ] stop
						 */

						/**
						 * [tMap_2 begin ] start
						 */

						ok_Hash.put("tMap_2", false);
						start_Hash.put("tMap_2", System.currentTimeMillis());
						currentComponent = "tMap_2";

						int tos_count_tMap_2 = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_2__Struct {
						}
						Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						newr2Struct newr2_tmp = new newr2Struct();
						// ###############################

						/**
						 * [tMap_2 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_4", false);
						start_Hash.put("tFileOutputDelimited_4",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_4";

						int tos_count_tFileOutputDelimited_4 = 0;

						String fileName_tFileOutputDelimited_4 = "";
						fileName_tFileOutputDelimited_4 = (new java.io.File(
								context.target_path + "article30.csv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_4 = null;
						String extension_tFileOutputDelimited_4 = null;
						String directory_tFileOutputDelimited_4 = null;
						if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_4
									.lastIndexOf(".") < fileName_tFileOutputDelimited_4
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
								extension_tFileOutputDelimited_4 = "";
							} else {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(0,
												fileName_tFileOutputDelimited_4
														.lastIndexOf("."));
								extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(fileName_tFileOutputDelimited_4
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
									.substring(0,
											fileName_tFileOutputDelimited_4
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_4
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(0,
												fileName_tFileOutputDelimited_4
														.lastIndexOf("."));
								extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(fileName_tFileOutputDelimited_4
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
								extension_tFileOutputDelimited_4 = "";
							}
							directory_tFileOutputDelimited_4 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_4 = true;
						java.io.File filetFileOutputDelimited_4 = new java.io.File(
								fileName_tFileOutputDelimited_4);
						globalMap.put("tFileOutputDelimited_4_FILE_NAME",
								fileName_tFileOutputDelimited_4);

						String[] headColutFileOutputDelimited_4 = new String[17];
						class CSVBasicSet_tFileOutputDelimited_4 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_4[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_4 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator(";");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_4[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_4 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_4[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_4[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_4 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_4 = 0;
						int splitEvery_tFileOutputDelimited_4 = 1000;
						int splitedFileNo_tFileOutputDelimited_4 = 0;
						int currentRow_tFileOutputDelimited_4 = 0;

						CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
						csvSettings_tFileOutputDelimited_4
								.setFieldSeparator(";");
						csvSettings_tFileOutputDelimited_4
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_4
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_4 != null
								&& directory_tFileOutputDelimited_4.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
									directory_tFileOutputDelimited_4);
							if (!dir_tFileOutputDelimited_4.exists()) {
								dir_tFileOutputDelimited_4.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;
						try {
							CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_4,
															false), "UTF-8")));
							CsvWritertFileOutputDelimited_4
									.setSeparator(csvSettings_tFileOutputDelimited_4
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_4
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_4
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_4
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_4.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_4
												.getRowDelim());
							}

							if (filetFileOutputDelimited_4.length() == 0) {

								headColutFileOutputDelimited_4[0] = "id_parc";

								headColutFileOutputDelimited_4[1] = "ccodep";

								headColutFileOutputDelimited_4[2] = "ccodir";

								headColutFileOutputDelimited_4[3] = "ccocom";

								headColutFileOutputDelimited_4[4] = "ccopre";

								headColutFileOutputDelimited_4[5] = "ccosec";

								headColutFileOutputDelimited_4[6] = "dnupla";

								headColutFileOutputDelimited_4[7] = "ccosub";

								headColutFileOutputDelimited_4[8] = "rnuexn";

								headColutFileOutputDelimited_4[9] = "article";

								headColutFileOutputDelimited_4[10] = "vecexn";

								headColutFileOutputDelimited_4[11] = "ccolloc";

								headColutFileOutputDelimited_4[12] = "pexn";

								headColutFileOutputDelimited_4[13] = "gnexts";

								headColutFileOutputDelimited_4[14] = "jandeb";

								headColutFileOutputDelimited_4[15] = "jfinex";

								headColutFileOutputDelimited_4[16] = "rcexnba";

								CsvWritertFileOutputDelimited_4
										.writeNext(headColutFileOutputDelimited_4);
								CsvWritertFileOutputDelimited_4.flush();

							}

							CsvWritertFileOutputDelimited_4
									.setEscapeChar(csvSettings_tFileOutputDelimited_4
											.getEscapeChar());
							CsvWritertFileOutputDelimited_4
									.setQuoteChar(csvSettings_tFileOutputDelimited_4
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_4
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_4 begin ] stop
							 */

							/**
							 * [tMap_3 begin ] start
							 */

							ok_Hash.put("tMap_3", false);
							start_Hash
									.put("tMap_3", System.currentTimeMillis());
							currentComponent = "tMap_3";

							int tos_count_tMap_3 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_3__Struct {
								String code_insee;
							}
							Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							newr3Struct newr3_tmp = new newr3Struct();
							// ###############################

							/**
							 * [tMap_3 begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 begin ] start
							 */

							ok_Hash.put("tFileOutputDelimited_2", false);
							start_Hash.put("tFileOutputDelimited_2",
									System.currentTimeMillis());
							currentComponent = "tFileOutputDelimited_2";

							int tos_count_tFileOutputDelimited_2 = 0;

							String fileName_tFileOutputDelimited_2 = "";
							fileName_tFileOutputDelimited_2 = (new java.io.File(
									context.target_path + "article36.csv"))
									.getAbsolutePath().replace("\\", "/");
							String fullName_tFileOutputDelimited_2 = null;
							String extension_tFileOutputDelimited_2 = null;
							String directory_tFileOutputDelimited_2 = null;
							if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
								if (fileName_tFileOutputDelimited_2
										.lastIndexOf(".") < fileName_tFileOutputDelimited_2
										.lastIndexOf("/")) {
									fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
									extension_tFileOutputDelimited_2 = "";
								} else {
									fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
											.substring(0,
													fileName_tFileOutputDelimited_2
															.lastIndexOf("."));
									extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
											.substring(fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
								}
								directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
										.substring(0,
												fileName_tFileOutputDelimited_2
														.lastIndexOf("/"));
							} else {
								if (fileName_tFileOutputDelimited_2
										.lastIndexOf(".") != -1) {
									fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
											.substring(0,
													fileName_tFileOutputDelimited_2
															.lastIndexOf("."));
									extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
											.substring(fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
								} else {
									fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
									extension_tFileOutputDelimited_2 = "";
								}
								directory_tFileOutputDelimited_2 = "";
							}
							boolean isFileGenerated_tFileOutputDelimited_2 = true;
							java.io.File filetFileOutputDelimited_2 = new java.io.File(
									fileName_tFileOutputDelimited_2);
							globalMap.put("tFileOutputDelimited_2_FILE_NAME",
									fileName_tFileOutputDelimited_2);

							String[] headColutFileOutputDelimited_2 = new String[11];
							class CSVBasicSet_tFileOutputDelimited_2 {
								private char field_Delim;
								private char row_Delim;
								private char escape;
								private char textEnclosure;
								private boolean useCRLFRecordDelimiter;

								public boolean isUseCRLFRecordDelimiter() {
									return useCRLFRecordDelimiter;
								}

								public void setFieldSeparator(String fieldSep)
										throws IllegalArgumentException {
									char field_Delim_tFileOutputDelimited_2[] = null;

									// support passing value (property: Field
									// Separator) by 'context.fs' or
									// 'globalMap.get("fs")'.
									if (fieldSep.length() > 0) {
										field_Delim_tFileOutputDelimited_2 = fieldSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Field Separator must be assigned a char.");
									}
									this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
								}

								public char getFieldDelim() {
									if (this.field_Delim == 0) {
										setFieldSeparator(";");
									}
									return this.field_Delim;
								}

								public void setRowSeparator(String rowSep) {
									if ("\r\n".equals(rowSep)) {
										useCRLFRecordDelimiter = true;
										return;
									}
									char row_DelimtFileOutputDelimited_2[] = null;

									// support passing value (property: Row
									// Separator) by 'context.rs' or
									// 'globalMap.get("rs")'.
									if (rowSep.length() > 0) {
										row_DelimtFileOutputDelimited_2 = rowSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Row Separator must be assigned a char.");
									}
									this.row_Delim = row_DelimtFileOutputDelimited_2[0];
								}

								public char getRowDelim() {
									if (this.row_Delim == 0) {
										setRowSeparator("\n");
									}
									return this.row_Delim;
								}

								public void setEscapeAndTextEnclosure(
										String strEscape,
										String strTextEnclosure)
										throws IllegalArgumentException {
									if (strEscape.length() <= 0) {
										throw new IllegalArgumentException(
												"Escape Char must be assigned a char.");
									}

									if ("".equals(strTextEnclosure))
										strTextEnclosure = "\0";
									char textEnclosure_tFileOutputDelimited_2[] = null;

									if (strTextEnclosure.length() > 0) {
										textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Text Enclosure must be assigned a char.");
									}

									this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

									if (("\\").equals(strEscape)) {
										this.escape = '\\';
									} else if (strEscape
											.equals(strTextEnclosure)) {
										this.escape = this.textEnclosure;
									} else {
										// the default escape mode is double
										// escape
										this.escape = this.textEnclosure;
									}

								}

								public char getEscapeChar() {
									return (char) this.escape;
								}

								public char getTextEnclosure() {
									return this.textEnclosure;
								}
							}

							int nb_line_tFileOutputDelimited_2 = 0;
							int splitEvery_tFileOutputDelimited_2 = 1000;
							int splitedFileNo_tFileOutputDelimited_2 = 0;
							int currentRow_tFileOutputDelimited_2 = 0;

							CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
							csvSettings_tFileOutputDelimited_2
									.setFieldSeparator(";");
							csvSettings_tFileOutputDelimited_2
									.setRowSeparator("\n");
							csvSettings_tFileOutputDelimited_2
									.setEscapeAndTextEnclosure("\"", "\"");
							// create directory only if not exists
							if (directory_tFileOutputDelimited_2 != null
									&& directory_tFileOutputDelimited_2.trim()
											.length() != 0) {
								java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
										directory_tFileOutputDelimited_2);
								if (!dir_tFileOutputDelimited_2.exists()) {
									dir_tFileOutputDelimited_2.mkdirs();
								}
							}
							com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
							try {
								CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
										new java.io.BufferedWriter(
												new java.io.OutputStreamWriter(
														new java.io.FileOutputStream(
																fileName_tFileOutputDelimited_2,
																false), "UTF-8")));
								CsvWritertFileOutputDelimited_2
										.setSeparator(csvSettings_tFileOutputDelimited_2
												.getFieldDelim());

								if (!csvSettings_tFileOutputDelimited_2
										.isUseCRLFRecordDelimiter()
										&& csvSettings_tFileOutputDelimited_2
												.getRowDelim() != '\r'
										&& csvSettings_tFileOutputDelimited_2
												.getRowDelim() != '\n') {
									CsvWritertFileOutputDelimited_2
											.setLineEnd(""
													+ csvSettings_tFileOutputDelimited_2
															.getRowDelim());
								}

								if (filetFileOutputDelimited_2.length() == 0) {

									headColutFileOutputDelimited_2[0] = "id_parc";

									headColutFileOutputDelimited_2[1] = "ccodep";

									headColutFileOutputDelimited_2[2] = "ccodir";

									headColutFileOutputDelimited_2[3] = "ccocom";

									headColutFileOutputDelimited_2[4] = "ccopre";

									headColutFileOutputDelimited_2[5] = "ccosec";

									headColutFileOutputDelimited_2[6] = "dnupla";

									headColutFileOutputDelimited_2[7] = "ccosub";

									headColutFileOutputDelimited_2[8] = "article";

									headColutFileOutputDelimited_2[9] = "majposa";

									headColutFileOutputDelimited_2[10] = "bisufad";

									CsvWritertFileOutputDelimited_2
											.writeNext(headColutFileOutputDelimited_2);
									CsvWritertFileOutputDelimited_2.flush();

								}

								CsvWritertFileOutputDelimited_2
										.setEscapeChar(csvSettings_tFileOutputDelimited_2
												.getEscapeChar());
								CsvWritertFileOutputDelimited_2
										.setQuoteChar(csvSettings_tFileOutputDelimited_2
												.getTextEnclosure());
								CsvWritertFileOutputDelimited_2
										.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

								/**
								 * [tFileOutputDelimited_2 begin ] stop
								 */

								/**
								 * [tMap_4 begin ] start
								 */

								ok_Hash.put("tMap_4", false);
								start_Hash.put("tMap_4",
										System.currentTimeMillis());
								currentComponent = "tMap_4";

								int tos_count_tMap_4 = 0;

								// ###############################
								// # Lookup's keys initialization
								// ###############################

								// ###############################
								// # Vars initialization
								class Var__tMap_4__Struct {
									String code_insee;
								}
								Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
								// ###############################

								// ###############################
								// # Outputs initialization
								newr4Struct newr4_tmp = new newr4Struct();
								// ###############################

								/**
								 * [tMap_4 begin ] stop
								 */

								/**
								 * [tFileInputMSPositional_2 begin ] start
								 */

								ok_Hash.put("tFileInputMSPositional_2", false);
								start_Hash.put("tFileInputMSPositional_2",
										System.currentTimeMillis());
								currentComponent = "tFileInputMSPositional_2";

								int tos_count_tFileInputMSPositional_2 = 0;

								class AdvancedPositionalParser_tFileInputMSPositional_2 {
									private String headerValue;
									private String connName;
									private boolean hasStar = false;
									private boolean checkRowSize = false;
									private boolean trimAll = false;
									private String pattern;
									private int[] begins;
									private int[] ends;
									private int[] sizes;
									private String padding;
									private String alignment;
									private int minimumSize = 0;
									private int numberOfFields = 0;

									public AdvancedPositionalParser_tFileInputMSPositional_2(
											String connName,
											String headerValue, String pattern,
											boolean checkRowSize,
											boolean trimAll)
											throws java.lang.Exception {
										if (connName == null
												|| headerValue == null
												|| pattern == null)
											throw new java.lang.RuntimeException(
													"invalid connName, headerValue, or pattern");
										this.connName = connName;
										this.headerValue = headerValue;
										this.pattern = pattern;
										this.checkRowSize = checkRowSize;
										this.trimAll = trimAll;
										this.setPattern(pattern);
									}

									/**
									 * this function returns true if the header
									 * passed is the same as the header of the
									 * class
									 */
									public boolean headerMatches(String header) {
										return headerValue.equals(header);
									}

									/**
									 * this function is used to set the pattern
									 * specified by user. it also parses the
									 * pattern and determines where each column
									 * position would begin and end, and how
									 * many columns does the pattern have!
									 * example: pattern = "2,4,4,*" this pattern
									 * indicates that there are 4 columns in the
									 * schema. also column[1] has size of 2 and
									 * it starts from index 0 to 2. column[2] is
									 * from index 2 to 6, with length of 4 and
									 * so on... note: star represents the
									 * remaining length, and can only be used in
									 * the last column
									 */
									public void setPattern(String pattern)
											throws java.lang.RuntimeException {
										int beginIndex = 0;
										int endIndex = 0;
										int size = 0;
										String[] patternSplit = pattern
												.split(",");
										begins = new int[patternSplit.length];
										ends = new int[patternSplit.length];
										sizes = new int[patternSplit.length];
										minimumSize = 0;

										for (int i = 0; i < patternSplit.length; i++) {
											numberOfFields++;
											if (("*").equals(patternSplit[i])) {
												if (i != (patternSplit.length - 1)) { // the
																						// star
																						// can
																						// only
																						// be
																						// used
																						// for
																						// the
																						// size
																						// of
																						// the
																						// last
																						// column
													throw new java.lang.RuntimeException(
															"The star (*) in the pattern can only be at the end of the pattern string.");
												} else {
													hasStar = true;
													begins[i] = beginIndex;
													ends[i] = -1;
													sizes[i] = -1;
												}
											} else {
												try {
													size = Integer
															.parseInt(patternSplit[i]);
												} catch (java.lang.Exception e) {
													throw new java.lang.RuntimeException(
															"'"
																	+ patternSplit[i]
																	+ "' is not a valid integer value  in the pattern: "
																	+ pattern);
												}
												if (size <= 0) {
													throw new java.lang.RuntimeException(
															"'"
																	+ patternSplit[i]
																	+ "' is not a valid integer value  in the pattern: "
																	+ pattern);
												}
												endIndex += size;
												begins[i] = beginIndex;
												ends[i] = endIndex;
												beginIndex += size;
												minimumSize += size;
											}
										}
									}

									/**
									 * this function parses the row into fields
									 * based on the values of beings and ends
									 */
									public String[] parseRow(String row)
											throws java.lang.Exception {
										String[] fields = new String[numberOfFields];
										if (begins == null
												|| ends == null
												|| numberOfFields > begins.length
												|| numberOfFields > ends.length) { // this
																					// should
																					// never
																					// happen,
																					// unless
																					// outside
																					// code
																					// has
																					// changed
																					// either
																					// numberOfFields,
																					// beings,
																					// ends
											throw new java.lang.Exception(
													"The PositionalSchema object is not configured correctly. please contact talend support (support@talend.com)");
										}
										if (row != null && row.length() > 0) {
											if (checkRowSize) {
												if (hasStar == false
														&& row.length() != minimumSize) {
													throw new java.lang.Exception(
															"row size does not match the pattern ('"
																	+ pattern
																	+ "'), expected size is "
																	+ minimumSize
																	+ ".row size is: "
																	+ row.length());
												} else if (minimumSize > row
														.length()) {
													throw new java.lang.Exception(
															"row size too small, expected size is "
																	+ minimumSize);
												}
											}
											for (int i = 0; i < numberOfFields; i++) {
												fields[i] = "";
												if (ends[i] == -1) {
													if (row.length() > begins[i]) {
														fields[i] = row
																.substring(begins[i]);
													}
												} else {
													if (row.length() > ends[i]) {
														fields[i] = row
																.substring(
																		begins[i],
																		ends[i]);
													} else if (row.length() > begins[i]) {
														fields[i] = row
																.substring(begins[i]);
													}
												}
												if (trimAll) {
													fields[i] = fields[i]
															.trim();
												}
											}
										}
										return fields;
									}

									/**
									 * returns the minimum size required to
									 * contain the record. this value is driven
									 * from the pattern star at the end of the
									 * pattern does not accumulate to the size
									 */
									public int getMinimumRowSize() {
										return minimumSize;
									}

									/**
									 * returns the number of fields specified in
									 * the pattern
									 */
									public int getNumberOfFieldsExpected() {
										return numberOfFields;
									}
								}

								int nb_line_tFileInputMSPositional_2 = 0;
								int nb_line_rejected_tFileInputMSPositional_2 = 0;
								int nb_line_unknownHeader_tFileInputMSPositional_2 = 0;
								int nb_line_parseError_tFileInputMSPositional_2 = 0;

								int skipHeader_tFileInputMSPositional_2 = 3;
								int skipFooter_tFileInputMSPositional_2 = 0;
								int limit_tFileInputMSPositional_2 = -1;

								String rowSeparator_tFileInputMSPositional_2 = "\n";
								if (rowSeparator_tFileInputMSPositional_2
										.length() < 1) {
									throw new java.lang.Exception(
											"Row Separator must include at least one character");
								}

								if (skipFooter_tFileInputMSPositional_2 > 0) {
									java.io.BufferedReader temp_in_tFileInputMSPositional_2 = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															/**
															 * Start field
															 * tFileInputMSPositional_2
															 * :FILE_NAME
															 */
															context.source_path
																	+ "REVNBAT"
																	+ context.extfichier/**
													 * 
													 * End field
													 * tFileInputMSPositional_2
													 * :FILE_NAME
													 */
													), "ISO-8859-15"));
									org.talend.fileprocess.delimited.RowParser temp_reader_tFileInputMSPositional_2 = new org.talend.fileprocess.delimited.RowParser(
											temp_in_tFileInputMSPositional_2,
											"\n", true);
									int available_tFileInputMSPositional_2 = (int) temp_reader_tFileInputMSPositional_2
											.getAvailableRowCount(skipFooter_tFileInputMSPositional_2);
									temp_reader_tFileInputMSPositional_2
											.close();
									temp_in_tFileInputMSPositional_2.close();
									temp_reader_tFileInputMSPositional_2 = null;
									temp_in_tFileInputMSPositional_2 = null;
									if (limit_tFileInputMSPositional_2 < 0) {
										limit_tFileInputMSPositional_2 = available_tFileInputMSPositional_2;
									} else {
										limit_tFileInputMSPositional_2 = (limit_tFileInputMSPositional_2 > available_tFileInputMSPositional_2) ? available_tFileInputMSPositional_2
												: limit_tFileInputMSPositional_2;
									}
								}

								java.io.BufferedReader in_tFileInputMSPositional_2 = new java.io.BufferedReader(
										new java.io.InputStreamReader(
												new java.io.FileInputStream(/**
												 * 
												 * Start field
												 * tFileInputMSPositional_2
												 * :FILE_NAME
												 */
												context.source_path + "REVNBAT"
														+ context.extfichier/**
												 * 
												 * End field
												 * tFileInputMSPositional_2
												 * :FILE_NAME
												 */
												), "ISO-8859-15"));
								org.talend.fileprocess.delimited.RowParser reader_tFileInputMSPositional_2 = new org.talend.fileprocess.delimited.RowParser(
										in_tFileInputMSPositional_2, "\n", true);
								reader_tFileInputMSPositional_2
										.setSafetySwitch(true);
								reader_tFileInputMSPositional_2
										.skipHeaders(skipHeader_tFileInputMSPositional_2);

								AdvancedPositionalParser_tFileInputMSPositional_2 schema_r1_tFileInputMSPositional_2 = new AdvancedPositionalParser_tFileInputMSPositional_2(
										"r1",
										"10",
										"2,1,3,3,2,4,4,2,9,1,6,8,5,1,3,2,4,3,1,4,1,1,1,12,1,1,4,1,5,4,4,1",
										false, true);
								if (schema_r1_tFileInputMSPositional_2
										.getNumberOfFieldsExpected() != 32) {
									throw new java.lang.RuntimeException(
											"Number of columns in the schema does not match the pattern specified for the connection 'r1' of tFileInputMSPositional_2 component.");
								}
								AdvancedPositionalParser_tFileInputMSPositional_2 schema_r2_tFileInputMSPositional_2 = new AdvancedPositionalParser_tFileInputMSPositional_2(
										"r2",
										"21",
										"2,1,3,3,2,4,2,2,2,9,6,2,10,10,1,2,2,2,5,1,3,2,4,3,7,46,1,1,8,1",
										false, true);
								if (schema_r2_tFileInputMSPositional_2
										.getNumberOfFieldsExpected() != 30) {
									throw new java.lang.RuntimeException(
											"Number of columns in the schema does not match the pattern specified for the connection 'r2' of tFileInputMSPositional_2 component.");
								}
								AdvancedPositionalParser_tFileInputMSPositional_2 schema_r3_tFileInputMSPositional_2 = new AdvancedPositionalParser_tFileInputMSPositional_2(
										"r3",
										"30",
										"2,1,3,3,2,4,2,2,2,10,2,5,2,4,4,10,10,10,10,1,10",
										false, true);
								if (schema_r3_tFileInputMSPositional_2
										.getNumberOfFieldsExpected() != 21) {
									throw new java.lang.RuntimeException(
											"Number of columns in the schema does not match the pattern specified for the connection 'r3' of tFileInputMSPositional_2 component.");
								}
								AdvancedPositionalParser_tFileInputMSPositional_2 schema_r4_tFileInputMSPositional_2 = new AdvancedPositionalParser_tFileInputMSPositional_2(
										"r4", "36",
										"2,1,3,3,2,4,2,2,2,1,10,1,10", false,
										true);
								if (schema_r4_tFileInputMSPositional_2
										.getNumberOfFieldsExpected() != 13) {
									throw new java.lang.RuntimeException(
											"Number of columns in the schema does not match the pattern specified for the connection 'r4' of tFileInputMSPositional_2 component.");
								}

								String hdrpos_tFileInputMSPositional_2 = "19-21";
								if (hdrpos_tFileInputMSPositional_2
										.indexOf("-") < 0) {
									throw new java.lang.RuntimeException(
											"Please input the header position corretly. for exmaple for first 3 characters enter: '0-3'");
								}
								int hdrStartIndex_tFileInputMSPositional_2 = Integer
										.parseInt(hdrpos_tFileInputMSPositional_2
												.split("-")[0]);
								int hdrEndIndex_tFileInputMSPositional_2 = Integer
										.parseInt(hdrpos_tFileInputMSPositional_2
												.split("-")[1]);
								boolean foundMatchingHeader_tFileInputMSPositional_2 = false;
								String row_tFileInputMSPositional_2 = null;
								String header_tFileInputMSPositional_2 = null;

								while (reader_tFileInputMSPositional_2
										.readRecord()) {
									r1 = null;
									r2 = null;
									r3 = null;
									r4 = null;
									row1 = null;
									// parse the header record and match with
									// the associated connection(s)
									row_tFileInputMSPositional_2 = reader_tFileInputMSPositional_2
											.getRowRecord();
									foundMatchingHeader_tFileInputMSPositional_2 = false;
									if (row_tFileInputMSPositional_2 != null
											&& row_tFileInputMSPositional_2
													.length() >= hdrEndIndex_tFileInputMSPositional_2) {
										header_tFileInputMSPositional_2 = row_tFileInputMSPositional_2
												.substring(
														hdrStartIndex_tFileInputMSPositional_2,
														hdrEndIndex_tFileInputMSPositional_2)
												.trim();
										if (schema_r1_tFileInputMSPositional_2
												.headerMatches(header_tFileInputMSPositional_2)) {
											foundMatchingHeader_tFileInputMSPositional_2 = true;
											r1 = new r1Struct();
											try {
												String[] fields = schema_r1_tFileInputMSPositional_2
														.parseRow(row_tFileInputMSPositional_2);
												r1.ccodep = fields[0];
												r1.ccodir = fields[1];
												r1.ccocom = fields[2];
												r1.ccopre = fields[3];
												r1.ccosec = fields[4];
												r1.dnupla = fields[5];
												r1.filler = fields[6];
												r1.article = fields[7];
												r1.dcntpa = fields[8];
												r1.dsrpar = fields[9];
												r1.dnupro = fields[10];
												r1.jdatat = fields[11];
												r1.dreflf = fields[12];
												r1.gpdl = fields[13];
												r1.cprsecr = fields[14];
												r1.ccosecr = fields[15];
												r1.dnuplar = fields[16];
												r1.dnupld = fields[17];
												r1.gurbpa = fields[18];
												r1.dparpi = fields[19];
												r1.ccoarp = fields[20];
												r1.gparnf = fields[21];
												r1.gparbat = fields[22];
												r1.parrev = fields[23];
												r1.gpardp = fields[24];
												r1.fviti = fields[25];
												r1.dnvoiri = fields[26];
												r1.dindic = fields[27];
												r1.ccovoi = fields[28];
												r1.ccoriv = fields[29];
												r1.ccocif = fields[30];
												r1.gpafpd = fields[31];
												fields = null;
											} catch (java.lang.Exception e) {
												r1 = null;
												nb_line_rejected_tFileInputMSPositional_2++;
												nb_line_parseError_tFileInputMSPositional_2++;
												row1 = new row1Struct();
												row1.errorCode = 1;
												row1.errorMessage = e
														.getMessage()
														+ " - Line: "
														+ tos_count_tFileInputMSPositional_2;
												row1.line = row_tFileInputMSPositional_2;
											} // catch
										} // if header matches
										if (schema_r2_tFileInputMSPositional_2
												.headerMatches(header_tFileInputMSPositional_2)) {
											foundMatchingHeader_tFileInputMSPositional_2 = true;
											r2 = new r2Struct();
											try {
												String[] fields = schema_r2_tFileInputMSPositional_2
														.parseRow(row_tFileInputMSPositional_2);
												r2.ccodep = fields[0];
												r2.ccodir = fields[1];
												r2.ccocom = fields[2];
												r2.ccopre = fields[3];
												r2.ccosec = fields[4];
												r2.dnupla = fields[5];
												r2.ccosub = fields[6];
												r2.filler = fields[7];
												r2.article = fields[8];
												r2.dcntsf = fields[9];
												r2.dnupro = fields[10];
												r2.gnexps = fields[11];
												r2.drcsub = fields[12];
												r2.drcsuba = fields[13];
												r2.ccostn = fields[14];
												r2.cgrnum = fields[15];
												r2.dsgrpf = fields[16];
												r2.dclssf = fields[17];
												r2.cnatsp = fields[18];
												r2.drgpos = fields[19];
												r2.ccoprel = fields[20];
												r2.ccosecl = fields[21];
												r2.dnuplal = fields[22];
												r2.dnupdl = fields[23];
												r2.dnulot = fields[24];
												r2.rclsi = fields[25];
												r2.gnidom = fields[26];
												r2.topja = fields[27];
												r2.datja = fields[28];
												r2.postel = fields[29];
												fields = null;
											} catch (java.lang.Exception e) {
												r2 = null;
												nb_line_rejected_tFileInputMSPositional_2++;
												nb_line_parseError_tFileInputMSPositional_2++;
												row1 = new row1Struct();
												row1.errorCode = 1;
												row1.errorMessage = e
														.getMessage()
														+ " - Line: "
														+ tos_count_tFileInputMSPositional_2;
												row1.line = row_tFileInputMSPositional_2;
											} // catch
										} // if header matches
										if (schema_r3_tFileInputMSPositional_2
												.headerMatches(header_tFileInputMSPositional_2)) {
											foundMatchingHeader_tFileInputMSPositional_2 = true;
											r3 = new r3Struct();
											try {
												String[] fields = schema_r3_tFileInputMSPositional_2
														.parseRow(row_tFileInputMSPositional_2);
												r3.ccodep = fields[0];
												r3.ccodir = fields[1];
												r3.ccocom = fields[2];
												r3.ccopre = fields[3];
												r3.ccosec = fields[4];
												r3.dnupla = fields[5];
												r3.ccosub = fields[6];
												r3.rnuexn = fields[7];
												r3.article = fields[8];
												r3.vecexn = fields[9];
												r3.ccolloc = fields[10];
												r3.pexn = fields[11];
												r3.gnexts = fields[12];
												r3.jandeb = fields[13];
												r3.jfinex = fields[14];
												r3.fcexn = fields[15];
												r3.fcexna = fields[16];
												r3.rcexna = fields[17];
												r3.rcexnba = fields[18];
												r3.filler = fields[19];
												r3.mpexnba = fields[20];
												fields = null;
											} catch (java.lang.Exception e) {
												r3 = null;
												nb_line_rejected_tFileInputMSPositional_2++;
												nb_line_parseError_tFileInputMSPositional_2++;
												row1 = new row1Struct();
												row1.errorCode = 1;
												row1.errorMessage = e
														.getMessage()
														+ " - Line: "
														+ tos_count_tFileInputMSPositional_2;
												row1.line = row_tFileInputMSPositional_2;
											} // catch
										} // if header matches
										if (schema_r4_tFileInputMSPositional_2
												.headerMatches(header_tFileInputMSPositional_2)) {
											foundMatchingHeader_tFileInputMSPositional_2 = true;
											r4 = new r4Struct();
											try {
												String[] fields = schema_r4_tFileInputMSPositional_2
														.parseRow(row_tFileInputMSPositional_2);
												r4.ccodep = fields[0];
												r4.ccodir = fields[1];
												r4.ccocom = fields[2];
												r4.ccopre = fields[3];
												r4.ccosec = fields[4];
												r4.dnupla = fields[5];
												r4.ccosub = fields[6];
												r4.filler = fields[7];
												r4.article = fields[8];
												r4.fller3 = fields[9];
												r4.majposa = fields[10];
												r4.filler2 = fields[11];
												r4.bisufad = fields[12];
												fields = null;
											} catch (java.lang.Exception e) {
												r4 = null;
												nb_line_rejected_tFileInputMSPositional_2++;
												nb_line_parseError_tFileInputMSPositional_2++;
												row1 = new row1Struct();
												row1.errorCode = 1;
												row1.errorMessage = e
														.getMessage()
														+ " - Line: "
														+ tos_count_tFileInputMSPositional_2;
												row1.line = row_tFileInputMSPositional_2;
											} // catch
										} // if header matches
										if (foundMatchingHeader_tFileInputMSPositional_2 == false) {
											nb_line_rejected_tFileInputMSPositional_2++;
											nb_line_unknownHeader_tFileInputMSPositional_2++;
											row1 = new row1Struct();
											row1.errorCode = 2;
											row1.errorMessage = "Unknown header value '"
													+ header_tFileInputMSPositional_2
													+ "'";
											row1.line = row_tFileInputMSPositional_2;
										}
									}

									/**
									 * [tFileInputMSPositional_2 begin ] stop
									 */
									/**
									 * [tFileInputMSPositional_2 main ] start
									 */

									currentComponent = "tFileInputMSPositional_2";

									tos_count_tFileInputMSPositional_2++;

									/**
									 * [tFileInputMSPositional_2 main ] stop
									 */
									// Start of branch "row1"
									if (row1 != null) {

										/**
										 * [tLogRow_2 main ] start
										 */

										currentComponent = "tLogRow_2";

										// /////////////////////

										strBuffer_tLogRow_2 = new StringBuilder();

										if (row1.errorCode != null) { //

											strBuffer_tLogRow_2.append(String
													.valueOf(row1.errorCode));

										} //

										strBuffer_tLogRow_2.append("|");

										if (row1.errorMessage != null) { //

											strBuffer_tLogRow_2
													.append(String
															.valueOf(row1.errorMessage));

										} //

										strBuffer_tLogRow_2.append("|");

										if (row1.line != null) { //

											strBuffer_tLogRow_2.append(String
													.valueOf(row1.line));

										} //

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_2 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(
															System.out));
											globalMap.put("tLogRow_CONSOLE",
													consoleOut_tLogRow_2);
										}

										consoleOut_tLogRow_2
												.println(strBuffer_tLogRow_2
														.toString());
										consoleOut_tLogRow_2.flush();
										nb_line_tLogRow_2++;
										// ////

										// ////

										// /////////////////////

										tos_count_tLogRow_2++;

										/**
										 * [tLogRow_2 main ] stop
										 */

									} // End of branch "row1"

									// Start of branch "r1"
									if (r1 != null) {

										/**
										 * [tReplicate_1 main ] start
										 */

										currentComponent = "tReplicate_1";

										row3 = new row3Struct();

										row3.ccodep = r1.ccodep;
										row3.ccodir = r1.ccodir;
										row3.ccocom = r1.ccocom;
										row3.ccopre = r1.ccopre;
										row3.ccosec = r1.ccosec;
										row3.dnupla = r1.dnupla;
										row3.filler = r1.filler;
										row3.article = r1.article;
										row3.dcntpa = r1.dcntpa;
										row3.dsrpar = r1.dsrpar;
										row3.dnupro = r1.dnupro;
										row3.jdatat = r1.jdatat;
										row3.dreflf = r1.dreflf;
										row3.gpdl = r1.gpdl;
										row3.cprsecr = r1.cprsecr;
										row3.ccosecr = r1.ccosecr;
										row3.dnuplar = r1.dnuplar;
										row3.dnupld = r1.dnupld;
										row3.gurbpa = r1.gurbpa;
										row3.dparpi = r1.dparpi;
										row3.ccoarp = r1.ccoarp;
										row3.gparnf = r1.gparnf;
										row3.gparbat = r1.gparbat;
										row3.parrev = r1.parrev;
										row3.gpardp = r1.gpardp;
										row3.fviti = r1.fviti;
										row3.dnvoiri = r1.dnvoiri;
										row3.dindic = r1.dindic;
										row3.ccovoi = r1.ccovoi;
										row3.ccoriv = r1.ccoriv;
										row3.ccocif = r1.ccocif;
										row3.gpafpd = r1.gpafpd;

										tos_count_tReplicate_1++;

										/**
										 * [tReplicate_1 main ] stop
										 */

										/**
										 * [tMap_1 main ] start
										 */

										currentComponent = "tMap_1";

										boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_1 = false;
										boolean mainRowRejected_tMap_1 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_1__Struct Var = Var__tMap_1;
											Var.code_insee = Relational
													.ISNULL(row3.ccopre)
													|| ("").equals(row3.ccopre)
													|| ("000")
															.equals(row3.ccopre) ? row3.ccocom
													: row3.ccopre;// ###############################
											// ###############################
											// # Output tables

											newout = null;

											// # Output table : 'newout'
											newout_tmp.ccodep = row3.ccodep;
											newout_tmp.ccodir = row3.ccodir;
											newout_tmp.ccocom = row3.ccocom;
											newout_tmp.ccopre = row3.ccopre;
											newout_tmp.ccosec = row3.ccosec;
											newout_tmp.dnupla = row3.dnupla;
											newout_tmp.article = row3.article;
											newout_tmp.id_parc = row3.ccodep
													+ Var.code_insee
													+ row3.ccosec + row3.dnupla;
											newout_tmp.dcntpa = row3.dcntpa;
											newout_tmp.dsrpar = row3.dsrpar;
											newout_tmp.dnupro = row3.dnupro;
											newout_tmp.idcompteprop = row3.ccodep
													+ Var.code_insee
													+ row3.dnupro;
											newout_tmp.jdatat = row3.jdatat;
											newout_tmp.dreflf = row3.dreflf;
											newout_tmp.gpdl = row3.gpdl;
											newout_tmp.cprsecr = row3.cprsecr;
											newout_tmp.ccosecr = row3.ccosecr;
											newout_tmp.dnuplar = row3.dnuplar;
											newout_tmp.dnupld = row3.dnupld;
											newout_tmp.gurbpa = row3.gurbpa;
											newout_tmp.dparpi = row3.dparpi;
											newout_tmp.ccoarp = row3.ccoarp;
											newout_tmp.gparnf = row3.gparnf;
											newout_tmp.gparbat = row3.gparbat;
											newout_tmp.dnvoiri = row3.dnvoiri;
											newout_tmp.dindic = row3.dindic;
											newout_tmp.ccovoi = row3.ccovoi;
											newout_tmp.ccoriv = row3.ccoriv;
											newout_tmp.ccocif = row3.ccocif;
											newout = newout_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_1 = false;

										tos_count_tMap_1++;

										/**
										 * [tMap_1 main ] stop
										 */
										// Start of branch "newout"
										if (newout != null) {

											/**
											 * [tFileOutputDelimited_5 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_5";

											String[] rowtFileOutputDelimited_5 = new String[29];

											rowtFileOutputDelimited_5[0] = newout.ccodep == null ? ""
													: newout.ccodep;

											rowtFileOutputDelimited_5[1] = newout.ccodir == null ? ""
													: newout.ccodir;

											rowtFileOutputDelimited_5[2] = newout.ccocom == null ? ""
													: newout.ccocom;

											rowtFileOutputDelimited_5[3] = newout.ccopre == null ? ""
													: newout.ccopre;

											rowtFileOutputDelimited_5[4] = newout.ccosec == null ? ""
													: newout.ccosec;

											rowtFileOutputDelimited_5[5] = newout.dnupla == null ? ""
													: newout.dnupla;

											rowtFileOutputDelimited_5[6] = newout.article == null ? ""
													: newout.article;

											rowtFileOutputDelimited_5[7] = newout.id_parc == null ? ""
													: newout.id_parc;

											rowtFileOutputDelimited_5[8] = newout.dcntpa == null ? ""
													: newout.dcntpa;

											rowtFileOutputDelimited_5[9] = newout.dsrpar == null ? ""
													: newout.dsrpar;

											rowtFileOutputDelimited_5[10] = newout.dnupro == null ? ""
													: newout.dnupro;

											rowtFileOutputDelimited_5[11] = newout.idcompteprop == null ? ""
													: newout.idcompteprop;

											rowtFileOutputDelimited_5[12] = newout.jdatat == null ? ""
													: newout.jdatat;

											rowtFileOutputDelimited_5[13] = newout.dreflf == null ? ""
													: newout.dreflf;

											rowtFileOutputDelimited_5[14] = newout.gpdl == null ? ""
													: newout.gpdl;

											rowtFileOutputDelimited_5[15] = newout.cprsecr == null ? ""
													: newout.cprsecr;

											rowtFileOutputDelimited_5[16] = newout.ccosecr == null ? ""
													: newout.ccosecr;

											rowtFileOutputDelimited_5[17] = newout.dnuplar == null ? ""
													: newout.dnuplar;

											rowtFileOutputDelimited_5[18] = newout.dnupld == null ? ""
													: newout.dnupld;

											rowtFileOutputDelimited_5[19] = newout.gurbpa == null ? ""
													: newout.gurbpa;

											rowtFileOutputDelimited_5[20] = newout.dparpi == null ? ""
													: newout.dparpi;

											rowtFileOutputDelimited_5[21] = newout.ccoarp == null ? ""
													: newout.ccoarp;

											rowtFileOutputDelimited_5[22] = newout.gparnf == null ? ""
													: newout.gparnf;

											rowtFileOutputDelimited_5[23] = newout.gparbat == null ? ""
													: newout.gparbat;

											rowtFileOutputDelimited_5[24] = newout.dnvoiri == null ? ""
													: newout.dnvoiri;

											rowtFileOutputDelimited_5[25] = newout.dindic == null ? ""
													: newout.dindic;

											rowtFileOutputDelimited_5[26] = newout.ccovoi == null ? ""
													: newout.ccovoi;

											rowtFileOutputDelimited_5[27] = newout.ccoriv == null ? ""
													: newout.ccoriv;

											rowtFileOutputDelimited_5[28] = newout.ccocif == null ? ""
													: newout.ccocif;

											nb_line_tFileOutputDelimited_5++;
											CsvWritertFileOutputDelimited_5
													.writeNext(rowtFileOutputDelimited_5);

											tos_count_tFileOutputDelimited_5++;

											/**
											 * [tFileOutputDelimited_5 main ]
											 * stop
											 */

										} // End of branch "newout"

									} // End of branch "r1"

									// Start of branch "r2"
									if (r2 != null) {

										/**
										 * [tMap_2 main ] start
										 */

										currentComponent = "tMap_2";

										boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_2 = false;
										boolean mainRowRejected_tMap_2 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
											// ###############################
											// # Output tables

											newr2 = null;

											// # Output table : 'newr2'
											newr2_tmp.ccodep = r2.ccodep;
											newr2_tmp.ccodir = r2.ccodir;
											newr2_tmp.ccocom = r2.ccocom;
											newr2_tmp.ccopre = r2.ccopre;
											newr2_tmp.ccosec = r2.ccosec;
											newr2_tmp.dnupla = r2.dnupla;
											newr2_tmp.ccosub = r2.ccosub;
											newr2_tmp.article = r2.article;
											newr2_tmp.dcntsf = r2.dcntsf;
											newr2_tmp.dnupro = r2.dnupro;
											newr2_tmp.gnexps = r2.gnexps;
											newr2_tmp.drcsub = r2.drcsub;
											newr2_tmp.drcsuba = r2.drcsuba;
											newr2_tmp.ccostn = r2.ccostn;
											newr2_tmp.cgrnum = r2.cgrnum;
											newr2_tmp.dsgrpf = r2.dsgrpf;
											newr2_tmp.dclssf = r2.dclssf;
											newr2_tmp.cnatsp = r2.cnatsp;
											newr2_tmp.drgpos = r2.drgpos;
											newr2_tmp.ccoprel = r2.ccoprel;
											newr2_tmp.ccosecl = r2.ccosecl;
											newr2_tmp.dnuplal = r2.dnuplal;
											newr2_tmp.dnupdl = r2.dnupdl;
											newr2_tmp.dnulot = r2.dnulot;
											newr2_tmp.gnidom = r2.gnidom;
											newr2_tmp.topja = r2.topja;
											newr2_tmp.datja = r2.datja;
											newr2_tmp.postel = r2.postel;
											newr2 = newr2_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_2 = false;

										tos_count_tMap_2++;

										/**
										 * [tMap_2 main ] stop
										 */
										// Start of branch "newr2"
										if (newr2 != null) {

											/**
											 * [tFileOutputDelimited_3 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_3";

											String[] rowtFileOutputDelimited_3 = new String[28];

											rowtFileOutputDelimited_3[0] = newr2.ccodep == null ? ""
													: newr2.ccodep;

											rowtFileOutputDelimited_3[1] = newr2.ccodir == null ? ""
													: newr2.ccodir;

											rowtFileOutputDelimited_3[2] = newr2.ccocom == null ? ""
													: newr2.ccocom;

											rowtFileOutputDelimited_3[3] = newr2.ccopre == null ? ""
													: newr2.ccopre;

											rowtFileOutputDelimited_3[4] = newr2.ccosec == null ? ""
													: newr2.ccosec;

											rowtFileOutputDelimited_3[5] = newr2.dnupla == null ? ""
													: newr2.dnupla;

											rowtFileOutputDelimited_3[6] = newr2.ccosub == null ? ""
													: newr2.ccosub;

											rowtFileOutputDelimited_3[7] = newr2.article == null ? ""
													: newr2.article;

											rowtFileOutputDelimited_3[8] = newr2.dcntsf == null ? ""
													: newr2.dcntsf;

											rowtFileOutputDelimited_3[9] = newr2.dnupro == null ? ""
													: newr2.dnupro;

											rowtFileOutputDelimited_3[10] = newr2.gnexps == null ? ""
													: newr2.gnexps;

											rowtFileOutputDelimited_3[11] = newr2.drcsub == null ? ""
													: newr2.drcsub;

											rowtFileOutputDelimited_3[12] = newr2.drcsuba == null ? ""
													: newr2.drcsuba;

											rowtFileOutputDelimited_3[13] = newr2.ccostn == null ? ""
													: newr2.ccostn;

											rowtFileOutputDelimited_3[14] = newr2.cgrnum == null ? ""
													: newr2.cgrnum;

											rowtFileOutputDelimited_3[15] = newr2.dsgrpf == null ? ""
													: newr2.dsgrpf;

											rowtFileOutputDelimited_3[16] = newr2.dclssf == null ? ""
													: newr2.dclssf;

											rowtFileOutputDelimited_3[17] = newr2.cnatsp == null ? ""
													: newr2.cnatsp;

											rowtFileOutputDelimited_3[18] = newr2.drgpos == null ? ""
													: newr2.drgpos;

											rowtFileOutputDelimited_3[19] = newr2.ccoprel == null ? ""
													: newr2.ccoprel;

											rowtFileOutputDelimited_3[20] = newr2.ccosecl == null ? ""
													: newr2.ccosecl;

											rowtFileOutputDelimited_3[21] = newr2.dnuplal == null ? ""
													: newr2.dnuplal;

											rowtFileOutputDelimited_3[22] = newr2.dnupdl == null ? ""
													: newr2.dnupdl;

											rowtFileOutputDelimited_3[23] = newr2.dnulot == null ? ""
													: newr2.dnulot;

											rowtFileOutputDelimited_3[24] = newr2.gnidom == null ? ""
													: newr2.gnidom;

											rowtFileOutputDelimited_3[25] = newr2.topja == null ? ""
													: newr2.topja;

											rowtFileOutputDelimited_3[26] = newr2.datja == null ? ""
													: newr2.datja;

											rowtFileOutputDelimited_3[27] = newr2.postel == null ? ""
													: newr2.postel;

											nb_line_tFileOutputDelimited_3++;
											CsvWritertFileOutputDelimited_3
													.writeNext(rowtFileOutputDelimited_3);

											tos_count_tFileOutputDelimited_3++;

											/**
											 * [tFileOutputDelimited_3 main ]
											 * stop
											 */

										} // End of branch "newr2"

									} // End of branch "r2"

									// Start of branch "r3"
									if (r3 != null) {

										/**
										 * [tMap_3 main ] start
										 */

										currentComponent = "tMap_3";

										boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_3 = false;
										boolean mainRowRejected_tMap_3 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_3__Struct Var = Var__tMap_3;
											Var.code_insee = Relational
													.ISNULL(r3.ccopre)
													|| ("").equals(r3.ccopre)
													|| ("000")
															.equals(r3.ccopre) ? r3.ccocom
													: r3.ccopre;// ###############################
											// ###############################
											// # Output tables

											newr3 = null;

											// # Output table : 'newr3'
											newr3_tmp.id_parc = r3.ccodep
													+ Var.code_insee
													+ r3.ccosec + r3.dnupla;
											newr3_tmp.ccodep = r3.ccodep;
											newr3_tmp.ccodir = r3.ccodir;
											newr3_tmp.ccocom = r3.ccocom;
											newr3_tmp.ccopre = r3.ccopre;
											newr3_tmp.ccosec = r3.ccosec;
											newr3_tmp.dnupla = r3.dnupla;
											newr3_tmp.ccosub = r3.ccosub;
											newr3_tmp.rnuexn = r3.rnuexn;
											newr3_tmp.article = r3.article;
											newr3_tmp.vecexn = r3.vecexn;
											newr3_tmp.ccolloc = r3.ccolloc;
											newr3_tmp.pexn = r3.pexn;
											newr3_tmp.gnexts = r3.gnexts;
											newr3_tmp.jandeb = r3.jandeb;
											newr3_tmp.jfinex = r3.jfinex;
											newr3_tmp.rcexnba = r3.rcexnba;
											newr3 = newr3_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_3 = false;

										tos_count_tMap_3++;

										/**
										 * [tMap_3 main ] stop
										 */
										// Start of branch "newr3"
										if (newr3 != null) {

											/**
											 * [tFileOutputDelimited_4 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_4";

											String[] rowtFileOutputDelimited_4 = new String[17];

											rowtFileOutputDelimited_4[0] = newr3.id_parc == null ? ""
													: newr3.id_parc;

											rowtFileOutputDelimited_4[1] = newr3.ccodep == null ? ""
													: newr3.ccodep;

											rowtFileOutputDelimited_4[2] = newr3.ccodir == null ? ""
													: newr3.ccodir;

											rowtFileOutputDelimited_4[3] = newr3.ccocom == null ? ""
													: newr3.ccocom;

											rowtFileOutputDelimited_4[4] = newr3.ccopre == null ? ""
													: newr3.ccopre;

											rowtFileOutputDelimited_4[5] = newr3.ccosec == null ? ""
													: newr3.ccosec;

											rowtFileOutputDelimited_4[6] = newr3.dnupla == null ? ""
													: newr3.dnupla;

											rowtFileOutputDelimited_4[7] = newr3.ccosub == null ? ""
													: newr3.ccosub;

											rowtFileOutputDelimited_4[8] = newr3.rnuexn == null ? ""
													: newr3.rnuexn;

											rowtFileOutputDelimited_4[9] = newr3.article == null ? ""
													: newr3.article;

											rowtFileOutputDelimited_4[10] = newr3.vecexn == null ? ""
													: newr3.vecexn;

											rowtFileOutputDelimited_4[11] = newr3.ccolloc == null ? ""
													: newr3.ccolloc;

											rowtFileOutputDelimited_4[12] = newr3.pexn == null ? ""
													: newr3.pexn;

											rowtFileOutputDelimited_4[13] = newr3.gnexts == null ? ""
													: newr3.gnexts;

											rowtFileOutputDelimited_4[14] = newr3.jandeb == null ? ""
													: newr3.jandeb;

											rowtFileOutputDelimited_4[15] = newr3.jfinex == null ? ""
													: newr3.jfinex;

											rowtFileOutputDelimited_4[16] = newr3.rcexnba == null ? ""
													: newr3.rcexnba;

											nb_line_tFileOutputDelimited_4++;
											CsvWritertFileOutputDelimited_4
													.writeNext(rowtFileOutputDelimited_4);

											tos_count_tFileOutputDelimited_4++;

											/**
											 * [tFileOutputDelimited_4 main ]
											 * stop
											 */

										} // End of branch "newr3"

									} // End of branch "r3"

									// Start of branch "r4"
									if (r4 != null) {

										/**
										 * [tMap_4 main ] start
										 */

										currentComponent = "tMap_4";

										boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_4 = false;
										boolean mainRowRejected_tMap_4 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_4__Struct Var = Var__tMap_4;
											Var.code_insee = Relational
													.ISNULL(r4.ccopre)
													|| ("").equals(r4.ccopre)
													|| ("000")
															.equals(r4.ccopre) ? r4.ccocom
													: r4.ccopre;// ###############################
											// ###############################
											// # Output tables

											newr4 = null;

											// # Output table : 'newr4'
											newr4_tmp.id_parc = r4.ccodep
													+ Var.code_insee
													+ r4.ccosec + r4.dnupla;
											newr4_tmp.ccodep = r4.ccodep;
											newr4_tmp.ccodir = r4.ccodir;
											newr4_tmp.ccocom = r4.ccocom;
											newr4_tmp.ccopre = r4.ccopre;
											newr4_tmp.ccosec = r4.ccosec;
											newr4_tmp.dnupla = r4.dnupla;
											newr4_tmp.ccosub = r4.ccosub;
											newr4_tmp.article = r4.article;
											newr4_tmp.majposa = r4.majposa;
											newr4_tmp.bisufad = r4.bisufad;
											newr4 = newr4_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_4 = false;

										tos_count_tMap_4++;

										/**
										 * [tMap_4 main ] stop
										 */
										// Start of branch "newr4"
										if (newr4 != null) {

											/**
											 * [tFileOutputDelimited_2 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_2";

											String[] rowtFileOutputDelimited_2 = new String[11];

											rowtFileOutputDelimited_2[0] = newr4.id_parc == null ? ""
													: newr4.id_parc;

											rowtFileOutputDelimited_2[1] = newr4.ccodep == null ? ""
													: newr4.ccodep;

											rowtFileOutputDelimited_2[2] = newr4.ccodir == null ? ""
													: newr4.ccodir;

											rowtFileOutputDelimited_2[3] = newr4.ccocom == null ? ""
													: newr4.ccocom;

											rowtFileOutputDelimited_2[4] = newr4.ccopre == null ? ""
													: newr4.ccopre;

											rowtFileOutputDelimited_2[5] = newr4.ccosec == null ? ""
													: newr4.ccosec;

											rowtFileOutputDelimited_2[6] = newr4.dnupla == null ? ""
													: newr4.dnupla;

											rowtFileOutputDelimited_2[7] = newr4.ccosub == null ? ""
													: newr4.ccosub;

											rowtFileOutputDelimited_2[8] = newr4.article == null ? ""
													: newr4.article;

											rowtFileOutputDelimited_2[9] = newr4.majposa == null ? ""
													: newr4.majposa;

											rowtFileOutputDelimited_2[10] = newr4.bisufad == null ? ""
													: newr4.bisufad;

											nb_line_tFileOutputDelimited_2++;
											CsvWritertFileOutputDelimited_2
													.writeNext(rowtFileOutputDelimited_2);

											tos_count_tFileOutputDelimited_2++;

											/**
											 * [tFileOutputDelimited_2 main ]
											 * stop
											 */

										} // End of branch "newr4"

									} // End of branch "r4"

									/**
									 * [tFileInputMSPositional_2 end ] start
									 */

									currentComponent = "tFileInputMSPositional_2";

									nb_line_tFileInputMSPositional_2++;

									if (limit_tFileInputMSPositional_2 != -1
											&& nb_line_tFileInputMSPositional_2 >= limit_tFileInputMSPositional_2) {
										break;
									}
								}
								reader_tFileInputMSPositional_2.close();
								reader_tFileInputMSPositional_2 = null;
								globalMap.put(
										"tFileInputMSPositional_2_NB_LINE",
										nb_line_tFileInputMSPositional_2);
								globalMap
										.put("tFileInputMSPositional_2_NB_LINE_REJECTED",
												nb_line_rejected_tFileInputMSPositional_2);
								globalMap
										.put("tFileInputMSPositional_2_NB_LINE_UNKOWN_HEADER_TYPES",
												nb_line_unknownHeader_tFileInputMSPositional_2);
								globalMap
										.put("tFileInputMSPositional_2_NB_LINE_PARSE_ERRORS",
												nb_line_parseError_tFileInputMSPositional_2);

								ok_Hash.put("tFileInputMSPositional_2", true);
								end_Hash.put("tFileInputMSPositional_2",
										System.currentTimeMillis());

								/**
								 * [tFileInputMSPositional_2 end ] stop
								 */

								/**
								 * [tMap_4 end ] start
								 */

								currentComponent = "tMap_4";

								// ###############################
								// # Lookup hashes releasing
								// ###############################

								ok_Hash.put("tMap_4", true);
								end_Hash.put("tMap_4",
										System.currentTimeMillis());

								/**
								 * [tMap_4 end ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 end ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

							} finally {

								if (CsvWritertFileOutputDelimited_2 != null) {
									CsvWritertFileOutputDelimited_2.close();
								}
								globalMap.put("tFileOutputDelimited_2_NB_LINE",
										nb_line_tFileOutputDelimited_2);
							} // finally

							ok_Hash.put("tFileOutputDelimited_2", true);
							end_Hash.put("tFileOutputDelimited_2",
									System.currentTimeMillis());

							/**
							 * [tFileOutputDelimited_2 end ] stop
							 */

							/**
							 * [tMap_3 end ] start
							 */

							currentComponent = "tMap_3";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_3", true);
							end_Hash.put("tMap_3", System.currentTimeMillis());

							/**
							 * [tMap_3 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 end ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

						} finally {

							if (CsvWritertFileOutputDelimited_4 != null) {
								CsvWritertFileOutputDelimited_4.close();
							}
							globalMap.put("tFileOutputDelimited_4_NB_LINE",
									nb_line_tFileOutputDelimited_4);
						} // finally

						ok_Hash.put("tFileOutputDelimited_4", true);
						end_Hash.put("tFileOutputDelimited_4",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_4 end ] stop
						 */

						/**
						 * [tMap_2 end ] start
						 */

						currentComponent = "tMap_2";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_2", true);
						end_Hash.put("tMap_2", System.currentTimeMillis());

						/**
						 * [tMap_2 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

					} finally {

						if (CsvWritertFileOutputDelimited_3 != null) {
							CsvWritertFileOutputDelimited_3.close();
						}
						globalMap.put("tFileOutputDelimited_3_NB_LINE",
								nb_line_tFileOutputDelimited_3);
					} // finally

					ok_Hash.put("tFileOutputDelimited_3", true);
					end_Hash.put("tFileOutputDelimited_3",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_3 end ] stop
					 */

					/**
					 * [tReplicate_1 end ] start
					 */

					currentComponent = "tReplicate_1";

					ok_Hash.put("tReplicate_1", true);
					end_Hash.put("tReplicate_1", System.currentTimeMillis());

					/**
					 * [tReplicate_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 end ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

				} finally {

					if (CsvWritertFileOutputDelimited_5 != null) {
						CsvWritertFileOutputDelimited_5.close();
					}
					globalMap.put("tFileOutputDelimited_5_NB_LINE",
							nb_line_tFileOutputDelimited_5);
				} // finally

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputMSPositional_2_SUBPROCESS_STATE", 1);
	}

	public static class r1batinewStruct implements
			routines.system.IPersistableRow<r1batinewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String id_parc;

		public String getId_parc() {
			return this.id_parc;
		}

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public String desc;

		public String getDesc() {
			return this.desc;
		}

		public String dniv;

		public String getDniv() {
			return this.dniv;
		}

		public String dpor;

		public String getDpor() {
			return this.dpor;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dvoilib;

		public String getDvoilib() {
			return this.dvoilib;
		}

		public String cleinvar;

		public String getCleinvar() {
			return this.cleinvar;
		}

		public String locinc;

		public String getLocinc() {
			return this.locinc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.id_parc = readString(dis);

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.article = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.dnubat = readString(dis);

					this.desc = readString(dis);

					this.dniv = readString(dis);

					this.dpor = readString(dis);

					this.ccoriv = readString(dis);

					this.ccovoi = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccocif = readString(dis);

					this.dvoilib = readString(dis);

					this.cleinvar = readString(dis);

					this.locinc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_parc, dos);

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.dnubat, dos);

				// String

				writeString(this.desc, dos);

				// String

				writeString(this.dniv, dos);

				// String

				writeString(this.dpor, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.dvoilib, dos);

				// String

				writeString(this.cleinvar, dos);

				// String

				writeString(this.locinc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parc=" + id_parc);
			sb.append(",ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",article=" + article);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",dnubat=" + dnubat);
			sb.append(",desc=" + desc);
			sb.append(",dniv=" + dniv);
			sb.append(",dpor=" + dpor);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dvoilib=" + dvoilib);
			sb.append(",cleinvar=" + cleinvar);
			sb.append(",locinc=" + locinc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r1batinewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r2batinewStruct implements
			routines.system.IPersistableRow<r2batinewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dnufnl;

		public String getDnufnl() {
			return this.dnufnl;
		}

		public String ccoeva;

		public String getCcoeva() {
			return this.ccoeva;
		}

		public String ccitvl;

		public String getCcitvl() {
			return this.ccitvl;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String gtauom;

		public String getGtauom() {
			return this.gtauom;
		}

		public String dcomrd;

		public String getDcomrd() {
			return this.dcomrd;
		}

		public String ccoplc;

		public String getCcoplc() {
			return this.ccoplc;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String dvltrt;

		public String getDvltrt() {
			return this.dvltrt;
		}

		public String ccoape;

		public String getCcoape() {
			return this.ccoape;
		}

		public String cc48lc;

		public String getCc48lc() {
			return this.cc48lc;
		}

		public String dloy48a;

		public String getDloy48a() {
			return this.dloy48a;
		}

		public String top48a;

		public String getTop48a() {
			return this.top48a;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String dnupas;

		public String getDnupas() {
			return this.dnupas;
		}

		public String gnexcf;

		public String getGnexcf() {
			return this.gnexcf;
		}

		public String dtaucf;

		public String getDtaucf() {
			return this.dtaucf;
		}

		public String cchpr;

		public String getCchpr() {
			return this.cchpr;
		}

		public String jannat;

		public String getJannat() {
			return this.jannat;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String hlmsem;

		public String getHlmsem() {
			return this.hlmsem;
		}

		public String postel;

		public String getPostel() {
			return this.postel;
		}

		public String dnatcg;

		public String getDnatcg() {
			return this.dnatcg;
		}

		public String jdatcgl;

		public String getJdatcgl() {
			return this.jdatcgl;
		}

		public String dnutbx;

		public String getDnutbx() {
			return this.dnutbx;
		}

		public String dvltla;

		public String getDvltla() {
			return this.dvltla;
		}

		public String janloc;

		public String getJanloc() {
			return this.janloc;
		}

		public String ccsloc;

		public String getCcsloc() {
			return this.ccsloc;
		}

		public String fburx;

		public String getFburx() {
			return this.fburx;
		}

		public String gimtom;

		public String getGimtom() {
			return this.gimtom;
		}

		public String cbtabt;

		public String getCbtabt() {
			return this.cbtabt;
		}

		public String jdtabt;

		public String getJdtabt() {
			return this.jdtabt;
		}

		public String jrtabt;

		public String getJrtabt() {
			return this.jrtabt;
		}

		public String jacloc;

		public String getJacloc() {
			return this.jacloc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.article = readString(dis);

					this.gpdl = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.jdatat = readString(dis);

					this.dnufnl = readString(dis);

					this.ccoeva = readString(dis);

					this.ccitvl = readString(dis);

					this.dteloc = readString(dis);

					this.gtauom = readString(dis);

					this.dcomrd = readString(dis);

					this.ccoplc = readString(dis);

					this.cconlc = readString(dis);

					this.dvltrt = readString(dis);

					this.ccoape = readString(dis);

					this.cc48lc = readString(dis);

					this.dloy48a = readString(dis);

					this.top48a = readString(dis);

					this.dnatlc = readString(dis);

					this.dnupas = readString(dis);

					this.gnexcf = readString(dis);

					this.dtaucf = readString(dis);

					this.cchpr = readString(dis);

					this.jannat = readString(dis);

					this.dnbniv = readString(dis);

					this.hlmsem = readString(dis);

					this.postel = readString(dis);

					this.dnatcg = readString(dis);

					this.jdatcgl = readString(dis);

					this.dnutbx = readString(dis);

					this.dvltla = readString(dis);

					this.janloc = readString(dis);

					this.ccsloc = readString(dis);

					this.fburx = readString(dis);

					this.gimtom = readString(dis);

					this.cbtabt = readString(dis);

					this.jdtabt = readString(dis);

					this.jrtabt = readString(dis);

					this.jacloc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dnufnl, dos);

				// String

				writeString(this.ccoeva, dos);

				// String

				writeString(this.ccitvl, dos);

				// String

				writeString(this.dteloc, dos);

				// String

				writeString(this.gtauom, dos);

				// String

				writeString(this.dcomrd, dos);

				// String

				writeString(this.ccoplc, dos);

				// String

				writeString(this.cconlc, dos);

				// String

				writeString(this.dvltrt, dos);

				// String

				writeString(this.ccoape, dos);

				// String

				writeString(this.cc48lc, dos);

				// String

				writeString(this.dloy48a, dos);

				// String

				writeString(this.top48a, dos);

				// String

				writeString(this.dnatlc, dos);

				// String

				writeString(this.dnupas, dos);

				// String

				writeString(this.gnexcf, dos);

				// String

				writeString(this.dtaucf, dos);

				// String

				writeString(this.cchpr, dos);

				// String

				writeString(this.jannat, dos);

				// String

				writeString(this.dnbniv, dos);

				// String

				writeString(this.hlmsem, dos);

				// String

				writeString(this.postel, dos);

				// String

				writeString(this.dnatcg, dos);

				// String

				writeString(this.jdatcgl, dos);

				// String

				writeString(this.dnutbx, dos);

				// String

				writeString(this.dvltla, dos);

				// String

				writeString(this.janloc, dos);

				// String

				writeString(this.ccsloc, dos);

				// String

				writeString(this.fburx, dos);

				// String

				writeString(this.gimtom, dos);

				// String

				writeString(this.cbtabt, dos);

				// String

				writeString(this.jdtabt, dos);

				// String

				writeString(this.jrtabt, dos);

				// String

				writeString(this.jacloc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",article=" + article);
			sb.append(",gpdl=" + gpdl);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dnufnl=" + dnufnl);
			sb.append(",ccoeva=" + ccoeva);
			sb.append(",ccitvl=" + ccitvl);
			sb.append(",dteloc=" + dteloc);
			sb.append(",gtauom=" + gtauom);
			sb.append(",dcomrd=" + dcomrd);
			sb.append(",ccoplc=" + ccoplc);
			sb.append(",cconlc=" + cconlc);
			sb.append(",dvltrt=" + dvltrt);
			sb.append(",ccoape=" + ccoape);
			sb.append(",cc48lc=" + cc48lc);
			sb.append(",dloy48a=" + dloy48a);
			sb.append(",top48a=" + top48a);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",dnupas=" + dnupas);
			sb.append(",gnexcf=" + gnexcf);
			sb.append(",dtaucf=" + dtaucf);
			sb.append(",cchpr=" + cchpr);
			sb.append(",jannat=" + jannat);
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",hlmsem=" + hlmsem);
			sb.append(",postel=" + postel);
			sb.append(",dnatcg=" + dnatcg);
			sb.append(",jdatcgl=" + jdatcgl);
			sb.append(",dnutbx=" + dnutbx);
			sb.append(",dvltla=" + dvltla);
			sb.append(",janloc=" + janloc);
			sb.append(",ccsloc=" + ccsloc);
			sb.append(",fburx=" + fburx);
			sb.append(",gimtom=" + gimtom);
			sb.append(",cbtabt=" + cbtabt);
			sb.append(",jdtabt=" + jdtabt);
			sb.append(",jrtabt=" + jrtabt);
			sb.append(",jacloc=" + jacloc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r2batinewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r3batinewStruct implements
			routines.system.IPersistableRow<r3batinewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccoaff;

		public String getCcoaff() {
			return this.ccoaff;
		}

		public String ccostb;

		public String getCcostb() {
			return this.ccostb;
		}

		public String dcapec;

		public String getDcapec() {
			return this.dcapec;
		}

		public String dcetlc;

		public String getDcetlc() {
			return this.dcetlc;
		}

		public String dcsplc;

		public String getDcsplc() {
			return this.dcsplc;
		}

		public String dsupot;

		public String getDsupot() {
			return this.dsupot;
		}

		public String dvlper;

		public String getDvlper() {
			return this.dvlper;
		}

		public String dvlpera;

		public String getDvlpera() {
			return this.dvlpera;
		}

		public String gnexpl;

		public String getGnexpl() {
			return this.gnexpl;
		}

		public String libocc;

		public String getLibocc() {
			return this.libocc;
		}

		public String ccthp;

		public String getCcthp() {
			return this.ccthp;
		}

		public String retimp;

		public String getRetimp() {
			return this.retimp;
		}

		public String dnuref;

		public String getDnuref() {
			return this.dnuref;
		}

		public String rclsst;

		public String getRclsst() {
			return this.rclsst;
		}

		public String gnidom;

		public String getGnidom() {
			return this.gnidom;
		}

		public String dcsglc;

		public String getDcsglc() {
			return this.dcsglc;
		}

		public String ccogrb;

		public String getCcogrb() {
			return this.ccogrb;
		}

		public String cocdi;

		public String getCocdi() {
			return this.cocdi;
		}

		public String cosatp;

		public String getCosatp() {
			return this.cosatp;
		}

		public String gsatp;

		public String getGsatp() {
			return this.gsatp;
		}

		public String clocv;

		public String getClocv() {
			return this.clocv;
		}

		public String dvltpe;

		public String getDvltpe() {
			return this.dvltpe;
		}

		public String dcralc;

		public String getDcralc() {
			return this.dcralc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.ccoaff = readString(dis);

					this.ccostb = readString(dis);

					this.dcapec = readString(dis);

					this.dcetlc = readString(dis);

					this.dcsplc = readString(dis);

					this.dsupot = readString(dis);

					this.dvlper = readString(dis);

					this.dvlpera = readString(dis);

					this.gnexpl = readString(dis);

					this.libocc = readString(dis);

					this.ccthp = readString(dis);

					this.retimp = readString(dis);

					this.dnuref = readString(dis);

					this.rclsst = readString(dis);

					this.gnidom = readString(dis);

					this.dcsglc = readString(dis);

					this.ccogrb = readString(dis);

					this.cocdi = readString(dis);

					this.cosatp = readString(dis);

					this.gsatp = readString(dis);

					this.clocv = readString(dis);

					this.dvltpe = readString(dis);

					this.dcralc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccoaff, dos);

				// String

				writeString(this.ccostb, dos);

				// String

				writeString(this.dcapec, dos);

				// String

				writeString(this.dcetlc, dos);

				// String

				writeString(this.dcsplc, dos);

				// String

				writeString(this.dsupot, dos);

				// String

				writeString(this.dvlper, dos);

				// String

				writeString(this.dvlpera, dos);

				// String

				writeString(this.gnexpl, dos);

				// String

				writeString(this.libocc, dos);

				// String

				writeString(this.ccthp, dos);

				// String

				writeString(this.retimp, dos);

				// String

				writeString(this.dnuref, dos);

				// String

				writeString(this.rclsst, dos);

				// String

				writeString(this.gnidom, dos);

				// String

				writeString(this.dcsglc, dos);

				// String

				writeString(this.ccogrb, dos);

				// String

				writeString(this.cocdi, dos);

				// String

				writeString(this.cosatp, dos);

				// String

				writeString(this.gsatp, dos);

				// String

				writeString(this.clocv, dos);

				// String

				writeString(this.dvltpe, dos);

				// String

				writeString(this.dcralc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",ccoaff=" + ccoaff);
			sb.append(",ccostb=" + ccostb);
			sb.append(",dcapec=" + dcapec);
			sb.append(",dcetlc=" + dcetlc);
			sb.append(",dcsplc=" + dcsplc);
			sb.append(",dsupot=" + dsupot);
			sb.append(",dvlper=" + dvlper);
			sb.append(",dvlpera=" + dvlpera);
			sb.append(",gnexpl=" + gnexpl);
			sb.append(",libocc=" + libocc);
			sb.append(",ccthp=" + ccthp);
			sb.append(",retimp=" + retimp);
			sb.append(",dnuref=" + dnuref);
			sb.append(",rclsst=" + rclsst);
			sb.append(",gnidom=" + gnidom);
			sb.append(",dcsglc=" + dcsglc);
			sb.append(",ccogrb=" + ccogrb);
			sb.append(",cocdi=" + cocdi);
			sb.append(",cosatp=" + cosatp);
			sb.append(",gsatp=" + gsatp);
			sb.append(",clocv=" + clocv);
			sb.append(",dvltpe=" + dvltpe);
			sb.append(",dcralc=" + dcralc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r3batinewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r4batinewStruct implements
			routines.system.IPersistableRow<r4batinewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String janbil;

		public String getJanbil() {
			return this.janbil;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String vlbaicom;

		public String getVlbaicom() {
			return this.vlbaicom;
		}

		public String vlbaiacom;

		public String getVlbaiacom() {
			return this.vlbaiacom;
		}

		public String bipevlacom;

		public String getBipevlacom() {
			return this.bipevlacom;
		}

		public String vlbaidept;

		public String getVlbaidept() {
			return this.vlbaidept;
		}

		public String vlbaiadept;

		public String getVlbaiadept() {
			return this.vlbaiadept;
		}

		public String bipevladept;

		public String getBipevladept() {
			return this.bipevladept;
		}

		public String vlbaireg;

		public String getVlbaireg() {
			return this.vlbaireg;
		}

		public String vlbaiareg;

		public String getVlbaiareg() {
			return this.vlbaiareg;
		}

		public String bipevlareg;

		public String getBipevlareg() {
			return this.bipevlareg;
		}

		public String vlbaiepci;

		public String getVlbaiepci() {
			return this.vlbaiepci;
		}

		public String vlbaiaepci;

		public String getVlbaiaepci() {
			return this.vlbaiaepci;
		}

		public String bipevlaepci;

		public String getBipevlaepci() {
			return this.bipevlaepci;
		}

		public String bateom;

		public String getBateom() {
			return this.bateom;
		}

		public String baomec;

		public String getBaomec() {
			return this.baomec;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.janbil = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.vlbaicom = readString(dis);

					this.vlbaiacom = readString(dis);

					this.bipevlacom = readString(dis);

					this.vlbaidept = readString(dis);

					this.vlbaiadept = readString(dis);

					this.bipevladept = readString(dis);

					this.vlbaireg = readString(dis);

					this.vlbaiareg = readString(dis);

					this.bipevlareg = readString(dis);

					this.vlbaiepci = readString(dis);

					this.vlbaiaepci = readString(dis);

					this.bipevlaepci = readString(dis);

					this.bateom = readString(dis);

					this.baomec = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.janbil, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.vlbaicom, dos);

				// String

				writeString(this.vlbaiacom, dos);

				// String

				writeString(this.bipevlacom, dos);

				// String

				writeString(this.vlbaidept, dos);

				// String

				writeString(this.vlbaiadept, dos);

				// String

				writeString(this.bipevladept, dos);

				// String

				writeString(this.vlbaireg, dos);

				// String

				writeString(this.vlbaiareg, dos);

				// String

				writeString(this.bipevlareg, dos);

				// String

				writeString(this.vlbaiepci, dos);

				// String

				writeString(this.vlbaiaepci, dos);

				// String

				writeString(this.bipevlaepci, dos);

				// String

				writeString(this.bateom, dos);

				// String

				writeString(this.baomec, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",janbil=" + janbil);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",vlbaicom=" + vlbaicom);
			sb.append(",vlbaiacom=" + vlbaiacom);
			sb.append(",bipevlacom=" + bipevlacom);
			sb.append(",vlbaidept=" + vlbaidept);
			sb.append(",vlbaiadept=" + vlbaiadept);
			sb.append(",bipevladept=" + bipevladept);
			sb.append(",vlbaireg=" + vlbaireg);
			sb.append(",vlbaiareg=" + vlbaiareg);
			sb.append(",bipevlareg=" + bipevlareg);
			sb.append(",vlbaiepci=" + vlbaiepci);
			sb.append(",vlbaiaepci=" + vlbaiaepci);
			sb.append(",bipevlaepci=" + bipevlaepci);
			sb.append(",bateom=" + bateom);
			sb.append(",baomec=" + baomec);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r4batinewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r5batinewStruct implements
			routines.system.IPersistableRow<r5batinewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String cconad1;

		public String getCconad1() {
			return this.cconad1;
		}

		public String dsueic1;

		public String getDsueic1() {
			return this.dsueic1;
		}

		public String dcimei1;

		public String getDcimei1() {
			return this.dcimei1;
		}

		public String cconad2;

		public String getCconad2() {
			return this.cconad2;
		}

		public String dsueic2;

		public String getDsueic2() {
			return this.dsueic2;
		}

		public String dcimei2;

		public String getDcimei2() {
			return this.dcimei2;
		}

		public String cconad3;

		public String getCconad3() {
			return this.cconad3;
		}

		public String dsueic3;

		public String getDsueic3() {
			return this.dsueic3;
		}

		public String dcimei3;

		public String getDcimei3() {
			return this.dcimei3;
		}

		public String cconad4;

		public String getCconad4() {
			return this.cconad4;
		}

		public String dsueic4;

		public String getDsueic4() {
			return this.dsueic4;
		}

		public String dcimei4;

		public String getDcimei4() {
			return this.dcimei4;
		}

		public String geaulc;

		public String getGeaulc() {
			return this.geaulc;
		}

		public String gelelc;

		public String getGelelc() {
			return this.gelelc;
		}

		public String gesclc;

		public String getGesclc() {
			return this.gesclc;
		}

		public String ggazlc;

		public String getGgazlc() {
			return this.ggazlc;
		}

		public String gasclc;

		public String getGasclc() {
			return this.gasclc;
		}

		public String gchclc;

		public String getGchclc() {
			return this.gchclc;
		}

		public String gvorlc;

		public String getGvorlc() {
			return this.gvorlc;
		}

		public String gteglc;

		public String getGteglc() {
			return this.gteglc;
		}

		public String dnbbai;

		public String getDnbbai() {
			return this.dnbbai;
		}

		public String dnbdou;

		public String getDnbdou() {
			return this.dnbdou;
		}

		public String dnblav;

		public String getDnblav() {
			return this.dnblav;
		}

		public String dnbwc;

		public String getDnbwc() {
			return this.dnbwc;
		}

		public String deqdha;

		public String getDeqdha() {
			return this.deqdha;
		}

		public String dnbppr;

		public String getDnbppr() {
			return this.dnbppr;
		}

		public String dnbsam;

		public String getDnbsam() {
			return this.dnbsam;
		}

		public String dnbcha;

		public String getDnbcha() {
			return this.dnbcha;
		}

		public String dnbcu8;

		public String getDnbcu8() {
			return this.dnbcu8;
		}

		public String dnbcu9;

		public String getDnbcu9() {
			return this.dnbcu9;
		}

		public String dnbsea;

		public String getDnbsea() {
			return this.dnbsea;
		}

		public String dnbann;

		public String getDnbann() {
			return this.dnbann;
		}

		public String dnbpdc;

		public String getDnbpdc() {
			return this.dnbpdc;
		}

		public String dsupdc;

		public String getDsupdc() {
			return this.dsupdc;
		}

		public String dmatgm;

		public String getDmatgm() {
			return this.dmatgm;
		}

		public String dmatto;

		public String getDmatto() {
			return this.dmatto;
		}

		public String jannat;

		public String getJannat() {
			return this.jannat;
		}

		public String detent;

		public String getDetent() {
			return this.detent;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.dnudes = readString(dis);

					this.cconad1 = readString(dis);

					this.dsueic1 = readString(dis);

					this.dcimei1 = readString(dis);

					this.cconad2 = readString(dis);

					this.dsueic2 = readString(dis);

					this.dcimei2 = readString(dis);

					this.cconad3 = readString(dis);

					this.dsueic3 = readString(dis);

					this.dcimei3 = readString(dis);

					this.cconad4 = readString(dis);

					this.dsueic4 = readString(dis);

					this.dcimei4 = readString(dis);

					this.geaulc = readString(dis);

					this.gelelc = readString(dis);

					this.gesclc = readString(dis);

					this.ggazlc = readString(dis);

					this.gasclc = readString(dis);

					this.gchclc = readString(dis);

					this.gvorlc = readString(dis);

					this.gteglc = readString(dis);

					this.dnbbai = readString(dis);

					this.dnbdou = readString(dis);

					this.dnblav = readString(dis);

					this.dnbwc = readString(dis);

					this.deqdha = readString(dis);

					this.dnbppr = readString(dis);

					this.dnbsam = readString(dis);

					this.dnbcha = readString(dis);

					this.dnbcu8 = readString(dis);

					this.dnbcu9 = readString(dis);

					this.dnbsea = readString(dis);

					this.dnbann = readString(dis);

					this.dnbpdc = readString(dis);

					this.dsupdc = readString(dis);

					this.dmatgm = readString(dis);

					this.dmatto = readString(dis);

					this.jannat = readString(dis);

					this.detent = readString(dis);

					this.dnbniv = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnudes, dos);

				// String

				writeString(this.cconad1, dos);

				// String

				writeString(this.dsueic1, dos);

				// String

				writeString(this.dcimei1, dos);

				// String

				writeString(this.cconad2, dos);

				// String

				writeString(this.dsueic2, dos);

				// String

				writeString(this.dcimei2, dos);

				// String

				writeString(this.cconad3, dos);

				// String

				writeString(this.dsueic3, dos);

				// String

				writeString(this.dcimei3, dos);

				// String

				writeString(this.cconad4, dos);

				// String

				writeString(this.dsueic4, dos);

				// String

				writeString(this.dcimei4, dos);

				// String

				writeString(this.geaulc, dos);

				// String

				writeString(this.gelelc, dos);

				// String

				writeString(this.gesclc, dos);

				// String

				writeString(this.ggazlc, dos);

				// String

				writeString(this.gasclc, dos);

				// String

				writeString(this.gchclc, dos);

				// String

				writeString(this.gvorlc, dos);

				// String

				writeString(this.gteglc, dos);

				// String

				writeString(this.dnbbai, dos);

				// String

				writeString(this.dnbdou, dos);

				// String

				writeString(this.dnblav, dos);

				// String

				writeString(this.dnbwc, dos);

				// String

				writeString(this.deqdha, dos);

				// String

				writeString(this.dnbppr, dos);

				// String

				writeString(this.dnbsam, dos);

				// String

				writeString(this.dnbcha, dos);

				// String

				writeString(this.dnbcu8, dos);

				// String

				writeString(this.dnbcu9, dos);

				// String

				writeString(this.dnbsea, dos);

				// String

				writeString(this.dnbann, dos);

				// String

				writeString(this.dnbpdc, dos);

				// String

				writeString(this.dsupdc, dos);

				// String

				writeString(this.dmatgm, dos);

				// String

				writeString(this.dmatto, dos);

				// String

				writeString(this.jannat, dos);

				// String

				writeString(this.detent, dos);

				// String

				writeString(this.dnbniv, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",cconad1=" + cconad1);
			sb.append(",dsueic1=" + dsueic1);
			sb.append(",dcimei1=" + dcimei1);
			sb.append(",cconad2=" + cconad2);
			sb.append(",dsueic2=" + dsueic2);
			sb.append(",dcimei2=" + dcimei2);
			sb.append(",cconad3=" + cconad3);
			sb.append(",dsueic3=" + dsueic3);
			sb.append(",dcimei3=" + dcimei3);
			sb.append(",cconad4=" + cconad4);
			sb.append(",dsueic4=" + dsueic4);
			sb.append(",dcimei4=" + dcimei4);
			sb.append(",geaulc=" + geaulc);
			sb.append(",gelelc=" + gelelc);
			sb.append(",gesclc=" + gesclc);
			sb.append(",ggazlc=" + ggazlc);
			sb.append(",gasclc=" + gasclc);
			sb.append(",gchclc=" + gchclc);
			sb.append(",gvorlc=" + gvorlc);
			sb.append(",gteglc=" + gteglc);
			sb.append(",dnbbai=" + dnbbai);
			sb.append(",dnbdou=" + dnbdou);
			sb.append(",dnblav=" + dnblav);
			sb.append(",dnbwc=" + dnbwc);
			sb.append(",deqdha=" + deqdha);
			sb.append(",dnbppr=" + dnbppr);
			sb.append(",dnbsam=" + dnbsam);
			sb.append(",dnbcha=" + dnbcha);
			sb.append(",dnbcu8=" + dnbcu8);
			sb.append(",dnbcu9=" + dnbcu9);
			sb.append(",dnbsea=" + dnbsea);
			sb.append(",dnbann=" + dnbann);
			sb.append(",dnbpdc=" + dnbpdc);
			sb.append(",dsupdc=" + dsupdc);
			sb.append(",dmatgm=" + dmatgm);
			sb.append(",dmatto=" + dmatto);
			sb.append(",jannat=" + jannat);
			sb.append(",detent=" + detent);
			sb.append(",dnbniv=" + dnbniv);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r5batinewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r6batinewStruct implements
			routines.system.IPersistableRow<r6batinewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String vsupot;

		public String getVsupot() {
			return this.vsupot;
		}

		public String vsurz1;

		public String getVsurz1() {
			return this.vsurz1;
		}

		public String vsurz2;

		public String getVsurz2() {
			return this.vsurz2;
		}

		public String vsurz3;

		public String getVsurz3() {
			return this.vsurz3;
		}

		public String vsurzt;

		public String getVsurzt() {
			return this.vsurzt;
		}

		public String vsurb1;

		public String getVsurb1() {
			return this.vsurb1;
		}

		public String vsurb2;

		public String getVsurb2() {
			return this.vsurb2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.dnudes = readString(dis);

					this.vsupot = readString(dis);

					this.vsurz1 = readString(dis);

					this.vsurz2 = readString(dis);

					this.vsurz3 = readString(dis);

					this.vsurzt = readString(dis);

					this.vsurb1 = readString(dis);

					this.vsurb2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnudes, dos);

				// String

				writeString(this.vsupot, dos);

				// String

				writeString(this.vsurz1, dos);

				// String

				writeString(this.vsurz2, dos);

				// String

				writeString(this.vsurz3, dos);

				// String

				writeString(this.vsurzt, dos);

				// String

				writeString(this.vsurb1, dos);

				// String

				writeString(this.vsurb2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",vsupot=" + vsupot);
			sb.append(",vsurz1=" + vsurz1);
			sb.append(",vsurz2=" + vsurz2);
			sb.append(",vsurz3=" + vsurz3);
			sb.append(",vsurzt=" + vsurzt);
			sb.append(",vsurb1=" + vsurb1);
			sb.append(",vsurb2=" + vsurb2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r6batinewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r7batinewStruct implements
			routines.system.IPersistableRow<r7batinewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String dsudep;

		public String getDsudep() {
			return this.dsudep;
		}

		public String cconad;

		public String getCconad() {
			return this.cconad;
		}

		public String asitet;

		public String getAsitet() {
			return this.asitet;
		}

		public String dmatgm;

		public String getDmatgm() {
			return this.dmatgm;
		}

		public String dmatto;

		public String getDmatto() {
			return this.dmatto;
		}

		public String detent;

		public String getDetent() {
			return this.detent;
		}

		public String geaulc;

		public String getGeaulc() {
			return this.geaulc;
		}

		public String gelelc;

		public String getGelelc() {
			return this.gelelc;
		}

		public String gchclc;

		public String getGchclc() {
			return this.gchclc;
		}

		public String dnbbai;

		public String getDnbbai() {
			return this.dnbbai;
		}

		public String dnbdou;

		public String getDnbdou() {
			return this.dnbdou;
		}

		public String dnblav;

		public String getDnblav() {
			return this.dnblav;
		}

		public String dnbwc;

		public String getDnbwc() {
			return this.dnbwc;
		}

		public String deqtlc;

		public String getDeqtlc() {
			return this.deqtlc;
		}

		public String dcimlc;

		public String getDcimlc() {
			return this.dcimlc;
		}

		public String dcetde;

		public String getDcetde() {
			return this.dcetde;
		}

		public String dcspde;

		public String getDcspde() {
			return this.dcspde;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.dnudes = readString(dis);

					this.dsudep = readString(dis);

					this.cconad = readString(dis);

					this.asitet = readString(dis);

					this.dmatgm = readString(dis);

					this.dmatto = readString(dis);

					this.detent = readString(dis);

					this.geaulc = readString(dis);

					this.gelelc = readString(dis);

					this.gchclc = readString(dis);

					this.dnbbai = readString(dis);

					this.dnbdou = readString(dis);

					this.dnblav = readString(dis);

					this.dnbwc = readString(dis);

					this.deqtlc = readString(dis);

					this.dcimlc = readString(dis);

					this.dcetde = readString(dis);

					this.dcspde = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnudes, dos);

				// String

				writeString(this.dsudep, dos);

				// String

				writeString(this.cconad, dos);

				// String

				writeString(this.asitet, dos);

				// String

				writeString(this.dmatgm, dos);

				// String

				writeString(this.dmatto, dos);

				// String

				writeString(this.detent, dos);

				// String

				writeString(this.geaulc, dos);

				// String

				writeString(this.gelelc, dos);

				// String

				writeString(this.gchclc, dos);

				// String

				writeString(this.dnbbai, dos);

				// String

				writeString(this.dnbdou, dos);

				// String

				writeString(this.dnblav, dos);

				// String

				writeString(this.dnbwc, dos);

				// String

				writeString(this.deqtlc, dos);

				// String

				writeString(this.dcimlc, dos);

				// String

				writeString(this.dcetde, dos);

				// String

				writeString(this.dcspde, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",dsudep=" + dsudep);
			sb.append(",cconad=" + cconad);
			sb.append(",asitet=" + asitet);
			sb.append(",dmatgm=" + dmatgm);
			sb.append(",dmatto=" + dmatto);
			sb.append(",detent=" + detent);
			sb.append(",geaulc=" + geaulc);
			sb.append(",gelelc=" + gelelc);
			sb.append(",gchclc=" + gchclc);
			sb.append(",dnbbai=" + dnbbai);
			sb.append(",dnbdou=" + dnbdou);
			sb.append(",dnblav=" + dnblav);
			sb.append(",dnbwc=" + dnbwc);
			sb.append(",deqtlc=" + deqtlc);
			sb.append(",dcimlc=" + dcimlc);
			sb.append(",dcetde=" + dcetde);
			sb.append(",dcspde=" + dcspde);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r7batinewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r8batinewStruct implements
			routines.system.IPersistableRow<r8batinewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String janbil;

		public String getJanbil() {
			return this.janbil;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnuexb;

		public String getDnuexb() {
			return this.dnuexb;
		}

		public String ccolloc;

		public String getCcolloc() {
			return this.ccolloc;
		}

		public String pexb;

		public String getPexb() {
			return this.pexb;
		}

		public String gnextl;

		public String getGnextl() {
			return this.gnextl;
		}

		public String jandeb;

		public String getJandeb() {
			return this.jandeb;
		}

		public String janimp;

		public String getJanimp() {
			return this.janimp;
		}

		public String vecdif;

		public String getVecdif() {
			return this.vecdif;
		}

		public String vecdifa;

		public String getVecdifa() {
			return this.vecdifa;
		}

		public String fcexb;

		public String getFcexb() {
			return this.fcexb;
		}

		public String fcexba;

		public String getFcexba() {
			return this.fcexba;
		}

		public String rcexba;

		public String getRcexba() {
			return this.rcexba;
		}

		public String dvldif2;

		public String getDvldif2() {
			return this.dvldif2;
		}

		public String dvldif2a;

		public String getDvldif2a() {
			return this.dvldif2a;
		}

		public String fcexb2;

		public String getFcexb2() {
			return this.fcexb2;
		}

		public String fcexba2;

		public String getFcexba2() {
			return this.fcexba2;
		}

		public String rcexba2;

		public String getRcexba2() {
			return this.rcexba2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.janbil = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.dnuexb = readString(dis);

					this.ccolloc = readString(dis);

					this.pexb = readString(dis);

					this.gnextl = readString(dis);

					this.jandeb = readString(dis);

					this.janimp = readString(dis);

					this.vecdif = readString(dis);

					this.vecdifa = readString(dis);

					this.fcexb = readString(dis);

					this.fcexba = readString(dis);

					this.rcexba = readString(dis);

					this.dvldif2 = readString(dis);

					this.dvldif2a = readString(dis);

					this.fcexb2 = readString(dis);

					this.fcexba2 = readString(dis);

					this.rcexba2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.janbil, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnuexb, dos);

				// String

				writeString(this.ccolloc, dos);

				// String

				writeString(this.pexb, dos);

				// String

				writeString(this.gnextl, dos);

				// String

				writeString(this.jandeb, dos);

				// String

				writeString(this.janimp, dos);

				// String

				writeString(this.vecdif, dos);

				// String

				writeString(this.vecdifa, dos);

				// String

				writeString(this.fcexb, dos);

				// String

				writeString(this.fcexba, dos);

				// String

				writeString(this.rcexba, dos);

				// String

				writeString(this.dvldif2, dos);

				// String

				writeString(this.dvldif2a, dos);

				// String

				writeString(this.fcexb2, dos);

				// String

				writeString(this.fcexba2, dos);

				// String

				writeString(this.rcexba2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",janbil=" + janbil);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnuexb=" + dnuexb);
			sb.append(",ccolloc=" + ccolloc);
			sb.append(",pexb=" + pexb);
			sb.append(",gnextl=" + gnextl);
			sb.append(",jandeb=" + jandeb);
			sb.append(",janimp=" + janimp);
			sb.append(",vecdif=" + vecdif);
			sb.append(",vecdifa=" + vecdifa);
			sb.append(",fcexb=" + fcexb);
			sb.append(",fcexba=" + fcexba);
			sb.append(",rcexba=" + rcexba);
			sb.append(",dvldif2=" + dvldif2);
			sb.append(",dvldif2a=" + dvldif2a);
			sb.append(",fcexb2=" + fcexb2);
			sb.append(",fcexba2=" + fcexba2);
			sb.append(",rcexba2=" + rcexba2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r8batinewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String line;

		public String getLine() {
			return this.line;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r1batiStruct implements
			routines.system.IPersistableRow<r1batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String filler1;

		public String getFiller1() {
			return this.filler1;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String filler2;

		public String getFiller2() {
			return this.filler2;
		}

		public String dnubat;

		public String getDnubat() {
			return this.dnubat;
		}

		public String desc;

		public String getDesc() {
			return this.desc;
		}

		public String dniv;

		public String getDniv() {
			return this.dniv;
		}

		public String dpor;

		public String getDpor() {
			return this.dpor;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String filer;

		public String getFiler() {
			return this.filer;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dvoilib;

		public String getDvoilib() {
			return this.dvoilib;
		}

		public String cleinvar;

		public String getCleinvar() {
			return this.cleinvar;
		}

		public String locinc;

		public String getLocinc() {
			return this.locinc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.filler = readString(dis);

					this.article = readString(dis);

					this.filler1 = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.filler2 = readString(dis);

					this.dnubat = readString(dis);

					this.desc = readString(dis);

					this.dniv = readString(dis);

					this.dpor = readString(dis);

					this.ccoriv = readString(dis);

					this.filer = readString(dis);

					this.ccovoi = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccocif = readString(dis);

					this.dvoilib = readString(dis);

					this.cleinvar = readString(dis);

					this.locinc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.filler1, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.filler2, dos);

				// String

				writeString(this.dnubat, dos);

				// String

				writeString(this.desc, dos);

				// String

				writeString(this.dniv, dos);

				// String

				writeString(this.dpor, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.filer, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.dvoilib, dos);

				// String

				writeString(this.cleinvar, dos);

				// String

				writeString(this.locinc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",filler=" + filler);
			sb.append(",article=" + article);
			sb.append(",filler1=" + filler1);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",filler2=" + filler2);
			sb.append(",dnubat=" + dnubat);
			sb.append(",desc=" + desc);
			sb.append(",dniv=" + dniv);
			sb.append(",dpor=" + dpor);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",filer=" + filer);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dvoilib=" + dvoilib);
			sb.append(",cleinvar=" + cleinvar);
			sb.append(",locinc=" + locinc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r1batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r2batiStruct implements
			routines.system.IPersistableRow<r2batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String filler2;

		public String getFiller2() {
			return this.filler2;
		}

		public String gpdl;

		public String getGpdl() {
			return this.gpdl;
		}

		public String dsrpar;

		public String getDsrpar() {
			return this.dsrpar;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String jdatat;

		public String getJdatat() {
			return this.jdatat;
		}

		public String dnufnl;

		public String getDnufnl() {
			return this.dnufnl;
		}

		public String ccoeva;

		public String getCcoeva() {
			return this.ccoeva;
		}

		public String ccitvl;

		public String getCcitvl() {
			return this.ccitvl;
		}

		public String dteloc;

		public String getDteloc() {
			return this.dteloc;
		}

		public String gtauom;

		public String getGtauom() {
			return this.gtauom;
		}

		public String dcomrd;

		public String getDcomrd() {
			return this.dcomrd;
		}

		public String ccoplc;

		public String getCcoplc() {
			return this.ccoplc;
		}

		public String cconlc;

		public String getCconlc() {
			return this.cconlc;
		}

		public String dvltrt;

		public String getDvltrt() {
			return this.dvltrt;
		}

		public String ccoape;

		public String getCcoape() {
			return this.ccoape;
		}

		public String cc48lc;

		public String getCc48lc() {
			return this.cc48lc;
		}

		public String dloy48a;

		public String getDloy48a() {
			return this.dloy48a;
		}

		public String top48a;

		public String getTop48a() {
			return this.top48a;
		}

		public String dnatlc;

		public String getDnatlc() {
			return this.dnatlc;
		}

		public String dnupas;

		public String getDnupas() {
			return this.dnupas;
		}

		public String gnexcf;

		public String getGnexcf() {
			return this.gnexcf;
		}

		public String dtaucf;

		public String getDtaucf() {
			return this.dtaucf;
		}

		public String cchpr;

		public String getCchpr() {
			return this.cchpr;
		}

		public String jannat;

		public String getJannat() {
			return this.jannat;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		public String hlmsem;

		public String getHlmsem() {
			return this.hlmsem;
		}

		public String postel;

		public String getPostel() {
			return this.postel;
		}

		public String dnatcg;

		public String getDnatcg() {
			return this.dnatcg;
		}

		public String jdatcgl;

		public String getJdatcgl() {
			return this.jdatcgl;
		}

		public String dnutbx;

		public String getDnutbx() {
			return this.dnutbx;
		}

		public String dvltla;

		public String getDvltla() {
			return this.dvltla;
		}

		public String janloc;

		public String getJanloc() {
			return this.janloc;
		}

		public String ccsloc;

		public String getCcsloc() {
			return this.ccsloc;
		}

		public String fburx;

		public String getFburx() {
			return this.fburx;
		}

		public String gimtom;

		public String getGimtom() {
			return this.gimtom;
		}

		public String cbtabt;

		public String getCbtabt() {
			return this.cbtabt;
		}

		public String jdtabt;

		public String getJdtabt() {
			return this.jdtabt;
		}

		public String jrtabt;

		public String getJrtabt() {
			return this.jrtabt;
		}

		public String jacloc;

		public String getJacloc() {
			return this.jacloc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.filler = readString(dis);

					this.article = readString(dis);

					this.filler2 = readString(dis);

					this.gpdl = readString(dis);

					this.dsrpar = readString(dis);

					this.dnupro = readString(dis);

					this.jdatat = readString(dis);

					this.dnufnl = readString(dis);

					this.ccoeva = readString(dis);

					this.ccitvl = readString(dis);

					this.dteloc = readString(dis);

					this.gtauom = readString(dis);

					this.dcomrd = readString(dis);

					this.ccoplc = readString(dis);

					this.cconlc = readString(dis);

					this.dvltrt = readString(dis);

					this.ccoape = readString(dis);

					this.cc48lc = readString(dis);

					this.dloy48a = readString(dis);

					this.top48a = readString(dis);

					this.dnatlc = readString(dis);

					this.dnupas = readString(dis);

					this.gnexcf = readString(dis);

					this.dtaucf = readString(dis);

					this.cchpr = readString(dis);

					this.jannat = readString(dis);

					this.dnbniv = readString(dis);

					this.hlmsem = readString(dis);

					this.postel = readString(dis);

					this.dnatcg = readString(dis);

					this.jdatcgl = readString(dis);

					this.dnutbx = readString(dis);

					this.dvltla = readString(dis);

					this.janloc = readString(dis);

					this.ccsloc = readString(dis);

					this.fburx = readString(dis);

					this.gimtom = readString(dis);

					this.cbtabt = readString(dis);

					this.jdtabt = readString(dis);

					this.jrtabt = readString(dis);

					this.jacloc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.filler2, dos);

				// String

				writeString(this.gpdl, dos);

				// String

				writeString(this.dsrpar, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.jdatat, dos);

				// String

				writeString(this.dnufnl, dos);

				// String

				writeString(this.ccoeva, dos);

				// String

				writeString(this.ccitvl, dos);

				// String

				writeString(this.dteloc, dos);

				// String

				writeString(this.gtauom, dos);

				// String

				writeString(this.dcomrd, dos);

				// String

				writeString(this.ccoplc, dos);

				// String

				writeString(this.cconlc, dos);

				// String

				writeString(this.dvltrt, dos);

				// String

				writeString(this.ccoape, dos);

				// String

				writeString(this.cc48lc, dos);

				// String

				writeString(this.dloy48a, dos);

				// String

				writeString(this.top48a, dos);

				// String

				writeString(this.dnatlc, dos);

				// String

				writeString(this.dnupas, dos);

				// String

				writeString(this.gnexcf, dos);

				// String

				writeString(this.dtaucf, dos);

				// String

				writeString(this.cchpr, dos);

				// String

				writeString(this.jannat, dos);

				// String

				writeString(this.dnbniv, dos);

				// String

				writeString(this.hlmsem, dos);

				// String

				writeString(this.postel, dos);

				// String

				writeString(this.dnatcg, dos);

				// String

				writeString(this.jdatcgl, dos);

				// String

				writeString(this.dnutbx, dos);

				// String

				writeString(this.dvltla, dos);

				// String

				writeString(this.janloc, dos);

				// String

				writeString(this.ccsloc, dos);

				// String

				writeString(this.fburx, dos);

				// String

				writeString(this.gimtom, dos);

				// String

				writeString(this.cbtabt, dos);

				// String

				writeString(this.jdtabt, dos);

				// String

				writeString(this.jrtabt, dos);

				// String

				writeString(this.jacloc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",filler=" + filler);
			sb.append(",article=" + article);
			sb.append(",filler2=" + filler2);
			sb.append(",gpdl=" + gpdl);
			sb.append(",dsrpar=" + dsrpar);
			sb.append(",dnupro=" + dnupro);
			sb.append(",jdatat=" + jdatat);
			sb.append(",dnufnl=" + dnufnl);
			sb.append(",ccoeva=" + ccoeva);
			sb.append(",ccitvl=" + ccitvl);
			sb.append(",dteloc=" + dteloc);
			sb.append(",gtauom=" + gtauom);
			sb.append(",dcomrd=" + dcomrd);
			sb.append(",ccoplc=" + ccoplc);
			sb.append(",cconlc=" + cconlc);
			sb.append(",dvltrt=" + dvltrt);
			sb.append(",ccoape=" + ccoape);
			sb.append(",cc48lc=" + cc48lc);
			sb.append(",dloy48a=" + dloy48a);
			sb.append(",top48a=" + top48a);
			sb.append(",dnatlc=" + dnatlc);
			sb.append(",dnupas=" + dnupas);
			sb.append(",gnexcf=" + gnexcf);
			sb.append(",dtaucf=" + dtaucf);
			sb.append(",cchpr=" + cchpr);
			sb.append(",jannat=" + jannat);
			sb.append(",dnbniv=" + dnbniv);
			sb.append(",hlmsem=" + hlmsem);
			sb.append(",postel=" + postel);
			sb.append(",dnatcg=" + dnatcg);
			sb.append(",jdatcgl=" + jdatcgl);
			sb.append(",dnutbx=" + dnutbx);
			sb.append(",dvltla=" + dvltla);
			sb.append(",janloc=" + janloc);
			sb.append(",ccsloc=" + ccsloc);
			sb.append(",fburx=" + fburx);
			sb.append(",gimtom=" + gimtom);
			sb.append(",cbtabt=" + cbtabt);
			sb.append(",jdtabt=" + jdtabt);
			sb.append(",jrtabt=" + jrtabt);
			sb.append(",jacloc=" + jacloc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r2batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r3batiStruct implements
			routines.system.IPersistableRow<r3batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String filler2;

		public String getFiller2() {
			return this.filler2;
		}

		public String ccoaff;

		public String getCcoaff() {
			return this.ccoaff;
		}

		public String ccostb;

		public String getCcostb() {
			return this.ccostb;
		}

		public String dcapec;

		public String getDcapec() {
			return this.dcapec;
		}

		public String dcetlc;

		public String getDcetlc() {
			return this.dcetlc;
		}

		public String dcsplc;

		public String getDcsplc() {
			return this.dcsplc;
		}

		public String dsupot;

		public String getDsupot() {
			return this.dsupot;
		}

		public String dvlper;

		public String getDvlper() {
			return this.dvlper;
		}

		public String dvlpera;

		public String getDvlpera() {
			return this.dvlpera;
		}

		public String gnexpl;

		public String getGnexpl() {
			return this.gnexpl;
		}

		public String libocc;

		public String getLibocc() {
			return this.libocc;
		}

		public String ccthp;

		public String getCcthp() {
			return this.ccthp;
		}

		public String retimp;

		public String getRetimp() {
			return this.retimp;
		}

		public String dnuref;

		public String getDnuref() {
			return this.dnuref;
		}

		public String rclsst;

		public String getRclsst() {
			return this.rclsst;
		}

		public String gnidom;

		public String getGnidom() {
			return this.gnidom;
		}

		public String dcsglc;

		public String getDcsglc() {
			return this.dcsglc;
		}

		public String ccogrb;

		public String getCcogrb() {
			return this.ccogrb;
		}

		public String cocdi;

		public String getCocdi() {
			return this.cocdi;
		}

		public String cosatp;

		public String getCosatp() {
			return this.cosatp;
		}

		public String gsatp;

		public String getGsatp() {
			return this.gsatp;
		}

		public String clocv;

		public String getClocv() {
			return this.clocv;
		}

		public String dvltpe;

		public String getDvltpe() {
			return this.dvltpe;
		}

		public String dcralc;

		public String getDcralc() {
			return this.dcralc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.filler = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.filler2 = readString(dis);

					this.ccoaff = readString(dis);

					this.ccostb = readString(dis);

					this.dcapec = readString(dis);

					this.dcetlc = readString(dis);

					this.dcsplc = readString(dis);

					this.dsupot = readString(dis);

					this.dvlper = readString(dis);

					this.dvlpera = readString(dis);

					this.gnexpl = readString(dis);

					this.libocc = readString(dis);

					this.ccthp = readString(dis);

					this.retimp = readString(dis);

					this.dnuref = readString(dis);

					this.rclsst = readString(dis);

					this.gnidom = readString(dis);

					this.dcsglc = readString(dis);

					this.ccogrb = readString(dis);

					this.cocdi = readString(dis);

					this.cosatp = readString(dis);

					this.gsatp = readString(dis);

					this.clocv = readString(dis);

					this.dvltpe = readString(dis);

					this.dcralc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.filler2, dos);

				// String

				writeString(this.ccoaff, dos);

				// String

				writeString(this.ccostb, dos);

				// String

				writeString(this.dcapec, dos);

				// String

				writeString(this.dcetlc, dos);

				// String

				writeString(this.dcsplc, dos);

				// String

				writeString(this.dsupot, dos);

				// String

				writeString(this.dvlper, dos);

				// String

				writeString(this.dvlpera, dos);

				// String

				writeString(this.gnexpl, dos);

				// String

				writeString(this.libocc, dos);

				// String

				writeString(this.ccthp, dos);

				// String

				writeString(this.retimp, dos);

				// String

				writeString(this.dnuref, dos);

				// String

				writeString(this.rclsst, dos);

				// String

				writeString(this.gnidom, dos);

				// String

				writeString(this.dcsglc, dos);

				// String

				writeString(this.ccogrb, dos);

				// String

				writeString(this.cocdi, dos);

				// String

				writeString(this.cosatp, dos);

				// String

				writeString(this.gsatp, dos);

				// String

				writeString(this.clocv, dos);

				// String

				writeString(this.dvltpe, dos);

				// String

				writeString(this.dcralc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",filler=" + filler);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",filler2=" + filler2);
			sb.append(",ccoaff=" + ccoaff);
			sb.append(",ccostb=" + ccostb);
			sb.append(",dcapec=" + dcapec);
			sb.append(",dcetlc=" + dcetlc);
			sb.append(",dcsplc=" + dcsplc);
			sb.append(",dsupot=" + dsupot);
			sb.append(",dvlper=" + dvlper);
			sb.append(",dvlpera=" + dvlpera);
			sb.append(",gnexpl=" + gnexpl);
			sb.append(",libocc=" + libocc);
			sb.append(",ccthp=" + ccthp);
			sb.append(",retimp=" + retimp);
			sb.append(",dnuref=" + dnuref);
			sb.append(",rclsst=" + rclsst);
			sb.append(",gnidom=" + gnidom);
			sb.append(",dcsglc=" + dcsglc);
			sb.append(",ccogrb=" + ccogrb);
			sb.append(",cocdi=" + cocdi);
			sb.append(",cosatp=" + cosatp);
			sb.append(",gsatp=" + gsatp);
			sb.append(",clocv=" + clocv);
			sb.append(",dvltpe=" + dvltpe);
			sb.append(",dcralc=" + dcralc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r3batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r4batiStruct implements
			routines.system.IPersistableRow<r4batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String janbil;

		public String getJanbil() {
			return this.janbil;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String filler2;

		public String getFiller2() {
			return this.filler2;
		}

		public String vlbaicom;

		public String getVlbaicom() {
			return this.vlbaicom;
		}

		public String filler3;

		public String getFiller3() {
			return this.filler3;
		}

		public String vlbaiacom;

		public String getVlbaiacom() {
			return this.vlbaiacom;
		}

		public String filler4;

		public String getFiller4() {
			return this.filler4;
		}

		public String bipevlacom;

		public String getBipevlacom() {
			return this.bipevlacom;
		}

		public String filler5;

		public String getFiller5() {
			return this.filler5;
		}

		public String vlbaidept;

		public String getVlbaidept() {
			return this.vlbaidept;
		}

		public String filler31;

		public String getFiller31() {
			return this.filler31;
		}

		public String vlbaiadept;

		public String getVlbaiadept() {
			return this.vlbaiadept;
		}

		public String filler41;

		public String getFiller41() {
			return this.filler41;
		}

		public String bipevladept;

		public String getBipevladept() {
			return this.bipevladept;
		}

		public String filler51;

		public String getFiller51() {
			return this.filler51;
		}

		public String vlbaireg;

		public String getVlbaireg() {
			return this.vlbaireg;
		}

		public String filler32;

		public String getFiller32() {
			return this.filler32;
		}

		public String vlbaiareg;

		public String getVlbaiareg() {
			return this.vlbaiareg;
		}

		public String filler42;

		public String getFiller42() {
			return this.filler42;
		}

		public String bipevlareg;

		public String getBipevlareg() {
			return this.bipevlareg;
		}

		public String filler52;

		public String getFiller52() {
			return this.filler52;
		}

		public String vlbaiepci;

		public String getVlbaiepci() {
			return this.vlbaiepci;
		}

		public String filler33;

		public String getFiller33() {
			return this.filler33;
		}

		public String vlbaiaepci;

		public String getVlbaiaepci() {
			return this.vlbaiaepci;
		}

		public String filler43;

		public String getFiller43() {
			return this.filler43;
		}

		public String bipevlaepci;

		public String getBipevlaepci() {
			return this.bipevlaepci;
		}

		public String filler53;

		public String getFiller53() {
			return this.filler53;
		}

		public String bateom;

		public String getBateom() {
			return this.bateom;
		}

		public String filler6;

		public String getFiller6() {
			return this.filler6;
		}

		public String baomec;

		public String getBaomec() {
			return this.baomec;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.filler = readString(dis);

					this.janbil = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.filler2 = readString(dis);

					this.vlbaicom = readString(dis);

					this.filler3 = readString(dis);

					this.vlbaiacom = readString(dis);

					this.filler4 = readString(dis);

					this.bipevlacom = readString(dis);

					this.filler5 = readString(dis);

					this.vlbaidept = readString(dis);

					this.filler31 = readString(dis);

					this.vlbaiadept = readString(dis);

					this.filler41 = readString(dis);

					this.bipevladept = readString(dis);

					this.filler51 = readString(dis);

					this.vlbaireg = readString(dis);

					this.filler32 = readString(dis);

					this.vlbaiareg = readString(dis);

					this.filler42 = readString(dis);

					this.bipevlareg = readString(dis);

					this.filler52 = readString(dis);

					this.vlbaiepci = readString(dis);

					this.filler33 = readString(dis);

					this.vlbaiaepci = readString(dis);

					this.filler43 = readString(dis);

					this.bipevlaepci = readString(dis);

					this.filler53 = readString(dis);

					this.bateom = readString(dis);

					this.filler6 = readString(dis);

					this.baomec = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.janbil, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.filler2, dos);

				// String

				writeString(this.vlbaicom, dos);

				// String

				writeString(this.filler3, dos);

				// String

				writeString(this.vlbaiacom, dos);

				// String

				writeString(this.filler4, dos);

				// String

				writeString(this.bipevlacom, dos);

				// String

				writeString(this.filler5, dos);

				// String

				writeString(this.vlbaidept, dos);

				// String

				writeString(this.filler31, dos);

				// String

				writeString(this.vlbaiadept, dos);

				// String

				writeString(this.filler41, dos);

				// String

				writeString(this.bipevladept, dos);

				// String

				writeString(this.filler51, dos);

				// String

				writeString(this.vlbaireg, dos);

				// String

				writeString(this.filler32, dos);

				// String

				writeString(this.vlbaiareg, dos);

				// String

				writeString(this.filler42, dos);

				// String

				writeString(this.bipevlareg, dos);

				// String

				writeString(this.filler52, dos);

				// String

				writeString(this.vlbaiepci, dos);

				// String

				writeString(this.filler33, dos);

				// String

				writeString(this.vlbaiaepci, dos);

				// String

				writeString(this.filler43, dos);

				// String

				writeString(this.bipevlaepci, dos);

				// String

				writeString(this.filler53, dos);

				// String

				writeString(this.bateom, dos);

				// String

				writeString(this.filler6, dos);

				// String

				writeString(this.baomec, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",filler=" + filler);
			sb.append(",janbil=" + janbil);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",filler2=" + filler2);
			sb.append(",vlbaicom=" + vlbaicom);
			sb.append(",filler3=" + filler3);
			sb.append(",vlbaiacom=" + vlbaiacom);
			sb.append(",filler4=" + filler4);
			sb.append(",bipevlacom=" + bipevlacom);
			sb.append(",filler5=" + filler5);
			sb.append(",vlbaidept=" + vlbaidept);
			sb.append(",filler31=" + filler31);
			sb.append(",vlbaiadept=" + vlbaiadept);
			sb.append(",filler41=" + filler41);
			sb.append(",bipevladept=" + bipevladept);
			sb.append(",filler51=" + filler51);
			sb.append(",vlbaireg=" + vlbaireg);
			sb.append(",filler32=" + filler32);
			sb.append(",vlbaiareg=" + vlbaiareg);
			sb.append(",filler42=" + filler42);
			sb.append(",bipevlareg=" + bipevlareg);
			sb.append(",filler52=" + filler52);
			sb.append(",vlbaiepci=" + vlbaiepci);
			sb.append(",filler33=" + filler33);
			sb.append(",vlbaiaepci=" + vlbaiaepci);
			sb.append(",filler43=" + filler43);
			sb.append(",bipevlaepci=" + bipevlaepci);
			sb.append(",filler53=" + filler53);
			sb.append(",bateom=" + bateom);
			sb.append(",filler6=" + filler6);
			sb.append(",baomec=" + baomec);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r4batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r5batiStruct implements
			routines.system.IPersistableRow<r5batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String cconad1;

		public String getCconad1() {
			return this.cconad1;
		}

		public String dsueic1;

		public String getDsueic1() {
			return this.dsueic1;
		}

		public String dcimei1;

		public String getDcimei1() {
			return this.dcimei1;
		}

		public String cconad2;

		public String getCconad2() {
			return this.cconad2;
		}

		public String dsueic2;

		public String getDsueic2() {
			return this.dsueic2;
		}

		public String dcimei2;

		public String getDcimei2() {
			return this.dcimei2;
		}

		public String cconad3;

		public String getCconad3() {
			return this.cconad3;
		}

		public String dsueic3;

		public String getDsueic3() {
			return this.dsueic3;
		}

		public String dcimei3;

		public String getDcimei3() {
			return this.dcimei3;
		}

		public String cconad4;

		public String getCconad4() {
			return this.cconad4;
		}

		public String dsueic4;

		public String getDsueic4() {
			return this.dsueic4;
		}

		public String dcimei4;

		public String getDcimei4() {
			return this.dcimei4;
		}

		public String geaulc;

		public String getGeaulc() {
			return this.geaulc;
		}

		public String gelelc;

		public String getGelelc() {
			return this.gelelc;
		}

		public String gesclc;

		public String getGesclc() {
			return this.gesclc;
		}

		public String ggazlc;

		public String getGgazlc() {
			return this.ggazlc;
		}

		public String gasclc;

		public String getGasclc() {
			return this.gasclc;
		}

		public String gchclc;

		public String getGchclc() {
			return this.gchclc;
		}

		public String gvorlc;

		public String getGvorlc() {
			return this.gvorlc;
		}

		public String gteglc;

		public String getGteglc() {
			return this.gteglc;
		}

		public String dnbbai;

		public String getDnbbai() {
			return this.dnbbai;
		}

		public String dnbdou;

		public String getDnbdou() {
			return this.dnbdou;
		}

		public String dnblav;

		public String getDnblav() {
			return this.dnblav;
		}

		public String dnbwc;

		public String getDnbwc() {
			return this.dnbwc;
		}

		public String deqdha;

		public String getDeqdha() {
			return this.deqdha;
		}

		public String dnbppr;

		public String getDnbppr() {
			return this.dnbppr;
		}

		public String dnbsam;

		public String getDnbsam() {
			return this.dnbsam;
		}

		public String dnbcha;

		public String getDnbcha() {
			return this.dnbcha;
		}

		public String dnbcu8;

		public String getDnbcu8() {
			return this.dnbcu8;
		}

		public String dnbcu9;

		public String getDnbcu9() {
			return this.dnbcu9;
		}

		public String dnbsea;

		public String getDnbsea() {
			return this.dnbsea;
		}

		public String dnbann;

		public String getDnbann() {
			return this.dnbann;
		}

		public String dnbpdc;

		public String getDnbpdc() {
			return this.dnbpdc;
		}

		public String dsupdc;

		public String getDsupdc() {
			return this.dsupdc;
		}

		public String dmatgm;

		public String getDmatgm() {
			return this.dmatgm;
		}

		public String dmatto;

		public String getDmatto() {
			return this.dmatto;
		}

		public String jannat;

		public String getJannat() {
			return this.jannat;
		}

		public String detent;

		public String getDetent() {
			return this.detent;
		}

		public String dnbniv;

		public String getDnbniv() {
			return this.dnbniv;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.filler = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.dnudes = readString(dis);

					this.cconad1 = readString(dis);

					this.dsueic1 = readString(dis);

					this.dcimei1 = readString(dis);

					this.cconad2 = readString(dis);

					this.dsueic2 = readString(dis);

					this.dcimei2 = readString(dis);

					this.cconad3 = readString(dis);

					this.dsueic3 = readString(dis);

					this.dcimei3 = readString(dis);

					this.cconad4 = readString(dis);

					this.dsueic4 = readString(dis);

					this.dcimei4 = readString(dis);

					this.geaulc = readString(dis);

					this.gelelc = readString(dis);

					this.gesclc = readString(dis);

					this.ggazlc = readString(dis);

					this.gasclc = readString(dis);

					this.gchclc = readString(dis);

					this.gvorlc = readString(dis);

					this.gteglc = readString(dis);

					this.dnbbai = readString(dis);

					this.dnbdou = readString(dis);

					this.dnblav = readString(dis);

					this.dnbwc = readString(dis);

					this.deqdha = readString(dis);

					this.dnbppr = readString(dis);

					this.dnbsam = readString(dis);

					this.dnbcha = readString(dis);

					this.dnbcu8 = readString(dis);

					this.dnbcu9 = readString(dis);

					this.dnbsea = readString(dis);

					this.dnbann = readString(dis);

					this.dnbpdc = readString(dis);

					this.dsupdc = readString(dis);

					this.dmatgm = readString(dis);

					this.dmatto = readString(dis);

					this.jannat = readString(dis);

					this.detent = readString(dis);

					this.dnbniv = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnudes, dos);

				// String

				writeString(this.cconad1, dos);

				// String

				writeString(this.dsueic1, dos);

				// String

				writeString(this.dcimei1, dos);

				// String

				writeString(this.cconad2, dos);

				// String

				writeString(this.dsueic2, dos);

				// String

				writeString(this.dcimei2, dos);

				// String

				writeString(this.cconad3, dos);

				// String

				writeString(this.dsueic3, dos);

				// String

				writeString(this.dcimei3, dos);

				// String

				writeString(this.cconad4, dos);

				// String

				writeString(this.dsueic4, dos);

				// String

				writeString(this.dcimei4, dos);

				// String

				writeString(this.geaulc, dos);

				// String

				writeString(this.gelelc, dos);

				// String

				writeString(this.gesclc, dos);

				// String

				writeString(this.ggazlc, dos);

				// String

				writeString(this.gasclc, dos);

				// String

				writeString(this.gchclc, dos);

				// String

				writeString(this.gvorlc, dos);

				// String

				writeString(this.gteglc, dos);

				// String

				writeString(this.dnbbai, dos);

				// String

				writeString(this.dnbdou, dos);

				// String

				writeString(this.dnblav, dos);

				// String

				writeString(this.dnbwc, dos);

				// String

				writeString(this.deqdha, dos);

				// String

				writeString(this.dnbppr, dos);

				// String

				writeString(this.dnbsam, dos);

				// String

				writeString(this.dnbcha, dos);

				// String

				writeString(this.dnbcu8, dos);

				// String

				writeString(this.dnbcu9, dos);

				// String

				writeString(this.dnbsea, dos);

				// String

				writeString(this.dnbann, dos);

				// String

				writeString(this.dnbpdc, dos);

				// String

				writeString(this.dsupdc, dos);

				// String

				writeString(this.dmatgm, dos);

				// String

				writeString(this.dmatto, dos);

				// String

				writeString(this.jannat, dos);

				// String

				writeString(this.detent, dos);

				// String

				writeString(this.dnbniv, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",filler=" + filler);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",cconad1=" + cconad1);
			sb.append(",dsueic1=" + dsueic1);
			sb.append(",dcimei1=" + dcimei1);
			sb.append(",cconad2=" + cconad2);
			sb.append(",dsueic2=" + dsueic2);
			sb.append(",dcimei2=" + dcimei2);
			sb.append(",cconad3=" + cconad3);
			sb.append(",dsueic3=" + dsueic3);
			sb.append(",dcimei3=" + dcimei3);
			sb.append(",cconad4=" + cconad4);
			sb.append(",dsueic4=" + dsueic4);
			sb.append(",dcimei4=" + dcimei4);
			sb.append(",geaulc=" + geaulc);
			sb.append(",gelelc=" + gelelc);
			sb.append(",gesclc=" + gesclc);
			sb.append(",ggazlc=" + ggazlc);
			sb.append(",gasclc=" + gasclc);
			sb.append(",gchclc=" + gchclc);
			sb.append(",gvorlc=" + gvorlc);
			sb.append(",gteglc=" + gteglc);
			sb.append(",dnbbai=" + dnbbai);
			sb.append(",dnbdou=" + dnbdou);
			sb.append(",dnblav=" + dnblav);
			sb.append(",dnbwc=" + dnbwc);
			sb.append(",deqdha=" + deqdha);
			sb.append(",dnbppr=" + dnbppr);
			sb.append(",dnbsam=" + dnbsam);
			sb.append(",dnbcha=" + dnbcha);
			sb.append(",dnbcu8=" + dnbcu8);
			sb.append(",dnbcu9=" + dnbcu9);
			sb.append(",dnbsea=" + dnbsea);
			sb.append(",dnbann=" + dnbann);
			sb.append(",dnbpdc=" + dnbpdc);
			sb.append(",dsupdc=" + dsupdc);
			sb.append(",dmatgm=" + dmatgm);
			sb.append(",dmatto=" + dmatto);
			sb.append(",jannat=" + jannat);
			sb.append(",detent=" + detent);
			sb.append(",dnbniv=" + dnbniv);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r5batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r6batiStruct implements
			routines.system.IPersistableRow<r6batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String fukker;

		public String getFukker() {
			return this.fukker;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String vsupot;

		public String getVsupot() {
			return this.vsupot;
		}

		public String vsurz1;

		public String getVsurz1() {
			return this.vsurz1;
		}

		public String vsurz2;

		public String getVsurz2() {
			return this.vsurz2;
		}

		public String vsurz3;

		public String getVsurz3() {
			return this.vsurz3;
		}

		public String vsurzt;

		public String getVsurzt() {
			return this.vsurzt;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String vsurb1;

		public String getVsurb1() {
			return this.vsurb1;
		}

		public String vsurb2;

		public String getVsurb2() {
			return this.vsurb2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.fukker = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.dnudes = readString(dis);

					this.vsupot = readString(dis);

					this.vsurz1 = readString(dis);

					this.vsurz2 = readString(dis);

					this.vsurz3 = readString(dis);

					this.vsurzt = readString(dis);

					this.filler = readString(dis);

					this.vsurb1 = readString(dis);

					this.vsurb2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.fukker, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnudes, dos);

				// String

				writeString(this.vsupot, dos);

				// String

				writeString(this.vsurz1, dos);

				// String

				writeString(this.vsurz2, dos);

				// String

				writeString(this.vsurz3, dos);

				// String

				writeString(this.vsurzt, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.vsurb1, dos);

				// String

				writeString(this.vsurb2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",fukker=" + fukker);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",vsupot=" + vsupot);
			sb.append(",vsurz1=" + vsurz1);
			sb.append(",vsurz2=" + vsurz2);
			sb.append(",vsurz3=" + vsurz3);
			sb.append(",vsurzt=" + vsurzt);
			sb.append(",filler=" + filler);
			sb.append(",vsurb1=" + vsurb1);
			sb.append(",vsurb2=" + vsurb2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r6batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r7batiStruct implements
			routines.system.IPersistableRow<r7batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnudes;

		public String getDnudes() {
			return this.dnudes;
		}

		public String dsudep;

		public String getDsudep() {
			return this.dsudep;
		}

		public String cconad;

		public String getCconad() {
			return this.cconad;
		}

		public String asitet;

		public String getAsitet() {
			return this.asitet;
		}

		public String dmatgm;

		public String getDmatgm() {
			return this.dmatgm;
		}

		public String dmatto;

		public String getDmatto() {
			return this.dmatto;
		}

		public String detent;

		public String getDetent() {
			return this.detent;
		}

		public String geaulc;

		public String getGeaulc() {
			return this.geaulc;
		}

		public String gelelc;

		public String getGelelc() {
			return this.gelelc;
		}

		public String gchclc;

		public String getGchclc() {
			return this.gchclc;
		}

		public String dnbbai;

		public String getDnbbai() {
			return this.dnbbai;
		}

		public String dnbdou;

		public String getDnbdou() {
			return this.dnbdou;
		}

		public String dnblav;

		public String getDnblav() {
			return this.dnblav;
		}

		public String dnbwc;

		public String getDnbwc() {
			return this.dnbwc;
		}

		public String deqtlc;

		public String getDeqtlc() {
			return this.deqtlc;
		}

		public String dcimlc;

		public String getDcimlc() {
			return this.dcimlc;
		}

		public String dcetde;

		public String getDcetde() {
			return this.dcetde;
		}

		public String dcspde;

		public String getDcspde() {
			return this.dcspde;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.filler = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.dnudes = readString(dis);

					this.dsudep = readString(dis);

					this.cconad = readString(dis);

					this.asitet = readString(dis);

					this.dmatgm = readString(dis);

					this.dmatto = readString(dis);

					this.detent = readString(dis);

					this.geaulc = readString(dis);

					this.gelelc = readString(dis);

					this.gchclc = readString(dis);

					this.dnbbai = readString(dis);

					this.dnbdou = readString(dis);

					this.dnblav = readString(dis);

					this.dnbwc = readString(dis);

					this.deqtlc = readString(dis);

					this.dcimlc = readString(dis);

					this.dcetde = readString(dis);

					this.dcspde = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnudes, dos);

				// String

				writeString(this.dsudep, dos);

				// String

				writeString(this.cconad, dos);

				// String

				writeString(this.asitet, dos);

				// String

				writeString(this.dmatgm, dos);

				// String

				writeString(this.dmatto, dos);

				// String

				writeString(this.detent, dos);

				// String

				writeString(this.geaulc, dos);

				// String

				writeString(this.gelelc, dos);

				// String

				writeString(this.gchclc, dos);

				// String

				writeString(this.dnbbai, dos);

				// String

				writeString(this.dnbdou, dos);

				// String

				writeString(this.dnblav, dos);

				// String

				writeString(this.dnbwc, dos);

				// String

				writeString(this.deqtlc, dos);

				// String

				writeString(this.dcimlc, dos);

				// String

				writeString(this.dcetde, dos);

				// String

				writeString(this.dcspde, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",filler=" + filler);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnudes=" + dnudes);
			sb.append(",dsudep=" + dsudep);
			sb.append(",cconad=" + cconad);
			sb.append(",asitet=" + asitet);
			sb.append(",dmatgm=" + dmatgm);
			sb.append(",dmatto=" + dmatto);
			sb.append(",detent=" + detent);
			sb.append(",geaulc=" + geaulc);
			sb.append(",gelelc=" + gelelc);
			sb.append(",gchclc=" + gchclc);
			sb.append(",dnbbai=" + dnbbai);
			sb.append(",dnbdou=" + dnbdou);
			sb.append(",dnblav=" + dnblav);
			sb.append(",dnbwc=" + dnbwc);
			sb.append(",deqtlc=" + deqtlc);
			sb.append(",dcimlc=" + dcimlc);
			sb.append(",dcetde=" + dcetde);
			sb.append(",dcspde=" + dcspde);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r7batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r8batiStruct implements
			routines.system.IPersistableRow<r8batiStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String invar;

		public String getInvar() {
			return this.invar;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String janbil;

		public String getJanbil() {
			return this.janbil;
		}

		public String dnupev;

		public String getDnupev() {
			return this.dnupev;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnuexb;

		public String getDnuexb() {
			return this.dnuexb;
		}

		public String ccolloc;

		public String getCcolloc() {
			return this.ccolloc;
		}

		public String pexb;

		public String getPexb() {
			return this.pexb;
		}

		public String gnextl;

		public String getGnextl() {
			return this.gnextl;
		}

		public String jandeb;

		public String getJandeb() {
			return this.jandeb;
		}

		public String janimp;

		public String getJanimp() {
			return this.janimp;
		}

		public String vecdif;

		public String getVecdif() {
			return this.vecdif;
		}

		public String filler2;

		public String getFiller2() {
			return this.filler2;
		}

		public String vecdifa;

		public String getVecdifa() {
			return this.vecdifa;
		}

		public String filler3;

		public String getFiller3() {
			return this.filler3;
		}

		public String fcexb;

		public String getFcexb() {
			return this.fcexb;
		}

		public String filler4;

		public String getFiller4() {
			return this.filler4;
		}

		public String fcexba;

		public String getFcexba() {
			return this.fcexba;
		}

		public String filler5;

		public String getFiller5() {
			return this.filler5;
		}

		public String rcexba;

		public String getRcexba() {
			return this.rcexba;
		}

		public String filler7;

		public String getFiller7() {
			return this.filler7;
		}

		public String dvldif2;

		public String getDvldif2() {
			return this.dvldif2;
		}

		public String filler6;

		public String getFiller6() {
			return this.filler6;
		}

		public String dvldif2a;

		public String getDvldif2a() {
			return this.dvldif2a;
		}

		public String filler8;

		public String getFiller8() {
			return this.filler8;
		}

		public String fcexb2;

		public String getFcexb2() {
			return this.fcexb2;
		}

		public String filler9;

		public String getFiller9() {
			return this.filler9;
		}

		public String fcexba2;

		public String getFcexba2() {
			return this.fcexba2;
		}

		public String fukker;

		public String getFukker() {
			return this.fukker;
		}

		public String rcexba2;

		public String getRcexba2() {
			return this.rcexba2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.invar = readString(dis);

					this.filler = readString(dis);

					this.janbil = readString(dis);

					this.dnupev = readString(dis);

					this.article = readString(dis);

					this.dnuexb = readString(dis);

					this.ccolloc = readString(dis);

					this.pexb = readString(dis);

					this.gnextl = readString(dis);

					this.jandeb = readString(dis);

					this.janimp = readString(dis);

					this.vecdif = readString(dis);

					this.filler2 = readString(dis);

					this.vecdifa = readString(dis);

					this.filler3 = readString(dis);

					this.fcexb = readString(dis);

					this.filler4 = readString(dis);

					this.fcexba = readString(dis);

					this.filler5 = readString(dis);

					this.rcexba = readString(dis);

					this.filler7 = readString(dis);

					this.dvldif2 = readString(dis);

					this.filler6 = readString(dis);

					this.dvldif2a = readString(dis);

					this.filler8 = readString(dis);

					this.fcexb2 = readString(dis);

					this.filler9 = readString(dis);

					this.fcexba2 = readString(dis);

					this.fukker = readString(dis);

					this.rcexba2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.invar, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.janbil, dos);

				// String

				writeString(this.dnupev, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnuexb, dos);

				// String

				writeString(this.ccolloc, dos);

				// String

				writeString(this.pexb, dos);

				// String

				writeString(this.gnextl, dos);

				// String

				writeString(this.jandeb, dos);

				// String

				writeString(this.janimp, dos);

				// String

				writeString(this.vecdif, dos);

				// String

				writeString(this.filler2, dos);

				// String

				writeString(this.vecdifa, dos);

				// String

				writeString(this.filler3, dos);

				// String

				writeString(this.fcexb, dos);

				// String

				writeString(this.filler4, dos);

				// String

				writeString(this.fcexba, dos);

				// String

				writeString(this.filler5, dos);

				// String

				writeString(this.rcexba, dos);

				// String

				writeString(this.filler7, dos);

				// String

				writeString(this.dvldif2, dos);

				// String

				writeString(this.filler6, dos);

				// String

				writeString(this.dvldif2a, dos);

				// String

				writeString(this.filler8, dos);

				// String

				writeString(this.fcexb2, dos);

				// String

				writeString(this.filler9, dos);

				// String

				writeString(this.fcexba2, dos);

				// String

				writeString(this.fukker, dos);

				// String

				writeString(this.rcexba2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",invar=" + invar);
			sb.append(",filler=" + filler);
			sb.append(",janbil=" + janbil);
			sb.append(",dnupev=" + dnupev);
			sb.append(",article=" + article);
			sb.append(",dnuexb=" + dnuexb);
			sb.append(",ccolloc=" + ccolloc);
			sb.append(",pexb=" + pexb);
			sb.append(",gnextl=" + gnextl);
			sb.append(",jandeb=" + jandeb);
			sb.append(",janimp=" + janimp);
			sb.append(",vecdif=" + vecdif);
			sb.append(",filler2=" + filler2);
			sb.append(",vecdifa=" + vecdifa);
			sb.append(",filler3=" + filler3);
			sb.append(",fcexb=" + fcexb);
			sb.append(",filler4=" + filler4);
			sb.append(",fcexba=" + fcexba);
			sb.append(",filler5=" + filler5);
			sb.append(",rcexba=" + rcexba);
			sb.append(",filler7=" + filler7);
			sb.append(",dvldif2=" + dvldif2);
			sb.append(",filler6=" + filler6);
			sb.append(",dvldif2a=" + dvldif2a);
			sb.append(",filler8=" + filler8);
			sb.append(",fcexb2=" + fcexb2);
			sb.append(",filler9=" + filler9);
			sb.append(",fcexba2=" + fcexba2);
			sb.append(",fukker=" + fukker);
			sb.append(",rcexba2=" + rcexba2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r8batiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputMSPositional_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputMSPositional_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				r1batiStruct r1bati = new r1batiStruct();
				r1batinewStruct r1batinew = new r1batinewStruct();
				r2batiStruct r2bati = new r2batiStruct();
				r2batinewStruct r2batinew = new r2batinewStruct();
				r3batiStruct r3bati = new r3batiStruct();
				r3batinewStruct r3batinew = new r3batinewStruct();
				r4batiStruct r4bati = new r4batiStruct();
				r4batinewStruct r4batinew = new r4batinewStruct();
				r5batiStruct r5bati = new r5batiStruct();
				r5batinewStruct r5batinew = new r5batinewStruct();
				r6batiStruct r6bati = new r6batiStruct();
				r6batinewStruct r6batinew = new r6batinewStruct();
				r7batiStruct r7bati = new r7batiStruct();
				r7batinewStruct r7batinew = new r7batinewStruct();
				r8batiStruct r8bati = new r8batiStruct();
				r8batinewStruct r8batinew = new r8batinewStruct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());
				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.target_path + "bati_article00.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				String[] headColutFileOutputDelimited_1 = new String[21];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;
				try {
					CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_1,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_1
							.setSeparator(csvSettings_tFileOutputDelimited_1
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_1
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_1.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_1
										.getRowDelim());
					}

					if (filetFileOutputDelimited_1.length() == 0) {

						headColutFileOutputDelimited_1[0] = "id_parc";

						headColutFileOutputDelimited_1[1] = "ccodep";

						headColutFileOutputDelimited_1[2] = "ccodir";

						headColutFileOutputDelimited_1[3] = "ccocom";

						headColutFileOutputDelimited_1[4] = "invar";

						headColutFileOutputDelimited_1[5] = "article";

						headColutFileOutputDelimited_1[6] = "ccopre";

						headColutFileOutputDelimited_1[7] = "ccosec";

						headColutFileOutputDelimited_1[8] = "dnupla";

						headColutFileOutputDelimited_1[9] = "dnubat";

						headColutFileOutputDelimited_1[10] = "desc";

						headColutFileOutputDelimited_1[11] = "dniv";

						headColutFileOutputDelimited_1[12] = "dpor";

						headColutFileOutputDelimited_1[13] = "ccoriv";

						headColutFileOutputDelimited_1[14] = "ccovoi";

						headColutFileOutputDelimited_1[15] = "dnvoiri";

						headColutFileOutputDelimited_1[16] = "dindic";

						headColutFileOutputDelimited_1[17] = "ccocif";

						headColutFileOutputDelimited_1[18] = "dvoilib";

						headColutFileOutputDelimited_1[19] = "cleinvar";

						headColutFileOutputDelimited_1[20] = "locinc";

						CsvWritertFileOutputDelimited_1
								.writeNext(headColutFileOutputDelimited_1);
						CsvWritertFileOutputDelimited_1.flush();

					}

					CsvWritertFileOutputDelimited_1
							.setEscapeChar(csvSettings_tFileOutputDelimited_1
									.getEscapeChar());
					CsvWritertFileOutputDelimited_1
							.setQuoteChar(csvSettings_tFileOutputDelimited_1
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_1
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tMap_5 begin ] start
					 */

					ok_Hash.put("tMap_5", false);
					start_Hash.put("tMap_5", System.currentTimeMillis());
					currentComponent = "tMap_5";

					int tos_count_tMap_5 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_5__Struct {
						String code_insee;
					}
					Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					r1batinewStruct r1batinew_tmp = new r1batinewStruct();
					// ###############################

					/**
					 * [tMap_5 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_6", false);
					start_Hash.put("tFileOutputDelimited_6",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_6";

					int tos_count_tFileOutputDelimited_6 = 0;

					String fileName_tFileOutputDelimited_6 = "";
					fileName_tFileOutputDelimited_6 = (new java.io.File(
							context.target_path + "bati_article10.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_6 = null;
					String extension_tFileOutputDelimited_6 = null;
					String directory_tFileOutputDelimited_6 = null;
					if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
							extension_tFileOutputDelimited_6 = "";
						} else {
							fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
									.substring(0,
											fileName_tFileOutputDelimited_6
													.lastIndexOf("."));
							extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
									.substring(fileName_tFileOutputDelimited_6
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
									.substring(0,
											fileName_tFileOutputDelimited_6
													.lastIndexOf("."));
							extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
									.substring(fileName_tFileOutputDelimited_6
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
							extension_tFileOutputDelimited_6 = "";
						}
						directory_tFileOutputDelimited_6 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_6 = true;
					java.io.File filetFileOutputDelimited_6 = new java.io.File(
							fileName_tFileOutputDelimited_6);
					globalMap.put("tFileOutputDelimited_6_FILE_NAME",
							fileName_tFileOutputDelimited_6);

					String[] headColutFileOutputDelimited_6 = new String[43];
					class CSVBasicSet_tFileOutputDelimited_6 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_6[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_6 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator(";");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_6[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_6 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_6[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_6[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_6 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_6 = 0;
					int splitEvery_tFileOutputDelimited_6 = 1000;
					int splitedFileNo_tFileOutputDelimited_6 = 0;
					int currentRow_tFileOutputDelimited_6 = 0;

					CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
					csvSettings_tFileOutputDelimited_6.setFieldSeparator(";");
					csvSettings_tFileOutputDelimited_6.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_6
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_6 != null
							&& directory_tFileOutputDelimited_6.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
								directory_tFileOutputDelimited_6);
						if (!dir_tFileOutputDelimited_6.exists()) {
							dir_tFileOutputDelimited_6.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;
					try {
						CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_6,
														false), "UTF-8")));
						CsvWritertFileOutputDelimited_6
								.setSeparator(csvSettings_tFileOutputDelimited_6
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_6
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_6
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_6
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_6.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_6
											.getRowDelim());
						}

						if (filetFileOutputDelimited_6.length() == 0) {

							headColutFileOutputDelimited_6[0] = "ccodep";

							headColutFileOutputDelimited_6[1] = "ccodir";

							headColutFileOutputDelimited_6[2] = "ccocom";

							headColutFileOutputDelimited_6[3] = "invar";

							headColutFileOutputDelimited_6[4] = "article";

							headColutFileOutputDelimited_6[5] = "gpdl";

							headColutFileOutputDelimited_6[6] = "dsrpar";

							headColutFileOutputDelimited_6[7] = "dnupro";

							headColutFileOutputDelimited_6[8] = "jdatat";

							headColutFileOutputDelimited_6[9] = "dnufnl";

							headColutFileOutputDelimited_6[10] = "ccoeva";

							headColutFileOutputDelimited_6[11] = "ccitvl";

							headColutFileOutputDelimited_6[12] = "dteloc";

							headColutFileOutputDelimited_6[13] = "gtauom";

							headColutFileOutputDelimited_6[14] = "dcomrd";

							headColutFileOutputDelimited_6[15] = "ccoplc";

							headColutFileOutputDelimited_6[16] = "cconlc";

							headColutFileOutputDelimited_6[17] = "dvltrt";

							headColutFileOutputDelimited_6[18] = "ccoape";

							headColutFileOutputDelimited_6[19] = "cc48lc";

							headColutFileOutputDelimited_6[20] = "dloy48a";

							headColutFileOutputDelimited_6[21] = "top48a";

							headColutFileOutputDelimited_6[22] = "dnatlc";

							headColutFileOutputDelimited_6[23] = "dnupas";

							headColutFileOutputDelimited_6[24] = "gnexcf";

							headColutFileOutputDelimited_6[25] = "dtaucf";

							headColutFileOutputDelimited_6[26] = "cchpr";

							headColutFileOutputDelimited_6[27] = "jannat";

							headColutFileOutputDelimited_6[28] = "dnbniv";

							headColutFileOutputDelimited_6[29] = "hlmsem";

							headColutFileOutputDelimited_6[30] = "postel";

							headColutFileOutputDelimited_6[31] = "dnatcg";

							headColutFileOutputDelimited_6[32] = "jdatcgl";

							headColutFileOutputDelimited_6[33] = "dnutbx";

							headColutFileOutputDelimited_6[34] = "dvltla";

							headColutFileOutputDelimited_6[35] = "janloc";

							headColutFileOutputDelimited_6[36] = "ccsloc";

							headColutFileOutputDelimited_6[37] = "fburx";

							headColutFileOutputDelimited_6[38] = "gimtom";

							headColutFileOutputDelimited_6[39] = "cbtabt";

							headColutFileOutputDelimited_6[40] = "jdtabt";

							headColutFileOutputDelimited_6[41] = "jrtabt";

							headColutFileOutputDelimited_6[42] = "jacloc";

							CsvWritertFileOutputDelimited_6
									.writeNext(headColutFileOutputDelimited_6);
							CsvWritertFileOutputDelimited_6.flush();

						}

						CsvWritertFileOutputDelimited_6
								.setEscapeChar(csvSettings_tFileOutputDelimited_6
										.getEscapeChar());
						CsvWritertFileOutputDelimited_6
								.setQuoteChar(csvSettings_tFileOutputDelimited_6
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_6
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_6 begin ] stop
						 */

						/**
						 * [tMap_6 begin ] start
						 */

						ok_Hash.put("tMap_6", false);
						start_Hash.put("tMap_6", System.currentTimeMillis());
						currentComponent = "tMap_6";

						int tos_count_tMap_6 = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_6__Struct {
						}
						Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						r2batinewStruct r2batinew_tmp = new r2batinewStruct();
						// ###############################

						/**
						 * [tMap_6 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_7", false);
						start_Hash.put("tFileOutputDelimited_7",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_7";

						int tos_count_tFileOutputDelimited_7 = 0;

						String fileName_tFileOutputDelimited_7 = "";
						fileName_tFileOutputDelimited_7 = (new java.io.File(
								context.target_path + "bati_article21.csv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_7 = null;
						String extension_tFileOutputDelimited_7 = null;
						String directory_tFileOutputDelimited_7 = null;
						if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_7
									.lastIndexOf(".") < fileName_tFileOutputDelimited_7
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
								extension_tFileOutputDelimited_7 = "";
							} else {
								fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
										.substring(0,
												fileName_tFileOutputDelimited_7
														.lastIndexOf("."));
								extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
										.substring(fileName_tFileOutputDelimited_7
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
									.substring(0,
											fileName_tFileOutputDelimited_7
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_7
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
										.substring(0,
												fileName_tFileOutputDelimited_7
														.lastIndexOf("."));
								extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
										.substring(fileName_tFileOutputDelimited_7
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
								extension_tFileOutputDelimited_7 = "";
							}
							directory_tFileOutputDelimited_7 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_7 = true;
						java.io.File filetFileOutputDelimited_7 = new java.io.File(
								fileName_tFileOutputDelimited_7);
						globalMap.put("tFileOutputDelimited_7_FILE_NAME",
								fileName_tFileOutputDelimited_7);

						String[] headColutFileOutputDelimited_7 = new String[29];
						class CSVBasicSet_tFileOutputDelimited_7 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_7[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_7 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_7[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator(";");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_7[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_7 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_7[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_7[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_7 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_7[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_7 = 0;
						int splitEvery_tFileOutputDelimited_7 = 1000;
						int splitedFileNo_tFileOutputDelimited_7 = 0;
						int currentRow_tFileOutputDelimited_7 = 0;

						CSVBasicSet_tFileOutputDelimited_7 csvSettings_tFileOutputDelimited_7 = new CSVBasicSet_tFileOutputDelimited_7();
						csvSettings_tFileOutputDelimited_7
								.setFieldSeparator(";");
						csvSettings_tFileOutputDelimited_7
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_7
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_7 != null
								&& directory_tFileOutputDelimited_7.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
									directory_tFileOutputDelimited_7);
							if (!dir_tFileOutputDelimited_7.exists()) {
								dir_tFileOutputDelimited_7.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = null;
						try {
							CsvWritertFileOutputDelimited_7 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_7,
															false), "UTF-8")));
							CsvWritertFileOutputDelimited_7
									.setSeparator(csvSettings_tFileOutputDelimited_7
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_7
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_7
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_7
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_7.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_7
												.getRowDelim());
							}

							if (filetFileOutputDelimited_7.length() == 0) {

								headColutFileOutputDelimited_7[0] = "ccodep";

								headColutFileOutputDelimited_7[1] = "ccodir";

								headColutFileOutputDelimited_7[2] = "ccocom";

								headColutFileOutputDelimited_7[3] = "invar";

								headColutFileOutputDelimited_7[4] = "dnupev";

								headColutFileOutputDelimited_7[5] = "article";

								headColutFileOutputDelimited_7[6] = "ccoaff";

								headColutFileOutputDelimited_7[7] = "ccostb";

								headColutFileOutputDelimited_7[8] = "dcapec";

								headColutFileOutputDelimited_7[9] = "dcetlc";

								headColutFileOutputDelimited_7[10] = "dcsplc";

								headColutFileOutputDelimited_7[11] = "dsupot";

								headColutFileOutputDelimited_7[12] = "dvlper";

								headColutFileOutputDelimited_7[13] = "dvlpera";

								headColutFileOutputDelimited_7[14] = "gnexpl";

								headColutFileOutputDelimited_7[15] = "libocc";

								headColutFileOutputDelimited_7[16] = "ccthp";

								headColutFileOutputDelimited_7[17] = "retimp";

								headColutFileOutputDelimited_7[18] = "dnuref";

								headColutFileOutputDelimited_7[19] = "rclsst";

								headColutFileOutputDelimited_7[20] = "gnidom";

								headColutFileOutputDelimited_7[21] = "dcsglc";

								headColutFileOutputDelimited_7[22] = "ccogrb";

								headColutFileOutputDelimited_7[23] = "cocdi";

								headColutFileOutputDelimited_7[24] = "cosatp";

								headColutFileOutputDelimited_7[25] = "gsatp";

								headColutFileOutputDelimited_7[26] = "clocv";

								headColutFileOutputDelimited_7[27] = "dvltpe";

								headColutFileOutputDelimited_7[28] = "dcralc";

								CsvWritertFileOutputDelimited_7
										.writeNext(headColutFileOutputDelimited_7);
								CsvWritertFileOutputDelimited_7.flush();

							}

							CsvWritertFileOutputDelimited_7
									.setEscapeChar(csvSettings_tFileOutputDelimited_7
											.getEscapeChar());
							CsvWritertFileOutputDelimited_7
									.setQuoteChar(csvSettings_tFileOutputDelimited_7
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_7
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_7 begin ] stop
							 */

							/**
							 * [tMap_7 begin ] start
							 */

							ok_Hash.put("tMap_7", false);
							start_Hash
									.put("tMap_7", System.currentTimeMillis());
							currentComponent = "tMap_7";

							int tos_count_tMap_7 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_7__Struct {
							}
							Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							r3batinewStruct r3batinew_tmp = new r3batinewStruct();
							// ###############################

							/**
							 * [tMap_7 begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_8 begin ] start
							 */

							ok_Hash.put("tFileOutputDelimited_8", false);
							start_Hash.put("tFileOutputDelimited_8",
									System.currentTimeMillis());
							currentComponent = "tFileOutputDelimited_8";

							int tos_count_tFileOutputDelimited_8 = 0;

							String fileName_tFileOutputDelimited_8 = "";
							fileName_tFileOutputDelimited_8 = (new java.io.File(
									context.target_path + "bati_article36.csv"))
									.getAbsolutePath().replace("\\", "/");
							String fullName_tFileOutputDelimited_8 = null;
							String extension_tFileOutputDelimited_8 = null;
							String directory_tFileOutputDelimited_8 = null;
							if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
								if (fileName_tFileOutputDelimited_8
										.lastIndexOf(".") < fileName_tFileOutputDelimited_8
										.lastIndexOf("/")) {
									fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
									extension_tFileOutputDelimited_8 = "";
								} else {
									fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
											.substring(0,
													fileName_tFileOutputDelimited_8
															.lastIndexOf("."));
									extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
											.substring(fileName_tFileOutputDelimited_8
													.lastIndexOf("."));
								}
								directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
										.substring(0,
												fileName_tFileOutputDelimited_8
														.lastIndexOf("/"));
							} else {
								if (fileName_tFileOutputDelimited_8
										.lastIndexOf(".") != -1) {
									fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
											.substring(0,
													fileName_tFileOutputDelimited_8
															.lastIndexOf("."));
									extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
											.substring(fileName_tFileOutputDelimited_8
													.lastIndexOf("."));
								} else {
									fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
									extension_tFileOutputDelimited_8 = "";
								}
								directory_tFileOutputDelimited_8 = "";
							}
							boolean isFileGenerated_tFileOutputDelimited_8 = true;
							java.io.File filetFileOutputDelimited_8 = new java.io.File(
									fileName_tFileOutputDelimited_8);
							globalMap.put("tFileOutputDelimited_8_FILE_NAME",
									fileName_tFileOutputDelimited_8);

							String[] headColutFileOutputDelimited_8 = new String[21];
							class CSVBasicSet_tFileOutputDelimited_8 {
								private char field_Delim;
								private char row_Delim;
								private char escape;
								private char textEnclosure;
								private boolean useCRLFRecordDelimiter;

								public boolean isUseCRLFRecordDelimiter() {
									return useCRLFRecordDelimiter;
								}

								public void setFieldSeparator(String fieldSep)
										throws IllegalArgumentException {
									char field_Delim_tFileOutputDelimited_8[] = null;

									// support passing value (property: Field
									// Separator) by 'context.fs' or
									// 'globalMap.get("fs")'.
									if (fieldSep.length() > 0) {
										field_Delim_tFileOutputDelimited_8 = fieldSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Field Separator must be assigned a char.");
									}
									this.field_Delim = field_Delim_tFileOutputDelimited_8[0];
								}

								public char getFieldDelim() {
									if (this.field_Delim == 0) {
										setFieldSeparator(";");
									}
									return this.field_Delim;
								}

								public void setRowSeparator(String rowSep) {
									if ("\r\n".equals(rowSep)) {
										useCRLFRecordDelimiter = true;
										return;
									}
									char row_DelimtFileOutputDelimited_8[] = null;

									// support passing value (property: Row
									// Separator) by 'context.rs' or
									// 'globalMap.get("rs")'.
									if (rowSep.length() > 0) {
										row_DelimtFileOutputDelimited_8 = rowSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Row Separator must be assigned a char.");
									}
									this.row_Delim = row_DelimtFileOutputDelimited_8[0];
								}

								public char getRowDelim() {
									if (this.row_Delim == 0) {
										setRowSeparator("\n");
									}
									return this.row_Delim;
								}

								public void setEscapeAndTextEnclosure(
										String strEscape,
										String strTextEnclosure)
										throws IllegalArgumentException {
									if (strEscape.length() <= 0) {
										throw new IllegalArgumentException(
												"Escape Char must be assigned a char.");
									}

									if ("".equals(strTextEnclosure))
										strTextEnclosure = "\0";
									char textEnclosure_tFileOutputDelimited_8[] = null;

									if (strTextEnclosure.length() > 0) {
										textEnclosure_tFileOutputDelimited_8 = strTextEnclosure
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Text Enclosure must be assigned a char.");
									}

									this.textEnclosure = textEnclosure_tFileOutputDelimited_8[0];

									if (("\\").equals(strEscape)) {
										this.escape = '\\';
									} else if (strEscape
											.equals(strTextEnclosure)) {
										this.escape = this.textEnclosure;
									} else {
										// the default escape mode is double
										// escape
										this.escape = this.textEnclosure;
									}

								}

								public char getEscapeChar() {
									return (char) this.escape;
								}

								public char getTextEnclosure() {
									return this.textEnclosure;
								}
							}

							int nb_line_tFileOutputDelimited_8 = 0;
							int splitEvery_tFileOutputDelimited_8 = 1000;
							int splitedFileNo_tFileOutputDelimited_8 = 0;
							int currentRow_tFileOutputDelimited_8 = 0;

							CSVBasicSet_tFileOutputDelimited_8 csvSettings_tFileOutputDelimited_8 = new CSVBasicSet_tFileOutputDelimited_8();
							csvSettings_tFileOutputDelimited_8
									.setFieldSeparator(";");
							csvSettings_tFileOutputDelimited_8
									.setRowSeparator("\n");
							csvSettings_tFileOutputDelimited_8
									.setEscapeAndTextEnclosure("\"", "\"");
							// create directory only if not exists
							if (directory_tFileOutputDelimited_8 != null
									&& directory_tFileOutputDelimited_8.trim()
											.length() != 0) {
								java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
										directory_tFileOutputDelimited_8);
								if (!dir_tFileOutputDelimited_8.exists()) {
									dir_tFileOutputDelimited_8.mkdirs();
								}
							}
							com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_8 = null;
							try {
								CsvWritertFileOutputDelimited_8 = new com.talend.csv.CSVWriter(
										new java.io.BufferedWriter(
												new java.io.OutputStreamWriter(
														new java.io.FileOutputStream(
																fileName_tFileOutputDelimited_8,
																false), "UTF-8")));
								CsvWritertFileOutputDelimited_8
										.setSeparator(csvSettings_tFileOutputDelimited_8
												.getFieldDelim());

								if (!csvSettings_tFileOutputDelimited_8
										.isUseCRLFRecordDelimiter()
										&& csvSettings_tFileOutputDelimited_8
												.getRowDelim() != '\r'
										&& csvSettings_tFileOutputDelimited_8
												.getRowDelim() != '\n') {
									CsvWritertFileOutputDelimited_8
											.setLineEnd(""
													+ csvSettings_tFileOutputDelimited_8
															.getRowDelim());
								}

								if (filetFileOutputDelimited_8.length() == 0) {

									headColutFileOutputDelimited_8[0] = "ccodep";

									headColutFileOutputDelimited_8[1] = "ccodir";

									headColutFileOutputDelimited_8[2] = "ccocom";

									headColutFileOutputDelimited_8[3] = "invar";

									headColutFileOutputDelimited_8[4] = "janbil";

									headColutFileOutputDelimited_8[5] = "dnupev";

									headColutFileOutputDelimited_8[6] = "article";

									headColutFileOutputDelimited_8[7] = "vlbaicom";

									headColutFileOutputDelimited_8[8] = "vlbaiacom";

									headColutFileOutputDelimited_8[9] = "bipevlacom";

									headColutFileOutputDelimited_8[10] = "vlbaidept";

									headColutFileOutputDelimited_8[11] = "vlbaiadept";

									headColutFileOutputDelimited_8[12] = "bipevladept";

									headColutFileOutputDelimited_8[13] = "vlbaireg";

									headColutFileOutputDelimited_8[14] = "vlbaiareg";

									headColutFileOutputDelimited_8[15] = "bipevlareg";

									headColutFileOutputDelimited_8[16] = "vlbaiepci";

									headColutFileOutputDelimited_8[17] = "vlbaiaepci";

									headColutFileOutputDelimited_8[18] = "bipevlaepci";

									headColutFileOutputDelimited_8[19] = "bateom";

									headColutFileOutputDelimited_8[20] = "baomec";

									CsvWritertFileOutputDelimited_8
											.writeNext(headColutFileOutputDelimited_8);
									CsvWritertFileOutputDelimited_8.flush();

								}

								CsvWritertFileOutputDelimited_8
										.setEscapeChar(csvSettings_tFileOutputDelimited_8
												.getEscapeChar());
								CsvWritertFileOutputDelimited_8
										.setQuoteChar(csvSettings_tFileOutputDelimited_8
												.getTextEnclosure());
								CsvWritertFileOutputDelimited_8
										.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

								/**
								 * [tFileOutputDelimited_8 begin ] stop
								 */

								/**
								 * [tMap_8 begin ] start
								 */

								ok_Hash.put("tMap_8", false);
								start_Hash.put("tMap_8",
										System.currentTimeMillis());
								currentComponent = "tMap_8";

								int tos_count_tMap_8 = 0;

								// ###############################
								// # Lookup's keys initialization
								// ###############################

								// ###############################
								// # Vars initialization
								class Var__tMap_8__Struct {
								}
								Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
								// ###############################

								// ###############################
								// # Outputs initialization
								r4batinewStruct r4batinew_tmp = new r4batinewStruct();
								// ###############################

								/**
								 * [tMap_8 begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_9 begin ] start
								 */

								ok_Hash.put("tFileOutputDelimited_9", false);
								start_Hash.put("tFileOutputDelimited_9",
										System.currentTimeMillis());
								currentComponent = "tFileOutputDelimited_9";

								int tos_count_tFileOutputDelimited_9 = 0;

								String fileName_tFileOutputDelimited_9 = "";
								fileName_tFileOutputDelimited_9 = (new java.io.File(
										context.target_path
												+ "bati_article40.csv"))
										.getAbsolutePath().replace("\\", "/");
								String fullName_tFileOutputDelimited_9 = null;
								String extension_tFileOutputDelimited_9 = null;
								String directory_tFileOutputDelimited_9 = null;
								if ((fileName_tFileOutputDelimited_9
										.indexOf("/") != -1)) {
									if (fileName_tFileOutputDelimited_9
											.lastIndexOf(".") < fileName_tFileOutputDelimited_9
											.lastIndexOf("/")) {
										fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
										extension_tFileOutputDelimited_9 = "";
									} else {
										fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
												.substring(
														0,
														fileName_tFileOutputDelimited_9
																.lastIndexOf("."));
										extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
												.substring(fileName_tFileOutputDelimited_9
														.lastIndexOf("."));
									}
									directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
											.substring(0,
													fileName_tFileOutputDelimited_9
															.lastIndexOf("/"));
								} else {
									if (fileName_tFileOutputDelimited_9
											.lastIndexOf(".") != -1) {
										fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
												.substring(
														0,
														fileName_tFileOutputDelimited_9
																.lastIndexOf("."));
										extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
												.substring(fileName_tFileOutputDelimited_9
														.lastIndexOf("."));
									} else {
										fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
										extension_tFileOutputDelimited_9 = "";
									}
									directory_tFileOutputDelimited_9 = "";
								}
								boolean isFileGenerated_tFileOutputDelimited_9 = true;
								java.io.File filetFileOutputDelimited_9 = new java.io.File(
										fileName_tFileOutputDelimited_9);
								globalMap.put(
										"tFileOutputDelimited_9_FILE_NAME",
										fileName_tFileOutputDelimited_9);

								String[] headColutFileOutputDelimited_9 = new String[46];
								class CSVBasicSet_tFileOutputDelimited_9 {
									private char field_Delim;
									private char row_Delim;
									private char escape;
									private char textEnclosure;
									private boolean useCRLFRecordDelimiter;

									public boolean isUseCRLFRecordDelimiter() {
										return useCRLFRecordDelimiter;
									}

									public void setFieldSeparator(
											String fieldSep)
											throws IllegalArgumentException {
										char field_Delim_tFileOutputDelimited_9[] = null;

										// support passing value (property:
										// Field Separator) by 'context.fs' or
										// 'globalMap.get("fs")'.
										if (fieldSep.length() > 0) {
											field_Delim_tFileOutputDelimited_9 = fieldSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Field Separator must be assigned a char.");
										}
										this.field_Delim = field_Delim_tFileOutputDelimited_9[0];
									}

									public char getFieldDelim() {
										if (this.field_Delim == 0) {
											setFieldSeparator(";");
										}
										return this.field_Delim;
									}

									public void setRowSeparator(String rowSep) {
										if ("\r\n".equals(rowSep)) {
											useCRLFRecordDelimiter = true;
											return;
										}
										char row_DelimtFileOutputDelimited_9[] = null;

										// support passing value (property: Row
										// Separator) by 'context.rs' or
										// 'globalMap.get("rs")'.
										if (rowSep.length() > 0) {
											row_DelimtFileOutputDelimited_9 = rowSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Row Separator must be assigned a char.");
										}
										this.row_Delim = row_DelimtFileOutputDelimited_9[0];
									}

									public char getRowDelim() {
										if (this.row_Delim == 0) {
											setRowSeparator("\n");
										}
										return this.row_Delim;
									}

									public void setEscapeAndTextEnclosure(
											String strEscape,
											String strTextEnclosure)
											throws IllegalArgumentException {
										if (strEscape.length() <= 0) {
											throw new IllegalArgumentException(
													"Escape Char must be assigned a char.");
										}

										if ("".equals(strTextEnclosure))
											strTextEnclosure = "\0";
										char textEnclosure_tFileOutputDelimited_9[] = null;

										if (strTextEnclosure.length() > 0) {
											textEnclosure_tFileOutputDelimited_9 = strTextEnclosure
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Text Enclosure must be assigned a char.");
										}

										this.textEnclosure = textEnclosure_tFileOutputDelimited_9[0];

										if (("\\").equals(strEscape)) {
											this.escape = '\\';
										} else if (strEscape
												.equals(strTextEnclosure)) {
											this.escape = this.textEnclosure;
										} else {
											// the default escape mode is double
											// escape
											this.escape = this.textEnclosure;
										}

									}

									public char getEscapeChar() {
										return (char) this.escape;
									}

									public char getTextEnclosure() {
										return this.textEnclosure;
									}
								}

								int nb_line_tFileOutputDelimited_9 = 0;
								int splitEvery_tFileOutputDelimited_9 = 1000;
								int splitedFileNo_tFileOutputDelimited_9 = 0;
								int currentRow_tFileOutputDelimited_9 = 0;

								CSVBasicSet_tFileOutputDelimited_9 csvSettings_tFileOutputDelimited_9 = new CSVBasicSet_tFileOutputDelimited_9();
								csvSettings_tFileOutputDelimited_9
										.setFieldSeparator(";");
								csvSettings_tFileOutputDelimited_9
										.setRowSeparator("\n");
								csvSettings_tFileOutputDelimited_9
										.setEscapeAndTextEnclosure("\"", "\"");
								// create directory only if not exists
								if (directory_tFileOutputDelimited_9 != null
										&& directory_tFileOutputDelimited_9
												.trim().length() != 0) {
									java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
											directory_tFileOutputDelimited_9);
									if (!dir_tFileOutputDelimited_9.exists()) {
										dir_tFileOutputDelimited_9.mkdirs();
									}
								}
								com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_9 = null;
								try {
									CsvWritertFileOutputDelimited_9 = new com.talend.csv.CSVWriter(
											new java.io.BufferedWriter(
													new java.io.OutputStreamWriter(
															new java.io.FileOutputStream(
																	fileName_tFileOutputDelimited_9,
																	false),
															"UTF-8")));
									CsvWritertFileOutputDelimited_9
											.setSeparator(csvSettings_tFileOutputDelimited_9
													.getFieldDelim());

									if (!csvSettings_tFileOutputDelimited_9
											.isUseCRLFRecordDelimiter()
											&& csvSettings_tFileOutputDelimited_9
													.getRowDelim() != '\r'
											&& csvSettings_tFileOutputDelimited_9
													.getRowDelim() != '\n') {
										CsvWritertFileOutputDelimited_9
												.setLineEnd(""
														+ csvSettings_tFileOutputDelimited_9
																.getRowDelim());
									}

									if (filetFileOutputDelimited_9.length() == 0) {

										headColutFileOutputDelimited_9[0] = "ccodep";

										headColutFileOutputDelimited_9[1] = "ccodir";

										headColutFileOutputDelimited_9[2] = "ccocom";

										headColutFileOutputDelimited_9[3] = "invar";

										headColutFileOutputDelimited_9[4] = "dnupev";

										headColutFileOutputDelimited_9[5] = "article";

										headColutFileOutputDelimited_9[6] = "dnudes";

										headColutFileOutputDelimited_9[7] = "cconad1";

										headColutFileOutputDelimited_9[8] = "dsueic1";

										headColutFileOutputDelimited_9[9] = "dcimei1";

										headColutFileOutputDelimited_9[10] = "cconad2";

										headColutFileOutputDelimited_9[11] = "dsueic2";

										headColutFileOutputDelimited_9[12] = "dcimei2";

										headColutFileOutputDelimited_9[13] = "cconad3";

										headColutFileOutputDelimited_9[14] = "dsueic3";

										headColutFileOutputDelimited_9[15] = "dcimei3";

										headColutFileOutputDelimited_9[16] = "cconad4";

										headColutFileOutputDelimited_9[17] = "dsueic4";

										headColutFileOutputDelimited_9[18] = "dcimei4";

										headColutFileOutputDelimited_9[19] = "geaulc";

										headColutFileOutputDelimited_9[20] = "gelelc";

										headColutFileOutputDelimited_9[21] = "gesclc";

										headColutFileOutputDelimited_9[22] = "ggazlc";

										headColutFileOutputDelimited_9[23] = "gasclc";

										headColutFileOutputDelimited_9[24] = "gchclc";

										headColutFileOutputDelimited_9[25] = "gvorlc";

										headColutFileOutputDelimited_9[26] = "gteglc";

										headColutFileOutputDelimited_9[27] = "dnbbai";

										headColutFileOutputDelimited_9[28] = "dnbdou";

										headColutFileOutputDelimited_9[29] = "dnblav";

										headColutFileOutputDelimited_9[30] = "dnbwc";

										headColutFileOutputDelimited_9[31] = "deqdha";

										headColutFileOutputDelimited_9[32] = "dnbppr";

										headColutFileOutputDelimited_9[33] = "dnbsam";

										headColutFileOutputDelimited_9[34] = "dnbcha";

										headColutFileOutputDelimited_9[35] = "dnbcu8";

										headColutFileOutputDelimited_9[36] = "dnbcu9";

										headColutFileOutputDelimited_9[37] = "dnbsea";

										headColutFileOutputDelimited_9[38] = "dnbann";

										headColutFileOutputDelimited_9[39] = "dnbpdc";

										headColutFileOutputDelimited_9[40] = "dsupdc";

										headColutFileOutputDelimited_9[41] = "dmatgm";

										headColutFileOutputDelimited_9[42] = "dmatto";

										headColutFileOutputDelimited_9[43] = "jannat";

										headColutFileOutputDelimited_9[44] = "detent";

										headColutFileOutputDelimited_9[45] = "dnbniv";

										CsvWritertFileOutputDelimited_9
												.writeNext(headColutFileOutputDelimited_9);
										CsvWritertFileOutputDelimited_9.flush();

									}

									CsvWritertFileOutputDelimited_9
											.setEscapeChar(csvSettings_tFileOutputDelimited_9
													.getEscapeChar());
									CsvWritertFileOutputDelimited_9
											.setQuoteChar(csvSettings_tFileOutputDelimited_9
													.getTextEnclosure());
									CsvWritertFileOutputDelimited_9
											.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

									/**
									 * [tFileOutputDelimited_9 begin ] stop
									 */

									/**
									 * [tMap_9 begin ] start
									 */

									ok_Hash.put("tMap_9", false);
									start_Hash.put("tMap_9",
											System.currentTimeMillis());
									currentComponent = "tMap_9";

									int tos_count_tMap_9 = 0;

									// ###############################
									// # Lookup's keys initialization
									// ###############################

									// ###############################
									// # Vars initialization
									class Var__tMap_9__Struct {
									}
									Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
									// ###############################

									// ###############################
									// # Outputs initialization
									r5batinewStruct r5batinew_tmp = new r5batinewStruct();
									// ###############################

									/**
									 * [tMap_9 begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_10 begin ] start
									 */

									ok_Hash.put("tFileOutputDelimited_10",
											false);
									start_Hash.put("tFileOutputDelimited_10",
											System.currentTimeMillis());
									currentComponent = "tFileOutputDelimited_10";

									int tos_count_tFileOutputDelimited_10 = 0;

									String fileName_tFileOutputDelimited_10 = "";
									fileName_tFileOutputDelimited_10 = (new java.io.File(
											context.target_path
													+ "bati_article50.csv"))
											.getAbsolutePath().replace("\\",
													"/");
									String fullName_tFileOutputDelimited_10 = null;
									String extension_tFileOutputDelimited_10 = null;
									String directory_tFileOutputDelimited_10 = null;
									if ((fileName_tFileOutputDelimited_10
											.indexOf("/") != -1)) {
										if (fileName_tFileOutputDelimited_10
												.lastIndexOf(".") < fileName_tFileOutputDelimited_10
												.lastIndexOf("/")) {
											fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
											extension_tFileOutputDelimited_10 = "";
										} else {
											fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
													.substring(
															0,
															fileName_tFileOutputDelimited_10
																	.lastIndexOf("."));
											extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
													.substring(fileName_tFileOutputDelimited_10
															.lastIndexOf("."));
										}
										directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
												.substring(
														0,
														fileName_tFileOutputDelimited_10
																.lastIndexOf("/"));
									} else {
										if (fileName_tFileOutputDelimited_10
												.lastIndexOf(".") != -1) {
											fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
													.substring(
															0,
															fileName_tFileOutputDelimited_10
																	.lastIndexOf("."));
											extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
													.substring(fileName_tFileOutputDelimited_10
															.lastIndexOf("."));
										} else {
											fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
											extension_tFileOutputDelimited_10 = "";
										}
										directory_tFileOutputDelimited_10 = "";
									}
									boolean isFileGenerated_tFileOutputDelimited_10 = true;
									java.io.File filetFileOutputDelimited_10 = new java.io.File(
											fileName_tFileOutputDelimited_10);
									globalMap
											.put("tFileOutputDelimited_10_FILE_NAME",
													fileName_tFileOutputDelimited_10);

									String[] headColutFileOutputDelimited_10 = new String[14];
									class CSVBasicSet_tFileOutputDelimited_10 {
										private char field_Delim;
										private char row_Delim;
										private char escape;
										private char textEnclosure;
										private boolean useCRLFRecordDelimiter;

										public boolean isUseCRLFRecordDelimiter() {
											return useCRLFRecordDelimiter;
										}

										public void setFieldSeparator(
												String fieldSep)
												throws IllegalArgumentException {
											char field_Delim_tFileOutputDelimited_10[] = null;

											// support passing value (property:
											// Field Separator) by 'context.fs'
											// or 'globalMap.get("fs")'.
											if (fieldSep.length() > 0) {
												field_Delim_tFileOutputDelimited_10 = fieldSep
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Field Separator must be assigned a char.");
											}
											this.field_Delim = field_Delim_tFileOutputDelimited_10[0];
										}

										public char getFieldDelim() {
											if (this.field_Delim == 0) {
												setFieldSeparator(";");
											}
											return this.field_Delim;
										}

										public void setRowSeparator(
												String rowSep) {
											if ("\r\n".equals(rowSep)) {
												useCRLFRecordDelimiter = true;
												return;
											}
											char row_DelimtFileOutputDelimited_10[] = null;

											// support passing value (property:
											// Row Separator) by 'context.rs' or
											// 'globalMap.get("rs")'.
											if (rowSep.length() > 0) {
												row_DelimtFileOutputDelimited_10 = rowSep
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Row Separator must be assigned a char.");
											}
											this.row_Delim = row_DelimtFileOutputDelimited_10[0];
										}

										public char getRowDelim() {
											if (this.row_Delim == 0) {
												setRowSeparator("\n");
											}
											return this.row_Delim;
										}

										public void setEscapeAndTextEnclosure(
												String strEscape,
												String strTextEnclosure)
												throws IllegalArgumentException {
											if (strEscape.length() <= 0) {
												throw new IllegalArgumentException(
														"Escape Char must be assigned a char.");
											}

											if ("".equals(strTextEnclosure))
												strTextEnclosure = "\0";
											char textEnclosure_tFileOutputDelimited_10[] = null;

											if (strTextEnclosure.length() > 0) {
												textEnclosure_tFileOutputDelimited_10 = strTextEnclosure
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Text Enclosure must be assigned a char.");
											}

											this.textEnclosure = textEnclosure_tFileOutputDelimited_10[0];

											if (("\\").equals(strEscape)) {
												this.escape = '\\';
											} else if (strEscape
													.equals(strTextEnclosure)) {
												this.escape = this.textEnclosure;
											} else {
												// the default escape mode is
												// double escape
												this.escape = this.textEnclosure;
											}

										}

										public char getEscapeChar() {
											return (char) this.escape;
										}

										public char getTextEnclosure() {
											return this.textEnclosure;
										}
									}

									int nb_line_tFileOutputDelimited_10 = 0;
									int splitEvery_tFileOutputDelimited_10 = 1000;
									int splitedFileNo_tFileOutputDelimited_10 = 0;
									int currentRow_tFileOutputDelimited_10 = 0;

									CSVBasicSet_tFileOutputDelimited_10 csvSettings_tFileOutputDelimited_10 = new CSVBasicSet_tFileOutputDelimited_10();
									csvSettings_tFileOutputDelimited_10
											.setFieldSeparator(";");
									csvSettings_tFileOutputDelimited_10
											.setRowSeparator("\n");
									csvSettings_tFileOutputDelimited_10
											.setEscapeAndTextEnclosure("\"",
													"\"");
									// create directory only if not exists
									if (directory_tFileOutputDelimited_10 != null
											&& directory_tFileOutputDelimited_10
													.trim().length() != 0) {
										java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
												directory_tFileOutputDelimited_10);
										if (!dir_tFileOutputDelimited_10
												.exists()) {
											dir_tFileOutputDelimited_10
													.mkdirs();
										}
									}
									com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = null;
									try {
										CsvWritertFileOutputDelimited_10 = new com.talend.csv.CSVWriter(
												new java.io.BufferedWriter(
														new java.io.OutputStreamWriter(
																new java.io.FileOutputStream(
																		fileName_tFileOutputDelimited_10,
																		false),
																"UTF-8")));
										CsvWritertFileOutputDelimited_10
												.setSeparator(csvSettings_tFileOutputDelimited_10
														.getFieldDelim());

										if (!csvSettings_tFileOutputDelimited_10
												.isUseCRLFRecordDelimiter()
												&& csvSettings_tFileOutputDelimited_10
														.getRowDelim() != '\r'
												&& csvSettings_tFileOutputDelimited_10
														.getRowDelim() != '\n') {
											CsvWritertFileOutputDelimited_10
													.setLineEnd(""
															+ csvSettings_tFileOutputDelimited_10
																	.getRowDelim());
										}

										if (filetFileOutputDelimited_10
												.length() == 0) {

											headColutFileOutputDelimited_10[0] = "ccodep";

											headColutFileOutputDelimited_10[1] = "ccodir";

											headColutFileOutputDelimited_10[2] = "ccocom";

											headColutFileOutputDelimited_10[3] = "invar";

											headColutFileOutputDelimited_10[4] = "dnupev";

											headColutFileOutputDelimited_10[5] = "article";

											headColutFileOutputDelimited_10[6] = "dnudes";

											headColutFileOutputDelimited_10[7] = "vsupot";

											headColutFileOutputDelimited_10[8] = "vsurz1";

											headColutFileOutputDelimited_10[9] = "vsurz2";

											headColutFileOutputDelimited_10[10] = "vsurz3";

											headColutFileOutputDelimited_10[11] = "vsurzt";

											headColutFileOutputDelimited_10[12] = "vsurb1";

											headColutFileOutputDelimited_10[13] = "vsurb2";

											CsvWritertFileOutputDelimited_10
													.writeNext(headColutFileOutputDelimited_10);
											CsvWritertFileOutputDelimited_10
													.flush();

										}

										CsvWritertFileOutputDelimited_10
												.setEscapeChar(csvSettings_tFileOutputDelimited_10
														.getEscapeChar());
										CsvWritertFileOutputDelimited_10
												.setQuoteChar(csvSettings_tFileOutputDelimited_10
														.getTextEnclosure());
										CsvWritertFileOutputDelimited_10
												.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

										/**
										 * [tFileOutputDelimited_10 begin ] stop
										 */

										/**
										 * [tMap_10 begin ] start
										 */

										ok_Hash.put("tMap_10", false);
										start_Hash.put("tMap_10",
												System.currentTimeMillis());
										currentComponent = "tMap_10";

										int tos_count_tMap_10 = 0;

										// ###############################
										// # Lookup's keys initialization
										// ###############################

										// ###############################
										// # Vars initialization
										class Var__tMap_10__Struct {
										}
										Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
										// ###############################

										// ###############################
										// # Outputs initialization
										r6batinewStruct r6batinew_tmp = new r6batinewStruct();
										// ###############################

										/**
										 * [tMap_10 begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_11 begin ]
										 * start
										 */

										ok_Hash.put("tFileOutputDelimited_11",
												false);
										start_Hash.put(
												"tFileOutputDelimited_11",
												System.currentTimeMillis());
										currentComponent = "tFileOutputDelimited_11";

										int tos_count_tFileOutputDelimited_11 = 0;

										String fileName_tFileOutputDelimited_11 = "";
										fileName_tFileOutputDelimited_11 = (new java.io.File(
												context.target_path
														+ "bati_article60.csv"))
												.getAbsolutePath().replace(
														"\\", "/");
										String fullName_tFileOutputDelimited_11 = null;
										String extension_tFileOutputDelimited_11 = null;
										String directory_tFileOutputDelimited_11 = null;
										if ((fileName_tFileOutputDelimited_11
												.indexOf("/") != -1)) {
											if (fileName_tFileOutputDelimited_11
													.lastIndexOf(".") < fileName_tFileOutputDelimited_11
													.lastIndexOf("/")) {
												fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
												extension_tFileOutputDelimited_11 = "";
											} else {
												fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
														.substring(
																0,
																fileName_tFileOutputDelimited_11
																		.lastIndexOf("."));
												extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
														.substring(fileName_tFileOutputDelimited_11
																.lastIndexOf("."));
											}
											directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
													.substring(
															0,
															fileName_tFileOutputDelimited_11
																	.lastIndexOf("/"));
										} else {
											if (fileName_tFileOutputDelimited_11
													.lastIndexOf(".") != -1) {
												fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
														.substring(
																0,
																fileName_tFileOutputDelimited_11
																		.lastIndexOf("."));
												extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
														.substring(fileName_tFileOutputDelimited_11
																.lastIndexOf("."));
											} else {
												fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
												extension_tFileOutputDelimited_11 = "";
											}
											directory_tFileOutputDelimited_11 = "";
										}
										boolean isFileGenerated_tFileOutputDelimited_11 = true;
										java.io.File filetFileOutputDelimited_11 = new java.io.File(
												fileName_tFileOutputDelimited_11);
										globalMap
												.put("tFileOutputDelimited_11_FILE_NAME",
														fileName_tFileOutputDelimited_11);

										String[] headColutFileOutputDelimited_11 = new String[24];
										class CSVBasicSet_tFileOutputDelimited_11 {
											private char field_Delim;
											private char row_Delim;
											private char escape;
											private char textEnclosure;
											private boolean useCRLFRecordDelimiter;

											public boolean isUseCRLFRecordDelimiter() {
												return useCRLFRecordDelimiter;
											}

											public void setFieldSeparator(
													String fieldSep)
													throws IllegalArgumentException {
												char field_Delim_tFileOutputDelimited_11[] = null;

												// support passing value
												// (property: Field Separator)
												// by 'context.fs' or
												// 'globalMap.get("fs")'.
												if (fieldSep.length() > 0) {
													field_Delim_tFileOutputDelimited_11 = fieldSep
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Field Separator must be assigned a char.");
												}
												this.field_Delim = field_Delim_tFileOutputDelimited_11[0];
											}

											public char getFieldDelim() {
												if (this.field_Delim == 0) {
													setFieldSeparator(";");
												}
												return this.field_Delim;
											}

											public void setRowSeparator(
													String rowSep) {
												if ("\r\n".equals(rowSep)) {
													useCRLFRecordDelimiter = true;
													return;
												}
												char row_DelimtFileOutputDelimited_11[] = null;

												// support passing value
												// (property: Row Separator) by
												// 'context.rs' or
												// 'globalMap.get("rs")'.
												if (rowSep.length() > 0) {
													row_DelimtFileOutputDelimited_11 = rowSep
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Row Separator must be assigned a char.");
												}
												this.row_Delim = row_DelimtFileOutputDelimited_11[0];
											}

											public char getRowDelim() {
												if (this.row_Delim == 0) {
													setRowSeparator("\n");
												}
												return this.row_Delim;
											}

											public void setEscapeAndTextEnclosure(
													String strEscape,
													String strTextEnclosure)
													throws IllegalArgumentException {
												if (strEscape.length() <= 0) {
													throw new IllegalArgumentException(
															"Escape Char must be assigned a char.");
												}

												if ("".equals(strTextEnclosure))
													strTextEnclosure = "\0";
												char textEnclosure_tFileOutputDelimited_11[] = null;

												if (strTextEnclosure.length() > 0) {
													textEnclosure_tFileOutputDelimited_11 = strTextEnclosure
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Text Enclosure must be assigned a char.");
												}

												this.textEnclosure = textEnclosure_tFileOutputDelimited_11[0];

												if (("\\").equals(strEscape)) {
													this.escape = '\\';
												} else if (strEscape
														.equals(strTextEnclosure)) {
													this.escape = this.textEnclosure;
												} else {
													// the default escape mode
													// is double escape
													this.escape = this.textEnclosure;
												}

											}

											public char getEscapeChar() {
												return (char) this.escape;
											}

											public char getTextEnclosure() {
												return this.textEnclosure;
											}
										}

										int nb_line_tFileOutputDelimited_11 = 0;
										int splitEvery_tFileOutputDelimited_11 = 1000;
										int splitedFileNo_tFileOutputDelimited_11 = 0;
										int currentRow_tFileOutputDelimited_11 = 0;

										CSVBasicSet_tFileOutputDelimited_11 csvSettings_tFileOutputDelimited_11 = new CSVBasicSet_tFileOutputDelimited_11();
										csvSettings_tFileOutputDelimited_11
												.setFieldSeparator(";");
										csvSettings_tFileOutputDelimited_11
												.setRowSeparator("\n");
										csvSettings_tFileOutputDelimited_11
												.setEscapeAndTextEnclosure(
														"\"", "\"");
										// create directory only if not exists
										if (directory_tFileOutputDelimited_11 != null
												&& directory_tFileOutputDelimited_11
														.trim().length() != 0) {
											java.io.File dir_tFileOutputDelimited_11 = new java.io.File(
													directory_tFileOutputDelimited_11);
											if (!dir_tFileOutputDelimited_11
													.exists()) {
												dir_tFileOutputDelimited_11
														.mkdirs();
											}
										}
										com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_11 = null;
										try {
											CsvWritertFileOutputDelimited_11 = new com.talend.csv.CSVWriter(
													new java.io.BufferedWriter(
															new java.io.OutputStreamWriter(
																	new java.io.FileOutputStream(
																			fileName_tFileOutputDelimited_11,
																			false),
																	"UTF-8")));
											CsvWritertFileOutputDelimited_11
													.setSeparator(csvSettings_tFileOutputDelimited_11
															.getFieldDelim());

											if (!csvSettings_tFileOutputDelimited_11
													.isUseCRLFRecordDelimiter()
													&& csvSettings_tFileOutputDelimited_11
															.getRowDelim() != '\r'
													&& csvSettings_tFileOutputDelimited_11
															.getRowDelim() != '\n') {
												CsvWritertFileOutputDelimited_11
														.setLineEnd(""
																+ csvSettings_tFileOutputDelimited_11
																		.getRowDelim());
											}

											if (filetFileOutputDelimited_11
													.length() == 0) {

												headColutFileOutputDelimited_11[0] = "ccodep";

												headColutFileOutputDelimited_11[1] = "ccodir";

												headColutFileOutputDelimited_11[2] = "ccocom";

												headColutFileOutputDelimited_11[3] = "invar";

												headColutFileOutputDelimited_11[4] = "dnupev";

												headColutFileOutputDelimited_11[5] = "article";

												headColutFileOutputDelimited_11[6] = "dnudes";

												headColutFileOutputDelimited_11[7] = "dsudep";

												headColutFileOutputDelimited_11[8] = "cconad";

												headColutFileOutputDelimited_11[9] = "asitet";

												headColutFileOutputDelimited_11[10] = "dmatgm";

												headColutFileOutputDelimited_11[11] = "dmatto";

												headColutFileOutputDelimited_11[12] = "detent";

												headColutFileOutputDelimited_11[13] = "geaulc";

												headColutFileOutputDelimited_11[14] = "gelelc";

												headColutFileOutputDelimited_11[15] = "gchclc";

												headColutFileOutputDelimited_11[16] = "dnbbai";

												headColutFileOutputDelimited_11[17] = "dnbdou";

												headColutFileOutputDelimited_11[18] = "dnblav";

												headColutFileOutputDelimited_11[19] = "dnbwc";

												headColutFileOutputDelimited_11[20] = "deqtlc";

												headColutFileOutputDelimited_11[21] = "dcimlc";

												headColutFileOutputDelimited_11[22] = "dcetde";

												headColutFileOutputDelimited_11[23] = "dcspde";

												CsvWritertFileOutputDelimited_11
														.writeNext(headColutFileOutputDelimited_11);
												CsvWritertFileOutputDelimited_11
														.flush();

											}

											CsvWritertFileOutputDelimited_11
													.setEscapeChar(csvSettings_tFileOutputDelimited_11
															.getEscapeChar());
											CsvWritertFileOutputDelimited_11
													.setQuoteChar(csvSettings_tFileOutputDelimited_11
															.getTextEnclosure());
											CsvWritertFileOutputDelimited_11
													.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

											/**
											 * [tFileOutputDelimited_11 begin ]
											 * stop
											 */

											/**
											 * [tMap_11 begin ] start
											 */

											ok_Hash.put("tMap_11", false);
											start_Hash.put("tMap_11",
													System.currentTimeMillis());
											currentComponent = "tMap_11";

											int tos_count_tMap_11 = 0;

											// ###############################
											// # Lookup's keys initialization
											// ###############################

											// ###############################
											// # Vars initialization
											class Var__tMap_11__Struct {
											}
											Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
											// ###############################

											// ###############################
											// # Outputs initialization
											r7batinewStruct r7batinew_tmp = new r7batinewStruct();
											// ###############################

											/**
											 * [tMap_11 begin ] stop
											 */

											/**
											 * [tFileOutputDelimited_12 begin ]
											 * start
											 */

											ok_Hash.put(
													"tFileOutputDelimited_12",
													false);
											start_Hash.put(
													"tFileOutputDelimited_12",
													System.currentTimeMillis());
											currentComponent = "tFileOutputDelimited_12";

											int tos_count_tFileOutputDelimited_12 = 0;

											String fileName_tFileOutputDelimited_12 = "";
											fileName_tFileOutputDelimited_12 = (new java.io.File(
													context.target_path
															+ "bati_article30.csv"))
													.getAbsolutePath().replace(
															"\\", "/");
											String fullName_tFileOutputDelimited_12 = null;
											String extension_tFileOutputDelimited_12 = null;
											String directory_tFileOutputDelimited_12 = null;
											if ((fileName_tFileOutputDelimited_12
													.indexOf("/") != -1)) {
												if (fileName_tFileOutputDelimited_12
														.lastIndexOf(".") < fileName_tFileOutputDelimited_12
														.lastIndexOf("/")) {
													fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
													extension_tFileOutputDelimited_12 = "";
												} else {
													fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
															.substring(
																	0,
																	fileName_tFileOutputDelimited_12
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
															.substring(fileName_tFileOutputDelimited_12
																	.lastIndexOf("."));
												}
												directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
														.substring(
																0,
																fileName_tFileOutputDelimited_12
																		.lastIndexOf("/"));
											} else {
												if (fileName_tFileOutputDelimited_12
														.lastIndexOf(".") != -1) {
													fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
															.substring(
																	0,
																	fileName_tFileOutputDelimited_12
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
															.substring(fileName_tFileOutputDelimited_12
																	.lastIndexOf("."));
												} else {
													fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
													extension_tFileOutputDelimited_12 = "";
												}
												directory_tFileOutputDelimited_12 = "";
											}
											boolean isFileGenerated_tFileOutputDelimited_12 = true;
											java.io.File filetFileOutputDelimited_12 = new java.io.File(
													fileName_tFileOutputDelimited_12);
											globalMap
													.put("tFileOutputDelimited_12_FILE_NAME",
															fileName_tFileOutputDelimited_12);

											String[] headColutFileOutputDelimited_12 = new String[23];
											class CSVBasicSet_tFileOutputDelimited_12 {
												private char field_Delim;
												private char row_Delim;
												private char escape;
												private char textEnclosure;
												private boolean useCRLFRecordDelimiter;

												public boolean isUseCRLFRecordDelimiter() {
													return useCRLFRecordDelimiter;
												}

												public void setFieldSeparator(
														String fieldSep)
														throws IllegalArgumentException {
													char field_Delim_tFileOutputDelimited_12[] = null;

													// support passing value
													// (property: Field
													// Separator) by
													// 'context.fs' or
													// 'globalMap.get("fs")'.
													if (fieldSep.length() > 0) {
														field_Delim_tFileOutputDelimited_12 = fieldSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Field Separator must be assigned a char.");
													}
													this.field_Delim = field_Delim_tFileOutputDelimited_12[0];
												}

												public char getFieldDelim() {
													if (this.field_Delim == 0) {
														setFieldSeparator(";");
													}
													return this.field_Delim;
												}

												public void setRowSeparator(
														String rowSep) {
													if ("\r\n".equals(rowSep)) {
														useCRLFRecordDelimiter = true;
														return;
													}
													char row_DelimtFileOutputDelimited_12[] = null;

													// support passing value
													// (property: Row Separator)
													// by 'context.rs' or
													// 'globalMap.get("rs")'.
													if (rowSep.length() > 0) {
														row_DelimtFileOutputDelimited_12 = rowSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Row Separator must be assigned a char.");
													}
													this.row_Delim = row_DelimtFileOutputDelimited_12[0];
												}

												public char getRowDelim() {
													if (this.row_Delim == 0) {
														setRowSeparator("\n");
													}
													return this.row_Delim;
												}

												public void setEscapeAndTextEnclosure(
														String strEscape,
														String strTextEnclosure)
														throws IllegalArgumentException {
													if (strEscape.length() <= 0) {
														throw new IllegalArgumentException(
																"Escape Char must be assigned a char.");
													}

													if ("".equals(strTextEnclosure))
														strTextEnclosure = "\0";
													char textEnclosure_tFileOutputDelimited_12[] = null;

													if (strTextEnclosure
															.length() > 0) {
														textEnclosure_tFileOutputDelimited_12 = strTextEnclosure
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Text Enclosure must be assigned a char.");
													}

													this.textEnclosure = textEnclosure_tFileOutputDelimited_12[0];

													if (("\\")
															.equals(strEscape)) {
														this.escape = '\\';
													} else if (strEscape
															.equals(strTextEnclosure)) {
														this.escape = this.textEnclosure;
													} else {
														// the default escape
														// mode is double escape
														this.escape = this.textEnclosure;
													}

												}

												public char getEscapeChar() {
													return (char) this.escape;
												}

												public char getTextEnclosure() {
													return this.textEnclosure;
												}
											}

											int nb_line_tFileOutputDelimited_12 = 0;
											int splitEvery_tFileOutputDelimited_12 = 1000;
											int splitedFileNo_tFileOutputDelimited_12 = 0;
											int currentRow_tFileOutputDelimited_12 = 0;

											CSVBasicSet_tFileOutputDelimited_12 csvSettings_tFileOutputDelimited_12 = new CSVBasicSet_tFileOutputDelimited_12();
											csvSettings_tFileOutputDelimited_12
													.setFieldSeparator(";");
											csvSettings_tFileOutputDelimited_12
													.setRowSeparator("\n");
											csvSettings_tFileOutputDelimited_12
													.setEscapeAndTextEnclosure(
															"\"", "\"");
											// create directory only if not
											// exists
											if (directory_tFileOutputDelimited_12 != null
													&& directory_tFileOutputDelimited_12
															.trim().length() != 0) {
												java.io.File dir_tFileOutputDelimited_12 = new java.io.File(
														directory_tFileOutputDelimited_12);
												if (!dir_tFileOutputDelimited_12
														.exists()) {
													dir_tFileOutputDelimited_12
															.mkdirs();
												}
											}
											com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_12 = null;
											try {
												CsvWritertFileOutputDelimited_12 = new com.talend.csv.CSVWriter(
														new java.io.BufferedWriter(
																new java.io.OutputStreamWriter(
																		new java.io.FileOutputStream(
																				fileName_tFileOutputDelimited_12,
																				false),
																		"UTF-8")));
												CsvWritertFileOutputDelimited_12
														.setSeparator(csvSettings_tFileOutputDelimited_12
																.getFieldDelim());

												if (!csvSettings_tFileOutputDelimited_12
														.isUseCRLFRecordDelimiter()
														&& csvSettings_tFileOutputDelimited_12
																.getRowDelim() != '\r'
														&& csvSettings_tFileOutputDelimited_12
																.getRowDelim() != '\n') {
													CsvWritertFileOutputDelimited_12
															.setLineEnd(""
																	+ csvSettings_tFileOutputDelimited_12
																			.getRowDelim());
												}

												if (filetFileOutputDelimited_12
														.length() == 0) {

													headColutFileOutputDelimited_12[0] = "ccodep";

													headColutFileOutputDelimited_12[1] = "ccodir";

													headColutFileOutputDelimited_12[2] = "ccocom";

													headColutFileOutputDelimited_12[3] = "invar";

													headColutFileOutputDelimited_12[4] = "janbil";

													headColutFileOutputDelimited_12[5] = "dnupev";

													headColutFileOutputDelimited_12[6] = "article";

													headColutFileOutputDelimited_12[7] = "dnuexb";

													headColutFileOutputDelimited_12[8] = "ccolloc";

													headColutFileOutputDelimited_12[9] = "pexb";

													headColutFileOutputDelimited_12[10] = "gnextl";

													headColutFileOutputDelimited_12[11] = "jandeb";

													headColutFileOutputDelimited_12[12] = "janimp";

													headColutFileOutputDelimited_12[13] = "vecdif";

													headColutFileOutputDelimited_12[14] = "vecdifa";

													headColutFileOutputDelimited_12[15] = "fcexb";

													headColutFileOutputDelimited_12[16] = "fcexba";

													headColutFileOutputDelimited_12[17] = "rcexba";

													headColutFileOutputDelimited_12[18] = "dvldif2";

													headColutFileOutputDelimited_12[19] = "dvldif2a";

													headColutFileOutputDelimited_12[20] = "fcexb2";

													headColutFileOutputDelimited_12[21] = "fcexba2";

													headColutFileOutputDelimited_12[22] = "rcexba2";

													CsvWritertFileOutputDelimited_12
															.writeNext(headColutFileOutputDelimited_12);
													CsvWritertFileOutputDelimited_12
															.flush();

												}

												CsvWritertFileOutputDelimited_12
														.setEscapeChar(csvSettings_tFileOutputDelimited_12
																.getEscapeChar());
												CsvWritertFileOutputDelimited_12
														.setQuoteChar(csvSettings_tFileOutputDelimited_12
																.getTextEnclosure());
												CsvWritertFileOutputDelimited_12
														.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

												/**
												 * [tFileOutputDelimited_12
												 * begin ] stop
												 */

												/**
												 * [tMap_12 begin ] start
												 */

												ok_Hash.put("tMap_12", false);
												start_Hash
														.put("tMap_12",
																System.currentTimeMillis());
												currentComponent = "tMap_12";

												int tos_count_tMap_12 = 0;

												// ###############################
												// # Lookup's keys
												// initialization
												// ###############################

												// ###############################
												// # Vars initialization
												class Var__tMap_12__Struct {
												}
												Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
												// ###############################

												// ###############################
												// # Outputs initialization
												r8batinewStruct r8batinew_tmp = new r8batinewStruct();
												// ###############################

												/**
												 * [tMap_12 begin ] stop
												 */

												/**
												 * [tFileInputMSPositional_1
												 * begin ] start
												 */

												ok_Hash.put(
														"tFileInputMSPositional_1",
														false);
												start_Hash
														.put("tFileInputMSPositional_1",
																System.currentTimeMillis());
												currentComponent = "tFileInputMSPositional_1";

												int tos_count_tFileInputMSPositional_1 = 0;

												class AdvancedPositionalParser_tFileInputMSPositional_1 {
													private String headerValue;
													private String connName;
													private boolean hasStar = false;
													private boolean checkRowSize = false;
													private boolean trimAll = false;
													private String pattern;
													private int[] begins;
													private int[] ends;
													private int[] sizes;
													private String padding;
													private String alignment;
													private int minimumSize = 0;
													private int numberOfFields = 0;

													public AdvancedPositionalParser_tFileInputMSPositional_1(
															String connName,
															String headerValue,
															String pattern,
															boolean checkRowSize,
															boolean trimAll)
															throws java.lang.Exception {
														if (connName == null
																|| headerValue == null
																|| pattern == null)
															throw new java.lang.RuntimeException(
																	"invalid connName, headerValue, or pattern");
														this.connName = connName;
														this.headerValue = headerValue;
														this.pattern = pattern;
														this.checkRowSize = checkRowSize;
														this.trimAll = trimAll;
														this.setPattern(pattern);
													}

													/**
													 * this function returns
													 * true if the header passed
													 * is the same as the header
													 * of the class
													 */
													public boolean headerMatches(
															String header) {
														return headerValue
																.equals(header);
													}

													/**
													 * this function is used to
													 * set the pattern specified
													 * by user. it also parses
													 * the pattern and
													 * determines where each
													 * column position would
													 * begin and end, and how
													 * many columns does the
													 * pattern have! example:
													 * pattern = "2,4,4,*" this
													 * pattern indicates that
													 * there are 4 columns in
													 * the schema. also
													 * column[1] has size of 2
													 * and it starts from index
													 * 0 to 2. column[2] is from
													 * index 2 to 6, with length
													 * of 4 and so on... note:
													 * star represents the
													 * remaining length, and can
													 * only be used in the last
													 * column
													 */
													public void setPattern(
															String pattern)
															throws java.lang.RuntimeException {
														int beginIndex = 0;
														int endIndex = 0;
														int size = 0;
														String[] patternSplit = pattern
																.split(",");
														begins = new int[patternSplit.length];
														ends = new int[patternSplit.length];
														sizes = new int[patternSplit.length];
														minimumSize = 0;

														for (int i = 0; i < patternSplit.length; i++) {
															numberOfFields++;
															if (("*")
																	.equals(patternSplit[i])) {
																if (i != (patternSplit.length - 1)) { // the
																										// star
																										// can
																										// only
																										// be
																										// used
																										// for
																										// the
																										// size
																										// of
																										// the
																										// last
																										// column
																	throw new java.lang.RuntimeException(
																			"The star (*) in the pattern can only be at the end of the pattern string.");
																} else {
																	hasStar = true;
																	begins[i] = beginIndex;
																	ends[i] = -1;
																	sizes[i] = -1;
																}
															} else {
																try {
																	size = Integer
																			.parseInt(patternSplit[i]);
																} catch (java.lang.Exception e) {
																	throw new java.lang.RuntimeException(
																			"'"
																					+ patternSplit[i]
																					+ "' is not a valid integer value  in the pattern: "
																					+ pattern);
																}
																if (size <= 0) {
																	throw new java.lang.RuntimeException(
																			"'"
																					+ patternSplit[i]
																					+ "' is not a valid integer value  in the pattern: "
																					+ pattern);
																}
																endIndex += size;
																begins[i] = beginIndex;
																ends[i] = endIndex;
																beginIndex += size;
																minimumSize += size;
															}
														}
													}

													/**
													 * this function parses the
													 * row into fields based on
													 * the values of beings and
													 * ends
													 */
													public String[] parseRow(
															String row)
															throws java.lang.Exception {
														String[] fields = new String[numberOfFields];
														if (begins == null
																|| ends == null
																|| numberOfFields > begins.length
																|| numberOfFields > ends.length) { // this
																									// should
																									// never
																									// happen,
																									// unless
																									// outside
																									// code
																									// has
																									// changed
																									// either
																									// numberOfFields,
																									// beings,
																									// ends
															throw new java.lang.Exception(
																	"The PositionalSchema object is not configured correctly. please contact talend support (support@talend.com)");
														}
														if (row != null
																&& row.length() > 0) {
															if (checkRowSize) {
																if (hasStar == false
																		&& row.length() != minimumSize) {
																	throw new java.lang.Exception(
																			"row size does not match the pattern ('"
																					+ pattern
																					+ "'), expected size is "
																					+ minimumSize
																					+ ".row size is: "
																					+ row.length());
																} else if (minimumSize > row
																		.length()) {
																	throw new java.lang.Exception(
																			"row size too small, expected size is "
																					+ minimumSize);
																}
															}
															for (int i = 0; i < numberOfFields; i++) {
																fields[i] = "";
																if (ends[i] == -1) {
																	if (row.length() > begins[i]) {
																		fields[i] = row
																				.substring(begins[i]);
																	}
																} else {
																	if (row.length() > ends[i]) {
																		fields[i] = row
																				.substring(
																						begins[i],
																						ends[i]);
																	} else if (row
																			.length() > begins[i]) {
																		fields[i] = row
																				.substring(begins[i]);
																	}
																}
																if (trimAll) {
																	fields[i] = fields[i]
																			.trim();
																}
															}
														}
														return fields;
													}

													/**
													 * returns the minimum size
													 * required to contain the
													 * record. this value is
													 * driven from the pattern
													 * star at the end of the
													 * pattern does not
													 * accumulate to the size
													 */
													public int getMinimumRowSize() {
														return minimumSize;
													}

													/**
													 * returns the number of
													 * fields specified in the
													 * pattern
													 */
													public int getNumberOfFieldsExpected() {
														return numberOfFields;
													}
												}

												int nb_line_tFileInputMSPositional_1 = 0;
												int nb_line_rejected_tFileInputMSPositional_1 = 0;
												int nb_line_unknownHeader_tFileInputMSPositional_1 = 0;
												int nb_line_parseError_tFileInputMSPositional_1 = 0;

												int skipHeader_tFileInputMSPositional_1 = 3;
												int skipFooter_tFileInputMSPositional_1 = 0;
												int limit_tFileInputMSPositional_1 = -1;

												String rowSeparator_tFileInputMSPositional_1 = "\n";
												if (rowSeparator_tFileInputMSPositional_1
														.length() < 1) {
													throw new java.lang.Exception(
															"Row Separator must include at least one character");
												}

												if (skipFooter_tFileInputMSPositional_1 > 0) {
													java.io.BufferedReader temp_in_tFileInputMSPositional_1 = new java.io.BufferedReader(
															new java.io.InputStreamReader(
																	new java.io.FileInputStream(
																			/**
																			 * Start
																			 * field
																			 * tFileInputMSPositional_1
																			 * :
																			 * FILE_NAME
																			 */
																			context.source_path
																					+ "REVBATI"
																					+ context.extfichier/**
																	 * 
																	 * End field
																	 * tFileInputMSPositional_1
																	 * :FILE_NAME
																	 */
																	), "UTF-8"));
													org.talend.fileprocess.delimited.RowParser temp_reader_tFileInputMSPositional_1 = new org.talend.fileprocess.delimited.RowParser(
															temp_in_tFileInputMSPositional_1,
															"\n", true);
													int available_tFileInputMSPositional_1 = (int) temp_reader_tFileInputMSPositional_1
															.getAvailableRowCount(skipFooter_tFileInputMSPositional_1);
													temp_reader_tFileInputMSPositional_1
															.close();
													temp_in_tFileInputMSPositional_1
															.close();
													temp_reader_tFileInputMSPositional_1 = null;
													temp_in_tFileInputMSPositional_1 = null;
													if (limit_tFileInputMSPositional_1 < 0) {
														limit_tFileInputMSPositional_1 = available_tFileInputMSPositional_1;
													} else {
														limit_tFileInputMSPositional_1 = (limit_tFileInputMSPositional_1 > available_tFileInputMSPositional_1) ? available_tFileInputMSPositional_1
																: limit_tFileInputMSPositional_1;
													}
												}

												java.io.BufferedReader in_tFileInputMSPositional_1 = new java.io.BufferedReader(
														new java.io.InputStreamReader(
																new java.io.FileInputStream(
																		/**
																		 * Start
																		 * field
																		 * tFileInputMSPositional_1
																		 * :
																		 * FILE_NAME
																		 */
																		context.source_path
																				+ "REVBATI"
																				+ context.extfichier/**
																 * 
																 * End field
																 * tFileInputMSPositional_1
																 * :FILE_NAME
																 */
																), "UTF-8"));
												org.talend.fileprocess.delimited.RowParser reader_tFileInputMSPositional_1 = new org.talend.fileprocess.delimited.RowParser(
														in_tFileInputMSPositional_1,
														"\n", true);
												reader_tFileInputMSPositional_1
														.setSafetySwitch(true);
												reader_tFileInputMSPositional_1
														.skipHeaders(skipHeader_tFileInputMSPositional_1);

												AdvancedPositionalParser_tFileInputMSPositional_1 schema_r1bati_tFileInputMSPositional_1 = new AdvancedPositionalParser_tFileInputMSPositional_1(
														"r1bati",
														"00",
														"2,1,3,10,14,2,3,3,2,4,1,2,2,2,5,4,1,5,4,1,4,30,1,1",
														false, true);
												if (schema_r1bati_tFileInputMSPositional_1
														.getNumberOfFieldsExpected() != 24) {
													throw new java.lang.RuntimeException(
															"Number of columns in the schema does not match the pattern specified for the connection 'r1bati' of tFileInputMSPositional_1 component.");
												}
												AdvancedPositionalParser_tFileInputMSPositional_1 schema_r2bati_tFileInputMSPositional_1 = new AdvancedPositionalParser_tFileInputMSPositional_1(
														"r2bati",
														"10",
														"2,1,3,10,14,2,3,1,1,6,8,6,1,1,1,2,3,1,2,9,4,2,9,1,1,8,2,3,1,4,2,1,1,2,8,6,9,4,2,1,1,2,4,4,4",
														false, true);
												if (schema_r2bati_tFileInputMSPositional_1
														.getNumberOfFieldsExpected() != 45) {
													throw new java.lang.RuntimeException(
															"Number of columns in the schema does not match the pattern specified for the connection 'r2bati' of tFileInputMSPositional_1 component.");
												}
												AdvancedPositionalParser_tFileInputMSPositional_1 schema_r3bati_tFileInputMSPositional_1 = new AdvancedPositionalParser_tFileInputMSPositional_1(
														"r3bati",
														"21",
														"2,1,3,10,11,3,2,3,1,1,2,3,3,6,9,9,2,30,1,1,3,32,1,3,1,4,3,1,1,9,3",
														false, true);
												if (schema_r3bati_tFileInputMSPositional_1
														.getNumberOfFieldsExpected() != 31) {
													throw new java.lang.RuntimeException(
															"Number of columns in the schema does not match the pattern specified for the connection 'r3bati' of tFileInputMSPositional_1 component.");
												}
												AdvancedPositionalParser_tFileInputMSPositional_1 schema_r4bati_tFileInputMSPositional_1 = new AdvancedPositionalParser_tFileInputMSPositional_1(
														"r4bati",
														"36",
														"2,1,3,10,11,4,3,2,3,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9",
														false, true);
												if (schema_r4bati_tFileInputMSPositional_1
														.getNumberOfFieldsExpected() != 36) {
													throw new java.lang.RuntimeException(
															"Number of columns in the schema does not match the pattern specified for the connection 'r4bati' of tFileInputMSPositional_1 component.");
												}
												AdvancedPositionalParser_tFileInputMSPositional_1 schema_r5bati_tFileInputMSPositional_1 = new AdvancedPositionalParser_tFileInputMSPositional_1(
														"r5bati",
														"40",
														"2,1,3,10,11,3,2,3,2,6,2,2,6,2,2,6,2,2,6,2,1,1,1,1,1,1,1,1,2,2,2,2,3,2,2,2,2,2,2,2,2,6,2,2,4,1,2",
														false, true);
												if (schema_r5bati_tFileInputMSPositional_1
														.getNumberOfFieldsExpected() != 47) {
													throw new java.lang.RuntimeException(
															"Number of columns in the schema does not match the pattern specified for the connection 'r5bati' of tFileInputMSPositional_1 component.");
												}
												AdvancedPositionalParser_tFileInputMSPositional_1 schema_r6bati_tFileInputMSPositional_1 = new AdvancedPositionalParser_tFileInputMSPositional_1(
														"r6bati",
														"50",
														"2,1,3,10,11,3,2,3,9,9,9,9,9,1,9,9",
														false, true);
												if (schema_r6bati_tFileInputMSPositional_1
														.getNumberOfFieldsExpected() != 16) {
													throw new java.lang.RuntimeException(
															"Number of columns in the schema does not match the pattern specified for the connection 'r6bati' of tFileInputMSPositional_1 component.");
												}
												AdvancedPositionalParser_tFileInputMSPositional_1 schema_r7bati_tFileInputMSPositional_1 = new AdvancedPositionalParser_tFileInputMSPositional_1(
														"r7bati",
														"60",
														"2,1,3,10,11,3,2,3,6,2,6,2,2,1,1,1,1,2,2,2,2,3,2,3,3",
														false, true);
												if (schema_r7bati_tFileInputMSPositional_1
														.getNumberOfFieldsExpected() != 25) {
													throw new java.lang.RuntimeException(
															"Number of columns in the schema does not match the pattern specified for the connection 'r7bati' of tFileInputMSPositional_1 component.");
												}
												AdvancedPositionalParser_tFileInputMSPositional_1 schema_r8bati_tFileInputMSPositional_1 = new AdvancedPositionalParser_tFileInputMSPositional_1(
														"r8bati",
														"30",
														"2,1,3,10,7,4,3,2,3,2,5,2,4,4,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9",
														false, true);
												if (schema_r8bati_tFileInputMSPositional_1
														.getNumberOfFieldsExpected() != 33) {
													throw new java.lang.RuntimeException(
															"Number of columns in the schema does not match the pattern specified for the connection 'r8bati' of tFileInputMSPositional_1 component.");
												}

												String hdrpos_tFileInputMSPositional_1 = "30-32";
												if (hdrpos_tFileInputMSPositional_1
														.indexOf("-") < 0) {
													throw new java.lang.RuntimeException(
															"Please input the header position corretly. for exmaple for first 3 characters enter: '0-3'");
												}
												int hdrStartIndex_tFileInputMSPositional_1 = Integer
														.parseInt(hdrpos_tFileInputMSPositional_1
																.split("-")[0]);
												int hdrEndIndex_tFileInputMSPositional_1 = Integer
														.parseInt(hdrpos_tFileInputMSPositional_1
																.split("-")[1]);
												boolean foundMatchingHeader_tFileInputMSPositional_1 = false;
												String row_tFileInputMSPositional_1 = null;
												String header_tFileInputMSPositional_1 = null;

												while (reader_tFileInputMSPositional_1
														.readRecord()) {
													r1bati = null;
													r2bati = null;
													r3bati = null;
													r4bati = null;
													r5bati = null;
													r6bati = null;
													r7bati = null;
													r8bati = null;
													row2 = null;
													// parse the header record
													// and match with the
													// associated connection(s)
													row_tFileInputMSPositional_1 = reader_tFileInputMSPositional_1
															.getRowRecord();
													foundMatchingHeader_tFileInputMSPositional_1 = false;
													if (row_tFileInputMSPositional_1 != null
															&& row_tFileInputMSPositional_1
																	.length() >= hdrEndIndex_tFileInputMSPositional_1) {
														header_tFileInputMSPositional_1 = row_tFileInputMSPositional_1
																.substring(
																		hdrStartIndex_tFileInputMSPositional_1,
																		hdrEndIndex_tFileInputMSPositional_1)
																.trim();
														if (schema_r1bati_tFileInputMSPositional_1
																.headerMatches(header_tFileInputMSPositional_1)) {
															foundMatchingHeader_tFileInputMSPositional_1 = true;
															r1bati = new r1batiStruct();
															try {
																String[] fields = schema_r1bati_tFileInputMSPositional_1
																		.parseRow(row_tFileInputMSPositional_1);
																r1bati.ccodep = fields[0];
																r1bati.ccodir = fields[1];
																r1bati.ccocom = fields[2];
																r1bati.invar = fields[3];
																r1bati.filler = fields[4];
																r1bati.article = fields[5];
																r1bati.filler1 = fields[6];
																r1bati.ccopre = fields[7];
																r1bati.ccosec = fields[8];
																r1bati.dnupla = fields[9];
																r1bati.filler2 = fields[10];
																r1bati.dnubat = fields[11];
																r1bati.desc = fields[12];
																r1bati.dniv = fields[13];
																r1bati.dpor = fields[14];
																r1bati.ccoriv = fields[15];
																r1bati.filer = fields[16];
																r1bati.ccovoi = fields[17];
																r1bati.dnvoiri = fields[18];
																r1bati.dindic = fields[19];
																r1bati.ccocif = fields[20];
																r1bati.dvoilib = fields[21];
																r1bati.cleinvar = fields[22];
																r1bati.locinc = fields[23];
																fields = null;
															} catch (java.lang.Exception e) {
																r1bati = null;
																nb_line_rejected_tFileInputMSPositional_1++;
																nb_line_parseError_tFileInputMSPositional_1++;
																row2 = new row2Struct();
																row2.errorCode = 1;
																row2.errorMessage = e
																		.getMessage()
																		+ " - Line: "
																		+ tos_count_tFileInputMSPositional_1;
																row2.line = row_tFileInputMSPositional_1;
															} // catch
														} // if header matches
														if (schema_r2bati_tFileInputMSPositional_1
																.headerMatches(header_tFileInputMSPositional_1)) {
															foundMatchingHeader_tFileInputMSPositional_1 = true;
															r2bati = new r2batiStruct();
															try {
																String[] fields = schema_r2bati_tFileInputMSPositional_1
																		.parseRow(row_tFileInputMSPositional_1);
																r2bati.ccodep = fields[0];
																r2bati.ccodir = fields[1];
																r2bati.ccocom = fields[2];
																r2bati.invar = fields[3];
																r2bati.filler = fields[4];
																r2bati.article = fields[5];
																r2bati.filler2 = fields[6];
																r2bati.gpdl = fields[7];
																r2bati.dsrpar = fields[8];
																r2bati.dnupro = fields[9];
																r2bati.jdatat = fields[10];
																r2bati.dnufnl = fields[11];
																r2bati.ccoeva = fields[12];
																r2bati.ccitvl = fields[13];
																r2bati.dteloc = fields[14];
																r2bati.gtauom = fields[15];
																r2bati.dcomrd = fields[16];
																r2bati.ccoplc = fields[17];
																r2bati.cconlc = fields[18];
																r2bati.dvltrt = fields[19];
																r2bati.ccoape = fields[20];
																r2bati.cc48lc = fields[21];
																r2bati.dloy48a = fields[22];
																r2bati.top48a = fields[23];
																r2bati.dnatlc = fields[24];
																r2bati.dnupas = fields[25];
																r2bati.gnexcf = fields[26];
																r2bati.dtaucf = fields[27];
																r2bati.cchpr = fields[28];
																r2bati.jannat = fields[29];
																r2bati.dnbniv = fields[30];
																r2bati.hlmsem = fields[31];
																r2bati.postel = fields[32];
																r2bati.dnatcg = fields[33];
																r2bati.jdatcgl = fields[34];
																r2bati.dnutbx = fields[35];
																r2bati.dvltla = fields[36];
																r2bati.janloc = fields[37];
																r2bati.ccsloc = fields[38];
																r2bati.fburx = fields[39];
																r2bati.gimtom = fields[40];
																r2bati.cbtabt = fields[41];
																r2bati.jdtabt = fields[42];
																r2bati.jrtabt = fields[43];
																r2bati.jacloc = fields[44];
																fields = null;
															} catch (java.lang.Exception e) {
																r2bati = null;
																nb_line_rejected_tFileInputMSPositional_1++;
																nb_line_parseError_tFileInputMSPositional_1++;
																row2 = new row2Struct();
																row2.errorCode = 1;
																row2.errorMessage = e
																		.getMessage()
																		+ " - Line: "
																		+ tos_count_tFileInputMSPositional_1;
																row2.line = row_tFileInputMSPositional_1;
															} // catch
														} // if header matches
														if (schema_r3bati_tFileInputMSPositional_1
																.headerMatches(header_tFileInputMSPositional_1)) {
															foundMatchingHeader_tFileInputMSPositional_1 = true;
															r3bati = new r3batiStruct();
															try {
																String[] fields = schema_r3bati_tFileInputMSPositional_1
																		.parseRow(row_tFileInputMSPositional_1);
																r3bati.ccodep = fields[0];
																r3bati.ccodir = fields[1];
																r3bati.ccocom = fields[2];
																r3bati.invar = fields[3];
																r3bati.filler = fields[4];
																r3bati.dnupev = fields[5];
																r3bati.article = fields[6];
																r3bati.filler2 = fields[7];
																r3bati.ccoaff = fields[8];
																r3bati.ccostb = fields[9];
																r3bati.dcapec = fields[10];
																r3bati.dcetlc = fields[11];
																r3bati.dcsplc = fields[12];
																r3bati.dsupot = fields[13];
																r3bati.dvlper = fields[14];
																r3bati.dvlpera = fields[15];
																r3bati.gnexpl = fields[16];
																r3bati.libocc = fields[17];
																r3bati.ccthp = fields[18];
																r3bati.retimp = fields[19];
																r3bati.dnuref = fields[20];
																r3bati.rclsst = fields[21];
																r3bati.gnidom = fields[22];
																r3bati.dcsglc = fields[23];
																r3bati.ccogrb = fields[24];
																r3bati.cocdi = fields[25];
																r3bati.cosatp = fields[26];
																r3bati.gsatp = fields[27];
																r3bati.clocv = fields[28];
																r3bati.dvltpe = fields[29];
																r3bati.dcralc = fields[30];
																fields = null;
															} catch (java.lang.Exception e) {
																r3bati = null;
																nb_line_rejected_tFileInputMSPositional_1++;
																nb_line_parseError_tFileInputMSPositional_1++;
																row2 = new row2Struct();
																row2.errorCode = 1;
																row2.errorMessage = e
																		.getMessage()
																		+ " - Line: "
																		+ tos_count_tFileInputMSPositional_1;
																row2.line = row_tFileInputMSPositional_1;
															} // catch
														} // if header matches
														if (schema_r4bati_tFileInputMSPositional_1
																.headerMatches(header_tFileInputMSPositional_1)) {
															foundMatchingHeader_tFileInputMSPositional_1 = true;
															r4bati = new r4batiStruct();
															try {
																String[] fields = schema_r4bati_tFileInputMSPositional_1
																		.parseRow(row_tFileInputMSPositional_1);
																r4bati.ccodep = fields[0];
																r4bati.ccodir = fields[1];
																r4bati.ccocom = fields[2];
																r4bati.invar = fields[3];
																r4bati.filler = fields[4];
																r4bati.janbil = fields[5];
																r4bati.dnupev = fields[6];
																r4bati.article = fields[7];
																r4bati.filler2 = fields[8];
																r4bati.vlbaicom = fields[9];
																r4bati.filler3 = fields[10];
																r4bati.vlbaiacom = fields[11];
																r4bati.filler4 = fields[12];
																r4bati.bipevlacom = fields[13];
																r4bati.filler5 = fields[14];
																r4bati.vlbaidept = fields[15];
																r4bati.filler31 = fields[16];
																r4bati.vlbaiadept = fields[17];
																r4bati.filler41 = fields[18];
																r4bati.bipevladept = fields[19];
																r4bati.filler51 = fields[20];
																r4bati.vlbaireg = fields[21];
																r4bati.filler32 = fields[22];
																r4bati.vlbaiareg = fields[23];
																r4bati.filler42 = fields[24];
																r4bati.bipevlareg = fields[25];
																r4bati.filler52 = fields[26];
																r4bati.vlbaiepci = fields[27];
																r4bati.filler33 = fields[28];
																r4bati.vlbaiaepci = fields[29];
																r4bati.filler43 = fields[30];
																r4bati.bipevlaepci = fields[31];
																r4bati.filler53 = fields[32];
																r4bati.bateom = fields[33];
																r4bati.filler6 = fields[34];
																r4bati.baomec = fields[35];
																fields = null;
															} catch (java.lang.Exception e) {
																r4bati = null;
																nb_line_rejected_tFileInputMSPositional_1++;
																nb_line_parseError_tFileInputMSPositional_1++;
																row2 = new row2Struct();
																row2.errorCode = 1;
																row2.errorMessage = e
																		.getMessage()
																		+ " - Line: "
																		+ tos_count_tFileInputMSPositional_1;
																row2.line = row_tFileInputMSPositional_1;
															} // catch
														} // if header matches
														if (schema_r5bati_tFileInputMSPositional_1
																.headerMatches(header_tFileInputMSPositional_1)) {
															foundMatchingHeader_tFileInputMSPositional_1 = true;
															r5bati = new r5batiStruct();
															try {
																String[] fields = schema_r5bati_tFileInputMSPositional_1
																		.parseRow(row_tFileInputMSPositional_1);
																r5bati.ccodep = fields[0];
																r5bati.ccodir = fields[1];
																r5bati.ccocom = fields[2];
																r5bati.invar = fields[3];
																r5bati.filler = fields[4];
																r5bati.dnupev = fields[5];
																r5bati.article = fields[6];
																r5bati.dnudes = fields[7];
																r5bati.cconad1 = fields[8];
																r5bati.dsueic1 = fields[9];
																r5bati.dcimei1 = fields[10];
																r5bati.cconad2 = fields[11];
																r5bati.dsueic2 = fields[12];
																r5bati.dcimei2 = fields[13];
																r5bati.cconad3 = fields[14];
																r5bati.dsueic3 = fields[15];
																r5bati.dcimei3 = fields[16];
																r5bati.cconad4 = fields[17];
																r5bati.dsueic4 = fields[18];
																r5bati.dcimei4 = fields[19];
																r5bati.geaulc = fields[20];
																r5bati.gelelc = fields[21];
																r5bati.gesclc = fields[22];
																r5bati.ggazlc = fields[23];
																r5bati.gasclc = fields[24];
																r5bati.gchclc = fields[25];
																r5bati.gvorlc = fields[26];
																r5bati.gteglc = fields[27];
																r5bati.dnbbai = fields[28];
																r5bati.dnbdou = fields[29];
																r5bati.dnblav = fields[30];
																r5bati.dnbwc = fields[31];
																r5bati.deqdha = fields[32];
																r5bati.dnbppr = fields[33];
																r5bati.dnbsam = fields[34];
																r5bati.dnbcha = fields[35];
																r5bati.dnbcu8 = fields[36];
																r5bati.dnbcu9 = fields[37];
																r5bati.dnbsea = fields[38];
																r5bati.dnbann = fields[39];
																r5bati.dnbpdc = fields[40];
																r5bati.dsupdc = fields[41];
																r5bati.dmatgm = fields[42];
																r5bati.dmatto = fields[43];
																r5bati.jannat = fields[44];
																r5bati.detent = fields[45];
																r5bati.dnbniv = fields[46];
																fields = null;
															} catch (java.lang.Exception e) {
																r5bati = null;
																nb_line_rejected_tFileInputMSPositional_1++;
																nb_line_parseError_tFileInputMSPositional_1++;
																row2 = new row2Struct();
																row2.errorCode = 1;
																row2.errorMessage = e
																		.getMessage()
																		+ " - Line: "
																		+ tos_count_tFileInputMSPositional_1;
																row2.line = row_tFileInputMSPositional_1;
															} // catch
														} // if header matches
														if (schema_r6bati_tFileInputMSPositional_1
																.headerMatches(header_tFileInputMSPositional_1)) {
															foundMatchingHeader_tFileInputMSPositional_1 = true;
															r6bati = new r6batiStruct();
															try {
																String[] fields = schema_r6bati_tFileInputMSPositional_1
																		.parseRow(row_tFileInputMSPositional_1);
																r6bati.ccodep = fields[0];
																r6bati.ccodir = fields[1];
																r6bati.ccocom = fields[2];
																r6bati.invar = fields[3];
																r6bati.fukker = fields[4];
																r6bati.dnupev = fields[5];
																r6bati.article = fields[6];
																r6bati.dnudes = fields[7];
																r6bati.vsupot = fields[8];
																r6bati.vsurz1 = fields[9];
																r6bati.vsurz2 = fields[10];
																r6bati.vsurz3 = fields[11];
																r6bati.vsurzt = fields[12];
																r6bati.filler = fields[13];
																r6bati.vsurb1 = fields[14];
																r6bati.vsurb2 = fields[15];
																fields = null;
															} catch (java.lang.Exception e) {
																r6bati = null;
																nb_line_rejected_tFileInputMSPositional_1++;
																nb_line_parseError_tFileInputMSPositional_1++;
																row2 = new row2Struct();
																row2.errorCode = 1;
																row2.errorMessage = e
																		.getMessage()
																		+ " - Line: "
																		+ tos_count_tFileInputMSPositional_1;
																row2.line = row_tFileInputMSPositional_1;
															} // catch
														} // if header matches
														if (schema_r7bati_tFileInputMSPositional_1
																.headerMatches(header_tFileInputMSPositional_1)) {
															foundMatchingHeader_tFileInputMSPositional_1 = true;
															r7bati = new r7batiStruct();
															try {
																String[] fields = schema_r7bati_tFileInputMSPositional_1
																		.parseRow(row_tFileInputMSPositional_1);
																r7bati.ccodep = fields[0];
																r7bati.ccodir = fields[1];
																r7bati.ccocom = fields[2];
																r7bati.invar = fields[3];
																r7bati.filler = fields[4];
																r7bati.dnupev = fields[5];
																r7bati.article = fields[6];
																r7bati.dnudes = fields[7];
																r7bati.dsudep = fields[8];
																r7bati.cconad = fields[9];
																r7bati.asitet = fields[10];
																r7bati.dmatgm = fields[11];
																r7bati.dmatto = fields[12];
																r7bati.detent = fields[13];
																r7bati.geaulc = fields[14];
																r7bati.gelelc = fields[15];
																r7bati.gchclc = fields[16];
																r7bati.dnbbai = fields[17];
																r7bati.dnbdou = fields[18];
																r7bati.dnblav = fields[19];
																r7bati.dnbwc = fields[20];
																r7bati.deqtlc = fields[21];
																r7bati.dcimlc = fields[22];
																r7bati.dcetde = fields[23];
																r7bati.dcspde = fields[24];
																fields = null;
															} catch (java.lang.Exception e) {
																r7bati = null;
																nb_line_rejected_tFileInputMSPositional_1++;
																nb_line_parseError_tFileInputMSPositional_1++;
																row2 = new row2Struct();
																row2.errorCode = 1;
																row2.errorMessage = e
																		.getMessage()
																		+ " - Line: "
																		+ tos_count_tFileInputMSPositional_1;
																row2.line = row_tFileInputMSPositional_1;
															} // catch
														} // if header matches
														if (schema_r8bati_tFileInputMSPositional_1
																.headerMatches(header_tFileInputMSPositional_1)) {
															foundMatchingHeader_tFileInputMSPositional_1 = true;
															r8bati = new r8batiStruct();
															try {
																String[] fields = schema_r8bati_tFileInputMSPositional_1
																		.parseRow(row_tFileInputMSPositional_1);
																r8bati.ccodep = fields[0];
																r8bati.ccodir = fields[1];
																r8bati.ccocom = fields[2];
																r8bati.invar = fields[3];
																r8bati.filler = fields[4];
																r8bati.janbil = fields[5];
																r8bati.dnupev = fields[6];
																r8bati.article = fields[7];
																r8bati.dnuexb = fields[8];
																r8bati.ccolloc = fields[9];
																r8bati.pexb = fields[10];
																r8bati.gnextl = fields[11];
																r8bati.jandeb = fields[12];
																r8bati.janimp = fields[13];
																r8bati.vecdif = fields[14];
																r8bati.filler2 = fields[15];
																r8bati.vecdifa = fields[16];
																r8bati.filler3 = fields[17];
																r8bati.fcexb = fields[18];
																r8bati.filler4 = fields[19];
																r8bati.fcexba = fields[20];
																r8bati.filler5 = fields[21];
																r8bati.rcexba = fields[22];
																r8bati.filler7 = fields[23];
																r8bati.dvldif2 = fields[24];
																r8bati.filler6 = fields[25];
																r8bati.dvldif2a = fields[26];
																r8bati.filler8 = fields[27];
																r8bati.fcexb2 = fields[28];
																r8bati.filler9 = fields[29];
																r8bati.fcexba2 = fields[30];
																r8bati.fukker = fields[31];
																r8bati.rcexba2 = fields[32];
																fields = null;
															} catch (java.lang.Exception e) {
																r8bati = null;
																nb_line_rejected_tFileInputMSPositional_1++;
																nb_line_parseError_tFileInputMSPositional_1++;
																row2 = new row2Struct();
																row2.errorCode = 1;
																row2.errorMessage = e
																		.getMessage()
																		+ " - Line: "
																		+ tos_count_tFileInputMSPositional_1;
																row2.line = row_tFileInputMSPositional_1;
															} // catch
														} // if header matches
														if (foundMatchingHeader_tFileInputMSPositional_1 == false) {
															nb_line_rejected_tFileInputMSPositional_1++;
															nb_line_unknownHeader_tFileInputMSPositional_1++;
															row2 = new row2Struct();
															row2.errorCode = 2;
															row2.errorMessage = "Unknown header value '"
																	+ header_tFileInputMSPositional_1
																	+ "'";
															row2.line = row_tFileInputMSPositional_1;
														}
													}

													/**
													 * [tFileInputMSPositional_1
													 * begin ] stop
													 */
													/**
													 * [tFileInputMSPositional_1
													 * main ] start
													 */

													currentComponent = "tFileInputMSPositional_1";

													tos_count_tFileInputMSPositional_1++;

													/**
													 * [tFileInputMSPositional_1
													 * main ] stop
													 */
													// Start of branch "row2"
													if (row2 != null) {

														/**
														 * [tLogRow_1 main ]
														 * start
														 */

														currentComponent = "tLogRow_1";

														// /////////////////////

														strBuffer_tLogRow_1 = new StringBuilder();

														if (row2.errorCode != null) { //

															strBuffer_tLogRow_1
																	.append(String
																			.valueOf(row2.errorCode));

														} //

														strBuffer_tLogRow_1
																.append("|");

														if (row2.errorMessage != null) { //

															strBuffer_tLogRow_1
																	.append(String
																			.valueOf(row2.errorMessage));

														} //

														strBuffer_tLogRow_1
																.append("|");

														if (row2.line != null) { //

															strBuffer_tLogRow_1
																	.append(String
																			.valueOf(row2.line));

														} //

														if (globalMap
																.get("tLogRow_CONSOLE") != null) {
															consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
																	.get("tLogRow_CONSOLE");
														} else {
															consoleOut_tLogRow_1 = new java.io.PrintStream(
																	new java.io.BufferedOutputStream(
																			System.out));
															globalMap
																	.put("tLogRow_CONSOLE",
																			consoleOut_tLogRow_1);
														}

														consoleOut_tLogRow_1
																.println(strBuffer_tLogRow_1
																		.toString());
														consoleOut_tLogRow_1
																.flush();
														nb_line_tLogRow_1++;
														// ////

														// ////

														// /////////////////////

														tos_count_tLogRow_1++;

														/**
														 * [tLogRow_1 main ]
														 * stop
														 */

													} // End of branch "row2"

													// Start of branch "r1bati"
													if (r1bati != null) {

														/**
														 * [tMap_5 main ] start
														 */

														currentComponent = "tMap_5";

														boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_5 = false;
														boolean mainRowRejected_tMap_5 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_5__Struct Var = Var__tMap_5;
															Var.code_insee = Relational
																	.ISNULL(r1bati.ccopre)
																	|| ("").equals(r1bati.ccopre)
																	|| ("000")
																			.equals(r1bati.ccopre) ? r1bati.ccocom
																	: r1bati.ccopre;// ###############################
															// ###############################
															// # Output tables

															r1batinew = null;

															// # Output table :
															// 'r1batinew'
															r1batinew_tmp.id_parc = r1bati.ccodep
																	+ Var.code_insee
																	+ r1bati.ccosec
																	+ r1bati.dnupla;
															r1batinew_tmp.ccodep = r1bati.ccodep;
															r1batinew_tmp.ccodir = r1bati.ccodir;
															r1batinew_tmp.ccocom = r1bati.ccocom;
															r1batinew_tmp.invar = r1bati.invar;
															r1batinew_tmp.article = r1bati.article;
															r1batinew_tmp.ccopre = r1bati.ccopre;
															r1batinew_tmp.ccosec = r1bati.ccosec;
															r1batinew_tmp.dnupla = r1bati.dnupla;
															r1batinew_tmp.dnubat = r1bati.dnubat;
															r1batinew_tmp.desc = r1bati.desc;
															r1batinew_tmp.dniv = r1bati.dniv;
															r1batinew_tmp.dpor = r1bati.dpor;
															r1batinew_tmp.ccoriv = r1bati.ccoriv;
															r1batinew_tmp.ccovoi = r1bati.ccovoi;
															r1batinew_tmp.dnvoiri = r1bati.dnvoiri;
															r1batinew_tmp.dindic = r1bati.dindic;
															r1batinew_tmp.ccocif = r1bati.ccocif;
															r1batinew_tmp.dvoilib = r1bati.dvoilib;
															r1batinew_tmp.cleinvar = r1bati.cleinvar;
															r1batinew_tmp.locinc = r1bati.locinc;
															r1batinew = r1batinew_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_5 = false;

														tos_count_tMap_5++;

														/**
														 * [tMap_5 main ] stop
														 */
														// Start of branch
														// "r1batinew"
														if (r1batinew != null) {

															/**
															 * [
															 * tFileOutputDelimited_1
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_1";

															String[] rowtFileOutputDelimited_1 = new String[21];

															rowtFileOutputDelimited_1[0] = r1batinew.id_parc == null ? ""
																	: r1batinew.id_parc;

															rowtFileOutputDelimited_1[1] = r1batinew.ccodep == null ? ""
																	: r1batinew.ccodep;

															rowtFileOutputDelimited_1[2] = r1batinew.ccodir == null ? ""
																	: r1batinew.ccodir;

															rowtFileOutputDelimited_1[3] = r1batinew.ccocom == null ? ""
																	: r1batinew.ccocom;

															rowtFileOutputDelimited_1[4] = r1batinew.invar == null ? ""
																	: r1batinew.invar;

															rowtFileOutputDelimited_1[5] = r1batinew.article == null ? ""
																	: r1batinew.article;

															rowtFileOutputDelimited_1[6] = r1batinew.ccopre == null ? ""
																	: r1batinew.ccopre;

															rowtFileOutputDelimited_1[7] = r1batinew.ccosec == null ? ""
																	: r1batinew.ccosec;

															rowtFileOutputDelimited_1[8] = r1batinew.dnupla == null ? ""
																	: r1batinew.dnupla;

															rowtFileOutputDelimited_1[9] = r1batinew.dnubat == null ? ""
																	: r1batinew.dnubat;

															rowtFileOutputDelimited_1[10] = r1batinew.desc == null ? ""
																	: r1batinew.desc;

															rowtFileOutputDelimited_1[11] = r1batinew.dniv == null ? ""
																	: r1batinew.dniv;

															rowtFileOutputDelimited_1[12] = r1batinew.dpor == null ? ""
																	: r1batinew.dpor;

															rowtFileOutputDelimited_1[13] = r1batinew.ccoriv == null ? ""
																	: r1batinew.ccoriv;

															rowtFileOutputDelimited_1[14] = r1batinew.ccovoi == null ? ""
																	: r1batinew.ccovoi;

															rowtFileOutputDelimited_1[15] = r1batinew.dnvoiri == null ? ""
																	: r1batinew.dnvoiri;

															rowtFileOutputDelimited_1[16] = r1batinew.dindic == null ? ""
																	: r1batinew.dindic;

															rowtFileOutputDelimited_1[17] = r1batinew.ccocif == null ? ""
																	: r1batinew.ccocif;

															rowtFileOutputDelimited_1[18] = r1batinew.dvoilib == null ? ""
																	: r1batinew.dvoilib;

															rowtFileOutputDelimited_1[19] = r1batinew.cleinvar == null ? ""
																	: r1batinew.cleinvar;

															rowtFileOutputDelimited_1[20] = r1batinew.locinc == null ? ""
																	: r1batinew.locinc;

															nb_line_tFileOutputDelimited_1++;
															CsvWritertFileOutputDelimited_1
																	.writeNext(rowtFileOutputDelimited_1);

															tos_count_tFileOutputDelimited_1++;

															/**
															 * [
															 * tFileOutputDelimited_1
															 * main ] stop
															 */

														} // End of branch
															// "r1batinew"

													} // End of branch "r1bati"

													// Start of branch "r2bati"
													if (r2bati != null) {

														/**
														 * [tMap_6 main ] start
														 */

														currentComponent = "tMap_6";

														boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_6 = false;
														boolean mainRowRejected_tMap_6 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
															// ###############################
															// # Output tables

															r2batinew = null;

															// # Output table :
															// 'r2batinew'
															r2batinew_tmp.ccodep = r2bati.ccodep;
															r2batinew_tmp.ccodir = r2bati.ccodir;
															r2batinew_tmp.ccocom = r2bati.ccocom;
															r2batinew_tmp.invar = r2bati.invar;
															r2batinew_tmp.article = r2bati.article;
															r2batinew_tmp.gpdl = r2bati.gpdl;
															r2batinew_tmp.dsrpar = r2bati.dsrpar;
															r2batinew_tmp.dnupro = r2bati.dnupro;
															r2batinew_tmp.jdatat = r2bati.jdatat;
															r2batinew_tmp.dnufnl = r2bati.dnufnl;
															r2batinew_tmp.ccoeva = r2bati.ccoeva;
															r2batinew_tmp.ccitvl = r2bati.ccitvl;
															r2batinew_tmp.dteloc = r2bati.dteloc;
															r2batinew_tmp.gtauom = r2bati.gtauom;
															r2batinew_tmp.dcomrd = r2bati.dcomrd;
															r2batinew_tmp.ccoplc = r2bati.ccoplc;
															r2batinew_tmp.cconlc = r2bati.cconlc;
															r2batinew_tmp.dvltrt = r2bati.dvltrt;
															r2batinew_tmp.ccoape = r2bati.ccoape;
															r2batinew_tmp.cc48lc = r2bati.cc48lc;
															r2batinew_tmp.dloy48a = r2bati.dloy48a;
															r2batinew_tmp.top48a = r2bati.top48a;
															r2batinew_tmp.dnatlc = r2bati.dnatlc;
															r2batinew_tmp.dnupas = r2bati.dnupas;
															r2batinew_tmp.gnexcf = r2bati.gnexcf;
															r2batinew_tmp.dtaucf = r2bati.dtaucf;
															r2batinew_tmp.cchpr = r2bati.cchpr;
															r2batinew_tmp.jannat = r2bati.jannat;
															r2batinew_tmp.dnbniv = r2bati.dnbniv;
															r2batinew_tmp.hlmsem = r2bati.hlmsem;
															r2batinew_tmp.postel = r2bati.postel;
															r2batinew_tmp.dnatcg = r2bati.dnatcg;
															r2batinew_tmp.jdatcgl = r2bati.jdatcgl;
															r2batinew_tmp.dnutbx = r2bati.dnutbx;
															r2batinew_tmp.dvltla = r2bati.dvltla;
															r2batinew_tmp.janloc = r2bati.janloc;
															r2batinew_tmp.ccsloc = r2bati.ccsloc;
															r2batinew_tmp.fburx = r2bati.fburx;
															r2batinew_tmp.gimtom = r2bati.gimtom;
															r2batinew_tmp.cbtabt = r2bati.cbtabt;
															r2batinew_tmp.jdtabt = r2bati.jdtabt;
															r2batinew_tmp.jrtabt = r2bati.jrtabt;
															r2batinew_tmp.jacloc = r2bati.jacloc;
															r2batinew = r2batinew_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_6 = false;

														tos_count_tMap_6++;

														/**
														 * [tMap_6 main ] stop
														 */
														// Start of branch
														// "r2batinew"
														if (r2batinew != null) {

															/**
															 * [
															 * tFileOutputDelimited_6
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_6";

															String[] rowtFileOutputDelimited_6 = new String[43];

															rowtFileOutputDelimited_6[0] = r2batinew.ccodep == null ? ""
																	: r2batinew.ccodep;

															rowtFileOutputDelimited_6[1] = r2batinew.ccodir == null ? ""
																	: r2batinew.ccodir;

															rowtFileOutputDelimited_6[2] = r2batinew.ccocom == null ? ""
																	: r2batinew.ccocom;

															rowtFileOutputDelimited_6[3] = r2batinew.invar == null ? ""
																	: r2batinew.invar;

															rowtFileOutputDelimited_6[4] = r2batinew.article == null ? ""
																	: r2batinew.article;

															rowtFileOutputDelimited_6[5] = r2batinew.gpdl == null ? ""
																	: r2batinew.gpdl;

															rowtFileOutputDelimited_6[6] = r2batinew.dsrpar == null ? ""
																	: r2batinew.dsrpar;

															rowtFileOutputDelimited_6[7] = r2batinew.dnupro == null ? ""
																	: r2batinew.dnupro;

															rowtFileOutputDelimited_6[8] = r2batinew.jdatat == null ? ""
																	: r2batinew.jdatat;

															rowtFileOutputDelimited_6[9] = r2batinew.dnufnl == null ? ""
																	: r2batinew.dnufnl;

															rowtFileOutputDelimited_6[10] = r2batinew.ccoeva == null ? ""
																	: r2batinew.ccoeva;

															rowtFileOutputDelimited_6[11] = r2batinew.ccitvl == null ? ""
																	: r2batinew.ccitvl;

															rowtFileOutputDelimited_6[12] = r2batinew.dteloc == null ? ""
																	: r2batinew.dteloc;

															rowtFileOutputDelimited_6[13] = r2batinew.gtauom == null ? ""
																	: r2batinew.gtauom;

															rowtFileOutputDelimited_6[14] = r2batinew.dcomrd == null ? ""
																	: r2batinew.dcomrd;

															rowtFileOutputDelimited_6[15] = r2batinew.ccoplc == null ? ""
																	: r2batinew.ccoplc;

															rowtFileOutputDelimited_6[16] = r2batinew.cconlc == null ? ""
																	: r2batinew.cconlc;

															rowtFileOutputDelimited_6[17] = r2batinew.dvltrt == null ? ""
																	: r2batinew.dvltrt;

															rowtFileOutputDelimited_6[18] = r2batinew.ccoape == null ? ""
																	: r2batinew.ccoape;

															rowtFileOutputDelimited_6[19] = r2batinew.cc48lc == null ? ""
																	: r2batinew.cc48lc;

															rowtFileOutputDelimited_6[20] = r2batinew.dloy48a == null ? ""
																	: r2batinew.dloy48a;

															rowtFileOutputDelimited_6[21] = r2batinew.top48a == null ? ""
																	: r2batinew.top48a;

															rowtFileOutputDelimited_6[22] = r2batinew.dnatlc == null ? ""
																	: r2batinew.dnatlc;

															rowtFileOutputDelimited_6[23] = r2batinew.dnupas == null ? ""
																	: r2batinew.dnupas;

															rowtFileOutputDelimited_6[24] = r2batinew.gnexcf == null ? ""
																	: r2batinew.gnexcf;

															rowtFileOutputDelimited_6[25] = r2batinew.dtaucf == null ? ""
																	: r2batinew.dtaucf;

															rowtFileOutputDelimited_6[26] = r2batinew.cchpr == null ? ""
																	: r2batinew.cchpr;

															rowtFileOutputDelimited_6[27] = r2batinew.jannat == null ? ""
																	: r2batinew.jannat;

															rowtFileOutputDelimited_6[28] = r2batinew.dnbniv == null ? ""
																	: r2batinew.dnbniv;

															rowtFileOutputDelimited_6[29] = r2batinew.hlmsem == null ? ""
																	: r2batinew.hlmsem;

															rowtFileOutputDelimited_6[30] = r2batinew.postel == null ? ""
																	: r2batinew.postel;

															rowtFileOutputDelimited_6[31] = r2batinew.dnatcg == null ? ""
																	: r2batinew.dnatcg;

															rowtFileOutputDelimited_6[32] = r2batinew.jdatcgl == null ? ""
																	: r2batinew.jdatcgl;

															rowtFileOutputDelimited_6[33] = r2batinew.dnutbx == null ? ""
																	: r2batinew.dnutbx;

															rowtFileOutputDelimited_6[34] = r2batinew.dvltla == null ? ""
																	: r2batinew.dvltla;

															rowtFileOutputDelimited_6[35] = r2batinew.janloc == null ? ""
																	: r2batinew.janloc;

															rowtFileOutputDelimited_6[36] = r2batinew.ccsloc == null ? ""
																	: r2batinew.ccsloc;

															rowtFileOutputDelimited_6[37] = r2batinew.fburx == null ? ""
																	: r2batinew.fburx;

															rowtFileOutputDelimited_6[38] = r2batinew.gimtom == null ? ""
																	: r2batinew.gimtom;

															rowtFileOutputDelimited_6[39] = r2batinew.cbtabt == null ? ""
																	: r2batinew.cbtabt;

															rowtFileOutputDelimited_6[40] = r2batinew.jdtabt == null ? ""
																	: r2batinew.jdtabt;

															rowtFileOutputDelimited_6[41] = r2batinew.jrtabt == null ? ""
																	: r2batinew.jrtabt;

															rowtFileOutputDelimited_6[42] = r2batinew.jacloc == null ? ""
																	: r2batinew.jacloc;

															nb_line_tFileOutputDelimited_6++;
															CsvWritertFileOutputDelimited_6
																	.writeNext(rowtFileOutputDelimited_6);

															tos_count_tFileOutputDelimited_6++;

															/**
															 * [
															 * tFileOutputDelimited_6
															 * main ] stop
															 */

														} // End of branch
															// "r2batinew"

													} // End of branch "r2bati"

													// Start of branch "r3bati"
													if (r3bati != null) {

														/**
														 * [tMap_7 main ] start
														 */

														currentComponent = "tMap_7";

														boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_7 = false;
														boolean mainRowRejected_tMap_7 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
															// ###############################
															// # Output tables

															r3batinew = null;

															// # Output table :
															// 'r3batinew'
															r3batinew_tmp.ccodep = r3bati.ccodep;
															r3batinew_tmp.ccodir = r3bati.ccodir;
															r3batinew_tmp.ccocom = r3bati.ccocom;
															r3batinew_tmp.invar = r3bati.invar;
															r3batinew_tmp.dnupev = r3bati.dnupev;
															r3batinew_tmp.article = r3bati.article;
															r3batinew_tmp.ccoaff = r3bati.ccoaff;
															r3batinew_tmp.ccostb = r3bati.ccostb;
															r3batinew_tmp.dcapec = r3bati.dcapec;
															r3batinew_tmp.dcetlc = r3bati.dcetlc;
															r3batinew_tmp.dcsplc = r3bati.dcsplc;
															r3batinew_tmp.dsupot = r3bati.dsupot;
															r3batinew_tmp.dvlper = r3bati.dvlper;
															r3batinew_tmp.dvlpera = r3bati.dvlpera;
															r3batinew_tmp.gnexpl = r3bati.gnexpl;
															r3batinew_tmp.libocc = r3bati.libocc;
															r3batinew_tmp.ccthp = r3bati.ccthp;
															r3batinew_tmp.retimp = r3bati.retimp;
															r3batinew_tmp.dnuref = r3bati.dnuref;
															r3batinew_tmp.rclsst = r3bati.rclsst;
															r3batinew_tmp.gnidom = r3bati.gnidom;
															r3batinew_tmp.dcsglc = r3bati.dcsglc;
															r3batinew_tmp.ccogrb = r3bati.ccogrb;
															r3batinew_tmp.cocdi = r3bati.cocdi;
															r3batinew_tmp.cosatp = r3bati.cosatp;
															r3batinew_tmp.gsatp = r3bati.gsatp;
															r3batinew_tmp.clocv = r3bati.clocv;
															r3batinew_tmp.dvltpe = r3bati.dvltpe;
															r3batinew_tmp.dcralc = r3bati.dcralc;
															r3batinew = r3batinew_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_7 = false;

														tos_count_tMap_7++;

														/**
														 * [tMap_7 main ] stop
														 */
														// Start of branch
														// "r3batinew"
														if (r3batinew != null) {

															/**
															 * [
															 * tFileOutputDelimited_7
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_7";

															String[] rowtFileOutputDelimited_7 = new String[29];

															rowtFileOutputDelimited_7[0] = r3batinew.ccodep == null ? ""
																	: r3batinew.ccodep;

															rowtFileOutputDelimited_7[1] = r3batinew.ccodir == null ? ""
																	: r3batinew.ccodir;

															rowtFileOutputDelimited_7[2] = r3batinew.ccocom == null ? ""
																	: r3batinew.ccocom;

															rowtFileOutputDelimited_7[3] = r3batinew.invar == null ? ""
																	: r3batinew.invar;

															rowtFileOutputDelimited_7[4] = r3batinew.dnupev == null ? ""
																	: r3batinew.dnupev;

															rowtFileOutputDelimited_7[5] = r3batinew.article == null ? ""
																	: r3batinew.article;

															rowtFileOutputDelimited_7[6] = r3batinew.ccoaff == null ? ""
																	: r3batinew.ccoaff;

															rowtFileOutputDelimited_7[7] = r3batinew.ccostb == null ? ""
																	: r3batinew.ccostb;

															rowtFileOutputDelimited_7[8] = r3batinew.dcapec == null ? ""
																	: r3batinew.dcapec;

															rowtFileOutputDelimited_7[9] = r3batinew.dcetlc == null ? ""
																	: r3batinew.dcetlc;

															rowtFileOutputDelimited_7[10] = r3batinew.dcsplc == null ? ""
																	: r3batinew.dcsplc;

															rowtFileOutputDelimited_7[11] = r3batinew.dsupot == null ? ""
																	: r3batinew.dsupot;

															rowtFileOutputDelimited_7[12] = r3batinew.dvlper == null ? ""
																	: r3batinew.dvlper;

															rowtFileOutputDelimited_7[13] = r3batinew.dvlpera == null ? ""
																	: r3batinew.dvlpera;

															rowtFileOutputDelimited_7[14] = r3batinew.gnexpl == null ? ""
																	: r3batinew.gnexpl;

															rowtFileOutputDelimited_7[15] = r3batinew.libocc == null ? ""
																	: r3batinew.libocc;

															rowtFileOutputDelimited_7[16] = r3batinew.ccthp == null ? ""
																	: r3batinew.ccthp;

															rowtFileOutputDelimited_7[17] = r3batinew.retimp == null ? ""
																	: r3batinew.retimp;

															rowtFileOutputDelimited_7[18] = r3batinew.dnuref == null ? ""
																	: r3batinew.dnuref;

															rowtFileOutputDelimited_7[19] = r3batinew.rclsst == null ? ""
																	: r3batinew.rclsst;

															rowtFileOutputDelimited_7[20] = r3batinew.gnidom == null ? ""
																	: r3batinew.gnidom;

															rowtFileOutputDelimited_7[21] = r3batinew.dcsglc == null ? ""
																	: r3batinew.dcsglc;

															rowtFileOutputDelimited_7[22] = r3batinew.ccogrb == null ? ""
																	: r3batinew.ccogrb;

															rowtFileOutputDelimited_7[23] = r3batinew.cocdi == null ? ""
																	: r3batinew.cocdi;

															rowtFileOutputDelimited_7[24] = r3batinew.cosatp == null ? ""
																	: r3batinew.cosatp;

															rowtFileOutputDelimited_7[25] = r3batinew.gsatp == null ? ""
																	: r3batinew.gsatp;

															rowtFileOutputDelimited_7[26] = r3batinew.clocv == null ? ""
																	: r3batinew.clocv;

															rowtFileOutputDelimited_7[27] = r3batinew.dvltpe == null ? ""
																	: r3batinew.dvltpe;

															rowtFileOutputDelimited_7[28] = r3batinew.dcralc == null ? ""
																	: r3batinew.dcralc;

															nb_line_tFileOutputDelimited_7++;
															CsvWritertFileOutputDelimited_7
																	.writeNext(rowtFileOutputDelimited_7);

															tos_count_tFileOutputDelimited_7++;

															/**
															 * [
															 * tFileOutputDelimited_7
															 * main ] stop
															 */

														} // End of branch
															// "r3batinew"

													} // End of branch "r3bati"

													// Start of branch "r4bati"
													if (r4bati != null) {

														/**
														 * [tMap_8 main ] start
														 */

														currentComponent = "tMap_8";

														boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_8 = false;
														boolean mainRowRejected_tMap_8 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
															// ###############################
															// # Output tables

															r4batinew = null;

															// # Output table :
															// 'r4batinew'
															r4batinew_tmp.ccodep = r4bati.ccodep;
															r4batinew_tmp.ccodir = r4bati.ccodir;
															r4batinew_tmp.ccocom = r4bati.ccocom;
															r4batinew_tmp.invar = r4bati.invar;
															r4batinew_tmp.janbil = r4bati.janbil;
															r4batinew_tmp.dnupev = r4bati.dnupev;
															r4batinew_tmp.article = r4bati.article;
															r4batinew_tmp.vlbaicom = r4bati.vlbaicom;
															r4batinew_tmp.vlbaiacom = r4bati.vlbaiacom;
															r4batinew_tmp.bipevlacom = r4bati.bipevlacom;
															r4batinew_tmp.vlbaidept = r4bati.vlbaidept;
															r4batinew_tmp.vlbaiadept = r4bati.vlbaiadept;
															r4batinew_tmp.bipevladept = r4bati.bipevladept;
															r4batinew_tmp.vlbaireg = r4bati.vlbaireg;
															r4batinew_tmp.vlbaiareg = r4bati.vlbaiareg;
															r4batinew_tmp.bipevlareg = r4bati.bipevlareg;
															r4batinew_tmp.vlbaiepci = r4bati.vlbaiepci;
															r4batinew_tmp.vlbaiaepci = r4bati.vlbaiaepci;
															r4batinew_tmp.bipevlaepci = r4bati.bipevlaepci;
															r4batinew_tmp.bateom = r4bati.bateom;
															r4batinew_tmp.baomec = r4bati.baomec;
															r4batinew = r4batinew_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_8 = false;

														tos_count_tMap_8++;

														/**
														 * [tMap_8 main ] stop
														 */
														// Start of branch
														// "r4batinew"
														if (r4batinew != null) {

															/**
															 * [
															 * tFileOutputDelimited_8
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_8";

															String[] rowtFileOutputDelimited_8 = new String[21];

															rowtFileOutputDelimited_8[0] = r4batinew.ccodep == null ? ""
																	: r4batinew.ccodep;

															rowtFileOutputDelimited_8[1] = r4batinew.ccodir == null ? ""
																	: r4batinew.ccodir;

															rowtFileOutputDelimited_8[2] = r4batinew.ccocom == null ? ""
																	: r4batinew.ccocom;

															rowtFileOutputDelimited_8[3] = r4batinew.invar == null ? ""
																	: r4batinew.invar;

															rowtFileOutputDelimited_8[4] = r4batinew.janbil == null ? ""
																	: r4batinew.janbil;

															rowtFileOutputDelimited_8[5] = r4batinew.dnupev == null ? ""
																	: r4batinew.dnupev;

															rowtFileOutputDelimited_8[6] = r4batinew.article == null ? ""
																	: r4batinew.article;

															rowtFileOutputDelimited_8[7] = r4batinew.vlbaicom == null ? ""
																	: r4batinew.vlbaicom;

															rowtFileOutputDelimited_8[8] = r4batinew.vlbaiacom == null ? ""
																	: r4batinew.vlbaiacom;

															rowtFileOutputDelimited_8[9] = r4batinew.bipevlacom == null ? ""
																	: r4batinew.bipevlacom;

															rowtFileOutputDelimited_8[10] = r4batinew.vlbaidept == null ? ""
																	: r4batinew.vlbaidept;

															rowtFileOutputDelimited_8[11] = r4batinew.vlbaiadept == null ? ""
																	: r4batinew.vlbaiadept;

															rowtFileOutputDelimited_8[12] = r4batinew.bipevladept == null ? ""
																	: r4batinew.bipevladept;

															rowtFileOutputDelimited_8[13] = r4batinew.vlbaireg == null ? ""
																	: r4batinew.vlbaireg;

															rowtFileOutputDelimited_8[14] = r4batinew.vlbaiareg == null ? ""
																	: r4batinew.vlbaiareg;

															rowtFileOutputDelimited_8[15] = r4batinew.bipevlareg == null ? ""
																	: r4batinew.bipevlareg;

															rowtFileOutputDelimited_8[16] = r4batinew.vlbaiepci == null ? ""
																	: r4batinew.vlbaiepci;

															rowtFileOutputDelimited_8[17] = r4batinew.vlbaiaepci == null ? ""
																	: r4batinew.vlbaiaepci;

															rowtFileOutputDelimited_8[18] = r4batinew.bipevlaepci == null ? ""
																	: r4batinew.bipevlaepci;

															rowtFileOutputDelimited_8[19] = r4batinew.bateom == null ? ""
																	: r4batinew.bateom;

															rowtFileOutputDelimited_8[20] = r4batinew.baomec == null ? ""
																	: r4batinew.baomec;

															nb_line_tFileOutputDelimited_8++;
															CsvWritertFileOutputDelimited_8
																	.writeNext(rowtFileOutputDelimited_8);

															tos_count_tFileOutputDelimited_8++;

															/**
															 * [
															 * tFileOutputDelimited_8
															 * main ] stop
															 */

														} // End of branch
															// "r4batinew"

													} // End of branch "r4bati"

													// Start of branch "r5bati"
													if (r5bati != null) {

														/**
														 * [tMap_9 main ] start
														 */

														currentComponent = "tMap_9";

														boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_9 = false;
														boolean mainRowRejected_tMap_9 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
															// ###############################
															// # Output tables

															r5batinew = null;

															// # Output table :
															// 'r5batinew'
															r5batinew_tmp.ccodep = r5bati.ccodep;
															r5batinew_tmp.ccodir = r5bati.ccodir;
															r5batinew_tmp.ccocom = r5bati.ccocom;
															r5batinew_tmp.invar = r5bati.invar;
															r5batinew_tmp.dnupev = r5bati.dnupev;
															r5batinew_tmp.article = r5bati.article;
															r5batinew_tmp.dnudes = r5bati.dnudes;
															r5batinew_tmp.cconad1 = r5bati.cconad1;
															r5batinew_tmp.dsueic1 = r5bati.dsueic1;
															r5batinew_tmp.dcimei1 = r5bati.dcimei1;
															r5batinew_tmp.cconad2 = r5bati.cconad2;
															r5batinew_tmp.dsueic2 = r5bati.dsueic2;
															r5batinew_tmp.dcimei2 = r5bati.dcimei2;
															r5batinew_tmp.cconad3 = r5bati.cconad3;
															r5batinew_tmp.dsueic3 = r5bati.dsueic3;
															r5batinew_tmp.dcimei3 = r5bati.dcimei3;
															r5batinew_tmp.cconad4 = r5bati.cconad4;
															r5batinew_tmp.dsueic4 = r5bati.dsueic4;
															r5batinew_tmp.dcimei4 = r5bati.dcimei4;
															r5batinew_tmp.geaulc = r5bati.geaulc;
															r5batinew_tmp.gelelc = r5bati.gelelc;
															r5batinew_tmp.gesclc = r5bati.gesclc;
															r5batinew_tmp.ggazlc = r5bati.ggazlc;
															r5batinew_tmp.gasclc = r5bati.gasclc;
															r5batinew_tmp.gchclc = r5bati.gchclc;
															r5batinew_tmp.gvorlc = r5bati.gvorlc;
															r5batinew_tmp.gteglc = r5bati.gteglc;
															r5batinew_tmp.dnbbai = r5bati.dnbbai;
															r5batinew_tmp.dnbdou = r5bati.dnbdou;
															r5batinew_tmp.dnblav = r5bati.dnblav;
															r5batinew_tmp.dnbwc = r5bati.dnbwc;
															r5batinew_tmp.deqdha = r5bati.deqdha;
															r5batinew_tmp.dnbppr = r5bati.dnbppr;
															r5batinew_tmp.dnbsam = r5bati.dnbsam;
															r5batinew_tmp.dnbcha = r5bati.dnbcha;
															r5batinew_tmp.dnbcu8 = r5bati.dnbcu8;
															r5batinew_tmp.dnbcu9 = r5bati.dnbcu9;
															r5batinew_tmp.dnbsea = r5bati.dnbsea;
															r5batinew_tmp.dnbann = r5bati.dnbann;
															r5batinew_tmp.dnbpdc = r5bati.dnbpdc;
															r5batinew_tmp.dsupdc = r5bati.dsupdc;
															r5batinew_tmp.dmatgm = r5bati.dmatgm;
															r5batinew_tmp.dmatto = r5bati.dmatto;
															r5batinew_tmp.jannat = r5bati.jannat;
															r5batinew_tmp.detent = r5bati.detent;
															r5batinew_tmp.dnbniv = r5bati.dnbniv;
															r5batinew = r5batinew_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_9 = false;

														tos_count_tMap_9++;

														/**
														 * [tMap_9 main ] stop
														 */
														// Start of branch
														// "r5batinew"
														if (r5batinew != null) {

															/**
															 * [
															 * tFileOutputDelimited_9
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_9";

															String[] rowtFileOutputDelimited_9 = new String[46];

															rowtFileOutputDelimited_9[0] = r5batinew.ccodep == null ? ""
																	: r5batinew.ccodep;

															rowtFileOutputDelimited_9[1] = r5batinew.ccodir == null ? ""
																	: r5batinew.ccodir;

															rowtFileOutputDelimited_9[2] = r5batinew.ccocom == null ? ""
																	: r5batinew.ccocom;

															rowtFileOutputDelimited_9[3] = r5batinew.invar == null ? ""
																	: r5batinew.invar;

															rowtFileOutputDelimited_9[4] = r5batinew.dnupev == null ? ""
																	: r5batinew.dnupev;

															rowtFileOutputDelimited_9[5] = r5batinew.article == null ? ""
																	: r5batinew.article;

															rowtFileOutputDelimited_9[6] = r5batinew.dnudes == null ? ""
																	: r5batinew.dnudes;

															rowtFileOutputDelimited_9[7] = r5batinew.cconad1 == null ? ""
																	: r5batinew.cconad1;

															rowtFileOutputDelimited_9[8] = r5batinew.dsueic1 == null ? ""
																	: r5batinew.dsueic1;

															rowtFileOutputDelimited_9[9] = r5batinew.dcimei1 == null ? ""
																	: r5batinew.dcimei1;

															rowtFileOutputDelimited_9[10] = r5batinew.cconad2 == null ? ""
																	: r5batinew.cconad2;

															rowtFileOutputDelimited_9[11] = r5batinew.dsueic2 == null ? ""
																	: r5batinew.dsueic2;

															rowtFileOutputDelimited_9[12] = r5batinew.dcimei2 == null ? ""
																	: r5batinew.dcimei2;

															rowtFileOutputDelimited_9[13] = r5batinew.cconad3 == null ? ""
																	: r5batinew.cconad3;

															rowtFileOutputDelimited_9[14] = r5batinew.dsueic3 == null ? ""
																	: r5batinew.dsueic3;

															rowtFileOutputDelimited_9[15] = r5batinew.dcimei3 == null ? ""
																	: r5batinew.dcimei3;

															rowtFileOutputDelimited_9[16] = r5batinew.cconad4 == null ? ""
																	: r5batinew.cconad4;

															rowtFileOutputDelimited_9[17] = r5batinew.dsueic4 == null ? ""
																	: r5batinew.dsueic4;

															rowtFileOutputDelimited_9[18] = r5batinew.dcimei4 == null ? ""
																	: r5batinew.dcimei4;

															rowtFileOutputDelimited_9[19] = r5batinew.geaulc == null ? ""
																	: r5batinew.geaulc;

															rowtFileOutputDelimited_9[20] = r5batinew.gelelc == null ? ""
																	: r5batinew.gelelc;

															rowtFileOutputDelimited_9[21] = r5batinew.gesclc == null ? ""
																	: r5batinew.gesclc;

															rowtFileOutputDelimited_9[22] = r5batinew.ggazlc == null ? ""
																	: r5batinew.ggazlc;

															rowtFileOutputDelimited_9[23] = r5batinew.gasclc == null ? ""
																	: r5batinew.gasclc;

															rowtFileOutputDelimited_9[24] = r5batinew.gchclc == null ? ""
																	: r5batinew.gchclc;

															rowtFileOutputDelimited_9[25] = r5batinew.gvorlc == null ? ""
																	: r5batinew.gvorlc;

															rowtFileOutputDelimited_9[26] = r5batinew.gteglc == null ? ""
																	: r5batinew.gteglc;

															rowtFileOutputDelimited_9[27] = r5batinew.dnbbai == null ? ""
																	: r5batinew.dnbbai;

															rowtFileOutputDelimited_9[28] = r5batinew.dnbdou == null ? ""
																	: r5batinew.dnbdou;

															rowtFileOutputDelimited_9[29] = r5batinew.dnblav == null ? ""
																	: r5batinew.dnblav;

															rowtFileOutputDelimited_9[30] = r5batinew.dnbwc == null ? ""
																	: r5batinew.dnbwc;

															rowtFileOutputDelimited_9[31] = r5batinew.deqdha == null ? ""
																	: r5batinew.deqdha;

															rowtFileOutputDelimited_9[32] = r5batinew.dnbppr == null ? ""
																	: r5batinew.dnbppr;

															rowtFileOutputDelimited_9[33] = r5batinew.dnbsam == null ? ""
																	: r5batinew.dnbsam;

															rowtFileOutputDelimited_9[34] = r5batinew.dnbcha == null ? ""
																	: r5batinew.dnbcha;

															rowtFileOutputDelimited_9[35] = r5batinew.dnbcu8 == null ? ""
																	: r5batinew.dnbcu8;

															rowtFileOutputDelimited_9[36] = r5batinew.dnbcu9 == null ? ""
																	: r5batinew.dnbcu9;

															rowtFileOutputDelimited_9[37] = r5batinew.dnbsea == null ? ""
																	: r5batinew.dnbsea;

															rowtFileOutputDelimited_9[38] = r5batinew.dnbann == null ? ""
																	: r5batinew.dnbann;

															rowtFileOutputDelimited_9[39] = r5batinew.dnbpdc == null ? ""
																	: r5batinew.dnbpdc;

															rowtFileOutputDelimited_9[40] = r5batinew.dsupdc == null ? ""
																	: r5batinew.dsupdc;

															rowtFileOutputDelimited_9[41] = r5batinew.dmatgm == null ? ""
																	: r5batinew.dmatgm;

															rowtFileOutputDelimited_9[42] = r5batinew.dmatto == null ? ""
																	: r5batinew.dmatto;

															rowtFileOutputDelimited_9[43] = r5batinew.jannat == null ? ""
																	: r5batinew.jannat;

															rowtFileOutputDelimited_9[44] = r5batinew.detent == null ? ""
																	: r5batinew.detent;

															rowtFileOutputDelimited_9[45] = r5batinew.dnbniv == null ? ""
																	: r5batinew.dnbniv;

															nb_line_tFileOutputDelimited_9++;
															CsvWritertFileOutputDelimited_9
																	.writeNext(rowtFileOutputDelimited_9);

															tos_count_tFileOutputDelimited_9++;

															/**
															 * [
															 * tFileOutputDelimited_9
															 * main ] stop
															 */

														} // End of branch
															// "r5batinew"

													} // End of branch "r5bati"

													// Start of branch "r6bati"
													if (r6bati != null) {

														/**
														 * [tMap_10 main ] start
														 */

														currentComponent = "tMap_10";

														boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_10 = false;
														boolean mainRowRejected_tMap_10 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
															// ###############################
															// # Output tables

															r6batinew = null;

															// # Output table :
															// 'r6batinew'
															r6batinew_tmp.ccodep = r6bati.ccodep;
															r6batinew_tmp.ccodir = r6bati.ccodir;
															r6batinew_tmp.ccocom = r6bati.ccocom;
															r6batinew_tmp.invar = r6bati.invar;
															r6batinew_tmp.dnupev = r6bati.dnupev;
															r6batinew_tmp.article = r6bati.article;
															r6batinew_tmp.dnudes = r6bati.dnudes;
															r6batinew_tmp.vsupot = r6bati.vsupot;
															r6batinew_tmp.vsurz1 = r6bati.vsurz1;
															r6batinew_tmp.vsurz2 = r6bati.vsurz2;
															r6batinew_tmp.vsurz3 = r6bati.vsurz3;
															r6batinew_tmp.vsurzt = r6bati.vsurzt;
															r6batinew_tmp.vsurb1 = r6bati.vsurb1;
															r6batinew_tmp.vsurb2 = r6bati.vsurb2;
															r6batinew = r6batinew_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_10 = false;

														tos_count_tMap_10++;

														/**
														 * [tMap_10 main ] stop
														 */
														// Start of branch
														// "r6batinew"
														if (r6batinew != null) {

															/**
															 * [
															 * tFileOutputDelimited_10
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_10";

															String[] rowtFileOutputDelimited_10 = new String[14];

															rowtFileOutputDelimited_10[0] = r6batinew.ccodep == null ? ""
																	: r6batinew.ccodep;

															rowtFileOutputDelimited_10[1] = r6batinew.ccodir == null ? ""
																	: r6batinew.ccodir;

															rowtFileOutputDelimited_10[2] = r6batinew.ccocom == null ? ""
																	: r6batinew.ccocom;

															rowtFileOutputDelimited_10[3] = r6batinew.invar == null ? ""
																	: r6batinew.invar;

															rowtFileOutputDelimited_10[4] = r6batinew.dnupev == null ? ""
																	: r6batinew.dnupev;

															rowtFileOutputDelimited_10[5] = r6batinew.article == null ? ""
																	: r6batinew.article;

															rowtFileOutputDelimited_10[6] = r6batinew.dnudes == null ? ""
																	: r6batinew.dnudes;

															rowtFileOutputDelimited_10[7] = r6batinew.vsupot == null ? ""
																	: r6batinew.vsupot;

															rowtFileOutputDelimited_10[8] = r6batinew.vsurz1 == null ? ""
																	: r6batinew.vsurz1;

															rowtFileOutputDelimited_10[9] = r6batinew.vsurz2 == null ? ""
																	: r6batinew.vsurz2;

															rowtFileOutputDelimited_10[10] = r6batinew.vsurz3 == null ? ""
																	: r6batinew.vsurz3;

															rowtFileOutputDelimited_10[11] = r6batinew.vsurzt == null ? ""
																	: r6batinew.vsurzt;

															rowtFileOutputDelimited_10[12] = r6batinew.vsurb1 == null ? ""
																	: r6batinew.vsurb1;

															rowtFileOutputDelimited_10[13] = r6batinew.vsurb2 == null ? ""
																	: r6batinew.vsurb2;

															nb_line_tFileOutputDelimited_10++;
															CsvWritertFileOutputDelimited_10
																	.writeNext(rowtFileOutputDelimited_10);

															tos_count_tFileOutputDelimited_10++;

															/**
															 * [
															 * tFileOutputDelimited_10
															 * main ] stop
															 */

														} // End of branch
															// "r6batinew"

													} // End of branch "r6bati"

													// Start of branch "r7bati"
													if (r7bati != null) {

														/**
														 * [tMap_11 main ] start
														 */

														currentComponent = "tMap_11";

														boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_11 = false;
														boolean mainRowRejected_tMap_11 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
															// ###############################
															// # Output tables

															r7batinew = null;

															// # Output table :
															// 'r7batinew'
															r7batinew_tmp.ccodep = r7bati.ccodep;
															r7batinew_tmp.ccodir = r7bati.ccodir;
															r7batinew_tmp.ccocom = r7bati.ccocom;
															r7batinew_tmp.invar = r7bati.invar;
															r7batinew_tmp.dnupev = r7bati.dnupev;
															r7batinew_tmp.article = r7bati.article;
															r7batinew_tmp.dnudes = r7bati.dnudes;
															r7batinew_tmp.dsudep = r7bati.dsudep;
															r7batinew_tmp.cconad = r7bati.cconad;
															r7batinew_tmp.asitet = r7bati.asitet;
															r7batinew_tmp.dmatgm = r7bati.dmatgm;
															r7batinew_tmp.dmatto = r7bati.dmatto;
															r7batinew_tmp.detent = r7bati.detent;
															r7batinew_tmp.geaulc = r7bati.geaulc;
															r7batinew_tmp.gelelc = r7bati.gelelc;
															r7batinew_tmp.gchclc = r7bati.gchclc;
															r7batinew_tmp.dnbbai = r7bati.dnbbai;
															r7batinew_tmp.dnbdou = r7bati.dnbdou;
															r7batinew_tmp.dnblav = r7bati.dnblav;
															r7batinew_tmp.dnbwc = r7bati.dnbwc;
															r7batinew_tmp.deqtlc = r7bati.deqtlc;
															r7batinew_tmp.dcimlc = r7bati.dcimlc;
															r7batinew_tmp.dcetde = r7bati.dcetde;
															r7batinew_tmp.dcspde = r7bati.dcspde;
															r7batinew = r7batinew_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_11 = false;

														tos_count_tMap_11++;

														/**
														 * [tMap_11 main ] stop
														 */
														// Start of branch
														// "r7batinew"
														if (r7batinew != null) {

															/**
															 * [
															 * tFileOutputDelimited_11
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_11";

															String[] rowtFileOutputDelimited_11 = new String[24];

															rowtFileOutputDelimited_11[0] = r7batinew.ccodep == null ? ""
																	: r7batinew.ccodep;

															rowtFileOutputDelimited_11[1] = r7batinew.ccodir == null ? ""
																	: r7batinew.ccodir;

															rowtFileOutputDelimited_11[2] = r7batinew.ccocom == null ? ""
																	: r7batinew.ccocom;

															rowtFileOutputDelimited_11[3] = r7batinew.invar == null ? ""
																	: r7batinew.invar;

															rowtFileOutputDelimited_11[4] = r7batinew.dnupev == null ? ""
																	: r7batinew.dnupev;

															rowtFileOutputDelimited_11[5] = r7batinew.article == null ? ""
																	: r7batinew.article;

															rowtFileOutputDelimited_11[6] = r7batinew.dnudes == null ? ""
																	: r7batinew.dnudes;

															rowtFileOutputDelimited_11[7] = r7batinew.dsudep == null ? ""
																	: r7batinew.dsudep;

															rowtFileOutputDelimited_11[8] = r7batinew.cconad == null ? ""
																	: r7batinew.cconad;

															rowtFileOutputDelimited_11[9] = r7batinew.asitet == null ? ""
																	: r7batinew.asitet;

															rowtFileOutputDelimited_11[10] = r7batinew.dmatgm == null ? ""
																	: r7batinew.dmatgm;

															rowtFileOutputDelimited_11[11] = r7batinew.dmatto == null ? ""
																	: r7batinew.dmatto;

															rowtFileOutputDelimited_11[12] = r7batinew.detent == null ? ""
																	: r7batinew.detent;

															rowtFileOutputDelimited_11[13] = r7batinew.geaulc == null ? ""
																	: r7batinew.geaulc;

															rowtFileOutputDelimited_11[14] = r7batinew.gelelc == null ? ""
																	: r7batinew.gelelc;

															rowtFileOutputDelimited_11[15] = r7batinew.gchclc == null ? ""
																	: r7batinew.gchclc;

															rowtFileOutputDelimited_11[16] = r7batinew.dnbbai == null ? ""
																	: r7batinew.dnbbai;

															rowtFileOutputDelimited_11[17] = r7batinew.dnbdou == null ? ""
																	: r7batinew.dnbdou;

															rowtFileOutputDelimited_11[18] = r7batinew.dnblav == null ? ""
																	: r7batinew.dnblav;

															rowtFileOutputDelimited_11[19] = r7batinew.dnbwc == null ? ""
																	: r7batinew.dnbwc;

															rowtFileOutputDelimited_11[20] = r7batinew.deqtlc == null ? ""
																	: r7batinew.deqtlc;

															rowtFileOutputDelimited_11[21] = r7batinew.dcimlc == null ? ""
																	: r7batinew.dcimlc;

															rowtFileOutputDelimited_11[22] = r7batinew.dcetde == null ? ""
																	: r7batinew.dcetde;

															rowtFileOutputDelimited_11[23] = r7batinew.dcspde == null ? ""
																	: r7batinew.dcspde;

															nb_line_tFileOutputDelimited_11++;
															CsvWritertFileOutputDelimited_11
																	.writeNext(rowtFileOutputDelimited_11);

															tos_count_tFileOutputDelimited_11++;

															/**
															 * [
															 * tFileOutputDelimited_11
															 * main ] stop
															 */

														} // End of branch
															// "r7batinew"

													} // End of branch "r7bati"

													// Start of branch "r8bati"
													if (r8bati != null) {

														/**
														 * [tMap_12 main ] start
														 */

														currentComponent = "tMap_12";

														boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_12 = false;
														boolean mainRowRejected_tMap_12 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
															// ###############################
															// # Output tables

															r8batinew = null;

															// # Output table :
															// 'r8batinew'
															r8batinew_tmp.ccodep = r8bati.ccodep;
															r8batinew_tmp.ccodir = r8bati.ccodir;
															r8batinew_tmp.ccocom = r8bati.ccocom;
															r8batinew_tmp.invar = r8bati.invar;
															r8batinew_tmp.janbil = r8bati.janbil;
															r8batinew_tmp.dnupev = r8bati.dnupev;
															r8batinew_tmp.article = r8bati.article;
															r8batinew_tmp.dnuexb = r8bati.dnuexb;
															r8batinew_tmp.ccolloc = r8bati.ccolloc;
															r8batinew_tmp.pexb = r8bati.pexb;
															r8batinew_tmp.gnextl = r8bati.gnextl;
															r8batinew_tmp.jandeb = r8bati.jandeb;
															r8batinew_tmp.janimp = r8bati.janimp;
															r8batinew_tmp.vecdif = r8bati.vecdif;
															r8batinew_tmp.vecdifa = r8bati.vecdifa;
															r8batinew_tmp.fcexb = r8bati.fcexb;
															r8batinew_tmp.fcexba = r8bati.fcexba;
															r8batinew_tmp.rcexba = r8bati.rcexba;
															r8batinew_tmp.dvldif2 = r8bati.dvldif2;
															r8batinew_tmp.dvldif2a = r8bati.dvldif2a;
															r8batinew_tmp.fcexb2 = r8bati.fcexb2;
															r8batinew_tmp.fcexba2 = r8bati.fcexba2;
															r8batinew_tmp.rcexba2 = r8bati.rcexba2;
															r8batinew = r8batinew_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_12 = false;

														tos_count_tMap_12++;

														/**
														 * [tMap_12 main ] stop
														 */
														// Start of branch
														// "r8batinew"
														if (r8batinew != null) {

															/**
															 * [
															 * tFileOutputDelimited_12
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_12";

															String[] rowtFileOutputDelimited_12 = new String[23];

															rowtFileOutputDelimited_12[0] = r8batinew.ccodep == null ? ""
																	: r8batinew.ccodep;

															rowtFileOutputDelimited_12[1] = r8batinew.ccodir == null ? ""
																	: r8batinew.ccodir;

															rowtFileOutputDelimited_12[2] = r8batinew.ccocom == null ? ""
																	: r8batinew.ccocom;

															rowtFileOutputDelimited_12[3] = r8batinew.invar == null ? ""
																	: r8batinew.invar;

															rowtFileOutputDelimited_12[4] = r8batinew.janbil == null ? ""
																	: r8batinew.janbil;

															rowtFileOutputDelimited_12[5] = r8batinew.dnupev == null ? ""
																	: r8batinew.dnupev;

															rowtFileOutputDelimited_12[6] = r8batinew.article == null ? ""
																	: r8batinew.article;

															rowtFileOutputDelimited_12[7] = r8batinew.dnuexb == null ? ""
																	: r8batinew.dnuexb;

															rowtFileOutputDelimited_12[8] = r8batinew.ccolloc == null ? ""
																	: r8batinew.ccolloc;

															rowtFileOutputDelimited_12[9] = r8batinew.pexb == null ? ""
																	: r8batinew.pexb;

															rowtFileOutputDelimited_12[10] = r8batinew.gnextl == null ? ""
																	: r8batinew.gnextl;

															rowtFileOutputDelimited_12[11] = r8batinew.jandeb == null ? ""
																	: r8batinew.jandeb;

															rowtFileOutputDelimited_12[12] = r8batinew.janimp == null ? ""
																	: r8batinew.janimp;

															rowtFileOutputDelimited_12[13] = r8batinew.vecdif == null ? ""
																	: r8batinew.vecdif;

															rowtFileOutputDelimited_12[14] = r8batinew.vecdifa == null ? ""
																	: r8batinew.vecdifa;

															rowtFileOutputDelimited_12[15] = r8batinew.fcexb == null ? ""
																	: r8batinew.fcexb;

															rowtFileOutputDelimited_12[16] = r8batinew.fcexba == null ? ""
																	: r8batinew.fcexba;

															rowtFileOutputDelimited_12[17] = r8batinew.rcexba == null ? ""
																	: r8batinew.rcexba;

															rowtFileOutputDelimited_12[18] = r8batinew.dvldif2 == null ? ""
																	: r8batinew.dvldif2;

															rowtFileOutputDelimited_12[19] = r8batinew.dvldif2a == null ? ""
																	: r8batinew.dvldif2a;

															rowtFileOutputDelimited_12[20] = r8batinew.fcexb2 == null ? ""
																	: r8batinew.fcexb2;

															rowtFileOutputDelimited_12[21] = r8batinew.fcexba2 == null ? ""
																	: r8batinew.fcexba2;

															rowtFileOutputDelimited_12[22] = r8batinew.rcexba2 == null ? ""
																	: r8batinew.rcexba2;

															nb_line_tFileOutputDelimited_12++;
															CsvWritertFileOutputDelimited_12
																	.writeNext(rowtFileOutputDelimited_12);

															tos_count_tFileOutputDelimited_12++;

															/**
															 * [
															 * tFileOutputDelimited_12
															 * main ] stop
															 */

														} // End of branch
															// "r8batinew"

													} // End of branch "r8bati"

													/**
													 * [tFileInputMSPositional_1
													 * end ] start
													 */

													currentComponent = "tFileInputMSPositional_1";

													nb_line_tFileInputMSPositional_1++;

													if (limit_tFileInputMSPositional_1 != -1
															&& nb_line_tFileInputMSPositional_1 >= limit_tFileInputMSPositional_1) {
														break;
													}
												}
												reader_tFileInputMSPositional_1
														.close();
												reader_tFileInputMSPositional_1 = null;
												globalMap
														.put("tFileInputMSPositional_1_NB_LINE",
																nb_line_tFileInputMSPositional_1);
												globalMap
														.put("tFileInputMSPositional_1_NB_LINE_REJECTED",
																nb_line_rejected_tFileInputMSPositional_1);
												globalMap
														.put("tFileInputMSPositional_1_NB_LINE_UNKOWN_HEADER_TYPES",
																nb_line_unknownHeader_tFileInputMSPositional_1);
												globalMap
														.put("tFileInputMSPositional_1_NB_LINE_PARSE_ERRORS",
																nb_line_parseError_tFileInputMSPositional_1);

												ok_Hash.put(
														"tFileInputMSPositional_1",
														true);
												end_Hash.put(
														"tFileInputMSPositional_1",
														System.currentTimeMillis());

												/**
												 * [tFileInputMSPositional_1 end
												 * ] stop
												 */

												/**
												 * [tMap_12 end ] start
												 */

												currentComponent = "tMap_12";

												// ###############################
												// # Lookup hashes releasing
												// ###############################

												ok_Hash.put("tMap_12", true);
												end_Hash.put("tMap_12", System
														.currentTimeMillis());

												/**
												 * [tMap_12 end ] stop
												 */

												/**
												 * [tFileOutputDelimited_12 end
												 * ] start
												 */

												currentComponent = "tFileOutputDelimited_12";

											} finally {

												if (CsvWritertFileOutputDelimited_12 != null) {
													CsvWritertFileOutputDelimited_12
															.close();
												}
												globalMap
														.put("tFileOutputDelimited_12_NB_LINE",
																nb_line_tFileOutputDelimited_12);
											} // finally

											ok_Hash.put(
													"tFileOutputDelimited_12",
													true);
											end_Hash.put(
													"tFileOutputDelimited_12",
													System.currentTimeMillis());

											/**
											 * [tFileOutputDelimited_12 end ]
											 * stop
											 */

											/**
											 * [tMap_11 end ] start
											 */

											currentComponent = "tMap_11";

											// ###############################
											// # Lookup hashes releasing
											// ###############################

											ok_Hash.put("tMap_11", true);
											end_Hash.put("tMap_11",
													System.currentTimeMillis());

											/**
											 * [tMap_11 end ] stop
											 */

											/**
											 * [tFileOutputDelimited_11 end ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_11";

										} finally {

											if (CsvWritertFileOutputDelimited_11 != null) {
												CsvWritertFileOutputDelimited_11
														.close();
											}
											globalMap
													.put("tFileOutputDelimited_11_NB_LINE",
															nb_line_tFileOutputDelimited_11);
										} // finally

										ok_Hash.put("tFileOutputDelimited_11",
												true);
										end_Hash.put("tFileOutputDelimited_11",
												System.currentTimeMillis());

										/**
										 * [tFileOutputDelimited_11 end ] stop
										 */

										/**
										 * [tMap_10 end ] start
										 */

										currentComponent = "tMap_10";

										// ###############################
										// # Lookup hashes releasing
										// ###############################

										ok_Hash.put("tMap_10", true);
										end_Hash.put("tMap_10",
												System.currentTimeMillis());

										/**
										 * [tMap_10 end ] stop
										 */

										/**
										 * [tFileOutputDelimited_10 end ] start
										 */

										currentComponent = "tFileOutputDelimited_10";

									} finally {

										if (CsvWritertFileOutputDelimited_10 != null) {
											CsvWritertFileOutputDelimited_10
													.close();
										}
										globalMap
												.put("tFileOutputDelimited_10_NB_LINE",
														nb_line_tFileOutputDelimited_10);
									} // finally

									ok_Hash.put("tFileOutputDelimited_10", true);
									end_Hash.put("tFileOutputDelimited_10",
											System.currentTimeMillis());

									/**
									 * [tFileOutputDelimited_10 end ] stop
									 */

									/**
									 * [tMap_9 end ] start
									 */

									currentComponent = "tMap_9";

									// ###############################
									// # Lookup hashes releasing
									// ###############################

									ok_Hash.put("tMap_9", true);
									end_Hash.put("tMap_9",
											System.currentTimeMillis());

									/**
									 * [tMap_9 end ] stop
									 */

									/**
									 * [tFileOutputDelimited_9 end ] start
									 */

									currentComponent = "tFileOutputDelimited_9";

								} finally {

									if (CsvWritertFileOutputDelimited_9 != null) {
										CsvWritertFileOutputDelimited_9.close();
									}
									globalMap.put(
											"tFileOutputDelimited_9_NB_LINE",
											nb_line_tFileOutputDelimited_9);
								} // finally

								ok_Hash.put("tFileOutputDelimited_9", true);
								end_Hash.put("tFileOutputDelimited_9",
										System.currentTimeMillis());

								/**
								 * [tFileOutputDelimited_9 end ] stop
								 */

								/**
								 * [tMap_8 end ] start
								 */

								currentComponent = "tMap_8";

								// ###############################
								// # Lookup hashes releasing
								// ###############################

								ok_Hash.put("tMap_8", true);
								end_Hash.put("tMap_8",
										System.currentTimeMillis());

								/**
								 * [tMap_8 end ] stop
								 */

								/**
								 * [tFileOutputDelimited_8 end ] start
								 */

								currentComponent = "tFileOutputDelimited_8";

							} finally {

								if (CsvWritertFileOutputDelimited_8 != null) {
									CsvWritertFileOutputDelimited_8.close();
								}
								globalMap.put("tFileOutputDelimited_8_NB_LINE",
										nb_line_tFileOutputDelimited_8);
							} // finally

							ok_Hash.put("tFileOutputDelimited_8", true);
							end_Hash.put("tFileOutputDelimited_8",
									System.currentTimeMillis());

							/**
							 * [tFileOutputDelimited_8 end ] stop
							 */

							/**
							 * [tMap_7 end ] start
							 */

							currentComponent = "tMap_7";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_7", true);
							end_Hash.put("tMap_7", System.currentTimeMillis());

							/**
							 * [tMap_7 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 end ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

						} finally {

							if (CsvWritertFileOutputDelimited_7 != null) {
								CsvWritertFileOutputDelimited_7.close();
							}
							globalMap.put("tFileOutputDelimited_7_NB_LINE",
									nb_line_tFileOutputDelimited_7);
						} // finally

						ok_Hash.put("tFileOutputDelimited_7", true);
						end_Hash.put("tFileOutputDelimited_7",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_7 end ] stop
						 */

						/**
						 * [tMap_6 end ] start
						 */

						currentComponent = "tMap_6";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_6", true);
						end_Hash.put("tMap_6", System.currentTimeMillis());

						/**
						 * [tMap_6 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 end ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

					} finally {

						if (CsvWritertFileOutputDelimited_6 != null) {
							CsvWritertFileOutputDelimited_6.close();
						}
						globalMap.put("tFileOutputDelimited_6_NB_LINE",
								nb_line_tFileOutputDelimited_6);
					} // finally

					ok_Hash.put("tFileOutputDelimited_6", true);
					end_Hash.put("tFileOutputDelimited_6",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_6 end ] stop
					 */

					/**
					 * [tMap_5 end ] start
					 */

					currentComponent = "tMap_5";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_5", true);
					end_Hash.put("tMap_5", System.currentTimeMillis());

					/**
					 * [tMap_5 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputMSPositional_1_SUBPROCESS_STATE", 1);
	}

	public static class r1fpdlnewStruct implements
			routines.system.IPersistableRow<r1fpdlnewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnivim;

		public String getDnivim() {
			return this.dnivim;
		}

		public String ctpdl;

		public String getCtpdl() {
			return this.ctpdl;
		}

		public String dnompdl;

		public String getDnompdl() {
			return this.dnompdl;
		}

		public String dmrpdl;

		public String getDmrpdl() {
			return this.dmrpdl;
		}

		public String gprmut;

		public String getGprmut() {
			return this.gprmut;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.dnupdl = readString(dis);

					this.article = readString(dis);

					this.dnivim = readString(dis);

					this.ctpdl = readString(dis);

					this.dnompdl = readString(dis);

					this.dmrpdl = readString(dis);

					this.gprmut = readString(dis);

					this.dnupro = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnivim, dos);

				// String

				writeString(this.ctpdl, dos);

				// String

				writeString(this.dnompdl, dos);

				// String

				writeString(this.dmrpdl, dos);

				// String

				writeString(this.gprmut, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",article=" + article);
			sb.append(",dnivim=" + dnivim);
			sb.append(",ctpdl=" + ctpdl);
			sb.append(",dnompdl=" + dnompdl);
			sb.append(",dmrpdl=" + dmrpdl);
			sb.append(",gprmut=" + gprmut);
			sb.append(",dnupro=" + dnupro);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r1fpdlnewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r2fpdlnewStruct implements
			routines.system.IPersistableRow<r2fpdlnewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccoprea;

		public String getCcoprea() {
			return this.ccoprea;
		}

		public String ccoseca;

		public String getCcoseca() {
			return this.ccoseca;
		}

		public String dnuplaa;

		public String getDnuplaa() {
			return this.dnuplaa;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.dnupdl = readString(dis);

					this.article = readString(dis);

					this.ccoprea = readString(dis);

					this.ccoseca = readString(dis);

					this.dnuplaa = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccoprea, dos);

				// String

				writeString(this.ccoseca, dos);

				// String

				writeString(this.dnuplaa, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",article=" + article);
			sb.append(",ccoprea=" + ccoprea);
			sb.append(",ccoseca=" + ccoseca);
			sb.append(",dnuplaa=" + dnuplaa);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r2fpdlnewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r3fpdlnewStruct implements
			routines.system.IPersistableRow<r3fpdlnewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String kpdl;

		public String getKpdl() {
			return this.kpdl;
		}

		public String dnulot;

		public String getDnulot() {
			return this.dnulot;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String cconlo;

		public String getCconlo() {
			return this.cconlo;
		}

		public String dcntlo;

		public String getDcntlo() {
			return this.dcntlo;
		}

		public String dnumql;

		public String getDnumql() {
			return this.dnumql;
		}

		public String ddenql;

		public String getDdenql() {
			return this.ddenql;
		}

		public String dfilot;

		public String getDfilot() {
			return this.dfilot;
		}

		public String datact;

		public String getDatact() {
			return this.datact;
		}

		public String dnuprol;

		public String getDnuprol() {
			return this.dnuprol;
		}

		public String dreflf;

		public String getDreflf() {
			return this.dreflf;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.kpdl = readString(dis);

					this.dnulot = readString(dis);

					this.article = readString(dis);

					this.cconlo = readString(dis);

					this.dcntlo = readString(dis);

					this.dnumql = readString(dis);

					this.ddenql = readString(dis);

					this.dfilot = readString(dis);

					this.datact = readString(dis);

					this.dnuprol = readString(dis);

					this.dreflf = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.kpdl, dos);

				// String

				writeString(this.dnulot, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.cconlo, dos);

				// String

				writeString(this.dcntlo, dos);

				// String

				writeString(this.dnumql, dos);

				// String

				writeString(this.ddenql, dos);

				// String

				writeString(this.dfilot, dos);

				// String

				writeString(this.datact, dos);

				// String

				writeString(this.dnuprol, dos);

				// String

				writeString(this.dreflf, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kpdl=" + kpdl);
			sb.append(",dnulot=" + dnulot);
			sb.append(",article=" + article);
			sb.append(",cconlo=" + cconlo);
			sb.append(",dcntlo=" + dcntlo);
			sb.append(",dnumql=" + dnumql);
			sb.append(",ddenql=" + ddenql);
			sb.append(",dfilot=" + dfilot);
			sb.append(",datact=" + datact);
			sb.append(",dnuprol=" + dnuprol);
			sb.append(",dreflf=" + dreflf);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r3fpdlnewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String line;

		public String getLine() {
			return this.line;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r1fpdlStruct implements
			routines.system.IPersistableRow<r1fpdlStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String dnivim;

		public String getDnivim() {
			return this.dnivim;
		}

		public String ctpdl;

		public String getCtpdl() {
			return this.ctpdl;
		}

		public String dnompdl;

		public String getDnompdl() {
			return this.dnompdl;
		}

		public String dmrpdl;

		public String getDmrpdl() {
			return this.dmrpdl;
		}

		public String gprmut;

		public String getGprmut() {
			return this.gprmut;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String filler2;

		public String getFiller2() {
			return this.filler2;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.dnupdl = readString(dis);

					this.filler = readString(dis);

					this.article = readString(dis);

					this.dnivim = readString(dis);

					this.ctpdl = readString(dis);

					this.dnompdl = readString(dis);

					this.dmrpdl = readString(dis);

					this.gprmut = readString(dis);

					this.dnupro = readString(dis);

					this.filler2 = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.dnivim, dos);

				// String

				writeString(this.ctpdl, dos);

				// String

				writeString(this.dnompdl, dos);

				// String

				writeString(this.dmrpdl, dos);

				// String

				writeString(this.gprmut, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.filler2, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",filler=" + filler);
			sb.append(",article=" + article);
			sb.append(",dnivim=" + dnivim);
			sb.append(",ctpdl=" + ctpdl);
			sb.append(",dnompdl=" + dnompdl);
			sb.append(",dmrpdl=" + dmrpdl);
			sb.append(",gprmut=" + gprmut);
			sb.append(",dnupro=" + dnupro);
			sb.append(",filler2=" + filler2);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r1fpdlStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r2fpdlStruct implements
			routines.system.IPersistableRow<r2fpdlStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String ccopre;

		public String getCcopre() {
			return this.ccopre;
		}

		public String ccosec;

		public String getCcosec() {
			return this.ccosec;
		}

		public String dnupla;

		public String getDnupla() {
			return this.dnupla;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccoprea;

		public String getCcoprea() {
			return this.ccoprea;
		}

		public String ccoseca;

		public String getCcoseca() {
			return this.ccoseca;
		}

		public String dnuplaa;

		public String getDnuplaa() {
			return this.dnuplaa;
		}

		public String filler2;

		public String getFiller2() {
			return this.filler2;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.ccopre = readString(dis);

					this.ccosec = readString(dis);

					this.dnupla = readString(dis);

					this.dnupdl = readString(dis);

					this.filler = readString(dis);

					this.article = readString(dis);

					this.ccoprea = readString(dis);

					this.ccoseca = readString(dis);

					this.dnuplaa = readString(dis);

					this.filler2 = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.ccopre, dos);

				// String

				writeString(this.ccosec, dos);

				// String

				writeString(this.dnupla, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccoprea, dos);

				// String

				writeString(this.ccoseca, dos);

				// String

				writeString(this.dnuplaa, dos);

				// String

				writeString(this.filler2, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",ccopre=" + ccopre);
			sb.append(",ccosec=" + ccosec);
			sb.append(",dnupla=" + dnupla);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",filler=" + filler);
			sb.append(",article=" + article);
			sb.append(",ccoprea=" + ccoprea);
			sb.append(",ccoseca=" + ccoseca);
			sb.append(",dnuplaa=" + dnuplaa);
			sb.append(",filler2=" + filler2);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r2fpdlStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r3fpdlStruct implements
			routines.system.IPersistableRow<r3fpdlStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String kpdl;

		public String getKpdl() {
			return this.kpdl;
		}

		public String dnulot;

		public String getDnulot() {
			return this.dnulot;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String cconlo;

		public String getCconlo() {
			return this.cconlo;
		}

		public String dcntlo;

		public String getDcntlo() {
			return this.dcntlo;
		}

		public String dnumql;

		public String getDnumql() {
			return this.dnumql;
		}

		public String ddenql;

		public String getDdenql() {
			return this.ddenql;
		}

		public String dfilot;

		public String getDfilot() {
			return this.dfilot;
		}

		public String datact;

		public String getDatact() {
			return this.datact;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String dnuprol;

		public String getDnuprol() {
			return this.dnuprol;
		}

		public String dreflf;

		public String getDreflf() {
			return this.dreflf;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.kpdl = readString(dis);

					this.dnulot = readString(dis);

					this.article = readString(dis);

					this.cconlo = readString(dis);

					this.dcntlo = readString(dis);

					this.dnumql = readString(dis);

					this.ddenql = readString(dis);

					this.dfilot = readString(dis);

					this.datact = readString(dis);

					this.filler = readString(dis);

					this.dnuprol = readString(dis);

					this.dreflf = readString(dis);

					this.ccocif = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.kpdl, dos);

				// String

				writeString(this.dnulot, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.cconlo, dos);

				// String

				writeString(this.dcntlo, dos);

				// String

				writeString(this.dnumql, dos);

				// String

				writeString(this.ddenql, dos);

				// String

				writeString(this.dfilot, dos);

				// String

				writeString(this.datact, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.dnuprol, dos);

				// String

				writeString(this.dreflf, dos);

				// String

				writeString(this.ccocif, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kpdl=" + kpdl);
			sb.append(",dnulot=" + dnulot);
			sb.append(",article=" + article);
			sb.append(",cconlo=" + cconlo);
			sb.append(",dcntlo=" + dcntlo);
			sb.append(",dnumql=" + dnumql);
			sb.append(",ddenql=" + ddenql);
			sb.append(",dfilot=" + dfilot);
			sb.append(",datact=" + datact);
			sb.append(",filler=" + filler);
			sb.append(",dnuprol=" + dnuprol);
			sb.append(",dreflf=" + dreflf);
			sb.append(",ccocif=" + ccocif);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r3fpdlStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputMSPositional_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputMSPositional_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				r1fpdlStruct r1fpdl = new r1fpdlStruct();
				r1fpdlnewStruct r1fpdlnew = new r1fpdlnewStruct();
				r2fpdlStruct r2fpdl = new r2fpdlStruct();
				r2fpdlnewStruct r2fpdlnew = new r2fpdlnewStruct();
				r3fpdlStruct r3fpdl = new r3fpdlStruct();
				r3fpdlnewStruct r3fpdlnew = new r3fpdlnewStruct();

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());
				currentComponent = "tLogRow_7";

				int tos_count_tLogRow_7 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
				java.io.PrintStream consoleOut_tLogRow_7 = null;

				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
				// /////////////////////

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_19 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_19", false);
				start_Hash.put("tFileOutputDelimited_19",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_19";

				int tos_count_tFileOutputDelimited_19 = 0;

				String fileName_tFileOutputDelimited_19 = "";
				fileName_tFileOutputDelimited_19 = (new java.io.File(
						context.target_path + "REVFPDL10.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_19 = null;
				String extension_tFileOutputDelimited_19 = null;
				String directory_tFileOutputDelimited_19 = null;
				if ((fileName_tFileOutputDelimited_19.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_19.lastIndexOf(".") < fileName_tFileOutputDelimited_19
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19;
						extension_tFileOutputDelimited_19 = "";
					} else {
						fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
								.substring(0, fileName_tFileOutputDelimited_19
										.lastIndexOf("."));
						extension_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
								.substring(fileName_tFileOutputDelimited_19
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
							.substring(0, fileName_tFileOutputDelimited_19
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_19.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
								.substring(0, fileName_tFileOutputDelimited_19
										.lastIndexOf("."));
						extension_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
								.substring(fileName_tFileOutputDelimited_19
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19;
						extension_tFileOutputDelimited_19 = "";
					}
					directory_tFileOutputDelimited_19 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_19 = true;
				java.io.File filetFileOutputDelimited_19 = new java.io.File(
						fileName_tFileOutputDelimited_19);
				globalMap.put("tFileOutputDelimited_19_FILE_NAME",
						fileName_tFileOutputDelimited_19);

				String[] headColutFileOutputDelimited_19 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_19 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_19[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_19 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_19[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_19[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_19 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_19[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_19[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_19 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_19[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_19 = 0;
				int splitEvery_tFileOutputDelimited_19 = 1000;
				int splitedFileNo_tFileOutputDelimited_19 = 0;
				int currentRow_tFileOutputDelimited_19 = 0;

				CSVBasicSet_tFileOutputDelimited_19 csvSettings_tFileOutputDelimited_19 = new CSVBasicSet_tFileOutputDelimited_19();
				csvSettings_tFileOutputDelimited_19.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_19.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_19.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_19 != null
						&& directory_tFileOutputDelimited_19.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_19 = new java.io.File(
							directory_tFileOutputDelimited_19);
					if (!dir_tFileOutputDelimited_19.exists()) {
						dir_tFileOutputDelimited_19.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_19 = null;
				try {
					CsvWritertFileOutputDelimited_19 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_19,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_19
							.setSeparator(csvSettings_tFileOutputDelimited_19
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_19
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_19
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_19
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_19.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_19
										.getRowDelim());
					}

					if (filetFileOutputDelimited_19.length() == 0) {

						headColutFileOutputDelimited_19[0] = "ccodep";

						headColutFileOutputDelimited_19[1] = "ccodir";

						headColutFileOutputDelimited_19[2] = "ccocom";

						headColutFileOutputDelimited_19[3] = "ccopre";

						headColutFileOutputDelimited_19[4] = "ccosec";

						headColutFileOutputDelimited_19[5] = "dnupla";

						headColutFileOutputDelimited_19[6] = "dnupdl";

						headColutFileOutputDelimited_19[7] = "article";

						headColutFileOutputDelimited_19[8] = "dnivim";

						headColutFileOutputDelimited_19[9] = "ctpdl";

						headColutFileOutputDelimited_19[10] = "dnompdl";

						headColutFileOutputDelimited_19[11] = "dmrpdl";

						headColutFileOutputDelimited_19[12] = "gprmut";

						headColutFileOutputDelimited_19[13] = "dnupro";

						headColutFileOutputDelimited_19[14] = "ccocif";

						CsvWritertFileOutputDelimited_19
								.writeNext(headColutFileOutputDelimited_19);
						CsvWritertFileOutputDelimited_19.flush();

					}

					CsvWritertFileOutputDelimited_19
							.setEscapeChar(csvSettings_tFileOutputDelimited_19
									.getEscapeChar());
					CsvWritertFileOutputDelimited_19
							.setQuoteChar(csvSettings_tFileOutputDelimited_19
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_19
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_19 begin ] stop
					 */

					/**
					 * [tMap_16 begin ] start
					 */

					ok_Hash.put("tMap_16", false);
					start_Hash.put("tMap_16", System.currentTimeMillis());
					currentComponent = "tMap_16";

					int tos_count_tMap_16 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_16__Struct {
					}
					Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					r1fpdlnewStruct r1fpdlnew_tmp = new r1fpdlnewStruct();
					// ###############################

					/**
					 * [tMap_16 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_17 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_17", false);
					start_Hash.put("tFileOutputDelimited_17",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_17";

					int tos_count_tFileOutputDelimited_17 = 0;

					String fileName_tFileOutputDelimited_17 = "";
					fileName_tFileOutputDelimited_17 = (new java.io.File(
							context.target_path + "REVFPDL20.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_17 = null;
					String extension_tFileOutputDelimited_17 = null;
					String directory_tFileOutputDelimited_17 = null;
					if ((fileName_tFileOutputDelimited_17.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_17.lastIndexOf(".") < fileName_tFileOutputDelimited_17
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
							extension_tFileOutputDelimited_17 = "";
						} else {
							fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
									.substring(0,
											fileName_tFileOutputDelimited_17
													.lastIndexOf("."));
							extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
									.substring(fileName_tFileOutputDelimited_17
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(0, fileName_tFileOutputDelimited_17
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_17.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
									.substring(0,
											fileName_tFileOutputDelimited_17
													.lastIndexOf("."));
							extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
									.substring(fileName_tFileOutputDelimited_17
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
							extension_tFileOutputDelimited_17 = "";
						}
						directory_tFileOutputDelimited_17 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_17 = true;
					java.io.File filetFileOutputDelimited_17 = new java.io.File(
							fileName_tFileOutputDelimited_17);
					globalMap.put("tFileOutputDelimited_17_FILE_NAME",
							fileName_tFileOutputDelimited_17);

					String[] headColutFileOutputDelimited_17 = new String[12];
					class CSVBasicSet_tFileOutputDelimited_17 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_17[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_17 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_17[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator(";");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_17[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_17 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_17[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_17[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_17 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_17[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_17 = 0;
					int splitEvery_tFileOutputDelimited_17 = 1000;
					int splitedFileNo_tFileOutputDelimited_17 = 0;
					int currentRow_tFileOutputDelimited_17 = 0;

					CSVBasicSet_tFileOutputDelimited_17 csvSettings_tFileOutputDelimited_17 = new CSVBasicSet_tFileOutputDelimited_17();
					csvSettings_tFileOutputDelimited_17.setFieldSeparator(";");
					csvSettings_tFileOutputDelimited_17.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_17
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_17 != null
							&& directory_tFileOutputDelimited_17.trim()
									.length() != 0) {
						java.io.File dir_tFileOutputDelimited_17 = new java.io.File(
								directory_tFileOutputDelimited_17);
						if (!dir_tFileOutputDelimited_17.exists()) {
							dir_tFileOutputDelimited_17.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_17 = null;
					try {
						CsvWritertFileOutputDelimited_17 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_17,
														false), "ISO-8859-15")));
						CsvWritertFileOutputDelimited_17
								.setSeparator(csvSettings_tFileOutputDelimited_17
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_17
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_17
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_17
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_17.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_17
											.getRowDelim());
						}

						if (filetFileOutputDelimited_17.length() == 0) {

							headColutFileOutputDelimited_17[0] = "ccodep";

							headColutFileOutputDelimited_17[1] = "ccodir";

							headColutFileOutputDelimited_17[2] = "ccocom";

							headColutFileOutputDelimited_17[3] = "ccopre";

							headColutFileOutputDelimited_17[4] = "ccosec";

							headColutFileOutputDelimited_17[5] = "dnupla";

							headColutFileOutputDelimited_17[6] = "dnupdl";

							headColutFileOutputDelimited_17[7] = "article";

							headColutFileOutputDelimited_17[8] = "ccoprea";

							headColutFileOutputDelimited_17[9] = "ccoseca";

							headColutFileOutputDelimited_17[10] = "dnuplaa";

							headColutFileOutputDelimited_17[11] = "ccocif";

							CsvWritertFileOutputDelimited_17
									.writeNext(headColutFileOutputDelimited_17);
							CsvWritertFileOutputDelimited_17.flush();

						}

						CsvWritertFileOutputDelimited_17
								.setEscapeChar(csvSettings_tFileOutputDelimited_17
										.getEscapeChar());
						CsvWritertFileOutputDelimited_17
								.setQuoteChar(csvSettings_tFileOutputDelimited_17
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_17
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_17 begin ] stop
						 */

						/**
						 * [tMap_17 begin ] start
						 */

						ok_Hash.put("tMap_17", false);
						start_Hash.put("tMap_17", System.currentTimeMillis());
						currentComponent = "tMap_17";

						int tos_count_tMap_17 = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_17__Struct {
						}
						Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						r2fpdlnewStruct r2fpdlnew_tmp = new r2fpdlnewStruct();
						// ###############################

						/**
						 * [tMap_17 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_18 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_18", false);
						start_Hash.put("tFileOutputDelimited_18",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_18";

						int tos_count_tFileOutputDelimited_18 = 0;

						String fileName_tFileOutputDelimited_18 = "";
						fileName_tFileOutputDelimited_18 = (new java.io.File(
								context.target_path + "REVFPDL30.csv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_18 = null;
						String extension_tFileOutputDelimited_18 = null;
						String directory_tFileOutputDelimited_18 = null;
						if ((fileName_tFileOutputDelimited_18.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_18
									.lastIndexOf(".") < fileName_tFileOutputDelimited_18
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
								extension_tFileOutputDelimited_18 = "";
							} else {
								fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
										.substring(0,
												fileName_tFileOutputDelimited_18
														.lastIndexOf("."));
								extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
										.substring(fileName_tFileOutputDelimited_18
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
									.substring(0,
											fileName_tFileOutputDelimited_18
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_18
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
										.substring(0,
												fileName_tFileOutputDelimited_18
														.lastIndexOf("."));
								extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
										.substring(fileName_tFileOutputDelimited_18
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
								extension_tFileOutputDelimited_18 = "";
							}
							directory_tFileOutputDelimited_18 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_18 = true;
						java.io.File filetFileOutputDelimited_18 = new java.io.File(
								fileName_tFileOutputDelimited_18);
						globalMap.put("tFileOutputDelimited_18_FILE_NAME",
								fileName_tFileOutputDelimited_18);

						String[] headColutFileOutputDelimited_18 = new String[12];
						class CSVBasicSet_tFileOutputDelimited_18 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_18[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_18 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_18[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator(";");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_18[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_18 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_18[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_18[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_18 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_18[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_18 = 0;
						int splitEvery_tFileOutputDelimited_18 = 1000;
						int splitedFileNo_tFileOutputDelimited_18 = 0;
						int currentRow_tFileOutputDelimited_18 = 0;

						CSVBasicSet_tFileOutputDelimited_18 csvSettings_tFileOutputDelimited_18 = new CSVBasicSet_tFileOutputDelimited_18();
						csvSettings_tFileOutputDelimited_18
								.setFieldSeparator(";");
						csvSettings_tFileOutputDelimited_18
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_18
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_18 != null
								&& directory_tFileOutputDelimited_18.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_18 = new java.io.File(
									directory_tFileOutputDelimited_18);
							if (!dir_tFileOutputDelimited_18.exists()) {
								dir_tFileOutputDelimited_18.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_18 = null;
						try {
							CsvWritertFileOutputDelimited_18 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_18,
															false),
													"ISO-8859-15")));
							CsvWritertFileOutputDelimited_18
									.setSeparator(csvSettings_tFileOutputDelimited_18
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_18
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_18
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_18
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_18.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_18
												.getRowDelim());
							}

							if (filetFileOutputDelimited_18.length() == 0) {

								headColutFileOutputDelimited_18[0] = "kpdl";

								headColutFileOutputDelimited_18[1] = "dnulot";

								headColutFileOutputDelimited_18[2] = "article";

								headColutFileOutputDelimited_18[3] = "cconlo";

								headColutFileOutputDelimited_18[4] = "dcntlo";

								headColutFileOutputDelimited_18[5] = "dnumql";

								headColutFileOutputDelimited_18[6] = "ddenql";

								headColutFileOutputDelimited_18[7] = "dfilot";

								headColutFileOutputDelimited_18[8] = "datact";

								headColutFileOutputDelimited_18[9] = "dnuprol";

								headColutFileOutputDelimited_18[10] = "dreflf";

								headColutFileOutputDelimited_18[11] = "ccocif";

								CsvWritertFileOutputDelimited_18
										.writeNext(headColutFileOutputDelimited_18);
								CsvWritertFileOutputDelimited_18.flush();

							}

							CsvWritertFileOutputDelimited_18
									.setEscapeChar(csvSettings_tFileOutputDelimited_18
											.getEscapeChar());
							CsvWritertFileOutputDelimited_18
									.setQuoteChar(csvSettings_tFileOutputDelimited_18
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_18
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_18 begin ] stop
							 */

							/**
							 * [tMap_18 begin ] start
							 */

							ok_Hash.put("tMap_18", false);
							start_Hash.put("tMap_18",
									System.currentTimeMillis());
							currentComponent = "tMap_18";

							int tos_count_tMap_18 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_18__Struct {
							}
							Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							r3fpdlnewStruct r3fpdlnew_tmp = new r3fpdlnewStruct();
							// ###############################

							/**
							 * [tMap_18 begin ] stop
							 */

							/**
							 * [tFileInputMSPositional_7 begin ] start
							 */

							ok_Hash.put("tFileInputMSPositional_7", false);
							start_Hash.put("tFileInputMSPositional_7",
									System.currentTimeMillis());
							currentComponent = "tFileInputMSPositional_7";

							int tos_count_tFileInputMSPositional_7 = 0;

							class AdvancedPositionalParser_tFileInputMSPositional_7 {
								private String headerValue;
								private String connName;
								private boolean hasStar = false;
								private boolean checkRowSize = false;
								private boolean trimAll = false;
								private String pattern;
								private int[] begins;
								private int[] ends;
								private int[] sizes;
								private String padding;
								private String alignment;
								private int minimumSize = 0;
								private int numberOfFields = 0;

								public AdvancedPositionalParser_tFileInputMSPositional_7(
										String connName, String headerValue,
										String pattern, boolean checkRowSize,
										boolean trimAll)
										throws java.lang.Exception {
									if (connName == null || headerValue == null
											|| pattern == null)
										throw new java.lang.RuntimeException(
												"invalid connName, headerValue, or pattern");
									this.connName = connName;
									this.headerValue = headerValue;
									this.pattern = pattern;
									this.checkRowSize = checkRowSize;
									this.trimAll = trimAll;
									this.setPattern(pattern);
								}

								/**
								 * this function returns true if the header
								 * passed is the same as the header of the class
								 */
								public boolean headerMatches(String header) {
									return headerValue.equals(header);
								}

								/**
								 * this function is used to set the pattern
								 * specified by user. it also parses the pattern
								 * and determines where each column position
								 * would begin and end, and how many columns
								 * does the pattern have! example: pattern =
								 * "2,4,4,*" this pattern indicates that there
								 * are 4 columns in the schema. also column[1]
								 * has size of 2 and it starts from index 0 to
								 * 2. column[2] is from index 2 to 6, with
								 * length of 4 and so on... note: star
								 * represents the remaining length, and can only
								 * be used in the last column
								 */
								public void setPattern(String pattern)
										throws java.lang.RuntimeException {
									int beginIndex = 0;
									int endIndex = 0;
									int size = 0;
									String[] patternSplit = pattern.split(",");
									begins = new int[patternSplit.length];
									ends = new int[patternSplit.length];
									sizes = new int[patternSplit.length];
									minimumSize = 0;

									for (int i = 0; i < patternSplit.length; i++) {
										numberOfFields++;
										if (("*").equals(patternSplit[i])) {
											if (i != (patternSplit.length - 1)) { // the
																					// star
																					// can
																					// only
																					// be
																					// used
																					// for
																					// the
																					// size
																					// of
																					// the
																					// last
																					// column
												throw new java.lang.RuntimeException(
														"The star (*) in the pattern can only be at the end of the pattern string.");
											} else {
												hasStar = true;
												begins[i] = beginIndex;
												ends[i] = -1;
												sizes[i] = -1;
											}
										} else {
											try {
												size = Integer
														.parseInt(patternSplit[i]);
											} catch (java.lang.Exception e) {
												throw new java.lang.RuntimeException(
														"'"
																+ patternSplit[i]
																+ "' is not a valid integer value  in the pattern: "
																+ pattern);
											}
											if (size <= 0) {
												throw new java.lang.RuntimeException(
														"'"
																+ patternSplit[i]
																+ "' is not a valid integer value  in the pattern: "
																+ pattern);
											}
											endIndex += size;
											begins[i] = beginIndex;
											ends[i] = endIndex;
											beginIndex += size;
											minimumSize += size;
										}
									}
								}

								/**
								 * this function parses the row into fields
								 * based on the values of beings and ends
								 */
								public String[] parseRow(String row)
										throws java.lang.Exception {
									String[] fields = new String[numberOfFields];
									if (begins == null || ends == null
											|| numberOfFields > begins.length
											|| numberOfFields > ends.length) { // this
																				// should
																				// never
																				// happen,
																				// unless
																				// outside
																				// code
																				// has
																				// changed
																				// either
																				// numberOfFields,
																				// beings,
																				// ends
										throw new java.lang.Exception(
												"The PositionalSchema object is not configured correctly. please contact talend support (support@talend.com)");
									}
									if (row != null && row.length() > 0) {
										if (checkRowSize) {
											if (hasStar == false
													&& row.length() != minimumSize) {
												throw new java.lang.Exception(
														"row size does not match the pattern ('"
																+ pattern
																+ "'), expected size is "
																+ minimumSize
																+ ".row size is: "
																+ row.length());
											} else if (minimumSize > row
													.length()) {
												throw new java.lang.Exception(
														"row size too small, expected size is "
																+ minimumSize);
											}
										}
										for (int i = 0; i < numberOfFields; i++) {
											fields[i] = "";
											if (ends[i] == -1) {
												if (row.length() > begins[i]) {
													fields[i] = row
															.substring(begins[i]);
												}
											} else {
												if (row.length() > ends[i]) {
													fields[i] = row.substring(
															begins[i], ends[i]);
												} else if (row.length() > begins[i]) {
													fields[i] = row
															.substring(begins[i]);
												}
											}
											if (trimAll) {
												fields[i] = fields[i].trim();
											}
										}
									}
									return fields;
								}

								/**
								 * returns the minimum size required to contain
								 * the record. this value is driven from the
								 * pattern star at the end of the pattern does
								 * not accumulate to the size
								 */
								public int getMinimumRowSize() {
									return minimumSize;
								}

								/**
								 * returns the number of fields specified in the
								 * pattern
								 */
								public int getNumberOfFieldsExpected() {
									return numberOfFields;
								}
							}

							int nb_line_tFileInputMSPositional_7 = 0;
							int nb_line_rejected_tFileInputMSPositional_7 = 0;
							int nb_line_unknownHeader_tFileInputMSPositional_7 = 0;
							int nb_line_parseError_tFileInputMSPositional_7 = 0;

							int skipHeader_tFileInputMSPositional_7 = 1;
							int skipFooter_tFileInputMSPositional_7 = 0;
							int limit_tFileInputMSPositional_7 = -1;

							String rowSeparator_tFileInputMSPositional_7 = "\n";
							if (rowSeparator_tFileInputMSPositional_7.length() < 1) {
								throw new java.lang.Exception(
										"Row Separator must include at least one character");
							}

							if (skipFooter_tFileInputMSPositional_7 > 0) {
								java.io.BufferedReader temp_in_tFileInputMSPositional_7 = new java.io.BufferedReader(
										new java.io.InputStreamReader(
												new java.io.FileInputStream(/**
												 * 
												 * Start field
												 * tFileInputMSPositional_7
												 * :FILE_NAME
												 */
												context.source_path + "REVFPDL"
														+ context.extfichier/**
												 * 
												 * End field
												 * tFileInputMSPositional_7
												 * :FILE_NAME
												 */
												), "ISO-8859-15"));
								org.talend.fileprocess.delimited.RowParser temp_reader_tFileInputMSPositional_7 = new org.talend.fileprocess.delimited.RowParser(
										temp_in_tFileInputMSPositional_7, "\n",
										true);
								int available_tFileInputMSPositional_7 = (int) temp_reader_tFileInputMSPositional_7
										.getAvailableRowCount(skipFooter_tFileInputMSPositional_7);
								temp_reader_tFileInputMSPositional_7.close();
								temp_in_tFileInputMSPositional_7.close();
								temp_reader_tFileInputMSPositional_7 = null;
								temp_in_tFileInputMSPositional_7 = null;
								if (limit_tFileInputMSPositional_7 < 0) {
									limit_tFileInputMSPositional_7 = available_tFileInputMSPositional_7;
								} else {
									limit_tFileInputMSPositional_7 = (limit_tFileInputMSPositional_7 > available_tFileInputMSPositional_7) ? available_tFileInputMSPositional_7
											: limit_tFileInputMSPositional_7;
								}
							}

							java.io.BufferedReader in_tFileInputMSPositional_7 = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											new java.io.FileInputStream(/**
											 * Start
											 * field tFileInputMSPositional_7:
											 * FILE_NAME
											 */
											context.source_path + "REVFPDL"
													+ context.extfichier/**
											 * End
											 * field tFileInputMSPositional_7:
											 * FILE_NAME
											 */
											), "ISO-8859-15"));
							org.talend.fileprocess.delimited.RowParser reader_tFileInputMSPositional_7 = new org.talend.fileprocess.delimited.RowParser(
									in_tFileInputMSPositional_7, "\n", true);
							reader_tFileInputMSPositional_7
									.setSafetySwitch(true);
							reader_tFileInputMSPositional_7
									.skipHeaders(skipHeader_tFileInputMSPositional_7);

							AdvancedPositionalParser_tFileInputMSPositional_7 schema_r1fpdl_tFileInputMSPositional_7 = new AdvancedPositionalParser_tFileInputMSPositional_7(
									"r1fpdl", "10",
									"2,1,3,3,2,4,3,7,2,1,3,30,20,1,6,5,4",
									false, true);
							if (schema_r1fpdl_tFileInputMSPositional_7
									.getNumberOfFieldsExpected() != 17) {
								throw new java.lang.RuntimeException(
										"Number of columns in the schema does not match the pattern specified for the connection 'r1fpdl' of tFileInputMSPositional_7 component.");
							}
							AdvancedPositionalParser_tFileInputMSPositional_7 schema_r2fpdl_tFileInputMSPositional_7 = new AdvancedPositionalParser_tFileInputMSPositional_7(
									"r2fpdl", "20",
									"2,1,3,3,2,4,3,7,2,3,2,4,57,4", false, true);
							if (schema_r2fpdl_tFileInputMSPositional_7
									.getNumberOfFieldsExpected() != 14) {
								throw new java.lang.RuntimeException(
										"Number of columns in the schema does not match the pattern specified for the connection 'r2fpdl' of tFileInputMSPositional_7 component.");
							}
							AdvancedPositionalParser_tFileInputMSPositional_7 schema_r3fpdl_tFileInputMSPositional_7 = new AdvancedPositionalParser_tFileInputMSPositional_7(
									"r3fpdl", "30",
									"18,7,2,1,9,7,7,20,8,3,6,5,4", false, true);
							if (schema_r3fpdl_tFileInputMSPositional_7
									.getNumberOfFieldsExpected() != 13) {
								throw new java.lang.RuntimeException(
										"Number of columns in the schema does not match the pattern specified for the connection 'r3fpdl' of tFileInputMSPositional_7 component.");
							}

							String hdrpos_tFileInputMSPositional_7 = "25-27";
							if (hdrpos_tFileInputMSPositional_7.indexOf("-") < 0) {
								throw new java.lang.RuntimeException(
										"Please input the header position corretly. for exmaple for first 3 characters enter: '0-3'");
							}
							int hdrStartIndex_tFileInputMSPositional_7 = Integer
									.parseInt(hdrpos_tFileInputMSPositional_7
											.split("-")[0]);
							int hdrEndIndex_tFileInputMSPositional_7 = Integer
									.parseInt(hdrpos_tFileInputMSPositional_7
											.split("-")[1]);
							boolean foundMatchingHeader_tFileInputMSPositional_7 = false;
							String row_tFileInputMSPositional_7 = null;
							String header_tFileInputMSPositional_7 = null;

							while (reader_tFileInputMSPositional_7.readRecord()) {
								r1fpdl = null;
								r2fpdl = null;
								r3fpdl = null;
								row7 = null;
								// parse the header record and match with the
								// associated connection(s)
								row_tFileInputMSPositional_7 = reader_tFileInputMSPositional_7
										.getRowRecord();
								foundMatchingHeader_tFileInputMSPositional_7 = false;
								if (row_tFileInputMSPositional_7 != null
										&& row_tFileInputMSPositional_7
												.length() >= hdrEndIndex_tFileInputMSPositional_7) {
									header_tFileInputMSPositional_7 = row_tFileInputMSPositional_7
											.substring(
													hdrStartIndex_tFileInputMSPositional_7,
													hdrEndIndex_tFileInputMSPositional_7)
											.trim();
									if (schema_r1fpdl_tFileInputMSPositional_7
											.headerMatches(header_tFileInputMSPositional_7)) {
										foundMatchingHeader_tFileInputMSPositional_7 = true;
										r1fpdl = new r1fpdlStruct();
										try {
											String[] fields = schema_r1fpdl_tFileInputMSPositional_7
													.parseRow(row_tFileInputMSPositional_7);
											r1fpdl.ccodep = fields[0];
											r1fpdl.ccodir = fields[1];
											r1fpdl.ccocom = fields[2];
											r1fpdl.ccopre = fields[3];
											r1fpdl.ccosec = fields[4];
											r1fpdl.dnupla = fields[5];
											r1fpdl.dnupdl = fields[6];
											r1fpdl.filler = fields[7];
											r1fpdl.article = fields[8];
											r1fpdl.dnivim = fields[9];
											r1fpdl.ctpdl = fields[10];
											r1fpdl.dnompdl = fields[11];
											r1fpdl.dmrpdl = fields[12];
											r1fpdl.gprmut = fields[13];
											r1fpdl.dnupro = fields[14];
											r1fpdl.filler2 = fields[15];
											r1fpdl.ccocif = fields[16];
											fields = null;
										} catch (java.lang.Exception e) {
											r1fpdl = null;
											nb_line_rejected_tFileInputMSPositional_7++;
											nb_line_parseError_tFileInputMSPositional_7++;
											row7 = new row7Struct();
											row7.errorCode = 1;
											row7.errorMessage = e.getMessage()
													+ " - Line: "
													+ tos_count_tFileInputMSPositional_7;
											row7.line = row_tFileInputMSPositional_7;
										} // catch
									} // if header matches
									if (schema_r2fpdl_tFileInputMSPositional_7
											.headerMatches(header_tFileInputMSPositional_7)) {
										foundMatchingHeader_tFileInputMSPositional_7 = true;
										r2fpdl = new r2fpdlStruct();
										try {
											String[] fields = schema_r2fpdl_tFileInputMSPositional_7
													.parseRow(row_tFileInputMSPositional_7);
											r2fpdl.ccodep = fields[0];
											r2fpdl.ccodir = fields[1];
											r2fpdl.ccocom = fields[2];
											r2fpdl.ccopre = fields[3];
											r2fpdl.ccosec = fields[4];
											r2fpdl.dnupla = fields[5];
											r2fpdl.dnupdl = fields[6];
											r2fpdl.filler = fields[7];
											r2fpdl.article = fields[8];
											r2fpdl.ccoprea = fields[9];
											r2fpdl.ccoseca = fields[10];
											r2fpdl.dnuplaa = fields[11];
											r2fpdl.filler2 = fields[12];
											r2fpdl.ccocif = fields[13];
											fields = null;
										} catch (java.lang.Exception e) {
											r2fpdl = null;
											nb_line_rejected_tFileInputMSPositional_7++;
											nb_line_parseError_tFileInputMSPositional_7++;
											row7 = new row7Struct();
											row7.errorCode = 1;
											row7.errorMessage = e.getMessage()
													+ " - Line: "
													+ tos_count_tFileInputMSPositional_7;
											row7.line = row_tFileInputMSPositional_7;
										} // catch
									} // if header matches
									if (schema_r3fpdl_tFileInputMSPositional_7
											.headerMatches(header_tFileInputMSPositional_7)) {
										foundMatchingHeader_tFileInputMSPositional_7 = true;
										r3fpdl = new r3fpdlStruct();
										try {
											String[] fields = schema_r3fpdl_tFileInputMSPositional_7
													.parseRow(row_tFileInputMSPositional_7);
											r3fpdl.kpdl = fields[0];
											r3fpdl.dnulot = fields[1];
											r3fpdl.article = fields[2];
											r3fpdl.cconlo = fields[3];
											r3fpdl.dcntlo = fields[4];
											r3fpdl.dnumql = fields[5];
											r3fpdl.ddenql = fields[6];
											r3fpdl.dfilot = fields[7];
											r3fpdl.datact = fields[8];
											r3fpdl.filler = fields[9];
											r3fpdl.dnuprol = fields[10];
											r3fpdl.dreflf = fields[11];
											r3fpdl.ccocif = fields[12];
											fields = null;
										} catch (java.lang.Exception e) {
											r3fpdl = null;
											nb_line_rejected_tFileInputMSPositional_7++;
											nb_line_parseError_tFileInputMSPositional_7++;
											row7 = new row7Struct();
											row7.errorCode = 1;
											row7.errorMessage = e.getMessage()
													+ " - Line: "
													+ tos_count_tFileInputMSPositional_7;
											row7.line = row_tFileInputMSPositional_7;
										} // catch
									} // if header matches
									if (foundMatchingHeader_tFileInputMSPositional_7 == false) {
										nb_line_rejected_tFileInputMSPositional_7++;
										nb_line_unknownHeader_tFileInputMSPositional_7++;
										row7 = new row7Struct();
										row7.errorCode = 2;
										row7.errorMessage = "Unknown header value '"
												+ header_tFileInputMSPositional_7
												+ "'";
										row7.line = row_tFileInputMSPositional_7;
									}
								}

								/**
								 * [tFileInputMSPositional_7 begin ] stop
								 */
								/**
								 * [tFileInputMSPositional_7 main ] start
								 */

								currentComponent = "tFileInputMSPositional_7";

								tos_count_tFileInputMSPositional_7++;

								/**
								 * [tFileInputMSPositional_7 main ] stop
								 */
								// Start of branch "row7"
								if (row7 != null) {

									/**
									 * [tLogRow_7 main ] start
									 */

									currentComponent = "tLogRow_7";

									// /////////////////////

									strBuffer_tLogRow_7 = new StringBuilder();

									if (row7.errorCode != null) { //

										strBuffer_tLogRow_7.append(String
												.valueOf(row7.errorCode));

									} //

									strBuffer_tLogRow_7.append("|");

									if (row7.errorMessage != null) { //

										strBuffer_tLogRow_7.append(String
												.valueOf(row7.errorMessage));

									} //

									strBuffer_tLogRow_7.append("|");

									if (row7.line != null) { //

										strBuffer_tLogRow_7.append(String
												.valueOf(row7.line));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap
												.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_7 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(
														System.out));
										globalMap.put("tLogRow_CONSOLE",
												consoleOut_tLogRow_7);
									}

									consoleOut_tLogRow_7
											.println(strBuffer_tLogRow_7
													.toString());
									consoleOut_tLogRow_7.flush();
									nb_line_tLogRow_7++;
									// ////

									// ////

									// /////////////////////

									tos_count_tLogRow_7++;

									/**
									 * [tLogRow_7 main ] stop
									 */

								} // End of branch "row7"

								// Start of branch "r1fpdl"
								if (r1fpdl != null) {

									/**
									 * [tMap_16 main ] start
									 */

									currentComponent = "tMap_16";

									boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_16 = false;
									boolean mainRowRejected_tMap_16 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
										// ###############################
										// # Output tables

										r1fpdlnew = null;

										// # Output table : 'r1fpdlnew'
										r1fpdlnew_tmp.ccodep = r1fpdl.ccodep;
										r1fpdlnew_tmp.ccodir = r1fpdl.ccodir;
										r1fpdlnew_tmp.ccocom = r1fpdl.ccocom;
										r1fpdlnew_tmp.ccopre = r1fpdl.ccopre;
										r1fpdlnew_tmp.ccosec = r1fpdl.ccosec;
										r1fpdlnew_tmp.dnupla = r1fpdl.dnupla;
										r1fpdlnew_tmp.dnupdl = r1fpdl.dnupdl;
										r1fpdlnew_tmp.article = r1fpdl.article;
										r1fpdlnew_tmp.dnivim = r1fpdl.dnivim;
										r1fpdlnew_tmp.ctpdl = r1fpdl.ctpdl;
										r1fpdlnew_tmp.dnompdl = r1fpdl.dnompdl;
										r1fpdlnew_tmp.dmrpdl = r1fpdl.dmrpdl;
										r1fpdlnew_tmp.gprmut = r1fpdl.gprmut;
										r1fpdlnew_tmp.dnupro = r1fpdl.dnupro;
										r1fpdlnew_tmp.ccocif = r1fpdl.ccocif;
										r1fpdlnew = r1fpdlnew_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_16 = false;

									tos_count_tMap_16++;

									/**
									 * [tMap_16 main ] stop
									 */
									// Start of branch "r1fpdlnew"
									if (r1fpdlnew != null) {

										/**
										 * [tFileOutputDelimited_19 main ] start
										 */

										currentComponent = "tFileOutputDelimited_19";

										String[] rowtFileOutputDelimited_19 = new String[15];

										rowtFileOutputDelimited_19[0] = r1fpdlnew.ccodep == null ? ""
												: r1fpdlnew.ccodep;

										rowtFileOutputDelimited_19[1] = r1fpdlnew.ccodir == null ? ""
												: r1fpdlnew.ccodir;

										rowtFileOutputDelimited_19[2] = r1fpdlnew.ccocom == null ? ""
												: r1fpdlnew.ccocom;

										rowtFileOutputDelimited_19[3] = r1fpdlnew.ccopre == null ? ""
												: r1fpdlnew.ccopre;

										rowtFileOutputDelimited_19[4] = r1fpdlnew.ccosec == null ? ""
												: r1fpdlnew.ccosec;

										rowtFileOutputDelimited_19[5] = r1fpdlnew.dnupla == null ? ""
												: r1fpdlnew.dnupla;

										rowtFileOutputDelimited_19[6] = r1fpdlnew.dnupdl == null ? ""
												: r1fpdlnew.dnupdl;

										rowtFileOutputDelimited_19[7] = r1fpdlnew.article == null ? ""
												: r1fpdlnew.article;

										rowtFileOutputDelimited_19[8] = r1fpdlnew.dnivim == null ? ""
												: r1fpdlnew.dnivim;

										rowtFileOutputDelimited_19[9] = r1fpdlnew.ctpdl == null ? ""
												: r1fpdlnew.ctpdl;

										rowtFileOutputDelimited_19[10] = r1fpdlnew.dnompdl == null ? ""
												: r1fpdlnew.dnompdl;

										rowtFileOutputDelimited_19[11] = r1fpdlnew.dmrpdl == null ? ""
												: r1fpdlnew.dmrpdl;

										rowtFileOutputDelimited_19[12] = r1fpdlnew.gprmut == null ? ""
												: r1fpdlnew.gprmut;

										rowtFileOutputDelimited_19[13] = r1fpdlnew.dnupro == null ? ""
												: r1fpdlnew.dnupro;

										rowtFileOutputDelimited_19[14] = r1fpdlnew.ccocif == null ? ""
												: r1fpdlnew.ccocif;

										nb_line_tFileOutputDelimited_19++;
										CsvWritertFileOutputDelimited_19
												.writeNext(rowtFileOutputDelimited_19);

										tos_count_tFileOutputDelimited_19++;

										/**
										 * [tFileOutputDelimited_19 main ] stop
										 */

									} // End of branch "r1fpdlnew"

								} // End of branch "r1fpdl"

								// Start of branch "r2fpdl"
								if (r2fpdl != null) {

									/**
									 * [tMap_17 main ] start
									 */

									currentComponent = "tMap_17";

									boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_17 = false;
									boolean mainRowRejected_tMap_17 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
										// ###############################
										// # Output tables

										r2fpdlnew = null;

										// # Output table : 'r2fpdlnew'
										r2fpdlnew_tmp.ccodep = r2fpdl.ccodep;
										r2fpdlnew_tmp.ccodir = r2fpdl.ccodir;
										r2fpdlnew_tmp.ccocom = r2fpdl.ccocom;
										r2fpdlnew_tmp.ccopre = r2fpdl.ccopre;
										r2fpdlnew_tmp.ccosec = r2fpdl.ccosec;
										r2fpdlnew_tmp.dnupla = r2fpdl.dnupla;
										r2fpdlnew_tmp.dnupdl = r2fpdl.dnupdl;
										r2fpdlnew_tmp.article = r2fpdl.article;
										r2fpdlnew_tmp.ccoprea = r2fpdl.ccoprea;
										r2fpdlnew_tmp.ccoseca = r2fpdl.ccoseca;
										r2fpdlnew_tmp.dnuplaa = r2fpdl.dnuplaa;
										r2fpdlnew_tmp.ccocif = r2fpdl.ccocif;
										r2fpdlnew = r2fpdlnew_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_17 = false;

									tos_count_tMap_17++;

									/**
									 * [tMap_17 main ] stop
									 */
									// Start of branch "r2fpdlnew"
									if (r2fpdlnew != null) {

										/**
										 * [tFileOutputDelimited_17 main ] start
										 */

										currentComponent = "tFileOutputDelimited_17";

										String[] rowtFileOutputDelimited_17 = new String[12];

										rowtFileOutputDelimited_17[0] = r2fpdlnew.ccodep == null ? ""
												: r2fpdlnew.ccodep;

										rowtFileOutputDelimited_17[1] = r2fpdlnew.ccodir == null ? ""
												: r2fpdlnew.ccodir;

										rowtFileOutputDelimited_17[2] = r2fpdlnew.ccocom == null ? ""
												: r2fpdlnew.ccocom;

										rowtFileOutputDelimited_17[3] = r2fpdlnew.ccopre == null ? ""
												: r2fpdlnew.ccopre;

										rowtFileOutputDelimited_17[4] = r2fpdlnew.ccosec == null ? ""
												: r2fpdlnew.ccosec;

										rowtFileOutputDelimited_17[5] = r2fpdlnew.dnupla == null ? ""
												: r2fpdlnew.dnupla;

										rowtFileOutputDelimited_17[6] = r2fpdlnew.dnupdl == null ? ""
												: r2fpdlnew.dnupdl;

										rowtFileOutputDelimited_17[7] = r2fpdlnew.article == null ? ""
												: r2fpdlnew.article;

										rowtFileOutputDelimited_17[8] = r2fpdlnew.ccoprea == null ? ""
												: r2fpdlnew.ccoprea;

										rowtFileOutputDelimited_17[9] = r2fpdlnew.ccoseca == null ? ""
												: r2fpdlnew.ccoseca;

										rowtFileOutputDelimited_17[10] = r2fpdlnew.dnuplaa == null ? ""
												: r2fpdlnew.dnuplaa;

										rowtFileOutputDelimited_17[11] = r2fpdlnew.ccocif == null ? ""
												: r2fpdlnew.ccocif;

										nb_line_tFileOutputDelimited_17++;
										CsvWritertFileOutputDelimited_17
												.writeNext(rowtFileOutputDelimited_17);

										tos_count_tFileOutputDelimited_17++;

										/**
										 * [tFileOutputDelimited_17 main ] stop
										 */

									} // End of branch "r2fpdlnew"

								} // End of branch "r2fpdl"

								// Start of branch "r3fpdl"
								if (r3fpdl != null) {

									/**
									 * [tMap_18 main ] start
									 */

									currentComponent = "tMap_18";

									boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_18 = false;
									boolean mainRowRejected_tMap_18 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
										// ###############################
										// # Output tables

										r3fpdlnew = null;

										// # Output table : 'r3fpdlnew'
										r3fpdlnew_tmp.kpdl = r3fpdl.kpdl;
										r3fpdlnew_tmp.dnulot = r3fpdl.dnulot;
										r3fpdlnew_tmp.article = r3fpdl.article;
										r3fpdlnew_tmp.cconlo = r3fpdl.cconlo;
										r3fpdlnew_tmp.dcntlo = r3fpdl.dcntlo;
										r3fpdlnew_tmp.dnumql = r3fpdl.dnumql;
										r3fpdlnew_tmp.ddenql = r3fpdl.ddenql;
										r3fpdlnew_tmp.dfilot = r3fpdl.dfilot;
										r3fpdlnew_tmp.datact = r3fpdl.datact;
										r3fpdlnew_tmp.dnuprol = r3fpdl.dnuprol;
										r3fpdlnew_tmp.dreflf = r3fpdl.dreflf;
										r3fpdlnew_tmp.ccocif = r3fpdl.ccocif;
										r3fpdlnew = r3fpdlnew_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_18 = false;

									tos_count_tMap_18++;

									/**
									 * [tMap_18 main ] stop
									 */
									// Start of branch "r3fpdlnew"
									if (r3fpdlnew != null) {

										/**
										 * [tFileOutputDelimited_18 main ] start
										 */

										currentComponent = "tFileOutputDelimited_18";

										String[] rowtFileOutputDelimited_18 = new String[12];

										rowtFileOutputDelimited_18[0] = r3fpdlnew.kpdl == null ? ""
												: r3fpdlnew.kpdl;

										rowtFileOutputDelimited_18[1] = r3fpdlnew.dnulot == null ? ""
												: r3fpdlnew.dnulot;

										rowtFileOutputDelimited_18[2] = r3fpdlnew.article == null ? ""
												: r3fpdlnew.article;

										rowtFileOutputDelimited_18[3] = r3fpdlnew.cconlo == null ? ""
												: r3fpdlnew.cconlo;

										rowtFileOutputDelimited_18[4] = r3fpdlnew.dcntlo == null ? ""
												: r3fpdlnew.dcntlo;

										rowtFileOutputDelimited_18[5] = r3fpdlnew.dnumql == null ? ""
												: r3fpdlnew.dnumql;

										rowtFileOutputDelimited_18[6] = r3fpdlnew.ddenql == null ? ""
												: r3fpdlnew.ddenql;

										rowtFileOutputDelimited_18[7] = r3fpdlnew.dfilot == null ? ""
												: r3fpdlnew.dfilot;

										rowtFileOutputDelimited_18[8] = r3fpdlnew.datact == null ? ""
												: r3fpdlnew.datact;

										rowtFileOutputDelimited_18[9] = r3fpdlnew.dnuprol == null ? ""
												: r3fpdlnew.dnuprol;

										rowtFileOutputDelimited_18[10] = r3fpdlnew.dreflf == null ? ""
												: r3fpdlnew.dreflf;

										rowtFileOutputDelimited_18[11] = r3fpdlnew.ccocif == null ? ""
												: r3fpdlnew.ccocif;

										nb_line_tFileOutputDelimited_18++;
										CsvWritertFileOutputDelimited_18
												.writeNext(rowtFileOutputDelimited_18);

										tos_count_tFileOutputDelimited_18++;

										/**
										 * [tFileOutputDelimited_18 main ] stop
										 */

									} // End of branch "r3fpdlnew"

								} // End of branch "r3fpdl"

								/**
								 * [tFileInputMSPositional_7 end ] start
								 */

								currentComponent = "tFileInputMSPositional_7";

								nb_line_tFileInputMSPositional_7++;

								if (limit_tFileInputMSPositional_7 != -1
										&& nb_line_tFileInputMSPositional_7 >= limit_tFileInputMSPositional_7) {
									break;
								}
							}
							reader_tFileInputMSPositional_7.close();
							reader_tFileInputMSPositional_7 = null;
							globalMap.put("tFileInputMSPositional_7_NB_LINE",
									nb_line_tFileInputMSPositional_7);
							globalMap
									.put("tFileInputMSPositional_7_NB_LINE_REJECTED",
											nb_line_rejected_tFileInputMSPositional_7);
							globalMap
									.put("tFileInputMSPositional_7_NB_LINE_UNKOWN_HEADER_TYPES",
											nb_line_unknownHeader_tFileInputMSPositional_7);
							globalMap
									.put("tFileInputMSPositional_7_NB_LINE_PARSE_ERRORS",
											nb_line_parseError_tFileInputMSPositional_7);

							ok_Hash.put("tFileInputMSPositional_7", true);
							end_Hash.put("tFileInputMSPositional_7",
									System.currentTimeMillis());

							/**
							 * [tFileInputMSPositional_7 end ] stop
							 */

							/**
							 * [tMap_18 end ] start
							 */

							currentComponent = "tMap_18";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_18", true);
							end_Hash.put("tMap_18", System.currentTimeMillis());

							/**
							 * [tMap_18 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_18 end ] start
							 */

							currentComponent = "tFileOutputDelimited_18";

						} finally {

							if (CsvWritertFileOutputDelimited_18 != null) {
								CsvWritertFileOutputDelimited_18.close();
							}
							globalMap.put("tFileOutputDelimited_18_NB_LINE",
									nb_line_tFileOutputDelimited_18);
						} // finally

						ok_Hash.put("tFileOutputDelimited_18", true);
						end_Hash.put("tFileOutputDelimited_18",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_18 end ] stop
						 */

						/**
						 * [tMap_17 end ] start
						 */

						currentComponent = "tMap_17";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_17", true);
						end_Hash.put("tMap_17", System.currentTimeMillis());

						/**
						 * [tMap_17 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_17 end ] start
						 */

						currentComponent = "tFileOutputDelimited_17";

					} finally {

						if (CsvWritertFileOutputDelimited_17 != null) {
							CsvWritertFileOutputDelimited_17.close();
						}
						globalMap.put("tFileOutputDelimited_17_NB_LINE",
								nb_line_tFileOutputDelimited_17);
					} // finally

					ok_Hash.put("tFileOutputDelimited_17", true);
					end_Hash.put("tFileOutputDelimited_17",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_17 end ] stop
					 */

					/**
					 * [tMap_16 end ] start
					 */

					currentComponent = "tMap_16";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_16", true);
					end_Hash.put("tMap_16", System.currentTimeMillis());

					/**
					 * [tMap_16 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_19 end ] start
					 */

					currentComponent = "tFileOutputDelimited_19";

				} finally {

					if (CsvWritertFileOutputDelimited_19 != null) {
						CsvWritertFileOutputDelimited_19.close();
					}
					globalMap.put("tFileOutputDelimited_19_NB_LINE",
							nb_line_tFileOutputDelimited_19);
				} // finally

				ok_Hash.put("tFileOutputDelimited_19", true);
				end_Hash.put("tFileOutputDelimited_19",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_19 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

				// ////
				// ////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

				// /////////////////////

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputMSPositional_7_SUBPROCESS_STATE", 1);
	}

	public static class r1rev166newStruct implements
			routines.system.IPersistableRow<r1rev166newStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodepl;

		public String getCcodepl() {
			return this.ccodepl;
		}

		public String ccodirl;

		public String getCcodirl() {
			return this.ccodirl;
		}

		public String ccocoml;

		public String getCcocoml() {
			return this.ccocoml;
		}

		public String ccoprel;

		public String getCcoprel() {
			return this.ccoprel;
		}

		public String cccosecl;

		public String getCccosecl() {
			return this.cccosecl;
		}

		public String dnuplal;

		public String getDnuplal() {
			return this.dnuplal;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String dnulot;

		public String getDnulot() {
			return this.dnulot;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccodebpb;

		public String getCcodebpb() {
			return this.ccodebpb;
		}

		public String ccodirb;

		public String getCcodirb() {
			return this.ccodirb;
		}

		public String ccocomb;

		public String getCcocomb() {
			return this.ccocomb;
		}

		public String ccopreb;

		public String getCcopreb() {
			return this.ccopreb;
		}

		public String invloc;

		public String getInvloc() {
			return this.invloc;
		}

		public String dnumql;

		public String getDnumql() {
			return this.dnumql;
		}

		public String ddenql;

		public String getDdenql() {
			return this.ddenql;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodepl = readString(dis);

					this.ccodirl = readString(dis);

					this.ccocoml = readString(dis);

					this.ccoprel = readString(dis);

					this.cccosecl = readString(dis);

					this.dnuplal = readString(dis);

					this.dnupdl = readString(dis);

					this.dnulot = readString(dis);

					this.article = readString(dis);

					this.ccodebpb = readString(dis);

					this.ccodirb = readString(dis);

					this.ccocomb = readString(dis);

					this.ccopreb = readString(dis);

					this.invloc = readString(dis);

					this.dnumql = readString(dis);

					this.ddenql = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodepl, dos);

				// String

				writeString(this.ccodirl, dos);

				// String

				writeString(this.ccocoml, dos);

				// String

				writeString(this.ccoprel, dos);

				// String

				writeString(this.cccosecl, dos);

				// String

				writeString(this.dnuplal, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.dnulot, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccodebpb, dos);

				// String

				writeString(this.ccodirb, dos);

				// String

				writeString(this.ccocomb, dos);

				// String

				writeString(this.ccopreb, dos);

				// String

				writeString(this.invloc, dos);

				// String

				writeString(this.dnumql, dos);

				// String

				writeString(this.ddenql, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodepl=" + ccodepl);
			sb.append(",ccodirl=" + ccodirl);
			sb.append(",ccocoml=" + ccocoml);
			sb.append(",ccoprel=" + ccoprel);
			sb.append(",cccosecl=" + cccosecl);
			sb.append(",dnuplal=" + dnuplal);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",dnulot=" + dnulot);
			sb.append(",article=" + article);
			sb.append(",ccodebpb=" + ccodebpb);
			sb.append(",ccodirb=" + ccodirb);
			sb.append(",ccocomb=" + ccocomb);
			sb.append(",ccopreb=" + ccopreb);
			sb.append(",invloc=" + invloc);
			sb.append(",dnumql=" + dnumql);
			sb.append(",ddenql=" + ddenql);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r1rev166newStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodepl;

		public String getCcodepl() {
			return this.ccodepl;
		}

		public String ccodirl;

		public String getCcodirl() {
			return this.ccodirl;
		}

		public String ccocoml;

		public String getCcocoml() {
			return this.ccocoml;
		}

		public String ccoprel;

		public String getCcoprel() {
			return this.ccoprel;
		}

		public String cccosecl;

		public String getCccosecl() {
			return this.cccosecl;
		}

		public String dnuplal;

		public String getDnuplal() {
			return this.dnuplal;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String dnulot;

		public String getDnulot() {
			return this.dnulot;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccodebpb;

		public String getCcodebpb() {
			return this.ccodebpb;
		}

		public String ccodirb;

		public String getCcodirb() {
			return this.ccodirb;
		}

		public String ccocomb;

		public String getCcocomb() {
			return this.ccocomb;
		}

		public String ccopreb;

		public String getCcopreb() {
			return this.ccopreb;
		}

		public String invloc;

		public String getInvloc() {
			return this.invloc;
		}

		public String dnumql;

		public String getDnumql() {
			return this.dnumql;
		}

		public String ddenql;

		public String getDdenql() {
			return this.ddenql;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodepl = readString(dis);

					this.ccodirl = readString(dis);

					this.ccocoml = readString(dis);

					this.ccoprel = readString(dis);

					this.cccosecl = readString(dis);

					this.dnuplal = readString(dis);

					this.dnupdl = readString(dis);

					this.dnulot = readString(dis);

					this.article = readString(dis);

					this.ccodebpb = readString(dis);

					this.ccodirb = readString(dis);

					this.ccocomb = readString(dis);

					this.ccopreb = readString(dis);

					this.invloc = readString(dis);

					this.dnumql = readString(dis);

					this.ddenql = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodepl, dos);

				// String

				writeString(this.ccodirl, dos);

				// String

				writeString(this.ccocoml, dos);

				// String

				writeString(this.ccoprel, dos);

				// String

				writeString(this.cccosecl, dos);

				// String

				writeString(this.dnuplal, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.dnulot, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccodebpb, dos);

				// String

				writeString(this.ccodirb, dos);

				// String

				writeString(this.ccocomb, dos);

				// String

				writeString(this.ccopreb, dos);

				// String

				writeString(this.invloc, dos);

				// String

				writeString(this.dnumql, dos);

				// String

				writeString(this.ddenql, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodepl=" + ccodepl);
			sb.append(",ccodirl=" + ccodirl);
			sb.append(",ccocoml=" + ccocoml);
			sb.append(",ccoprel=" + ccoprel);
			sb.append(",cccosecl=" + cccosecl);
			sb.append(",dnuplal=" + dnuplal);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",dnulot=" + dnulot);
			sb.append(",article=" + article);
			sb.append(",ccodebpb=" + ccodebpb);
			sb.append(",ccodirb=" + ccodirb);
			sb.append(",ccocomb=" + ccocomb);
			sb.append(",ccopreb=" + ccopreb);
			sb.append(",invloc=" + invloc);
			sb.append(",dnumql=" + dnumql);
			sb.append(",ddenql=" + ddenql);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodepl;

		public String getCcodepl() {
			return this.ccodepl;
		}

		public String ccodirl;

		public String getCcodirl() {
			return this.ccodirl;
		}

		public String ccocoml;

		public String getCcocoml() {
			return this.ccocoml;
		}

		public String ccoprel;

		public String getCcoprel() {
			return this.ccoprel;
		}

		public String cccosecl;

		public String getCccosecl() {
			return this.cccosecl;
		}

		public String dnuplal;

		public String getDnuplal() {
			return this.dnuplal;
		}

		public String dnupdl;

		public String getDnupdl() {
			return this.dnupdl;
		}

		public String dnulot;

		public String getDnulot() {
			return this.dnulot;
		}

		public String article;

		public String getArticle() {
			return this.article;
		}

		public String ccodebpb;

		public String getCcodebpb() {
			return this.ccodebpb;
		}

		public String ccodirb;

		public String getCcodirb() {
			return this.ccodirb;
		}

		public String ccocomb;

		public String getCcocomb() {
			return this.ccocomb;
		}

		public String ccopreb;

		public String getCcopreb() {
			return this.ccopreb;
		}

		public String invloc;

		public String getInvloc() {
			return this.invloc;
		}

		public String dnumql;

		public String getDnumql() {
			return this.dnumql;
		}

		public String ddenql;

		public String getDdenql() {
			return this.ddenql;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodepl = readString(dis);

					this.ccodirl = readString(dis);

					this.ccocoml = readString(dis);

					this.ccoprel = readString(dis);

					this.cccosecl = readString(dis);

					this.dnuplal = readString(dis);

					this.dnupdl = readString(dis);

					this.dnulot = readString(dis);

					this.article = readString(dis);

					this.ccodebpb = readString(dis);

					this.ccodirb = readString(dis);

					this.ccocomb = readString(dis);

					this.ccopreb = readString(dis);

					this.invloc = readString(dis);

					this.dnumql = readString(dis);

					this.ddenql = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodepl, dos);

				// String

				writeString(this.ccodirl, dos);

				// String

				writeString(this.ccocoml, dos);

				// String

				writeString(this.ccoprel, dos);

				// String

				writeString(this.cccosecl, dos);

				// String

				writeString(this.dnuplal, dos);

				// String

				writeString(this.dnupdl, dos);

				// String

				writeString(this.dnulot, dos);

				// String

				writeString(this.article, dos);

				// String

				writeString(this.ccodebpb, dos);

				// String

				writeString(this.ccodirb, dos);

				// String

				writeString(this.ccocomb, dos);

				// String

				writeString(this.ccopreb, dos);

				// String

				writeString(this.invloc, dos);

				// String

				writeString(this.dnumql, dos);

				// String

				writeString(this.ddenql, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodepl=" + ccodepl);
			sb.append(",ccodirl=" + ccodirl);
			sb.append(",ccocoml=" + ccocoml);
			sb.append(",ccoprel=" + ccoprel);
			sb.append(",cccosecl=" + cccosecl);
			sb.append(",dnuplal=" + dnuplal);
			sb.append(",dnupdl=" + dnupdl);
			sb.append(",dnulot=" + dnulot);
			sb.append(",article=" + article);
			sb.append(",ccodebpb=" + ccodebpb);
			sb.append(",ccodirb=" + ccodirb);
			sb.append(",ccocomb=" + ccocomb);
			sb.append(",ccopreb=" + ccopreb);
			sb.append(",invloc=" + invloc);
			sb.append(",dnumql=" + dnumql);
			sb.append(",ddenql=" + ddenql);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputPositional_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputPositional_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				r1rev166newStruct r1rev166new = new r1rev166newStruct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_20", false);
				start_Hash.put("tFileOutputDelimited_20",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_20";

				int tos_count_tFileOutputDelimited_20 = 0;

				String fileName_tFileOutputDelimited_20 = "";
				fileName_tFileOutputDelimited_20 = (new java.io.File(
						context.target_path + "REVD166.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_20 = null;
				String extension_tFileOutputDelimited_20 = null;
				String directory_tFileOutputDelimited_20 = null;
				if ((fileName_tFileOutputDelimited_20.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_20.lastIndexOf(".") < fileName_tFileOutputDelimited_20
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
						extension_tFileOutputDelimited_20 = "";
					} else {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(0, fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
						extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
							.substring(0, fileName_tFileOutputDelimited_20
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_20.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(0, fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
						extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
						extension_tFileOutputDelimited_20 = "";
					}
					directory_tFileOutputDelimited_20 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_20 = true;
				java.io.File filetFileOutputDelimited_20 = new java.io.File(
						fileName_tFileOutputDelimited_20);
				globalMap.put("tFileOutputDelimited_20_FILE_NAME",
						fileName_tFileOutputDelimited_20);

				String[] headColutFileOutputDelimited_20 = new String[16];
				class CSVBasicSet_tFileOutputDelimited_20 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_20[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_20 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_20[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_20[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_20 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_20[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_20[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_20 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_20[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_20 = 0;
				int splitEvery_tFileOutputDelimited_20 = 1000;
				int splitedFileNo_tFileOutputDelimited_20 = 0;
				int currentRow_tFileOutputDelimited_20 = 0;

				CSVBasicSet_tFileOutputDelimited_20 csvSettings_tFileOutputDelimited_20 = new CSVBasicSet_tFileOutputDelimited_20();
				csvSettings_tFileOutputDelimited_20.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_20.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_20.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_20 != null
						&& directory_tFileOutputDelimited_20.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_20 = new java.io.File(
							directory_tFileOutputDelimited_20);
					if (!dir_tFileOutputDelimited_20.exists()) {
						dir_tFileOutputDelimited_20.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_20 = null;
				try {
					CsvWritertFileOutputDelimited_20 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_20,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_20
							.setSeparator(csvSettings_tFileOutputDelimited_20
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_20
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_20
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_20
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_20.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_20
										.getRowDelim());
					}

					if (filetFileOutputDelimited_20.length() == 0) {

						headColutFileOutputDelimited_20[0] = "ccodepl";

						headColutFileOutputDelimited_20[1] = "ccodirl";

						headColutFileOutputDelimited_20[2] = "ccocoml";

						headColutFileOutputDelimited_20[3] = "ccoprel";

						headColutFileOutputDelimited_20[4] = "cccosecl";

						headColutFileOutputDelimited_20[5] = "dnuplal";

						headColutFileOutputDelimited_20[6] = "dnupdl";

						headColutFileOutputDelimited_20[7] = "dnulot";

						headColutFileOutputDelimited_20[8] = "article";

						headColutFileOutputDelimited_20[9] = "ccodebpb";

						headColutFileOutputDelimited_20[10] = "ccodirb";

						headColutFileOutputDelimited_20[11] = "ccocomb";

						headColutFileOutputDelimited_20[12] = "ccopreb";

						headColutFileOutputDelimited_20[13] = "invloc";

						headColutFileOutputDelimited_20[14] = "dnumql";

						headColutFileOutputDelimited_20[15] = "ddenql";

						CsvWritertFileOutputDelimited_20
								.writeNext(headColutFileOutputDelimited_20);
						CsvWritertFileOutputDelimited_20.flush();

					}

					CsvWritertFileOutputDelimited_20
							.setEscapeChar(csvSettings_tFileOutputDelimited_20
									.getEscapeChar());
					CsvWritertFileOutputDelimited_20
							.setQuoteChar(csvSettings_tFileOutputDelimited_20
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_20
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_20 begin ] stop
					 */

					/**
					 * [tMap_19 begin ] start
					 */

					ok_Hash.put("tMap_19", false);
					start_Hash.put("tMap_19", System.currentTimeMillis());
					currentComponent = "tMap_19";

					int tos_count_tMap_19 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_19__Struct {
					}
					Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					r1rev166newStruct r1rev166new_tmp = new r1rev166newStruct();
					// ###############################

					/**
					 * [tMap_19 begin ] stop
					 */

					/**
					 * [tLogRow_8 begin ] start
					 */

					ok_Hash.put("tLogRow_8", false);
					start_Hash.put("tLogRow_8", System.currentTimeMillis());
					currentComponent = "tLogRow_8";

					int tos_count_tLogRow_8 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
					java.io.PrintStream consoleOut_tLogRow_8 = null;

					StringBuilder strBuffer_tLogRow_8 = null;
					int nb_line_tLogRow_8 = 0;
					// /////////////////////

					/**
					 * [tLogRow_8 begin ] stop
					 */

					/**
					 * [tFileInputPositional_1 begin ] start
					 */

					ok_Hash.put("tFileInputPositional_1", false);
					start_Hash.put("tFileInputPositional_1",
							System.currentTimeMillis());
					currentComponent = "tFileInputPositional_1";

					int tos_count_tFileInputPositional_1 = 0;

					int nb_line_tFileInputPositional_1 = 0;
					int footer_tFileInputPositional_1 = 0;
					int nb_limit_tFileInputPositional_1 = -1;

					class PositionalUtil_tFileInputPositional_1 {
						void setValue_0(row10Struct row10,
								String[] columnValuetFileInputPositional_1)
								throws java.lang.Exception {
							row10.ccodepl = columnValuetFileInputPositional_1[0];

							row10.ccodirl = columnValuetFileInputPositional_1[1];

							row10.ccocoml = columnValuetFileInputPositional_1[2];

							row10.ccoprel = columnValuetFileInputPositional_1[3];

							row10.cccosecl = columnValuetFileInputPositional_1[4];

							row10.dnuplal = columnValuetFileInputPositional_1[5];

							row10.dnupdl = columnValuetFileInputPositional_1[6];

							row10.dnulot = columnValuetFileInputPositional_1[7];

							row10.article = columnValuetFileInputPositional_1[8];

							row10.ccodebpb = columnValuetFileInputPositional_1[9];

							row10.ccodirb = columnValuetFileInputPositional_1[10];

							row10.ccocomb = columnValuetFileInputPositional_1[11];

							row10.ccopreb = columnValuetFileInputPositional_1[12];

							row10.invloc = columnValuetFileInputPositional_1[13];

							row10.dnumql = columnValuetFileInputPositional_1[14];

							row10.ddenql = columnValuetFileInputPositional_1[15];

						}

					}

					PositionalUtil_tFileInputPositional_1 positionalUtil_tFileInputPositional_1 = new PositionalUtil_tFileInputPositional_1();

					Object filename_tFileInputPositional_1 = /**
					 * Start field
					 * tFileInputPositional_1:FILENAME
					 */
					context.source_path + "REVD166" + context.extfichier/**
					 * End
					 * field tFileInputPositional_1:FILENAME
					 */
					;
					java.io.BufferedReader in_tFileInputPositional_1 = null;
					org.talend.fileprocess.delimited.RowParser reader_tFileInputPositional_1 = null;
					String row_tFileInputPositional_1 = null;
					int rowLen_tFileInputPositional_1 = 0;
					String[] columnValuetFileInputPositional_1 = new String[16];
					try {// TD110 begin
						if (filename_tFileInputPositional_1 instanceof java.io.InputStream) {
							in_tFileInputPositional_1 = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											(java.io.InputStream) filename_tFileInputPositional_1,
											"ISO-8859-15"));
						} else {
							in_tFileInputPositional_1 = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											new java.io.FileInputStream(
													String.valueOf(filename_tFileInputPositional_1)),
											"ISO-8859-15"));
						}

						reader_tFileInputPositional_1 = new org.talend.fileprocess.delimited.RowParser(
								in_tFileInputPositional_1, "\n", true);
						reader_tFileInputPositional_1.setSafetySwitch(true);
						reader_tFileInputPositional_1.skipHeaders(0);
						if (footer_tFileInputPositional_1 > 0) {
							int available_tFileInputPositional_1 = (int) reader_tFileInputPositional_1
									.getAvailableRowCount(footer_tFileInputPositional_1);
							reader_tFileInputPositional_1.close();
							if (filename_tFileInputPositional_1 instanceof java.io.InputStream) {
								in_tFileInputPositional_1 = new java.io.BufferedReader(
										new java.io.InputStreamReader(
												(java.io.InputStream) filename_tFileInputPositional_1,
												"ISO-8859-15"));
							} else {
								in_tFileInputPositional_1 = new java.io.BufferedReader(
										new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputPositional_1)),
												"ISO-8859-15"));
							}
							reader_tFileInputPositional_1 = new org.talend.fileprocess.delimited.RowParser(
									in_tFileInputPositional_1, "\n", true);
							reader_tFileInputPositional_1.skipHeaders(0);

							if (nb_limit_tFileInputPositional_1 >= 0) {
								nb_limit_tFileInputPositional_1 = (nb_limit_tFileInputPositional_1 > available_tFileInputPositional_1) ? available_tFileInputPositional_1
										: nb_limit_tFileInputPositional_1;
							} else {
								nb_limit_tFileInputPositional_1 = available_tFileInputPositional_1;
							}
						}

					} catch (java.lang.Exception e) {// TD110 end

						System.err.println(e.getMessage());

					}

					while (nb_limit_tFileInputPositional_1 != 0
							&& reader_tFileInputPositional_1 != null
							&& reader_tFileInputPositional_1.readRecord()) {
						row_tFileInputPositional_1 = reader_tFileInputPositional_1
								.getRowRecord();
						rowLen_tFileInputPositional_1 = row_tFileInputPositional_1
								.length();
						row10 = null;
						row9 = null;

						boolean whetherReject_tFileInputPositional_1 = false;
						row10 = new row10Struct();
						try {

							int substringBegintFileInputPositional_1 = 0, substringEndtFileInputPositional_1 = 0;
							int[] begin_end_tFileInputPositional_1 = new int[2];

							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[0] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 2;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[0] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[1] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 1;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[1] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[2] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 3;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[2] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[3] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 3;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[3] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[4] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 2;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[4] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[5] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 4;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[5] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[6] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 3;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[6] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[7] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 7;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[7] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[8] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 2;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[8] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[9] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 2;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[9] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[10] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 1;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[10] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[11] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 3;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[11] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[12] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 3;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[12] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[13] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 10;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[13] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[14] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 7;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[14] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							if (substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1) {
								columnValuetFileInputPositional_1[15] = "";
							} else {
								substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + 7;

								if (substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1) {
									substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
								}
								columnValuetFileInputPositional_1[15] = row_tFileInputPositional_1
										.substring(
												substringBegintFileInputPositional_1,
												substringEndtFileInputPositional_1);
								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
							}
							positionalUtil_tFileInputPositional_1.setValue_0(
									row10, columnValuetFileInputPositional_1);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputPositional_1 = true;
							row9 = new row9Struct();
							row9.ccodepl = row10.ccodepl;
							row9.ccodirl = row10.ccodirl;
							row9.ccocoml = row10.ccocoml;
							row9.ccoprel = row10.ccoprel;
							row9.cccosecl = row10.cccosecl;
							row9.dnuplal = row10.dnuplal;
							row9.dnupdl = row10.dnupdl;
							row9.dnulot = row10.dnulot;
							row9.article = row10.article;
							row9.ccodebpb = row10.ccodebpb;
							row9.ccodirb = row10.ccodirb;
							row9.ccocomb = row10.ccocomb;
							row9.ccopreb = row10.ccopreb;
							row9.invloc = row10.invloc;
							row9.dnumql = row10.dnumql;
							row9.ddenql = row10.ddenql;
							row9.errorMessage = e.getMessage() + " - Line: "
									+ tos_count_tFileInputPositional_1;
							row10 = null;
						}

						/**
						 * [tFileInputPositional_1 begin ] stop
						 */
						/**
						 * [tFileInputPositional_1 main ] start
						 */

						currentComponent = "tFileInputPositional_1";

						tos_count_tFileInputPositional_1++;

						/**
						 * [tFileInputPositional_1 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMap_19 main ] start
							 */

							currentComponent = "tMap_19";

							boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_19 = false;
							boolean mainRowRejected_tMap_19 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
								// ###############################
								// # Output tables

								r1rev166new = null;

								// # Output table : 'r1rev166new'
								r1rev166new_tmp.ccodepl = row10.ccodepl;
								r1rev166new_tmp.ccodirl = row10.ccodirl;
								r1rev166new_tmp.ccocoml = row10.ccocoml;
								r1rev166new_tmp.ccoprel = row10.ccoprel;
								r1rev166new_tmp.cccosecl = row10.cccosecl;
								r1rev166new_tmp.dnuplal = row10.dnuplal;
								r1rev166new_tmp.dnupdl = row10.dnupdl;
								r1rev166new_tmp.dnulot = row10.dnulot;
								r1rev166new_tmp.article = row10.article;
								r1rev166new_tmp.ccodebpb = row10.ccodebpb;
								r1rev166new_tmp.ccodirb = row10.ccodirb;
								r1rev166new_tmp.ccocomb = row10.ccocomb;
								r1rev166new_tmp.ccopreb = row10.ccopreb;
								r1rev166new_tmp.invloc = row10.invloc;
								r1rev166new_tmp.dnumql = row10.dnumql;
								r1rev166new_tmp.ddenql = row10.ddenql;
								r1rev166new = r1rev166new_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_19 = false;

							tos_count_tMap_19++;

							/**
							 * [tMap_19 main ] stop
							 */
							// Start of branch "r1rev166new"
							if (r1rev166new != null) {

								/**
								 * [tFileOutputDelimited_20 main ] start
								 */

								currentComponent = "tFileOutputDelimited_20";

								String[] rowtFileOutputDelimited_20 = new String[16];

								rowtFileOutputDelimited_20[0] = r1rev166new.ccodepl == null ? ""
										: r1rev166new.ccodepl;

								rowtFileOutputDelimited_20[1] = r1rev166new.ccodirl == null ? ""
										: r1rev166new.ccodirl;

								rowtFileOutputDelimited_20[2] = r1rev166new.ccocoml == null ? ""
										: r1rev166new.ccocoml;

								rowtFileOutputDelimited_20[3] = r1rev166new.ccoprel == null ? ""
										: r1rev166new.ccoprel;

								rowtFileOutputDelimited_20[4] = r1rev166new.cccosecl == null ? ""
										: r1rev166new.cccosecl;

								rowtFileOutputDelimited_20[5] = r1rev166new.dnuplal == null ? ""
										: r1rev166new.dnuplal;

								rowtFileOutputDelimited_20[6] = r1rev166new.dnupdl == null ? ""
										: r1rev166new.dnupdl;

								rowtFileOutputDelimited_20[7] = r1rev166new.dnulot == null ? ""
										: r1rev166new.dnulot;

								rowtFileOutputDelimited_20[8] = r1rev166new.article == null ? ""
										: r1rev166new.article;

								rowtFileOutputDelimited_20[9] = r1rev166new.ccodebpb == null ? ""
										: r1rev166new.ccodebpb;

								rowtFileOutputDelimited_20[10] = r1rev166new.ccodirb == null ? ""
										: r1rev166new.ccodirb;

								rowtFileOutputDelimited_20[11] = r1rev166new.ccocomb == null ? ""
										: r1rev166new.ccocomb;

								rowtFileOutputDelimited_20[12] = r1rev166new.ccopreb == null ? ""
										: r1rev166new.ccopreb;

								rowtFileOutputDelimited_20[13] = r1rev166new.invloc == null ? ""
										: r1rev166new.invloc;

								rowtFileOutputDelimited_20[14] = r1rev166new.dnumql == null ? ""
										: r1rev166new.dnumql;

								rowtFileOutputDelimited_20[15] = r1rev166new.ddenql == null ? ""
										: r1rev166new.ddenql;

								nb_line_tFileOutputDelimited_20++;
								CsvWritertFileOutputDelimited_20
										.writeNext(rowtFileOutputDelimited_20);

								tos_count_tFileOutputDelimited_20++;

								/**
								 * [tFileOutputDelimited_20 main ] stop
								 */

							} // End of branch "r1rev166new"

						} // End of branch "row10"

						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tLogRow_8 main ] start
							 */

							currentComponent = "tLogRow_8";

							// /////////////////////

							strBuffer_tLogRow_8 = new StringBuilder();

							if (row9.ccodepl != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ccodepl));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.ccodirl != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ccodirl));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.ccocoml != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ccocoml));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.ccoprel != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ccoprel));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.cccosecl != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.cccosecl));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.dnuplal != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.dnuplal));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.dnupdl != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.dnupdl));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.dnulot != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.dnulot));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.article != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.article));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.ccodebpb != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ccodebpb));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.ccodirb != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ccodirb));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.ccocomb != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ccocomb));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.ccopreb != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ccopreb));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.invloc != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.invloc));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.dnumql != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.dnumql));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.ddenql != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.ddenql));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.errorCode != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.errorCode));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row9.errorMessage != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row9.errorMessage));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_8 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_8);
							}

							consoleOut_tLogRow_8.println(strBuffer_tLogRow_8
									.toString());
							consoleOut_tLogRow_8.flush();
							nb_line_tLogRow_8++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_8++;

							/**
							 * [tLogRow_8 main ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputPositional_1 end ] start
						 */

						currentComponent = "tFileInputPositional_1";

						nb_line_tFileInputPositional_1++;
						if (nb_limit_tFileInputPositional_1 > 0
								&& nb_line_tFileInputPositional_1 >= nb_limit_tFileInputPositional_1) {
							break;
						}
					}
					if (!(filename_tFileInputPositional_1 instanceof java.io.InputStream)) {
						if (reader_tFileInputPositional_1 != null) {
							reader_tFileInputPositional_1.close();
						}
					}
					globalMap.put("tFileInputPositional_1_NB_LINE",
							nb_line_tFileInputPositional_1);

					ok_Hash.put("tFileInputPositional_1", true);
					end_Hash.put("tFileInputPositional_1",
							System.currentTimeMillis());

					/**
					 * [tFileInputPositional_1 end ] stop
					 */

					/**
					 * [tLogRow_8 end ] start
					 */

					currentComponent = "tLogRow_8";

					// ////
					// ////
					globalMap.put("tLogRow_8_NB_LINE", nb_line_tLogRow_8);

					// /////////////////////

					ok_Hash.put("tLogRow_8", true);
					end_Hash.put("tLogRow_8", System.currentTimeMillis());

					/**
					 * [tLogRow_8 end ] stop
					 */

					/**
					 * [tMap_19 end ] start
					 */

					currentComponent = "tMap_19";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_19", true);
					end_Hash.put("tMap_19", System.currentTimeMillis());

					/**
					 * [tMap_19 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_20 end ] start
					 */

					currentComponent = "tFileOutputDelimited_20";

				} finally {

					if (CsvWritertFileOutputDelimited_20 != null) {
						CsvWritertFileOutputDelimited_20.close();
					}
					globalMap.put("tFileOutputDelimited_20_NB_LINE",
							nb_line_tFileOutputDelimited_20);
				} // finally

				ok_Hash.put("tFileOutputDelimited_20", true);
				end_Hash.put("tFileOutputDelimited_20",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputPositional_1_SUBPROCESS_STATE", 1);
	}

	public static class r1propnewStruct implements
			routines.system.IPersistableRow<r1propnewStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String dnupro;

		public String getDnupro() {
			return this.dnupro;
		}

		public String comptepropcommunal;

		public String getComptepropcommunal() {
			return this.comptepropcommunal;
		}

		public String cgroup;

		public String getCgroup() {
			return this.cgroup;
		}

		public String dnumcp;

		public String getDnumcp() {
			return this.dnumcp;
		}

		public String dnulp;

		public String getDnulp() {
			return this.dnulp;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dnuper;

		public String getDnuper() {
			return this.dnuper;
		}

		public String iddnuper;

		public String getIddnuper() {
			return this.iddnuper;
		}

		public String ccodro;

		public String getCcodro() {
			return this.ccodro;
		}

		public String ccodem;

		public String getCcodem() {
			return this.ccodem;
		}

		public String gdesip;

		public String getGdesip() {
			return this.gdesip;
		}

		public String gtoper;

		public String getGtoper() {
			return this.gtoper;
		}

		public String ccoqua;

		public String getCcoqua() {
			return this.ccoqua;
		}

		public String dnatpr;

		public String getDnatpr() {
			return this.dnatpr;
		}

		public String ccogrm;

		public String getCcogrm() {
			return this.ccogrm;
		}

		public String dsglpm;

		public String getDsglpm() {
			return this.dsglpm;
		}

		public String dforme;

		public String getDforme() {
			return this.dforme;
		}

		public String ddenom;

		public String getDdenom() {
			return this.ddenom;
		}

		public String gtyp3;

		public String getGtyp3() {
			return this.gtyp3;
		}

		public String gtyp4;

		public String getGtyp4() {
			return this.gtyp4;
		}

		public String gtyp5;

		public String getGtyp5() {
			return this.gtyp5;
		}

		public String gtyp6;

		public String getGtyp6() {
			return this.gtyp6;
		}

		public String dlign3;

		public String getDlign3() {
			return this.dlign3;
		}

		public String dlign4;

		public String getDlign4() {
			return this.dlign4;
		}

		public String dlign5;

		public String getDlign5() {
			return this.dlign5;
		}

		public String dlign6;

		public String getDlign6() {
			return this.dlign6;
		}

		public String ccopay;

		public String getCcopay() {
			return this.ccopay;
		}

		public String ccodep1a2;

		public String getCcodep1a2() {
			return this.ccodep1a2;
		}

		public String ccodira;

		public String getCcodira() {
			return this.ccodira;
		}

		public String ccocom_adr;

		public String getCcocom_adr() {
			return this.ccocom_adr;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccopos;

		public String getCcopos() {
			return this.ccopos;
		}

		public String dqualp;

		public String getDqualp() {
			return this.dqualp;
		}

		public String dnomlp;

		public String getDnomlp() {
			return this.dnomlp;
		}

		public String dprnlp;

		public String getDprnlp() {
			return this.dprnlp;
		}

		public String jdatnss;

		public String getJdatnss() {
			return this.jdatnss;
		}

		public String dldnss;

		public String getDldnss() {
			return this.dldnss;
		}

		public String epxnee;

		public String getEpxnee() {
			return this.epxnee;
		}

		public String dnomcp;

		public String getDnomcp() {
			return this.dnomcp;
		}

		public String dprncp;

		public String getDprncp() {
			return this.dprncp;
		}

		public String dsiren;

		public String getDsiren() {
			return this.dsiren;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.dnupro = readString(dis);

					this.comptepropcommunal = readString(dis);

					this.cgroup = readString(dis);

					this.dnumcp = readString(dis);

					this.dnulp = readString(dis);

					this.ccocif = readString(dis);

					this.dnuper = readString(dis);

					this.iddnuper = readString(dis);

					this.ccodro = readString(dis);

					this.ccodem = readString(dis);

					this.gdesip = readString(dis);

					this.gtoper = readString(dis);

					this.ccoqua = readString(dis);

					this.dnatpr = readString(dis);

					this.ccogrm = readString(dis);

					this.dsglpm = readString(dis);

					this.dforme = readString(dis);

					this.ddenom = readString(dis);

					this.gtyp3 = readString(dis);

					this.gtyp4 = readString(dis);

					this.gtyp5 = readString(dis);

					this.gtyp6 = readString(dis);

					this.dlign3 = readString(dis);

					this.dlign4 = readString(dis);

					this.dlign5 = readString(dis);

					this.dlign6 = readString(dis);

					this.ccopay = readString(dis);

					this.ccodep1a2 = readString(dis);

					this.ccodira = readString(dis);

					this.ccocom_adr = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccopos = readString(dis);

					this.dqualp = readString(dis);

					this.dnomlp = readString(dis);

					this.dprnlp = readString(dis);

					this.jdatnss = readString(dis);

					this.dldnss = readString(dis);

					this.epxnee = readString(dis);

					this.dnomcp = readString(dis);

					this.dprncp = readString(dis);

					this.dsiren = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.dnupro, dos);

				// String

				writeString(this.comptepropcommunal, dos);

				// String

				writeString(this.cgroup, dos);

				// String

				writeString(this.dnumcp, dos);

				// String

				writeString(this.dnulp, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.dnuper, dos);

				// String

				writeString(this.iddnuper, dos);

				// String

				writeString(this.ccodro, dos);

				// String

				writeString(this.ccodem, dos);

				// String

				writeString(this.gdesip, dos);

				// String

				writeString(this.gtoper, dos);

				// String

				writeString(this.ccoqua, dos);

				// String

				writeString(this.dnatpr, dos);

				// String

				writeString(this.ccogrm, dos);

				// String

				writeString(this.dsglpm, dos);

				// String

				writeString(this.dforme, dos);

				// String

				writeString(this.ddenom, dos);

				// String

				writeString(this.gtyp3, dos);

				// String

				writeString(this.gtyp4, dos);

				// String

				writeString(this.gtyp5, dos);

				// String

				writeString(this.gtyp6, dos);

				// String

				writeString(this.dlign3, dos);

				// String

				writeString(this.dlign4, dos);

				// String

				writeString(this.dlign5, dos);

				// String

				writeString(this.dlign6, dos);

				// String

				writeString(this.ccopay, dos);

				// String

				writeString(this.ccodep1a2, dos);

				// String

				writeString(this.ccodira, dos);

				// String

				writeString(this.ccocom_adr, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccopos, dos);

				// String

				writeString(this.dqualp, dos);

				// String

				writeString(this.dnomlp, dos);

				// String

				writeString(this.dprnlp, dos);

				// String

				writeString(this.jdatnss, dos);

				// String

				writeString(this.dldnss, dos);

				// String

				writeString(this.epxnee, dos);

				// String

				writeString(this.dnomcp, dos);

				// String

				writeString(this.dprncp, dos);

				// String

				writeString(this.dsiren, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",dnupro=" + dnupro);
			sb.append(",comptepropcommunal=" + comptepropcommunal);
			sb.append(",cgroup=" + cgroup);
			sb.append(",dnumcp=" + dnumcp);
			sb.append(",dnulp=" + dnulp);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dnuper=" + dnuper);
			sb.append(",iddnuper=" + iddnuper);
			sb.append(",ccodro=" + ccodro);
			sb.append(",ccodem=" + ccodem);
			sb.append(",gdesip=" + gdesip);
			sb.append(",gtoper=" + gtoper);
			sb.append(",ccoqua=" + ccoqua);
			sb.append(",dnatpr=" + dnatpr);
			sb.append(",ccogrm=" + ccogrm);
			sb.append(",dsglpm=" + dsglpm);
			sb.append(",dforme=" + dforme);
			sb.append(",ddenom=" + ddenom);
			sb.append(",gtyp3=" + gtyp3);
			sb.append(",gtyp4=" + gtyp4);
			sb.append(",gtyp5=" + gtyp5);
			sb.append(",gtyp6=" + gtyp6);
			sb.append(",dlign3=" + dlign3);
			sb.append(",dlign4=" + dlign4);
			sb.append(",dlign5=" + dlign5);
			sb.append(",dlign6=" + dlign6);
			sb.append(",ccopay=" + ccopay);
			sb.append(",ccodep1a2=" + ccodep1a2);
			sb.append(",ccodira=" + ccodira);
			sb.append(",ccocom_adr=" + ccocom_adr);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccopos=" + ccopos);
			sb.append(",dqualp=" + dqualp);
			sb.append(",dnomlp=" + dnomlp);
			sb.append(",dprnlp=" + dprnlp);
			sb.append(",jdatnss=" + jdatnss);
			sb.append(",dldnss=" + dldnss);
			sb.append(",epxnee=" + epxnee);
			sb.append(",dnomcp=" + dnomcp);
			sb.append(",dprncp=" + dprncp);
			sb.append(",dsiren=" + dsiren);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r1propnewStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String line;

		public String getLine() {
			return this.line;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class r1propStruct implements
			routines.system.IPersistableRow<r1propStruct> {
		final static byte[] commonByteArrayLock_MAJIC_etape1_extractionmajic = new byte[0];
		static byte[] commonByteArray_MAJIC_etape1_extractionmajic = new byte[0];

		public String ccodep;

		public String getCcodep() {
			return this.ccodep;
		}

		public String ccodir;

		public String getCcodir() {
			return this.ccodir;
		}

		public String ccocom;

		public String getCcocom() {
			return this.ccocom;
		}

		public String cgroup;

		public String getCgroup() {
			return this.cgroup;
		}

		public String dnumcp;

		public String getDnumcp() {
			return this.dnumcp;
		}

		public String dnulp;

		public String getDnulp() {
			return this.dnulp;
		}

		public String ccocif;

		public String getCcocif() {
			return this.ccocif;
		}

		public String dnuper;

		public String getDnuper() {
			return this.dnuper;
		}

		public String ccodro;

		public String getCcodro() {
			return this.ccodro;
		}

		public String ccodem;

		public String getCcodem() {
			return this.ccodem;
		}

		public String gdesip;

		public String getGdesip() {
			return this.gdesip;
		}

		public String gtoper;

		public String getGtoper() {
			return this.gtoper;
		}

		public String ccoqua;

		public String getCcoqua() {
			return this.ccoqua;
		}

		public String gnexcf;

		public String getGnexcf() {
			return this.gnexcf;
		}

		public String dtaucf;

		public String getDtaucf() {
			return this.dtaucf;
		}

		public String dnatpr;

		public String getDnatpr() {
			return this.dnatpr;
		}

		public String ccogrm;

		public String getCcogrm() {
			return this.ccogrm;
		}

		public String dsglpm;

		public String getDsglpm() {
			return this.dsglpm;
		}

		public String dforme;

		public String getDforme() {
			return this.dforme;
		}

		public String ddenom;

		public String getDdenom() {
			return this.ddenom;
		}

		public String gtyp3;

		public String getGtyp3() {
			return this.gtyp3;
		}

		public String gtyp4;

		public String getGtyp4() {
			return this.gtyp4;
		}

		public String gtyp5;

		public String getGtyp5() {
			return this.gtyp5;
		}

		public String gtyp6;

		public String getGtyp6() {
			return this.gtyp6;
		}

		public String dlign3;

		public String getDlign3() {
			return this.dlign3;
		}

		public String dlign4;

		public String getDlign4() {
			return this.dlign4;
		}

		public String dlign5;

		public String getDlign5() {
			return this.dlign5;
		}

		public String dlign6;

		public String getDlign6() {
			return this.dlign6;
		}

		public String ccopay;

		public String getCcopay() {
			return this.ccopay;
		}

		public String ccodep1a2;

		public String getCcodep1a2() {
			return this.ccodep1a2;
		}

		public String ccodira;

		public String getCcodira() {
			return this.ccodira;
		}

		public String ccocom_adr;

		public String getCcocom_adr() {
			return this.ccocom_adr;
		}

		public String ccovoi;

		public String getCcovoi() {
			return this.ccovoi;
		}

		public String ccoriv;

		public String getCcoriv() {
			return this.ccoriv;
		}

		public String dnvoiri;

		public String getDnvoiri() {
			return this.dnvoiri;
		}

		public String dindic;

		public String getDindic() {
			return this.dindic;
		}

		public String ccopos;

		public String getCcopos() {
			return this.ccopos;
		}

		public String dnirpp;

		public String getDnirpp() {
			return this.dnirpp;
		}

		public String dqualp;

		public String getDqualp() {
			return this.dqualp;
		}

		public String dnomlp;

		public String getDnomlp() {
			return this.dnomlp;
		}

		public String dprnlp;

		public String getDprnlp() {
			return this.dprnlp;
		}

		public String jdatnss;

		public String getJdatnss() {
			return this.jdatnss;
		}

		public String dldnss;

		public String getDldnss() {
			return this.dldnss;
		}

		public String epxnee;

		public String getEpxnee() {
			return this.epxnee;
		}

		public String dnomcp;

		public String getDnomcp() {
			return this.dnomcp;
		}

		public String dprncp;

		public String getDprncp() {
			return this.dprncp;
		}

		public String topcdi;

		public String getTopcdi() {
			return this.topcdi;
		}

		public String oriard;

		public String getOriard() {
			return this.oriard;
		}

		public String fixard;

		public String getFixard() {
			return this.fixard;
		}

		public String datadr;

		public String getDatadr() {
			return this.datadr;
		}

		public String topdec;

		public String getTopdec() {
			return this.topdec;
		}

		public String datdec;

		public String getDatdec() {
			return this.datdec;
		}

		public String dsiren;

		public String getDsiren() {
			return this.dsiren;
		}

		public String ccmm;

		public String getCcmm() {
			return this.ccmm;
		}

		public String topja;

		public String getTopja() {
			return this.topja;
		}

		public String datja;

		public String getDatja() {
			return this.datja;
		}

		public String filler;

		public String getFiller() {
			return this.filler;
		}

		public String anospi;

		public String getAnospi() {
			return this.anospi;
		}

		public String cblpmo;

		public String getCblpmo() {
			return this.cblpmo;
		}

		public String gtodge;

		public String getGtodge() {
			return this.gtodge;
		}

		public String gpctf;

		public String getGpctf() {
			return this.gpctf;
		}

		public String gpctsb;

		public String getGpctsb() {
			return this.gpctsb;
		}

		public String jmodge;

		public String getJmodge() {
			return this.jmodge;
		}

		public String jandge;

		public String getJandge() {
			return this.jandge;
		}

		public String jantfc;

		public String getJantfc() {
			return this.jantfc;
		}

		public String jantbc;

		public String getJantbc() {
			return this.jantbc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAJIC_etape1_extractionmajic.length) {
					if (length < 1024
							&& commonByteArray_MAJIC_etape1_extractionmajic.length == 0) {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[1024];
					} else {
						commonByteArray_MAJIC_etape1_extractionmajic = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length);
				strReturn = new String(
						commonByteArray_MAJIC_etape1_extractionmajic, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAJIC_etape1_extractionmajic) {

				try {

					int length = 0;

					this.ccodep = readString(dis);

					this.ccodir = readString(dis);

					this.ccocom = readString(dis);

					this.cgroup = readString(dis);

					this.dnumcp = readString(dis);

					this.dnulp = readString(dis);

					this.ccocif = readString(dis);

					this.dnuper = readString(dis);

					this.ccodro = readString(dis);

					this.ccodem = readString(dis);

					this.gdesip = readString(dis);

					this.gtoper = readString(dis);

					this.ccoqua = readString(dis);

					this.gnexcf = readString(dis);

					this.dtaucf = readString(dis);

					this.dnatpr = readString(dis);

					this.ccogrm = readString(dis);

					this.dsglpm = readString(dis);

					this.dforme = readString(dis);

					this.ddenom = readString(dis);

					this.gtyp3 = readString(dis);

					this.gtyp4 = readString(dis);

					this.gtyp5 = readString(dis);

					this.gtyp6 = readString(dis);

					this.dlign3 = readString(dis);

					this.dlign4 = readString(dis);

					this.dlign5 = readString(dis);

					this.dlign6 = readString(dis);

					this.ccopay = readString(dis);

					this.ccodep1a2 = readString(dis);

					this.ccodira = readString(dis);

					this.ccocom_adr = readString(dis);

					this.ccovoi = readString(dis);

					this.ccoriv = readString(dis);

					this.dnvoiri = readString(dis);

					this.dindic = readString(dis);

					this.ccopos = readString(dis);

					this.dnirpp = readString(dis);

					this.dqualp = readString(dis);

					this.dnomlp = readString(dis);

					this.dprnlp = readString(dis);

					this.jdatnss = readString(dis);

					this.dldnss = readString(dis);

					this.epxnee = readString(dis);

					this.dnomcp = readString(dis);

					this.dprncp = readString(dis);

					this.topcdi = readString(dis);

					this.oriard = readString(dis);

					this.fixard = readString(dis);

					this.datadr = readString(dis);

					this.topdec = readString(dis);

					this.datdec = readString(dis);

					this.dsiren = readString(dis);

					this.ccmm = readString(dis);

					this.topja = readString(dis);

					this.datja = readString(dis);

					this.filler = readString(dis);

					this.anospi = readString(dis);

					this.cblpmo = readString(dis);

					this.gtodge = readString(dis);

					this.gpctf = readString(dis);

					this.gpctsb = readString(dis);

					this.jmodge = readString(dis);

					this.jandge = readString(dis);

					this.jantfc = readString(dis);

					this.jantbc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ccodep, dos);

				// String

				writeString(this.ccodir, dos);

				// String

				writeString(this.ccocom, dos);

				// String

				writeString(this.cgroup, dos);

				// String

				writeString(this.dnumcp, dos);

				// String

				writeString(this.dnulp, dos);

				// String

				writeString(this.ccocif, dos);

				// String

				writeString(this.dnuper, dos);

				// String

				writeString(this.ccodro, dos);

				// String

				writeString(this.ccodem, dos);

				// String

				writeString(this.gdesip, dos);

				// String

				writeString(this.gtoper, dos);

				// String

				writeString(this.ccoqua, dos);

				// String

				writeString(this.gnexcf, dos);

				// String

				writeString(this.dtaucf, dos);

				// String

				writeString(this.dnatpr, dos);

				// String

				writeString(this.ccogrm, dos);

				// String

				writeString(this.dsglpm, dos);

				// String

				writeString(this.dforme, dos);

				// String

				writeString(this.ddenom, dos);

				// String

				writeString(this.gtyp3, dos);

				// String

				writeString(this.gtyp4, dos);

				// String

				writeString(this.gtyp5, dos);

				// String

				writeString(this.gtyp6, dos);

				// String

				writeString(this.dlign3, dos);

				// String

				writeString(this.dlign4, dos);

				// String

				writeString(this.dlign5, dos);

				// String

				writeString(this.dlign6, dos);

				// String

				writeString(this.ccopay, dos);

				// String

				writeString(this.ccodep1a2, dos);

				// String

				writeString(this.ccodira, dos);

				// String

				writeString(this.ccocom_adr, dos);

				// String

				writeString(this.ccovoi, dos);

				// String

				writeString(this.ccoriv, dos);

				// String

				writeString(this.dnvoiri, dos);

				// String

				writeString(this.dindic, dos);

				// String

				writeString(this.ccopos, dos);

				// String

				writeString(this.dnirpp, dos);

				// String

				writeString(this.dqualp, dos);

				// String

				writeString(this.dnomlp, dos);

				// String

				writeString(this.dprnlp, dos);

				// String

				writeString(this.jdatnss, dos);

				// String

				writeString(this.dldnss, dos);

				// String

				writeString(this.epxnee, dos);

				// String

				writeString(this.dnomcp, dos);

				// String

				writeString(this.dprncp, dos);

				// String

				writeString(this.topcdi, dos);

				// String

				writeString(this.oriard, dos);

				// String

				writeString(this.fixard, dos);

				// String

				writeString(this.datadr, dos);

				// String

				writeString(this.topdec, dos);

				// String

				writeString(this.datdec, dos);

				// String

				writeString(this.dsiren, dos);

				// String

				writeString(this.ccmm, dos);

				// String

				writeString(this.topja, dos);

				// String

				writeString(this.datja, dos);

				// String

				writeString(this.filler, dos);

				// String

				writeString(this.anospi, dos);

				// String

				writeString(this.cblpmo, dos);

				// String

				writeString(this.gtodge, dos);

				// String

				writeString(this.gpctf, dos);

				// String

				writeString(this.gpctsb, dos);

				// String

				writeString(this.jmodge, dos);

				// String

				writeString(this.jandge, dos);

				// String

				writeString(this.jantfc, dos);

				// String

				writeString(this.jantbc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ccodep=" + ccodep);
			sb.append(",ccodir=" + ccodir);
			sb.append(",ccocom=" + ccocom);
			sb.append(",cgroup=" + cgroup);
			sb.append(",dnumcp=" + dnumcp);
			sb.append(",dnulp=" + dnulp);
			sb.append(",ccocif=" + ccocif);
			sb.append(",dnuper=" + dnuper);
			sb.append(",ccodro=" + ccodro);
			sb.append(",ccodem=" + ccodem);
			sb.append(",gdesip=" + gdesip);
			sb.append(",gtoper=" + gtoper);
			sb.append(",ccoqua=" + ccoqua);
			sb.append(",gnexcf=" + gnexcf);
			sb.append(",dtaucf=" + dtaucf);
			sb.append(",dnatpr=" + dnatpr);
			sb.append(",ccogrm=" + ccogrm);
			sb.append(",dsglpm=" + dsglpm);
			sb.append(",dforme=" + dforme);
			sb.append(",ddenom=" + ddenom);
			sb.append(",gtyp3=" + gtyp3);
			sb.append(",gtyp4=" + gtyp4);
			sb.append(",gtyp5=" + gtyp5);
			sb.append(",gtyp6=" + gtyp6);
			sb.append(",dlign3=" + dlign3);
			sb.append(",dlign4=" + dlign4);
			sb.append(",dlign5=" + dlign5);
			sb.append(",dlign6=" + dlign6);
			sb.append(",ccopay=" + ccopay);
			sb.append(",ccodep1a2=" + ccodep1a2);
			sb.append(",ccodira=" + ccodira);
			sb.append(",ccocom_adr=" + ccocom_adr);
			sb.append(",ccovoi=" + ccovoi);
			sb.append(",ccoriv=" + ccoriv);
			sb.append(",dnvoiri=" + dnvoiri);
			sb.append(",dindic=" + dindic);
			sb.append(",ccopos=" + ccopos);
			sb.append(",dnirpp=" + dnirpp);
			sb.append(",dqualp=" + dqualp);
			sb.append(",dnomlp=" + dnomlp);
			sb.append(",dprnlp=" + dprnlp);
			sb.append(",jdatnss=" + jdatnss);
			sb.append(",dldnss=" + dldnss);
			sb.append(",epxnee=" + epxnee);
			sb.append(",dnomcp=" + dnomcp);
			sb.append(",dprncp=" + dprncp);
			sb.append(",topcdi=" + topcdi);
			sb.append(",oriard=" + oriard);
			sb.append(",fixard=" + fixard);
			sb.append(",datadr=" + datadr);
			sb.append(",topdec=" + topdec);
			sb.append(",datdec=" + datdec);
			sb.append(",dsiren=" + dsiren);
			sb.append(",ccmm=" + ccmm);
			sb.append(",topja=" + topja);
			sb.append(",datja=" + datja);
			sb.append(",filler=" + filler);
			sb.append(",anospi=" + anospi);
			sb.append(",cblpmo=" + cblpmo);
			sb.append(",gtodge=" + gtodge);
			sb.append(",gpctf=" + gpctf);
			sb.append(",gpctsb=" + gpctsb);
			sb.append(",jmodge=" + jmodge);
			sb.append(",jandge=" + jandge);
			sb.append(",jantfc=" + jantfc);
			sb.append(",jantbc=" + jantbc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(r1propStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputMSPositional_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputMSPositional_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				r1propStruct r1prop = new r1propStruct();
				r1propnewStruct r1propnew = new r1propnewStruct();

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());
				currentComponent = "tLogRow_4";

				int tos_count_tLogRow_4 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
				// /////////////////////

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_15", false);
				start_Hash.put("tFileOutputDelimited_15",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_15";

				int tos_count_tFileOutputDelimited_15 = 0;

				String fileName_tFileOutputDelimited_15 = "";
				fileName_tFileOutputDelimited_15 = (new java.io.File(
						context.target_path + "proprietaires.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_15 = null;
				String extension_tFileOutputDelimited_15 = null;
				String directory_tFileOutputDelimited_15 = null;
				if ((fileName_tFileOutputDelimited_15.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") < fileName_tFileOutputDelimited_15
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(0, fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
							.substring(0, fileName_tFileOutputDelimited_15
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(0, fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					}
					directory_tFileOutputDelimited_15 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_15 = true;
				java.io.File filetFileOutputDelimited_15 = new java.io.File(
						fileName_tFileOutputDelimited_15);
				globalMap.put("tFileOutputDelimited_15_FILE_NAME",
						fileName_tFileOutputDelimited_15);

				String[] headColutFileOutputDelimited_15 = new String[47];
				class CSVBasicSet_tFileOutputDelimited_15 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_15[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_15 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_15[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_15[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_15 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_15[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_15[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_15 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_15[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_15 = 0;
				int splitEvery_tFileOutputDelimited_15 = 1000;
				int splitedFileNo_tFileOutputDelimited_15 = 0;
				int currentRow_tFileOutputDelimited_15 = 0;

				CSVBasicSet_tFileOutputDelimited_15 csvSettings_tFileOutputDelimited_15 = new CSVBasicSet_tFileOutputDelimited_15();
				csvSettings_tFileOutputDelimited_15.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_15.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_15.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_15 != null
						&& directory_tFileOutputDelimited_15.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_15 = new java.io.File(
							directory_tFileOutputDelimited_15);
					if (!dir_tFileOutputDelimited_15.exists()) {
						dir_tFileOutputDelimited_15.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_15 = null;
				try {
					CsvWritertFileOutputDelimited_15 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_15,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_15
							.setSeparator(csvSettings_tFileOutputDelimited_15
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_15
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_15
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_15
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_15.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_15
										.getRowDelim());
					}

					if (filetFileOutputDelimited_15.length() == 0) {

						headColutFileOutputDelimited_15[0] = "ccodep";

						headColutFileOutputDelimited_15[1] = "ccodir";

						headColutFileOutputDelimited_15[2] = "ccocom";

						headColutFileOutputDelimited_15[3] = "dnupro";

						headColutFileOutputDelimited_15[4] = "comptepropcommunal";

						headColutFileOutputDelimited_15[5] = "cgroup";

						headColutFileOutputDelimited_15[6] = "dnumcp";

						headColutFileOutputDelimited_15[7] = "dnulp";

						headColutFileOutputDelimited_15[8] = "ccocif";

						headColutFileOutputDelimited_15[9] = "dnuper";

						headColutFileOutputDelimited_15[10] = "iddnuper";

						headColutFileOutputDelimited_15[11] = "ccodro";

						headColutFileOutputDelimited_15[12] = "ccodem";

						headColutFileOutputDelimited_15[13] = "gdesip";

						headColutFileOutputDelimited_15[14] = "gtoper";

						headColutFileOutputDelimited_15[15] = "ccoqua";

						headColutFileOutputDelimited_15[16] = "dnatpr";

						headColutFileOutputDelimited_15[17] = "ccogrm";

						headColutFileOutputDelimited_15[18] = "dsglpm";

						headColutFileOutputDelimited_15[19] = "dforme";

						headColutFileOutputDelimited_15[20] = "ddenom";

						headColutFileOutputDelimited_15[21] = "gtyp3";

						headColutFileOutputDelimited_15[22] = "gtyp4";

						headColutFileOutputDelimited_15[23] = "gtyp5";

						headColutFileOutputDelimited_15[24] = "gtyp6";

						headColutFileOutputDelimited_15[25] = "dlign3";

						headColutFileOutputDelimited_15[26] = "dlign4";

						headColutFileOutputDelimited_15[27] = "dlign5";

						headColutFileOutputDelimited_15[28] = "dlign6";

						headColutFileOutputDelimited_15[29] = "ccopay";

						headColutFileOutputDelimited_15[30] = "ccodep1a2";

						headColutFileOutputDelimited_15[31] = "ccodira";

						headColutFileOutputDelimited_15[32] = "ccocom_adr";

						headColutFileOutputDelimited_15[33] = "ccovoi";

						headColutFileOutputDelimited_15[34] = "ccoriv";

						headColutFileOutputDelimited_15[35] = "dnvoiri";

						headColutFileOutputDelimited_15[36] = "dindic";

						headColutFileOutputDelimited_15[37] = "ccopos";

						headColutFileOutputDelimited_15[38] = "dqualp";

						headColutFileOutputDelimited_15[39] = "dnomlp";

						headColutFileOutputDelimited_15[40] = "dprnlp";

						headColutFileOutputDelimited_15[41] = "jdatnss";

						headColutFileOutputDelimited_15[42] = "dldnss";

						headColutFileOutputDelimited_15[43] = "epxnee";

						headColutFileOutputDelimited_15[44] = "dnomcp";

						headColutFileOutputDelimited_15[45] = "dprncp";

						headColutFileOutputDelimited_15[46] = "dsiren";

						CsvWritertFileOutputDelimited_15
								.writeNext(headColutFileOutputDelimited_15);
						CsvWritertFileOutputDelimited_15.flush();

					}

					CsvWritertFileOutputDelimited_15
							.setEscapeChar(csvSettings_tFileOutputDelimited_15
									.getEscapeChar());
					CsvWritertFileOutputDelimited_15
							.setQuoteChar(csvSettings_tFileOutputDelimited_15
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_15
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_15 begin ] stop
					 */

					/**
					 * [tMap_13 begin ] start
					 */

					ok_Hash.put("tMap_13", false);
					start_Hash.put("tMap_13", System.currentTimeMillis());
					currentComponent = "tMap_13";

					int tos_count_tMap_13 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_13__Struct {
					}
					Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					r1propnewStruct r1propnew_tmp = new r1propnewStruct();
					// ###############################

					/**
					 * [tMap_13 begin ] stop
					 */

					/**
					 * [tFileInputMSPositional_4 begin ] start
					 */

					ok_Hash.put("tFileInputMSPositional_4", false);
					start_Hash.put("tFileInputMSPositional_4",
							System.currentTimeMillis());
					currentComponent = "tFileInputMSPositional_4";

					int tos_count_tFileInputMSPositional_4 = 0;

					class AdvancedPositionalParser_tFileInputMSPositional_4 {
						private String headerValue;
						private String connName;
						private boolean hasStar = false;
						private boolean checkRowSize = false;
						private boolean trimAll = false;
						private String pattern;
						private int[] begins;
						private int[] ends;
						private int[] sizes;
						private String padding;
						private String alignment;
						private int minimumSize = 0;
						private int numberOfFields = 0;

						public AdvancedPositionalParser_tFileInputMSPositional_4(
								String connName, String headerValue,
								String pattern, boolean checkRowSize,
								boolean trimAll) throws java.lang.Exception {
							if (connName == null || headerValue == null
									|| pattern == null)
								throw new java.lang.RuntimeException(
										"invalid connName, headerValue, or pattern");
							this.connName = connName;
							this.headerValue = headerValue;
							this.pattern = pattern;
							this.checkRowSize = checkRowSize;
							this.trimAll = trimAll;
							this.setPattern(pattern);
						}

						/**
						 * this function returns true if the header passed is
						 * the same as the header of the class
						 */
						public boolean headerMatches(String header) {
							return headerValue.equals(header);
						}

						/**
						 * this function is used to set the pattern specified by
						 * user. it also parses the pattern and determines where
						 * each column position would begin and end, and how
						 * many columns does the pattern have! example: pattern
						 * = "2,4,4,*" this pattern indicates that there are 4
						 * columns in the schema. also column[1] has size of 2
						 * and it starts from index 0 to 2. column[2] is from
						 * index 2 to 6, with length of 4 and so on... note:
						 * star represents the remaining length, and can only be
						 * used in the last column
						 */
						public void setPattern(String pattern)
								throws java.lang.RuntimeException {
							int beginIndex = 0;
							int endIndex = 0;
							int size = 0;
							String[] patternSplit = pattern.split(",");
							begins = new int[patternSplit.length];
							ends = new int[patternSplit.length];
							sizes = new int[patternSplit.length];
							minimumSize = 0;

							for (int i = 0; i < patternSplit.length; i++) {
								numberOfFields++;
								if (("*").equals(patternSplit[i])) {
									if (i != (patternSplit.length - 1)) { // the
																			// star
																			// can
																			// only
																			// be
																			// used
																			// for
																			// the
																			// size
																			// of
																			// the
																			// last
																			// column
										throw new java.lang.RuntimeException(
												"The star (*) in the pattern can only be at the end of the pattern string.");
									} else {
										hasStar = true;
										begins[i] = beginIndex;
										ends[i] = -1;
										sizes[i] = -1;
									}
								} else {
									try {
										size = Integer
												.parseInt(patternSplit[i]);
									} catch (java.lang.Exception e) {
										throw new java.lang.RuntimeException(
												"'"
														+ patternSplit[i]
														+ "' is not a valid integer value  in the pattern: "
														+ pattern);
									}
									if (size <= 0) {
										throw new java.lang.RuntimeException(
												"'"
														+ patternSplit[i]
														+ "' is not a valid integer value  in the pattern: "
														+ pattern);
									}
									endIndex += size;
									begins[i] = beginIndex;
									ends[i] = endIndex;
									beginIndex += size;
									minimumSize += size;
								}
							}
						}

						/**
						 * this function parses the row into fields based on the
						 * values of beings and ends
						 */
						public String[] parseRow(String row)
								throws java.lang.Exception {
							String[] fields = new String[numberOfFields];
							if (begins == null || ends == null
									|| numberOfFields > begins.length
									|| numberOfFields > ends.length) { // this
																		// should
																		// never
																		// happen,
																		// unless
																		// outside
																		// code
																		// has
																		// changed
																		// either
																		// numberOfFields,
																		// beings,
																		// ends
								throw new java.lang.Exception(
										"The PositionalSchema object is not configured correctly. please contact talend support (support@talend.com)");
							}
							if (row != null && row.length() > 0) {
								if (checkRowSize) {
									if (hasStar == false
											&& row.length() != minimumSize) {
										throw new java.lang.Exception(
												"row size does not match the pattern ('"
														+ pattern
														+ "'), expected size is "
														+ minimumSize
														+ ".row size is: "
														+ row.length());
									} else if (minimumSize > row.length()) {
										throw new java.lang.Exception(
												"row size too small, expected size is "
														+ minimumSize);
									}
								}
								for (int i = 0; i < numberOfFields; i++) {
									fields[i] = "";
									if (ends[i] == -1) {
										if (row.length() > begins[i]) {
											fields[i] = row
													.substring(begins[i]);
										}
									} else {
										if (row.length() > ends[i]) {
											fields[i] = row.substring(
													begins[i], ends[i]);
										} else if (row.length() > begins[i]) {
											fields[i] = row
													.substring(begins[i]);
										}
									}
									if (trimAll) {
										fields[i] = fields[i].trim();
									}
								}
							}
							return fields;
						}

						/**
						 * returns the minimum size required to contain the
						 * record. this value is driven from the pattern star at
						 * the end of the pattern does not accumulate to the
						 * size
						 */
						public int getMinimumRowSize() {
							return minimumSize;
						}

						/**
						 * returns the number of fields specified in the pattern
						 */
						public int getNumberOfFieldsExpected() {
							return numberOfFields;
						}
					}

					int nb_line_tFileInputMSPositional_4 = 0;
					int nb_line_rejected_tFileInputMSPositional_4 = 0;
					int nb_line_unknownHeader_tFileInputMSPositional_4 = 0;
					int nb_line_parseError_tFileInputMSPositional_4 = 0;

					int skipHeader_tFileInputMSPositional_4 = 3;
					int skipFooter_tFileInputMSPositional_4 = 0;
					int limit_tFileInputMSPositional_4 = -1;

					String rowSeparator_tFileInputMSPositional_4 = "\n";
					if (rowSeparator_tFileInputMSPositional_4.length() < 1) {
						throw new java.lang.Exception(
								"Row Separator must include at least one character");
					}

					if (skipFooter_tFileInputMSPositional_4 > 0) {
						java.io.BufferedReader temp_in_tFileInputMSPositional_4 = new java.io.BufferedReader(
								new java.io.InputStreamReader(
										new java.io.FileInputStream(/**
										 * Start
										 * field
										 * tFileInputMSPositional_4:FILE_NAME
										 */
										context.source_path + "REVPROP"
												+ context.extfichier/**
										 * End field
										 * tFileInputMSPositional_4:FILE_NAME
										 */
										), "ISO-8859-15"));
						org.talend.fileprocess.delimited.RowParser temp_reader_tFileInputMSPositional_4 = new org.talend.fileprocess.delimited.RowParser(
								temp_in_tFileInputMSPositional_4, "\n", true);
						int available_tFileInputMSPositional_4 = (int) temp_reader_tFileInputMSPositional_4
								.getAvailableRowCount(skipFooter_tFileInputMSPositional_4);
						temp_reader_tFileInputMSPositional_4.close();
						temp_in_tFileInputMSPositional_4.close();
						temp_reader_tFileInputMSPositional_4 = null;
						temp_in_tFileInputMSPositional_4 = null;
						if (limit_tFileInputMSPositional_4 < 0) {
							limit_tFileInputMSPositional_4 = available_tFileInputMSPositional_4;
						} else {
							limit_tFileInputMSPositional_4 = (limit_tFileInputMSPositional_4 > available_tFileInputMSPositional_4) ? available_tFileInputMSPositional_4
									: limit_tFileInputMSPositional_4;
						}
					}

					java.io.BufferedReader in_tFileInputMSPositional_4 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(/**
									 * Start field
									 * tFileInputMSPositional_4:FILE_NAME
									 */
									context.source_path + "REVPROP"
											+ context.extfichier/**
									 * End field
									 * tFileInputMSPositional_4:FILE_NAME
									 */
									), "ISO-8859-15"));
					org.talend.fileprocess.delimited.RowParser reader_tFileInputMSPositional_4 = new org.talend.fileprocess.delimited.RowParser(
							in_tFileInputMSPositional_4, "\n", true);
					reader_tFileInputMSPositional_4.setSafetySwitch(true);
					reader_tFileInputMSPositional_4
							.skipHeaders(skipHeader_tFileInputMSPositional_4);

					AdvancedPositionalParser_tFileInputMSPositional_4 schema_r1prop_tFileInputMSPositional_4 = new AdvancedPositionalParser_tFileInputMSPositional_4(
							"r1prop",
							"",
							"2,1,3,1,5,2,4,6,1,1,1,1,1,2,3,3,2,10,7,60,1,1,1,1,30,36,30,32,3,2,1,3,5,4,4,1,5,10,3,30,15,10,58,3,30,15,1,1,1,8,1,4,10,1,1,8,4,3,1,1,1,1,2,4,4,4",
							false, true);
					if (schema_r1prop_tFileInputMSPositional_4
							.getNumberOfFieldsExpected() != 66) {
						throw new java.lang.RuntimeException(
								"Number of columns in the schema does not match the pattern specified for the connection 'r1prop' of tFileInputMSPositional_4 component.");
					}

					String hdrpos_tFileInputMSPositional_4 = "0-0";
					if (hdrpos_tFileInputMSPositional_4.indexOf("-") < 0) {
						throw new java.lang.RuntimeException(
								"Please input the header position corretly. for exmaple for first 3 characters enter: '0-3'");
					}
					int hdrStartIndex_tFileInputMSPositional_4 = Integer
							.parseInt(hdrpos_tFileInputMSPositional_4
									.split("-")[0]);
					int hdrEndIndex_tFileInputMSPositional_4 = Integer
							.parseInt(hdrpos_tFileInputMSPositional_4
									.split("-")[1]);
					boolean foundMatchingHeader_tFileInputMSPositional_4 = false;
					String row_tFileInputMSPositional_4 = null;
					String header_tFileInputMSPositional_4 = null;

					while (reader_tFileInputMSPositional_4.readRecord()) {
						r1prop = null;
						row4 = null;
						// parse the header record and match with the associated
						// connection(s)
						row_tFileInputMSPositional_4 = reader_tFileInputMSPositional_4
								.getRowRecord();
						foundMatchingHeader_tFileInputMSPositional_4 = false;
						if (row_tFileInputMSPositional_4 != null
								&& row_tFileInputMSPositional_4.length() >= hdrEndIndex_tFileInputMSPositional_4) {
							header_tFileInputMSPositional_4 = row_tFileInputMSPositional_4
									.substring(
											hdrStartIndex_tFileInputMSPositional_4,
											hdrEndIndex_tFileInputMSPositional_4)
									.trim();
							if (schema_r1prop_tFileInputMSPositional_4
									.headerMatches(header_tFileInputMSPositional_4)) {
								foundMatchingHeader_tFileInputMSPositional_4 = true;
								r1prop = new r1propStruct();
								try {
									String[] fields = schema_r1prop_tFileInputMSPositional_4
											.parseRow(row_tFileInputMSPositional_4);
									r1prop.ccodep = fields[0];
									r1prop.ccodir = fields[1];
									r1prop.ccocom = fields[2];
									r1prop.cgroup = fields[3];
									r1prop.dnumcp = fields[4];
									r1prop.dnulp = fields[5];
									r1prop.ccocif = fields[6];
									r1prop.dnuper = fields[7];
									r1prop.ccodro = fields[8];
									r1prop.ccodem = fields[9];
									r1prop.gdesip = fields[10];
									r1prop.gtoper = fields[11];
									r1prop.ccoqua = fields[12];
									r1prop.gnexcf = fields[13];
									r1prop.dtaucf = fields[14];
									r1prop.dnatpr = fields[15];
									r1prop.ccogrm = fields[16];
									r1prop.dsglpm = fields[17];
									r1prop.dforme = fields[18];
									r1prop.ddenom = fields[19];
									r1prop.gtyp3 = fields[20];
									r1prop.gtyp4 = fields[21];
									r1prop.gtyp5 = fields[22];
									r1prop.gtyp6 = fields[23];
									r1prop.dlign3 = fields[24];
									r1prop.dlign4 = fields[25];
									r1prop.dlign5 = fields[26];
									r1prop.dlign6 = fields[27];
									r1prop.ccopay = fields[28];
									r1prop.ccodep1a2 = fields[29];
									r1prop.ccodira = fields[30];
									r1prop.ccocom_adr = fields[31];
									r1prop.ccovoi = fields[32];
									r1prop.ccoriv = fields[33];
									r1prop.dnvoiri = fields[34];
									r1prop.dindic = fields[35];
									r1prop.ccopos = fields[36];
									r1prop.dnirpp = fields[37];
									r1prop.dqualp = fields[38];
									r1prop.dnomlp = fields[39];
									r1prop.dprnlp = fields[40];
									r1prop.jdatnss = fields[41];
									r1prop.dldnss = fields[42];
									r1prop.epxnee = fields[43];
									r1prop.dnomcp = fields[44];
									r1prop.dprncp = fields[45];
									r1prop.topcdi = fields[46];
									r1prop.oriard = fields[47];
									r1prop.fixard = fields[48];
									r1prop.datadr = fields[49];
									r1prop.topdec = fields[50];
									r1prop.datdec = fields[51];
									r1prop.dsiren = fields[52];
									r1prop.ccmm = fields[53];
									r1prop.topja = fields[54];
									r1prop.datja = fields[55];
									r1prop.filler = fields[56];
									r1prop.anospi = fields[57];
									r1prop.cblpmo = fields[58];
									r1prop.gtodge = fields[59];
									r1prop.gpctf = fields[60];
									r1prop.gpctsb = fields[61];
									r1prop.jmodge = fields[62];
									r1prop.jandge = fields[63];
									r1prop.jantfc = fields[64];
									r1prop.jantbc = fields[65];
									fields = null;
								} catch (java.lang.Exception e) {
									r1prop = null;
									nb_line_rejected_tFileInputMSPositional_4++;
									nb_line_parseError_tFileInputMSPositional_4++;
									row4 = new row4Struct();
									row4.errorCode = 1;
									row4.errorMessage = e.getMessage()
											+ " - Line: "
											+ tos_count_tFileInputMSPositional_4;
									row4.line = row_tFileInputMSPositional_4;
								} // catch
							} // if header matches
							if (foundMatchingHeader_tFileInputMSPositional_4 == false) {
								nb_line_rejected_tFileInputMSPositional_4++;
								nb_line_unknownHeader_tFileInputMSPositional_4++;
								row4 = new row4Struct();
								row4.errorCode = 2;
								row4.errorMessage = "Unknown header value '"
										+ header_tFileInputMSPositional_4 + "'";
								row4.line = row_tFileInputMSPositional_4;
							}
						}

						/**
						 * [tFileInputMSPositional_4 begin ] stop
						 */
						/**
						 * [tFileInputMSPositional_4 main ] start
						 */

						currentComponent = "tFileInputMSPositional_4";

						tos_count_tFileInputMSPositional_4++;

						/**
						 * [tFileInputMSPositional_4 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tLogRow_4 main ] start
							 */

							currentComponent = "tLogRow_4";

							// /////////////////////

							strBuffer_tLogRow_4 = new StringBuilder();

							if (row4.errorCode != null) { //

								strBuffer_tLogRow_4.append(String
										.valueOf(row4.errorCode));

							} //

							strBuffer_tLogRow_4.append("|");

							if (row4.errorMessage != null) { //

								strBuffer_tLogRow_4.append(String
										.valueOf(row4.errorMessage));

							} //

							strBuffer_tLogRow_4.append("|");

							if (row4.line != null) { //

								strBuffer_tLogRow_4.append(String
										.valueOf(row4.line));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_4 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_4);
							}

							consoleOut_tLogRow_4.println(strBuffer_tLogRow_4
									.toString());
							consoleOut_tLogRow_4.flush();
							nb_line_tLogRow_4++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_4++;

							/**
							 * [tLogRow_4 main ] stop
							 */

						} // End of branch "row4"

						// Start of branch "r1prop"
						if (r1prop != null) {

							/**
							 * [tMap_13 main ] start
							 */

							currentComponent = "tMap_13";

							boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13 = false;
							boolean mainRowRejected_tMap_13 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
								// ###############################
								// # Output tables

								r1propnew = null;

								// # Output table : 'r1propnew'
								r1propnew_tmp.ccodep = r1prop.ccodep;
								r1propnew_tmp.ccodir = r1prop.ccodir;
								r1propnew_tmp.ccocom = r1prop.ccocom;
								r1propnew_tmp.dnupro = r1prop.cgroup
										+ r1prop.dnumcp;
								r1propnew_tmp.comptepropcommunal = r1prop.ccodep
										+ r1prop.ccocom
										+ r1prop.cgroup
										+ r1prop.dnumcp;
								r1propnew_tmp.cgroup = r1prop.cgroup;
								r1propnew_tmp.dnumcp = r1prop.dnumcp;
								r1propnew_tmp.dnulp = r1prop.dnulp;
								r1propnew_tmp.ccocif = r1prop.ccocif;
								r1propnew_tmp.dnuper = r1prop.dnuper;
								r1propnew_tmp.iddnuper = r1prop.ccocif
										+ r1prop.ccodep + r1prop.dnuper;
								r1propnew_tmp.ccodro = r1prop.ccodro;
								r1propnew_tmp.ccodem = r1prop.ccodem;
								r1propnew_tmp.gdesip = r1prop.gdesip;
								r1propnew_tmp.gtoper = r1prop.gtoper;
								r1propnew_tmp.ccoqua = r1prop.ccoqua;
								r1propnew_tmp.dnatpr = r1prop.dnatpr;
								r1propnew_tmp.ccogrm = r1prop.ccogrm;
								r1propnew_tmp.dsglpm = r1prop.dsglpm;
								r1propnew_tmp.dforme = r1prop.dforme;
								r1propnew_tmp.ddenom = r1prop.ddenom;
								r1propnew_tmp.gtyp3 = r1prop.gtyp3;
								r1propnew_tmp.gtyp4 = r1prop.gtyp4;
								r1propnew_tmp.gtyp5 = r1prop.gtyp5;
								r1propnew_tmp.gtyp6 = r1prop.gtyp6;
								r1propnew_tmp.dlign3 = r1prop.dlign3;
								r1propnew_tmp.dlign4 = r1prop.dlign4;
								r1propnew_tmp.dlign5 = r1prop.dlign5;
								r1propnew_tmp.dlign6 = r1prop.dlign6;
								r1propnew_tmp.ccopay = r1prop.ccopay;
								r1propnew_tmp.ccodep1a2 = r1prop.ccodep1a2;
								r1propnew_tmp.ccodira = r1prop.ccodira;
								r1propnew_tmp.ccocom_adr = r1prop.ccocom_adr;
								r1propnew_tmp.ccovoi = r1prop.ccovoi;
								r1propnew_tmp.ccoriv = r1prop.ccoriv;
								r1propnew_tmp.dnvoiri = r1prop.dnvoiri;
								r1propnew_tmp.dindic = r1prop.dindic;
								r1propnew_tmp.ccopos = r1prop.ccopos;
								r1propnew_tmp.dqualp = r1prop.dqualp;
								r1propnew_tmp.dnomlp = r1prop.dnomlp;
								r1propnew_tmp.dprnlp = r1prop.dprnlp;
								r1propnew_tmp.jdatnss = r1prop.jdatnss;
								r1propnew_tmp.dldnss = r1prop.dldnss;
								r1propnew_tmp.epxnee = r1prop.epxnee;
								r1propnew_tmp.dnomcp = r1prop.dnomcp;
								r1propnew_tmp.dprncp = r1prop.dprncp;
								r1propnew_tmp.dsiren = r1prop.dsiren;
								r1propnew = r1propnew_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_13 = false;

							tos_count_tMap_13++;

							/**
							 * [tMap_13 main ] stop
							 */
							// Start of branch "r1propnew"
							if (r1propnew != null) {

								/**
								 * [tFileOutputDelimited_15 main ] start
								 */

								currentComponent = "tFileOutputDelimited_15";

								String[] rowtFileOutputDelimited_15 = new String[47];

								rowtFileOutputDelimited_15[0] = r1propnew.ccodep == null ? ""
										: r1propnew.ccodep;

								rowtFileOutputDelimited_15[1] = r1propnew.ccodir == null ? ""
										: r1propnew.ccodir;

								rowtFileOutputDelimited_15[2] = r1propnew.ccocom == null ? ""
										: r1propnew.ccocom;

								rowtFileOutputDelimited_15[3] = r1propnew.dnupro == null ? ""
										: r1propnew.dnupro;

								rowtFileOutputDelimited_15[4] = r1propnew.comptepropcommunal == null ? ""
										: r1propnew.comptepropcommunal;

								rowtFileOutputDelimited_15[5] = r1propnew.cgroup == null ? ""
										: r1propnew.cgroup;

								rowtFileOutputDelimited_15[6] = r1propnew.dnumcp == null ? ""
										: r1propnew.dnumcp;

								rowtFileOutputDelimited_15[7] = r1propnew.dnulp == null ? ""
										: r1propnew.dnulp;

								rowtFileOutputDelimited_15[8] = r1propnew.ccocif == null ? ""
										: r1propnew.ccocif;

								rowtFileOutputDelimited_15[9] = r1propnew.dnuper == null ? ""
										: r1propnew.dnuper;

								rowtFileOutputDelimited_15[10] = r1propnew.iddnuper == null ? ""
										: r1propnew.iddnuper;

								rowtFileOutputDelimited_15[11] = r1propnew.ccodro == null ? ""
										: r1propnew.ccodro;

								rowtFileOutputDelimited_15[12] = r1propnew.ccodem == null ? ""
										: r1propnew.ccodem;

								rowtFileOutputDelimited_15[13] = r1propnew.gdesip == null ? ""
										: r1propnew.gdesip;

								rowtFileOutputDelimited_15[14] = r1propnew.gtoper == null ? ""
										: r1propnew.gtoper;

								rowtFileOutputDelimited_15[15] = r1propnew.ccoqua == null ? ""
										: r1propnew.ccoqua;

								rowtFileOutputDelimited_15[16] = r1propnew.dnatpr == null ? ""
										: r1propnew.dnatpr;

								rowtFileOutputDelimited_15[17] = r1propnew.ccogrm == null ? ""
										: r1propnew.ccogrm;

								rowtFileOutputDelimited_15[18] = r1propnew.dsglpm == null ? ""
										: r1propnew.dsglpm;

								rowtFileOutputDelimited_15[19] = r1propnew.dforme == null ? ""
										: r1propnew.dforme;

								rowtFileOutputDelimited_15[20] = r1propnew.ddenom == null ? ""
										: r1propnew.ddenom;

								rowtFileOutputDelimited_15[21] = r1propnew.gtyp3 == null ? ""
										: r1propnew.gtyp3;

								rowtFileOutputDelimited_15[22] = r1propnew.gtyp4 == null ? ""
										: r1propnew.gtyp4;

								rowtFileOutputDelimited_15[23] = r1propnew.gtyp5 == null ? ""
										: r1propnew.gtyp5;

								rowtFileOutputDelimited_15[24] = r1propnew.gtyp6 == null ? ""
										: r1propnew.gtyp6;

								rowtFileOutputDelimited_15[25] = r1propnew.dlign3 == null ? ""
										: r1propnew.dlign3;

								rowtFileOutputDelimited_15[26] = r1propnew.dlign4 == null ? ""
										: r1propnew.dlign4;

								rowtFileOutputDelimited_15[27] = r1propnew.dlign5 == null ? ""
										: r1propnew.dlign5;

								rowtFileOutputDelimited_15[28] = r1propnew.dlign6 == null ? ""
										: r1propnew.dlign6;

								rowtFileOutputDelimited_15[29] = r1propnew.ccopay == null ? ""
										: r1propnew.ccopay;

								rowtFileOutputDelimited_15[30] = r1propnew.ccodep1a2 == null ? ""
										: r1propnew.ccodep1a2;

								rowtFileOutputDelimited_15[31] = r1propnew.ccodira == null ? ""
										: r1propnew.ccodira;

								rowtFileOutputDelimited_15[32] = r1propnew.ccocom_adr == null ? ""
										: r1propnew.ccocom_adr;

								rowtFileOutputDelimited_15[33] = r1propnew.ccovoi == null ? ""
										: r1propnew.ccovoi;

								rowtFileOutputDelimited_15[34] = r1propnew.ccoriv == null ? ""
										: r1propnew.ccoriv;

								rowtFileOutputDelimited_15[35] = r1propnew.dnvoiri == null ? ""
										: r1propnew.dnvoiri;

								rowtFileOutputDelimited_15[36] = r1propnew.dindic == null ? ""
										: r1propnew.dindic;

								rowtFileOutputDelimited_15[37] = r1propnew.ccopos == null ? ""
										: r1propnew.ccopos;

								rowtFileOutputDelimited_15[38] = r1propnew.dqualp == null ? ""
										: r1propnew.dqualp;

								rowtFileOutputDelimited_15[39] = r1propnew.dnomlp == null ? ""
										: r1propnew.dnomlp;

								rowtFileOutputDelimited_15[40] = r1propnew.dprnlp == null ? ""
										: r1propnew.dprnlp;

								rowtFileOutputDelimited_15[41] = r1propnew.jdatnss == null ? ""
										: r1propnew.jdatnss;

								rowtFileOutputDelimited_15[42] = r1propnew.dldnss == null ? ""
										: r1propnew.dldnss;

								rowtFileOutputDelimited_15[43] = r1propnew.epxnee == null ? ""
										: r1propnew.epxnee;

								rowtFileOutputDelimited_15[44] = r1propnew.dnomcp == null ? ""
										: r1propnew.dnomcp;

								rowtFileOutputDelimited_15[45] = r1propnew.dprncp == null ? ""
										: r1propnew.dprncp;

								rowtFileOutputDelimited_15[46] = r1propnew.dsiren == null ? ""
										: r1propnew.dsiren;

								nb_line_tFileOutputDelimited_15++;
								CsvWritertFileOutputDelimited_15
										.writeNext(rowtFileOutputDelimited_15);

								tos_count_tFileOutputDelimited_15++;

								/**
								 * [tFileOutputDelimited_15 main ] stop
								 */

							} // End of branch "r1propnew"

						} // End of branch "r1prop"

						/**
						 * [tFileInputMSPositional_4 end ] start
						 */

						currentComponent = "tFileInputMSPositional_4";

						nb_line_tFileInputMSPositional_4++;

						if (limit_tFileInputMSPositional_4 != -1
								&& nb_line_tFileInputMSPositional_4 >= limit_tFileInputMSPositional_4) {
							break;
						}
					}
					reader_tFileInputMSPositional_4.close();
					reader_tFileInputMSPositional_4 = null;
					globalMap.put("tFileInputMSPositional_4_NB_LINE",
							nb_line_tFileInputMSPositional_4);
					globalMap.put("tFileInputMSPositional_4_NB_LINE_REJECTED",
							nb_line_rejected_tFileInputMSPositional_4);
					globalMap
							.put("tFileInputMSPositional_4_NB_LINE_UNKOWN_HEADER_TYPES",
									nb_line_unknownHeader_tFileInputMSPositional_4);
					globalMap.put(
							"tFileInputMSPositional_4_NB_LINE_PARSE_ERRORS",
							nb_line_parseError_tFileInputMSPositional_4);

					ok_Hash.put("tFileInputMSPositional_4", true);
					end_Hash.put("tFileInputMSPositional_4",
							System.currentTimeMillis());

					/**
					 * [tFileInputMSPositional_4 end ] stop
					 */

					/**
					 * [tMap_13 end ] start
					 */

					currentComponent = "tMap_13";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_13", true);
					end_Hash.put("tMap_13", System.currentTimeMillis());

					/**
					 * [tMap_13 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_15 end ] start
					 */

					currentComponent = "tFileOutputDelimited_15";

				} finally {

					if (CsvWritertFileOutputDelimited_15 != null) {
						CsvWritertFileOutputDelimited_15.close();
					}
					globalMap.put("tFileOutputDelimited_15_NB_LINE",
							nb_line_tFileOutputDelimited_15);
				} // finally

				ok_Hash.put("tFileOutputDelimited_15", true);
				end_Hash.put("tFileOutputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_15 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

				// ////
				// ////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

				// /////////////////////

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputMSPositional_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final etape1_extractionmajic etape1_extractionmajicClass = new etape1_extractionmajic();

		int exitCode = etape1_extractionmajicClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = etape1_extractionmajic.class
					.getClassLoader().getResourceAsStream(
							"majic/etape1_extractionmajic_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.externals_path = (String) context
					.getProperty("externals_path");
			context.extfichier = (String) context.getProperty("extfichier");
			context.source_path = (String) context.getProperty("source_path");
			context.target_path = (String) context.getProperty("target_path");
			context.temp_path = (String) context.getProperty("temp_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("externals_path")) {
				context.externals_path = (String) parentContextMap
						.get("externals_path");
			}
			if (parentContextMap.containsKey("extfichier")) {
				context.extfichier = (String) parentContextMap
						.get("extfichier");
			}
			if (parentContextMap.containsKey("source_path")) {
				context.source_path = (String) parentContextMap
						.get("source_path");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
			if (parentContextMap.containsKey("temp_path")) {
				context.temp_path = (String) parentContextMap.get("temp_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputMSPositional_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputMSPositional_2) {

			e_tFileInputMSPositional_2.printStackTrace();
			globalMap.put("tFileInputMSPositional_2_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tFileInputMSPositional_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputMSPositional_1) {

			e_tFileInputMSPositional_1.printStackTrace();
			globalMap.put("tFileInputMSPositional_1_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tFileInputMSPositional_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputMSPositional_7) {

			e_tFileInputMSPositional_7.printStackTrace();
			globalMap.put("tFileInputMSPositional_7_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tFileInputPositional_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputPositional_1) {

			e_tFileInputPositional_1.printStackTrace();
			globalMap.put("tFileInputPositional_1_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tFileInputMSPositional_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputMSPositional_4) {

			e_tFileInputMSPositional_4.printStackTrace();
			globalMap.put("tFileInputMSPositional_4_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : etape1_extractionmajic");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 786804 characters generated by Talend Open Studio for Data Integration on the
 * 8 janvier 2014 18:58:22 CET
 ************************************************************************************************/
