// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dvf.b_extraction_donnees_avec_cles_0_2;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: B_extraction_donnees_avec_cles Purpose: extraction des données, transformations et distribution en tables<br>
 * Description: Extraction à partir d'un fichier DVF au format csv dont le nom est spécifié dans "dvf_file" situé dans le répertoire pointé par "source_path"
 Les données sont écrites au format csv et les fichiers sont placés dans le répertoire défini par "target_path"
 Certains composants utilisent un répertoire temporaire permettant de traiter les données sur disque: définir "temp_path".
 Le répertoire "log_path" accueille les fichiers intermédiaires et les fichiers de log (doublons, etc.) <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status DEV
 */
public class B_extraction_donnees_avec_cles implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (db_host != null) {

				this.setProperty("db_host", db_host.toString());

			}

			if (db_login != null) {

				this.setProperty("db_login", db_login.toString());

			}

			if (db_name != null) {

				this.setProperty("db_name", db_name.toString());

			}

			if (db_password != null) {

				this.setProperty("db_password", db_password.toString());

			}

			if (db_port != null) {

				this.setProperty("db_port", db_port.toString());

			}

			if (db_schema != null) {

				this.setProperty("db_schema", db_schema.toString());

			}

			if (dvf_file != null) {

				this.setProperty("dvf_file", dvf_file.toString());

			}

			if (log_path != null) {

				this.setProperty("log_path", log_path.toString());

			}

			if (prefixe_table != null) {

				this.setProperty("prefixe_table", prefixe_table.toString());

			}

			if (source_path != null) {

				this.setProperty("source_path", source_path.toString());

			}

			if (tables_correspondance_path != null) {

				this.setProperty("tables_correspondance_path",
						tables_correspondance_path.toString());

			}

			if (target_path != null) {

				this.setProperty("target_path", target_path.toString());

			}

			if (temp_path != null) {

				this.setProperty("temp_path", temp_path.toString());

			}

		}

		public String db_host;

		public String getDb_host() {
			return this.db_host;
		}

		public String db_login;

		public String getDb_login() {
			return this.db_login;
		}

		public String db_name;

		public String getDb_name() {
			return this.db_name;
		}

		public String db_password;

		public String getDb_password() {
			return this.db_password;
		}

		public String db_port;

		public String getDb_port() {
			return this.db_port;
		}

		public String db_schema;

		public String getDb_schema() {
			return this.db_schema;
		}

		public String dvf_file;

		public String getDvf_file() {
			return this.dvf_file;
		}

		public String log_path;

		public String getLog_path() {
			return this.log_path;
		}

		public String prefixe_table;

		public String getPrefixe_table() {
			return this.prefixe_table;
		}

		public String source_path;

		public String getSource_path() {
			return this.source_path;
		}

		public String tables_correspondance_path;

		public String getTables_correspondance_path() {
			return this.tables_correspondance_path;
		}

		public String target_path;

		public String getTarget_path() {
			return this.target_path;
		}

		public String temp_path;

		public String getTemp_path() {
			return this.temp_path;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "B_extraction_donnees_avec_cles";
	private final String projectName = "DVF";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					B_extraction_donnees_avec_cles.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(B_extraction_donnees_avec_cles.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSplitRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFilterRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_21", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSplitRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFilterRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_20", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_25", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_22", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_article_cgi_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_article_cgi", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_nature_mutation_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_nature_mutation",
				System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_nature_culture_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_nature_culture", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_type_local_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_type_local", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_nature_culture_speciale_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_nature_culture_speciale",
				System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_1_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_1_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_2_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_2_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class avec_id_article_cgiStruct implements
			routines.system.IPersistableRow<avec_id_article_cgiStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public int id_article_cgi;

		public int getId_article_cgi() {
			return this.id_article_cgi;
		}

		public int ordre_article_cgi;

		public int getOrdre_article_cgi() {
			return this.ordre_article_cgi;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation == null) ? 0 : this.id_mutation
								.hashCode());

				result = prime * result + (int) this.id_article_cgi;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final avec_id_article_cgiStruct other = (avec_id_article_cgiStruct) obj;

			if (this.id_mutation == null) {
				if (other.id_mutation != null)
					return false;
			} else if (!this.id_mutation.equals(other.id_mutation))
				return false;

			if (this.id_article_cgi != other.id_article_cgi)
				return false;

			return true;
		}

		public void copyDataTo(avec_id_article_cgiStruct other) {

			other.id_mutation = this.id_mutation;
			other.id_article_cgi = this.id_article_cgi;
			other.ordre_article_cgi = this.ordre_article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(avec_id_article_cgiStruct other) {

			other.id_mutation = this.id_mutation;
			other.id_article_cgi = this.id_article_cgi;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_mutation = readInteger(dis);

					this.id_article_cgi = dis.readInt();

					this.ordre_article_cgi = dis.readInt();

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_mutation, dos);

				// int

				dos.writeInt(this.id_article_cgi);

				// int

				dos.writeInt(this.ordre_article_cgi);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",ordre_article_cgi=" + String.valueOf(ordre_article_cgi));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(avec_id_article_cgiStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation,
					other.id_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_article_cgi,
					other.id_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String article_cgi;

		public String getArticle_cgi() {
			return this.article_cgi;
		}

		public int ordre_article_cgi;

		public int getOrdre_article_cgi() {
			return this.ordre_article_cgi;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.article_cgi = readString(dis);

					this.ordre_article_cgi = dis.readInt();

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.article_cgi, dos);

				// int

				dos.writeInt(this.ordre_article_cgi);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("article_cgi=" + article_cgi);
			sb.append(",ordre_article_cgi=" + String.valueOf(ordre_article_cgi));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String article_cgi;

		public String getArticle_cgi() {
			return this.article_cgi;
		}

		public int ordre_article_cgi;

		public int getOrdre_article_cgi() {
			return this.ordre_article_cgi;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.article_cgi == null) ? 0 : this.article_cgi
								.hashCode());

				result = prime
						* result
						+ ((this.id_mutation_temp == null) ? 0
								: this.id_mutation_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.article_cgi == null) {
				if (other.article_cgi != null)
					return false;
			} else if (!this.article_cgi.equals(other.article_cgi))
				return false;

			if (this.id_mutation_temp == null) {
				if (other.id_mutation_temp != null)
					return false;
			} else if (!this.id_mutation_temp.equals(other.id_mutation_temp))
				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.article_cgi = this.article_cgi;
			other.ordre_article_cgi = this.ordre_article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.article_cgi = this.article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.article_cgi = readString(dis);

					this.ordre_article_cgi = dis.readInt();

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.article_cgi, dos);

				// int

				dos.writeInt(this.ordre_article_cgi);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("article_cgi=" + article_cgi);
			sb.append(",ordre_article_cgi=" + String.valueOf(ordre_article_cgi));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.article_cgi,
					other.article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_mutation_temp,
					other.id_mutation_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String article_cgi;

		public String getArticle_cgi() {
			return this.article_cgi;
		}

		public int ordre_article_cgi;

		public int getOrdre_article_cgi() {
			return this.ordre_article_cgi;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.article_cgi == null) ? 0 : this.article_cgi
								.hashCode());

				result = prime
						* result
						+ ((this.id_mutation_temp == null) ? 0
								: this.id_mutation_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.article_cgi == null) {
				if (other.article_cgi != null)
					return false;
			} else if (!this.article_cgi.equals(other.article_cgi))
				return false;

			if (this.id_mutation_temp == null) {
				if (other.id_mutation_temp != null)
					return false;
			} else if (!this.id_mutation_temp.equals(other.id_mutation_temp))
				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.article_cgi = this.article_cgi;
			other.ordre_article_cgi = this.ordre_article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.article_cgi = this.article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.article_cgi = readString(dis);

					this.ordre_article_cgi = dis.readInt();

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.article_cgi, dos);

				// int

				dos.writeInt(this.ordre_article_cgi);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("article_cgi=" + article_cgi);
			sb.append(",ordre_article_cgi=" + String.valueOf(ordre_article_cgi));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.article_cgi,
					other.article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_mutation_temp,
					other.id_mutation_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String article_cgi;

		public String getArticle_cgi() {
			return this.article_cgi;
		}

		public int ordre_article_cgi;

		public int getOrdre_article_cgi() {
			return this.ordre_article_cgi;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.article_cgi == null) ? 0 : this.article_cgi
								.hashCode());

				result = prime
						* result
						+ ((this.id_mutation_temp == null) ? 0
								: this.id_mutation_temp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.article_cgi == null) {
				if (other.article_cgi != null)
					return false;
			} else if (!this.article_cgi.equals(other.article_cgi))
				return false;

			if (this.id_mutation_temp == null) {
				if (other.id_mutation_temp != null)
					return false;
			} else if (!this.id_mutation_temp.equals(other.id_mutation_temp))
				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.article_cgi = this.article_cgi;
			other.ordre_article_cgi = this.ordre_article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.article_cgi = this.article_cgi;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.article_cgi = readString(dis);

					this.ordre_article_cgi = dis.readInt();

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.article_cgi, dos);

				// int

				dos.writeInt(this.ordre_article_cgi);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("article_cgi=" + article_cgi);
			sb.append(",ordre_article_cgi=" + String.valueOf(ordre_article_cgi));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.article_cgi,
					other.article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_mutation_temp,
					other.id_mutation_temp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_mutation_temp = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_mutation_temp, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation_temp=" + id_mutation_temp);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public String idpar;

		public String getIdpar() {
			return this.idpar;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero;

		public String getNumero() {
			return this.numero;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_parcelle;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id_parcelle != other.id_parcelle)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id_parcelle = this.id_parcelle;
			other.idpar = this.idpar;
			other.code_departement = this.code_departement;
			other.code_commune = this.code_commune;
			other.prefixe_section = this.prefixe_section;
			other.section = this.section;
			other.numero = this.numero;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id_parcelle = this.id_parcelle;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_parcelle = dis.readInt();

					this.idpar = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_parcelle);

				// String

				writeString(this.idpar, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",idpar=" + idpar);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero=" + numero);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_parcelle,
					other.id_parcelle);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public String idpar;

		public String getIdpar() {
			return this.idpar;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero;

		public String getNumero() {
			return this.numero;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_parcelle = dis.readInt();

					this.idpar = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_parcelle);

				// String

				writeString(this.idpar, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",idpar=" + idpar);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero=" + numero);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public String idpar;

		public String getIdpar() {
			return this.idpar;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero;

		public String getNumero() {
			return this.numero;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_parcelle = dis.readInt();

					this.idpar = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_parcelle);

				// String

				writeString(this.idpar, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",idpar=" + idpar);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero=" + numero);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public String idpar;

		public String getIdpar() {
			return this.idpar;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero;

		public String getNumero() {
			return this.numero;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_parcelle = dis.readInt();

					this.idpar = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_parcelle);

				// String

				writeString(this.idpar, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",idpar=" + idpar);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero=" + numero);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_lot;

		public int getId_lot() {
			return this.id_lot;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_volume;

		public Integer getId_volume() {
			return this.id_volume;
		}

		public String no_lot;

		public String getNo_lot() {
			return this.no_lot;
		}

		public Double surface_carrez;

		public Double getSurface_carrez() {
			return this.surface_carrez;
		}

		public String id_lot_temp;

		public String getId_lot_temp() {
			return this.id_lot_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_lot;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.id_lot != other.id_lot)
				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.id_lot = this.id_lot;
			other.id_dispoparc = this.id_dispoparc;
			other.id_local = this.id_local;
			other.id_volume = this.id_volume;
			other.no_lot = this.no_lot;
			other.surface_carrez = this.surface_carrez;
			other.id_lot_temp = this.id_lot_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_local_temp = this.id_local_temp;
			other.id_volume_temp = this.id_volume_temp;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.id_lot = this.id_lot;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_lot = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_local = readInteger(dis);

					this.id_volume = readInteger(dis);

					this.no_lot = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez = null;
					} else {
						this.surface_carrez = dis.readDouble();
					}

					this.id_lot_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_lot);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_volume, dos);

				// String

				writeString(this.no_lot, dos);

				// Double

				if (this.surface_carrez == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez);
				}

				// String

				writeString(this.id_lot_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_lot=" + String.valueOf(id_lot));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_volume=" + String.valueOf(id_volume));
			sb.append(",no_lot=" + no_lot);
			sb.append(",surface_carrez=" + String.valueOf(surface_carrez));
			sb.append(",id_lot_temp=" + id_lot_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_lot, other.id_lot);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_lot;

		public int getId_lot() {
			return this.id_lot;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_volume;

		public Integer getId_volume() {
			return this.id_volume;
		}

		public String no_lot;

		public String getNo_lot() {
			return this.no_lot;
		}

		public Double surface_carrez;

		public Double getSurface_carrez() {
			return this.surface_carrez;
		}

		public String id_lot_temp;

		public String getId_lot_temp() {
			return this.id_lot_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_lot;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.id_lot != other.id_lot)
				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.id_lot = this.id_lot;
			other.id_dispoparc = this.id_dispoparc;
			other.id_local = this.id_local;
			other.id_volume = this.id_volume;
			other.no_lot = this.no_lot;
			other.surface_carrez = this.surface_carrez;
			other.id_lot_temp = this.id_lot_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_local_temp = this.id_local_temp;
			other.id_volume_temp = this.id_volume_temp;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.id_lot = this.id_lot;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_lot = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_local = readInteger(dis);

					this.id_volume = readInteger(dis);

					this.no_lot = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez = null;
					} else {
						this.surface_carrez = dis.readDouble();
					}

					this.id_lot_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_lot);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_volume, dos);

				// String

				writeString(this.no_lot, dos);

				// Double

				if (this.surface_carrez == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez);
				}

				// String

				writeString(this.id_lot_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_lot=" + String.valueOf(id_lot));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_volume=" + String.valueOf(id_volume));
			sb.append(",no_lot=" + no_lot);
			sb.append(",surface_carrez=" + String.valueOf(surface_carrez));
			sb.append(",id_lot_temp=" + id_lot_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_lot, other.id_lot);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_lot;

		public int getId_lot() {
			return this.id_lot;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_volume;

		public Integer getId_volume() {
			return this.id_volume;
		}

		public String no_lot;

		public String getNo_lot() {
			return this.no_lot;
		}

		public Double surface_carrez;

		public Double getSurface_carrez() {
			return this.surface_carrez;
		}

		public String id_lot_temp;

		public String getId_lot_temp() {
			return this.id_lot_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_lot;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.id_lot != other.id_lot)
				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.id_lot = this.id_lot;
			other.id_dispoparc = this.id_dispoparc;
			other.id_local = this.id_local;
			other.id_volume = this.id_volume;
			other.no_lot = this.no_lot;
			other.surface_carrez = this.surface_carrez;
			other.id_lot_temp = this.id_lot_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_local_temp = this.id_local_temp;
			other.id_volume_temp = this.id_volume_temp;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.id_lot = this.id_lot;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_lot = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_local = readInteger(dis);

					this.id_volume = readInteger(dis);

					this.no_lot = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez = null;
					} else {
						this.surface_carrez = dis.readDouble();
					}

					this.id_lot_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_lot);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_volume, dos);

				// String

				writeString(this.no_lot, dos);

				// Double

				if (this.surface_carrez == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez);
				}

				// String

				writeString(this.id_lot_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_lot=" + String.valueOf(id_lot));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_volume=" + String.valueOf(id_volume));
			sb.append(",no_lot=" + no_lot);
			sb.append(",surface_carrez=" + String.valueOf(surface_carrez));
			sb.append(",id_lot_temp=" + id_lot_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_lot, other.id_lot);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_lot;

		public int getId_lot() {
			return this.id_lot;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_volume;

		public Integer getId_volume() {
			return this.id_volume;
		}

		public String no_lot;

		public String getNo_lot() {
			return this.no_lot;
		}

		public Double surface_carrez;

		public Double getSurface_carrez() {
			return this.surface_carrez;
		}

		public String id_lot_temp;

		public String getId_lot_temp() {
			return this.id_lot_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_lot;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row23Struct other = (row23Struct) obj;

			if (this.id_lot != other.id_lot)
				return false;

			return true;
		}

		public void copyDataTo(row23Struct other) {

			other.id_lot = this.id_lot;
			other.id_dispoparc = this.id_dispoparc;
			other.id_local = this.id_local;
			other.id_volume = this.id_volume;
			other.no_lot = this.no_lot;
			other.surface_carrez = this.surface_carrez;
			other.id_lot_temp = this.id_lot_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_local_temp = this.id_local_temp;
			other.id_volume_temp = this.id_volume_temp;

		}

		public void copyKeysDataTo(row23Struct other) {

			other.id_lot = this.id_lot;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_lot = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_local = readInteger(dis);

					this.id_volume = readInteger(dis);

					this.no_lot = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez = null;
					} else {
						this.surface_carrez = dis.readDouble();
					}

					this.id_lot_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_lot);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_volume, dos);

				// String

				writeString(this.no_lot, dos);

				// Double

				if (this.surface_carrez == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez);
				}

				// String

				writeString(this.id_lot_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_lot=" + String.valueOf(id_lot));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_volume=" + String.valueOf(id_volume));
			sb.append(",no_lot=" + no_lot);
			sb.append(",surface_carrez=" + String.valueOf(surface_carrez));
			sb.append(",id_lot_temp=" + id_lot_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_lot, other.id_lot);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_lot;

		public int getId_lot() {
			return this.id_lot;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_local;

		public Integer getId_local() {
			return this.id_local;
		}

		public Integer id_volume;

		public Integer getId_volume() {
			return this.id_volume;
		}

		public String no_lot;

		public String getNo_lot() {
			return this.no_lot;
		}

		public Double surface_carrez;

		public Double getSurface_carrez() {
			return this.surface_carrez;
		}

		public String id_lot_temp;

		public String getId_lot_temp() {
			return this.id_lot_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_lot;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.id_lot != other.id_lot)
				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.id_lot = this.id_lot;
			other.id_dispoparc = this.id_dispoparc;
			other.id_local = this.id_local;
			other.id_volume = this.id_volume;
			other.no_lot = this.no_lot;
			other.surface_carrez = this.surface_carrez;
			other.id_lot_temp = this.id_lot_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_local_temp = this.id_local_temp;
			other.id_volume_temp = this.id_volume_temp;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.id_lot = this.id_lot;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_lot = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_local = readInteger(dis);

					this.id_volume = readInteger(dis);

					this.no_lot = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez = null;
					} else {
						this.surface_carrez = dis.readDouble();
					}

					this.id_lot_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_lot);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_local, dos);

				// Integer

				writeInteger(this.id_volume, dos);

				// String

				writeString(this.no_lot, dos);

				// Double

				if (this.surface_carrez == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez);
				}

				// String

				writeString(this.id_lot_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_lot=" + String.valueOf(id_lot));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_local=" + String.valueOf(id_local));
			sb.append(",id_volume=" + String.valueOf(id_volume));
			sb.append(",no_lot=" + no_lot);
			sb.append(",surface_carrez=" + String.valueOf(surface_carrez));
			sb.append(",id_lot_temp=" + id_lot_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_lot, other.id_lot);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class lots_uStruct implements
			routines.system.IPersistableRow<lots_uStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public Integer numero_disposition;

		public Integer getNumero_disposition() {
			return this.numero_disposition;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero_plan;

		public String getNumero_plan() {
			return this.numero_plan;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public String lot1;

		public String getLot1() {
			return this.lot1;
		}

		public Double surface_carrez_lot1;

		public Double getSurface_carrez_lot1() {
			return this.surface_carrez_lot1;
		}

		public String lot2;

		public String getLot2() {
			return this.lot2;
		}

		public Double surface_carrez_lot2;

		public Double getSurface_carrez_lot2() {
			return this.surface_carrez_lot2;
		}

		public String lot3;

		public String getLot3() {
			return this.lot3;
		}

		public Double surface_carrez_lot3;

		public Double getSurface_carrez_lot3() {
			return this.surface_carrez_lot3;
		}

		public String lot4;

		public String getLot4() {
			return this.lot4;
		}

		public Double surface_carrez_lot4;

		public Double getSurface_carrez_lot4() {
			return this.surface_carrez_lot4;
		}

		public String lot5;

		public String getLot5() {
			return this.lot5;
		}

		public Double surface_carrez_lot5;

		public Double getSurface_carrez_lot5() {
			return this.surface_carrez_lot5;
		}

		public String id_suf_temp;

		public String getId_suf_temp() {
			return this.id_suf_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.numero_disposition = readInteger(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero_plan = readString(dis);

					this.identifiant_local = readString(dis);

					this.nature_culture = readInteger(dis);

					this.nature_culture_speciale = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.lot1 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot1 = null;
					} else {
						this.surface_carrez_lot1 = dis.readDouble();
					}

					this.lot2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot2 = null;
					} else {
						this.surface_carrez_lot2 = dis.readDouble();
					}

					this.lot3 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot3 = null;
					} else {
						this.surface_carrez_lot3 = dis.readDouble();
					}

					this.lot4 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot4 = null;
					} else {
						this.surface_carrez_lot4 = dis.readDouble();
					}

					this.lot5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot5 = null;
					} else {
						this.surface_carrez_lot5 = dis.readDouble();
					}

					this.id_suf_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// Integer

				writeInteger(this.numero_disposition, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero_plan, dos);

				// String

				writeString(this.identifiant_local, dos);

				// Integer

				writeInteger(this.nature_culture, dos);

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// String

				writeString(this.lot1, dos);

				// Double

				if (this.surface_carrez_lot1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot1);
				}

				// String

				writeString(this.lot2, dos);

				// Double

				if (this.surface_carrez_lot2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot2);
				}

				// String

				writeString(this.lot3, dos);

				// Double

				if (this.surface_carrez_lot3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot3);
				}

				// String

				writeString(this.lot4, dos);

				// Double

				if (this.surface_carrez_lot4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot4);
				}

				// String

				writeString(this.lot5, dos);

				// Double

				if (this.surface_carrez_lot5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot5);
				}

				// String

				writeString(this.id_suf_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",numero_disposition="
					+ String.valueOf(numero_disposition));
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero_plan=" + numero_plan);
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",nature_culture=" + String.valueOf(nature_culture));
			sb.append(",nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",lot1=" + lot1);
			sb.append(",surface_carrez_lot1="
					+ String.valueOf(surface_carrez_lot1));
			sb.append(",lot2=" + lot2);
			sb.append(",surface_carrez_lot2="
					+ String.valueOf(surface_carrez_lot2));
			sb.append(",lot3=" + lot3);
			sb.append(",surface_carrez_lot3="
					+ String.valueOf(surface_carrez_lot3));
			sb.append(",lot4=" + lot4);
			sb.append(",surface_carrez_lot4="
					+ String.valueOf(surface_carrez_lot4));
			sb.append(",lot5=" + lot5);
			sb.append(",surface_carrez_lot5="
					+ String.valueOf(surface_carrez_lot5));
			sb.append(",id_suf_temp=" + id_suf_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lots_uStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public Integer num_voie;

		public Integer getNum_voie() {
			return this.num_voie;
		}

		public String b_t_q;

		public String getB_t_q() {
			return this.b_t_q;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.id_adresse = this.id_adresse;
			other.num_voie = this.num_voie;
			other.b_t_q = this.b_t_q;
			other.type_voie = this.type_voie;
			other.code_voie = this.code_voie;
			other.voie = this.voie;
			other.code_postal = this.code_postal;
			other.commune = this.commune;
			other.id_adresse_temp = this.id_adresse_temp;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.id_adresse = this.id_adresse;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.num_voie = readInteger(dis);

					this.b_t_q = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.id_adresse_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// Integer

				writeInteger(this.num_voie, dos);

				// String

				writeString(this.b_t_q, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.id_adresse_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",num_voie=" + String.valueOf(num_voie));
			sb.append(",b_t_q=" + b_t_q);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public Integer num_voie;

		public Integer getNum_voie() {
			return this.num_voie;
		}

		public String b_t_q;

		public String getB_t_q() {
			return this.b_t_q;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.id_adresse = this.id_adresse;
			other.num_voie = this.num_voie;
			other.b_t_q = this.b_t_q;
			other.type_voie = this.type_voie;
			other.code_voie = this.code_voie;
			other.voie = this.voie;
			other.code_postal = this.code_postal;
			other.commune = this.commune;
			other.id_adresse_temp = this.id_adresse_temp;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.id_adresse = this.id_adresse;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.num_voie = readInteger(dis);

					this.b_t_q = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.id_adresse_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// Integer

				writeInteger(this.num_voie, dos);

				// String

				writeString(this.b_t_q, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.id_adresse_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",num_voie=" + String.valueOf(num_voie));
			sb.append(",b_t_q=" + b_t_q);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public Integer num_voie;

		public Integer getNum_voie() {
			return this.num_voie;
		}

		public String b_t_q;

		public String getB_t_q() {
			return this.b_t_q;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_2 other = (OnRowsEndStructtSortRow_2) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_2 other) {

			other.id_adresse = this.id_adresse;
			other.num_voie = this.num_voie;
			other.b_t_q = this.b_t_q;
			other.type_voie = this.type_voie;
			other.code_voie = this.code_voie;
			other.voie = this.voie;
			other.code_postal = this.code_postal;
			other.commune = this.commune;
			other.id_adresse_temp = this.id_adresse_temp;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_2 other) {

			other.id_adresse = this.id_adresse;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.num_voie = readInteger(dis);

					this.b_t_q = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.id_adresse_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// Integer

				writeInteger(this.num_voie, dos);

				// String

				writeString(this.b_t_q, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.id_adresse_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",num_voie=" + String.valueOf(num_voie));
			sb.append(",b_t_q=" + b_t_q);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public Integer num_voie;

		public Integer getNum_voie() {
			return this.num_voie;
		}

		public String b_t_q;

		public String getB_t_q() {
			return this.b_t_q;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.id_adresse = this.id_adresse;
			other.num_voie = this.num_voie;
			other.b_t_q = this.b_t_q;
			other.type_voie = this.type_voie;
			other.code_voie = this.code_voie;
			other.voie = this.voie;
			other.code_postal = this.code_postal;
			other.commune = this.commune;
			other.id_adresse_temp = this.id_adresse_temp;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.id_adresse = this.id_adresse;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.num_voie = readInteger(dis);

					this.b_t_q = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.id_adresse_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// Integer

				writeInteger(this.num_voie, dos);

				// String

				writeString(this.b_t_q, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.id_adresse_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",num_voie=" + String.valueOf(num_voie));
			sb.append(",b_t_q=" + b_t_q);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String code_insee;

		public String getCode_insee() {
			return this.code_insee;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation == null) ? 0 : this.id_mutation
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.id_mutation == null) {
				if (other.id_mutation != null)
					return false;
			} else if (!this.id_mutation.equals(other.id_mutation))
				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.id_mutation = this.id_mutation;
			other.code_service_ch = this.code_service_ch;
			other.reference_document = this.reference_document;
			other.code_insee = this.code_insee;
			other.date_mutation = this.date_mutation;
			other.id_nature_mutation = this.id_nature_mutation;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.id_mutation = this.id_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_mutation = readInteger(dis);

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.code_insee = readString(dis);

					this.date_mutation = readDate(dis);

					this.id_nature_mutation = readInteger(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_mutation, dos);

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.code_insee, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",code_insee=" + code_insee);
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation,
					other.id_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String code_insee;

		public String getCode_insee() {
			return this.code_insee;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_mutation = dis.readInt();

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.code_insee = readString(dis);

					this.date_mutation = readDate(dis);

					this.id_nature_mutation = readInteger(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_mutation);

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.code_insee, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",code_insee=" + code_insee);
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String code_insee;

		public String getCode_insee() {
			return this.code_insee;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_mutation = dis.readInt();

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.code_insee = readString(dis);

					this.date_mutation = readDate(dis);

					this.id_nature_mutation = readInteger(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_mutation);

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.code_insee, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",code_insee=" + code_insee);
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public Integer no_disposition;

		public Integer getNo_disposition() {
			return this.no_disposition;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation == null) ? 0 : this.id_mutation
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.id_mutation == null) {
				if (other.id_mutation != null)
					return false;
			} else if (!this.id_mutation.equals(other.id_mutation))
				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.id_disposition = this.id_disposition;
			other.id_mutation = this.id_mutation;
			other.no_disposition = this.no_disposition;
			other.valeur_fonciere = this.valeur_fonciere;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.id_mutation = this.id_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_disposition = dis.readInt();

					this.id_mutation = readInteger(dis);

					this.no_disposition = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.id_disposition_temp = readString(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_disposition);

				// Integer

				writeInteger(this.id_mutation, dos);

				// Integer

				writeInteger(this.no_disposition, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_mutation=" + String.valueOf(id_mutation));
			sb.append(",no_disposition=" + String.valueOf(no_disposition));
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation,
					other.id_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public Integer no_disposition;

		public Integer getNo_disposition() {
			return this.no_disposition;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_disposition = dis.readInt();

					this.id_mutation = dis.readInt();

					this.no_disposition = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.id_disposition_temp = readString(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_mutation);

				// Integer

				writeInteger(this.no_disposition, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_mutation=" + String.valueOf(id_mutation));
			sb.append(",no_disposition=" + String.valueOf(no_disposition));
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public Integer no_disposition;

		public Integer getNo_disposition() {
			return this.no_disposition;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_disposition = dis.readInt();

					this.id_mutation = dis.readInt();

					this.no_disposition = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.id_disposition_temp = readString(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_mutation);

				// Integer

				writeInteger(this.no_disposition, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_mutation=" + String.valueOf(id_mutation));
			sb.append(",no_disposition=" + String.valueOf(no_disposition));
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_dispoparc = dis.readInt();

					this.id_disposition = dis.readInt();

					this.id_parcelle = dis.readInt();

					this.nombre_de_lots = readInteger(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_disposition_temp = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_dispoparc);

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_parcelle);

				// Integer

				writeInteger(this.nombre_de_lots, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_dispoparc = dis.readInt();

					this.id_disposition = dis.readInt();

					this.id_parcelle = dis.readInt();

					this.nombre_de_lots = readInteger(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_disposition_temp = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_dispoparc);

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_parcelle);

				// Integer

				writeInteger(this.nombre_de_lots, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.id_adresse = this.id_adresse;
			other.id_dispoparc = this.id_dispoparc;
			other.id_adresse_temp = this.id_adresse_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.id_adresse = this.id_adresse;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_adresse_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.id_adresse_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_local;

		public int getId_local() {
			return this.id_local;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public Double surface_reelle_batie;

		public Double getSurface_reelle_batie() {
			return this.surface_reelle_batie;
		}

		public Integer nb_pieces_principales;

		public Integer getNb_pieces_principales() {
			return this.nb_pieces_principales;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_local;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.id_local != other.id_local)
				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.id_local = this.id_local;
			other.id_dispoparc = this.id_dispoparc;
			other.identifiant_local = this.identifiant_local;
			other.code_type_local = this.code_type_local;
			other.surface_reelle_batie = this.surface_reelle_batie;
			other.nb_pieces_principales = this.nb_pieces_principales;
			other.id_local_temp = this.id_local_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.id_local = this.id_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_local = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.identifiant_local = readString(dis);

					this.code_type_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_batie = null;
					} else {
						this.surface_reelle_batie = dis.readDouble();
					}

					this.nb_pieces_principales = readInteger(dis);

					this.id_local_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_local);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.identifiant_local, dos);

				// String

				writeString(this.code_type_local, dos);

				// Double

				if (this.surface_reelle_batie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_batie);
				}

				// Integer

				writeInteger(this.nb_pieces_principales, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_local=" + String.valueOf(id_local));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",surface_reelle_batie="
					+ String.valueOf(surface_reelle_batie));
			sb.append(",nb_pieces_principales="
					+ String.valueOf(nb_pieces_principales));
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_local, other.id_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_local;

		public int getId_local() {
			return this.id_local;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public Double surface_reelle_batie;

		public Double getSurface_reelle_batie() {
			return this.surface_reelle_batie;
		}

		public Integer nb_pieces_principales;

		public Integer getNb_pieces_principales() {
			return this.nb_pieces_principales;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_local;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.id_local != other.id_local)
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.id_local = this.id_local;
			other.id_dispoparc = this.id_dispoparc;
			other.identifiant_local = this.identifiant_local;
			other.code_type_local = this.code_type_local;
			other.surface_reelle_batie = this.surface_reelle_batie;
			other.nb_pieces_principales = this.nb_pieces_principales;
			other.id_local_temp = this.id_local_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.id_local = this.id_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_local = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.identifiant_local = readString(dis);

					this.code_type_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_batie = null;
					} else {
						this.surface_reelle_batie = dis.readDouble();
					}

					this.nb_pieces_principales = readInteger(dis);

					this.id_local_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_local);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.identifiant_local, dos);

				// String

				writeString(this.code_type_local, dos);

				// Double

				if (this.surface_reelle_batie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_batie);
				}

				// Integer

				writeInteger(this.nb_pieces_principales, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_local=" + String.valueOf(id_local));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",surface_reelle_batie="
					+ String.valueOf(surface_reelle_batie));
			sb.append(",nb_pieces_principales="
					+ String.valueOf(nb_pieces_principales));
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_local, other.id_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_volume;

		public int getId_volume() {
			return this.id_volume;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String no_volume;

		public String getNo_volume() {
			return this.no_volume;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_volume;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row29Struct other = (row29Struct) obj;

			if (this.id_volume != other.id_volume)
				return false;

			return true;
		}

		public void copyDataTo(row29Struct other) {

			other.id_volume = this.id_volume;
			other.id_dispoparc = this.id_dispoparc;
			other.no_volume = this.no_volume;
			other.id_volume_temp = this.id_volume_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row29Struct other) {

			other.id_volume = this.id_volume;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_volume = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.no_volume = readString(dis);

					this.id_volume_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_volume);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.no_volume, dos);

				// String

				writeString(this.id_volume_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_volume=" + String.valueOf(id_volume));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",no_volume=" + no_volume);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_volume, other.id_volume);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_volume;

		public int getId_volume() {
			return this.id_volume;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String no_volume;

		public String getNo_volume() {
			return this.no_volume;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_volume;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.id_volume != other.id_volume)
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.id_volume = this.id_volume;
			other.id_dispoparc = this.id_dispoparc;
			other.no_volume = this.no_volume;
			other.id_volume_temp = this.id_volume_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.id_volume = this.id_volume;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_volume = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.no_volume = readString(dis);

					this.id_volume_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_volume);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.no_volume, dos);

				// String

				writeString(this.id_volume_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_volume=" + String.valueOf(id_volume));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",no_volume=" + no_volume);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_volume, other.id_volume);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_suf;

		public int getId_suf() {
			return this.id_suf;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_suf_cplmt;

		public Integer getId_suf_cplmt() {
			return this.id_suf_cplmt;
		}

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public String id_suf_temp;

		public String getId_suf_temp() {
			return this.id_suf_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_suf;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row30Struct other = (row30Struct) obj;

			if (this.id_suf != other.id_suf)
				return false;

			return true;
		}

		public void copyDataTo(row30Struct other) {

			other.id_suf = this.id_suf;
			other.id_dispoparc = this.id_dispoparc;
			other.id_suf_cplmt = this.id_suf_cplmt;
			other.nature_culture = this.nature_culture;
			other.nature_culture_speciale = this.nature_culture_speciale;
			other.surface_terrain = this.surface_terrain;
			other.id_suf_temp = this.id_suf_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row30Struct other) {

			other.id_suf = this.id_suf;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_suf = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_suf_cplmt = readInteger(dis);

					this.nature_culture = readInteger(dis);

					this.nature_culture_speciale = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_suf_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_suf);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_suf_cplmt, dos);

				// Integer

				writeInteger(this.nature_culture, dos);

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// String

				writeString(this.id_suf_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_suf=" + String.valueOf(id_suf));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_suf_cplmt=" + String.valueOf(id_suf_cplmt));
			sb.append(",nature_culture=" + String.valueOf(nature_culture));
			sb.append(",nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_suf_temp=" + id_suf_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_suf, other.id_suf);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_suf;

		public int getId_suf() {
			return this.id_suf;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_suf_cplmt;

		public Integer getId_suf_cplmt() {
			return this.id_suf_cplmt;
		}

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public String id_suf_temp;

		public String getId_suf_temp() {
			return this.id_suf_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_suf;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.id_suf != other.id_suf)
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.id_suf = this.id_suf;
			other.id_dispoparc = this.id_dispoparc;
			other.id_suf_cplmt = this.id_suf_cplmt;
			other.nature_culture = this.nature_culture;
			other.nature_culture_speciale = this.nature_culture_speciale;
			other.surface_terrain = this.surface_terrain;
			other.id_suf_temp = this.id_suf_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.id_suf = this.id_suf;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_suf = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_suf_cplmt = readInteger(dis);

					this.nature_culture = readInteger(dis);

					this.nature_culture_speciale = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_suf_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_suf);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_suf_cplmt, dos);

				// Integer

				writeInteger(this.nature_culture, dos);

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// String

				writeString(this.id_suf_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_suf=" + String.valueOf(id_suf));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_suf_cplmt=" + String.valueOf(id_suf_cplmt));
			sb.append(",nature_culture=" + String.valueOf(nature_culture));
			sb.append(",nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_suf_temp=" + id_suf_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_suf, other.id_suf);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mutation_article_cgi_non_normaliseStruct
			implements
			routines.system.IPersistableRow<mutation_article_cgi_non_normaliseStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_mutation_temp = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id_mutation_temp, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation_temp=" + id_mutation_temp);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mutation_article_cgi_non_normaliseStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class parcelleStruct implements
			routines.system.IPersistableRow<parcelleStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public String idpar;

		public String getIdpar() {
			return this.idpar;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero;

		public String getNumero() {
			return this.numero;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_parcelle;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final parcelleStruct other = (parcelleStruct) obj;

			if (this.id_parcelle != other.id_parcelle)
				return false;

			return true;
		}

		public void copyDataTo(parcelleStruct other) {

			other.id_parcelle = this.id_parcelle;
			other.idpar = this.idpar;
			other.code_departement = this.code_departement;
			other.code_commune = this.code_commune;
			other.prefixe_section = this.prefixe_section;
			other.section = this.section;
			other.numero = this.numero;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(parcelleStruct other) {

			other.id_parcelle = this.id_parcelle;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_parcelle = dis.readInt();

					this.idpar = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_parcelle);

				// String

				writeString(this.idpar, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",idpar=" + idpar);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero=" + numero);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(parcelleStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_parcelle,
					other.id_parcelle);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class lotsStruct implements
			routines.system.IPersistableRow<lotsStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public Integer numero_disposition;

		public Integer getNumero_disposition() {
			return this.numero_disposition;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero_plan;

		public String getNumero_plan() {
			return this.numero_plan;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public String lot1;

		public String getLot1() {
			return this.lot1;
		}

		public Double surface_carrez_lot1;

		public Double getSurface_carrez_lot1() {
			return this.surface_carrez_lot1;
		}

		public String lot2;

		public String getLot2() {
			return this.lot2;
		}

		public Double surface_carrez_lot2;

		public Double getSurface_carrez_lot2() {
			return this.surface_carrez_lot2;
		}

		public String lot3;

		public String getLot3() {
			return this.lot3;
		}

		public Double surface_carrez_lot3;

		public Double getSurface_carrez_lot3() {
			return this.surface_carrez_lot3;
		}

		public String lot4;

		public String getLot4() {
			return this.lot4;
		}

		public Double surface_carrez_lot4;

		public Double getSurface_carrez_lot4() {
			return this.surface_carrez_lot4;
		}

		public String lot5;

		public String getLot5() {
			return this.lot5;
		}

		public Double surface_carrez_lot5;

		public Double getSurface_carrez_lot5() {
			return this.surface_carrez_lot5;
		}

		public String id_suf_temp;

		public String getId_suf_temp() {
			return this.id_suf_temp;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.numero_disposition = readInteger(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero_plan = readString(dis);

					this.identifiant_local = readString(dis);

					this.nature_culture = readInteger(dis);

					this.nature_culture_speciale = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.lot1 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot1 = null;
					} else {
						this.surface_carrez_lot1 = dis.readDouble();
					}

					this.lot2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot2 = null;
					} else {
						this.surface_carrez_lot2 = dis.readDouble();
					}

					this.lot3 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot3 = null;
					} else {
						this.surface_carrez_lot3 = dis.readDouble();
					}

					this.lot4 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot4 = null;
					} else {
						this.surface_carrez_lot4 = dis.readDouble();
					}

					this.lot5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot5 = null;
					} else {
						this.surface_carrez_lot5 = dis.readDouble();
					}

					this.id_suf_temp = readString(dis);

					this.id_local_temp = readString(dis);

					this.id_volume_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// Integer

				writeInteger(this.numero_disposition, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero_plan, dos);

				// String

				writeString(this.identifiant_local, dos);

				// Integer

				writeInteger(this.nature_culture, dos);

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// String

				writeString(this.lot1, dos);

				// Double

				if (this.surface_carrez_lot1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot1);
				}

				// String

				writeString(this.lot2, dos);

				// Double

				if (this.surface_carrez_lot2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot2);
				}

				// String

				writeString(this.lot3, dos);

				// Double

				if (this.surface_carrez_lot3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot3);
				}

				// String

				writeString(this.lot4, dos);

				// Double

				if (this.surface_carrez_lot4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot4);
				}

				// String

				writeString(this.lot5, dos);

				// Double

				if (this.surface_carrez_lot5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot5);
				}

				// String

				writeString(this.id_suf_temp, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_volume_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",numero_disposition="
					+ String.valueOf(numero_disposition));
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero_plan=" + numero_plan);
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",nature_culture=" + String.valueOf(nature_culture));
			sb.append(",nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",lot1=" + lot1);
			sb.append(",surface_carrez_lot1="
					+ String.valueOf(surface_carrez_lot1));
			sb.append(",lot2=" + lot2);
			sb.append(",surface_carrez_lot2="
					+ String.valueOf(surface_carrez_lot2));
			sb.append(",lot3=" + lot3);
			sb.append(",surface_carrez_lot3="
					+ String.valueOf(surface_carrez_lot3));
			sb.append(",lot4=" + lot4);
			sb.append(",surface_carrez_lot4="
					+ String.valueOf(surface_carrez_lot4));
			sb.append(",lot5=" + lot5);
			sb.append(",surface_carrez_lot5="
					+ String.valueOf(surface_carrez_lot5));
			sb.append(",id_suf_temp=" + id_suf_temp);
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lotsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class adresseStruct implements
			routines.system.IPersistableRow<adresseStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public Integer num_voie;

		public Integer getNum_voie() {
			return this.num_voie;
		}

		public String b_t_q;

		public String getB_t_q() {
			return this.b_t_q;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final adresseStruct other = (adresseStruct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			return true;
		}

		public void copyDataTo(adresseStruct other) {

			other.id_adresse = this.id_adresse;
			other.num_voie = this.num_voie;
			other.b_t_q = this.b_t_q;
			other.type_voie = this.type_voie;
			other.code_voie = this.code_voie;
			other.voie = this.voie;
			other.code_postal = this.code_postal;
			other.commune = this.commune;
			other.id_adresse_temp = this.id_adresse_temp;

		}

		public void copyKeysDataTo(adresseStruct other) {

			other.id_adresse = this.id_adresse;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.num_voie = readInteger(dis);

					this.b_t_q = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.id_adresse_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// Integer

				writeInteger(this.num_voie, dos);

				// String

				writeString(this.b_t_q, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.id_adresse_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",num_voie=" + String.valueOf(num_voie));
			sb.append(",b_t_q=" + b_t_q);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(adresseStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mutationStruct implements
			routines.system.IPersistableRow<mutationStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_mutation;

		public Integer getId_mutation() {
			return this.id_mutation;
		}

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String code_insee;

		public String getCode_insee() {
			return this.code_insee;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.id_mutation == null) ? 0 : this.id_mutation
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mutationStruct other = (mutationStruct) obj;

			if (this.id_mutation == null) {
				if (other.id_mutation != null)
					return false;
			} else if (!this.id_mutation.equals(other.id_mutation))
				return false;

			return true;
		}

		public void copyDataTo(mutationStruct other) {

			other.id_mutation = this.id_mutation;
			other.code_service_ch = this.code_service_ch;
			other.reference_document = this.reference_document;
			other.code_insee = this.code_insee;
			other.date_mutation = this.date_mutation;
			other.id_nature_mutation = this.id_nature_mutation;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(mutationStruct other) {

			other.id_mutation = this.id_mutation;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_mutation = readInteger(dis);

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.code_insee = readString(dis);

					this.date_mutation = readDate(dis);

					this.id_nature_mutation = readInteger(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_mutation, dos);

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.code_insee, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// Integer

				writeInteger(this.id_nature_mutation, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_mutation=" + String.valueOf(id_mutation));
			sb.append(",code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",code_insee=" + code_insee);
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mutationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_mutation,
					other.id_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class dispositionStruct implements
			routines.system.IPersistableRow<dispositionStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_mutation;

		public int getId_mutation() {
			return this.id_mutation;
		}

		public Integer no_disposition;

		public Integer getNo_disposition() {
			return this.no_disposition;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_mutation_temp;

		public String getId_mutation_temp() {
			return this.id_mutation_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_disposition;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final dispositionStruct other = (dispositionStruct) obj;

			if (this.id_disposition != other.id_disposition)
				return false;

			return true;
		}

		public void copyDataTo(dispositionStruct other) {

			other.id_disposition = this.id_disposition;
			other.id_mutation = this.id_mutation;
			other.no_disposition = this.no_disposition;
			other.valeur_fonciere = this.valeur_fonciere;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_mutation_temp = this.id_mutation_temp;

		}

		public void copyKeysDataTo(dispositionStruct other) {

			other.id_disposition = this.id_disposition;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_disposition = dis.readInt();

					this.id_mutation = dis.readInt();

					this.no_disposition = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.id_disposition_temp = readString(dis);

					this.id_mutation_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_mutation);

				// Integer

				writeInteger(this.no_disposition, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_mutation_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_mutation=" + String.valueOf(id_mutation));
			sb.append(",no_disposition=" + String.valueOf(no_disposition));
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_mutation_temp=" + id_mutation_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dispositionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_disposition,
					other.id_disposition);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class disposition_parcelleStruct implements
			routines.system.IPersistableRow<disposition_parcelleStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public int id_disposition;

		public int getId_disposition() {
			return this.id_disposition;
		}

		public int id_parcelle;

		public int getId_parcelle() {
			return this.id_parcelle;
		}

		public Integer nombre_de_lots;

		public Integer getNombre_de_lots() {
			return this.nombre_de_lots;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		public String id_disposition_temp;

		public String getId_disposition_temp() {
			return this.id_disposition_temp;
		}

		public String id_parcelle_temp;

		public String getId_parcelle_temp() {
			return this.id_parcelle_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_dispoparc;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final disposition_parcelleStruct other = (disposition_parcelleStruct) obj;

			if (this.id_dispoparc != other.id_dispoparc)
				return false;

			return true;
		}

		public void copyDataTo(disposition_parcelleStruct other) {

			other.id_dispoparc = this.id_dispoparc;
			other.id_disposition = this.id_disposition;
			other.id_parcelle = this.id_parcelle;
			other.nombre_de_lots = this.nombre_de_lots;
			other.id_dispoparc_temp = this.id_dispoparc_temp;
			other.id_disposition_temp = this.id_disposition_temp;
			other.id_parcelle_temp = this.id_parcelle_temp;

		}

		public void copyKeysDataTo(disposition_parcelleStruct other) {

			other.id_dispoparc = this.id_dispoparc;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_dispoparc = dis.readInt();

					this.id_disposition = dis.readInt();

					this.id_parcelle = dis.readInt();

					this.nombre_de_lots = readInteger(dis);

					this.id_dispoparc_temp = readString(dis);

					this.id_disposition_temp = readString(dis);

					this.id_parcelle_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_dispoparc);

				// int

				dos.writeInt(this.id_disposition);

				// int

				dos.writeInt(this.id_parcelle);

				// Integer

				writeInteger(this.nombre_de_lots, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

				// String

				writeString(this.id_disposition_temp, dos);

				// String

				writeString(this.id_parcelle_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_disposition=" + String.valueOf(id_disposition));
			sb.append(",id_parcelle=" + String.valueOf(id_parcelle));
			sb.append(",nombre_de_lots=" + String.valueOf(nombre_de_lots));
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append(",id_disposition_temp=" + id_disposition_temp);
			sb.append(",id_parcelle_temp=" + id_parcelle_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(disposition_parcelleStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_dispoparc,
					other.id_dispoparc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class adresse_dispoparcStruct implements
			routines.system.IPersistableRow<adresse_dispoparcStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_adresse;

		public int getId_adresse() {
			return this.id_adresse;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String id_adresse_temp;

		public String getId_adresse_temp() {
			return this.id_adresse_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_adresse;

				result = prime * result + (int) this.id_dispoparc;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final adresse_dispoparcStruct other = (adresse_dispoparcStruct) obj;

			if (this.id_adresse != other.id_adresse)
				return false;

			if (this.id_dispoparc != other.id_dispoparc)
				return false;

			return true;
		}

		public void copyDataTo(adresse_dispoparcStruct other) {

			other.id_adresse = this.id_adresse;
			other.id_dispoparc = this.id_dispoparc;
			other.id_adresse_temp = this.id_adresse_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(adresse_dispoparcStruct other) {

			other.id_adresse = this.id_adresse;
			other.id_dispoparc = this.id_dispoparc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_adresse = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_adresse_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_adresse);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.id_adresse_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_adresse=" + String.valueOf(id_adresse));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_adresse_temp=" + id_adresse_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(adresse_dispoparcStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_adresse,
					other.id_adresse);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_dispoparc,
					other.id_dispoparc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class locauxStruct implements
			routines.system.IPersistableRow<locauxStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_local;

		public int getId_local() {
			return this.id_local;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public Double surface_reelle_batie;

		public Double getSurface_reelle_batie() {
			return this.surface_reelle_batie;
		}

		public Integer nb_pieces_principales;

		public Integer getNb_pieces_principales() {
			return this.nb_pieces_principales;
		}

		public String id_local_temp;

		public String getId_local_temp() {
			return this.id_local_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_local;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final locauxStruct other = (locauxStruct) obj;

			if (this.id_local != other.id_local)
				return false;

			return true;
		}

		public void copyDataTo(locauxStruct other) {

			other.id_local = this.id_local;
			other.id_dispoparc = this.id_dispoparc;
			other.identifiant_local = this.identifiant_local;
			other.code_type_local = this.code_type_local;
			other.surface_reelle_batie = this.surface_reelle_batie;
			other.nb_pieces_principales = this.nb_pieces_principales;
			other.id_local_temp = this.id_local_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(locauxStruct other) {

			other.id_local = this.id_local;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_local = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.identifiant_local = readString(dis);

					this.code_type_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_batie = null;
					} else {
						this.surface_reelle_batie = dis.readDouble();
					}

					this.nb_pieces_principales = readInteger(dis);

					this.id_local_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_local);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.identifiant_local, dos);

				// String

				writeString(this.code_type_local, dos);

				// Double

				if (this.surface_reelle_batie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_batie);
				}

				// Integer

				writeInteger(this.nb_pieces_principales, dos);

				// String

				writeString(this.id_local_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_local=" + String.valueOf(id_local));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",surface_reelle_batie="
					+ String.valueOf(surface_reelle_batie));
			sb.append(",nb_pieces_principales="
					+ String.valueOf(nb_pieces_principales));
			sb.append(",id_local_temp=" + id_local_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(locauxStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_local, other.id_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class volumeStruct implements
			routines.system.IPersistableRow<volumeStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_volume;

		public int getId_volume() {
			return this.id_volume;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public String no_volume;

		public String getNo_volume() {
			return this.no_volume;
		}

		public String id_volume_temp;

		public String getId_volume_temp() {
			return this.id_volume_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_volume;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final volumeStruct other = (volumeStruct) obj;

			if (this.id_volume != other.id_volume)
				return false;

			return true;
		}

		public void copyDataTo(volumeStruct other) {

			other.id_volume = this.id_volume;
			other.id_dispoparc = this.id_dispoparc;
			other.no_volume = this.no_volume;
			other.id_volume_temp = this.id_volume_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(volumeStruct other) {

			other.id_volume = this.id_volume;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_volume = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.no_volume = readString(dis);

					this.id_volume_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_volume);

				// int

				dos.writeInt(this.id_dispoparc);

				// String

				writeString(this.no_volume, dos);

				// String

				writeString(this.id_volume_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_volume=" + String.valueOf(id_volume));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",no_volume=" + no_volume);
			sb.append(",id_volume_temp=" + id_volume_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(volumeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_volume, other.id_volume);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sufStruct implements
			routines.system.IPersistableRow<sufStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_suf;

		public int getId_suf() {
			return this.id_suf;
		}

		public int id_dispoparc;

		public int getId_dispoparc() {
			return this.id_dispoparc;
		}

		public Integer id_suf_cplmt;

		public Integer getId_suf_cplmt() {
			return this.id_suf_cplmt;
		}

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public String id_suf_temp;

		public String getId_suf_temp() {
			return this.id_suf_temp;
		}

		public String id_dispoparc_temp;

		public String getId_dispoparc_temp() {
			return this.id_dispoparc_temp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_suf;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final sufStruct other = (sufStruct) obj;

			if (this.id_suf != other.id_suf)
				return false;

			return true;
		}

		public void copyDataTo(sufStruct other) {

			other.id_suf = this.id_suf;
			other.id_dispoparc = this.id_dispoparc;
			other.id_suf_cplmt = this.id_suf_cplmt;
			other.nature_culture = this.nature_culture;
			other.nature_culture_speciale = this.nature_culture_speciale;
			other.surface_terrain = this.surface_terrain;
			other.id_suf_temp = this.id_suf_temp;
			other.id_dispoparc_temp = this.id_dispoparc_temp;

		}

		public void copyKeysDataTo(sufStruct other) {

			other.id_suf = this.id_suf;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.id_suf = dis.readInt();

					this.id_dispoparc = dis.readInt();

					this.id_suf_cplmt = readInteger(dis);

					this.nature_culture = readInteger(dis);

					this.nature_culture_speciale = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_suf_temp = readString(dis);

					this.id_dispoparc_temp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_suf);

				// int

				dos.writeInt(this.id_dispoparc);

				// Integer

				writeInteger(this.id_suf_cplmt, dos);

				// Integer

				writeInteger(this.nature_culture, dos);

				// Integer

				writeInteger(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// String

				writeString(this.id_suf_temp, dos);

				// String

				writeString(this.id_dispoparc_temp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_suf=" + String.valueOf(id_suf));
			sb.append(",id_dispoparc=" + String.valueOf(id_dispoparc));
			sb.append(",id_suf_cplmt=" + String.valueOf(id_suf_cplmt));
			sb.append(",nature_culture=" + String.valueOf(nature_culture));
			sb.append(",nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_suf_temp=" + id_suf_temp);
			sb.append(",id_dispoparc_temp=" + id_dispoparc_temp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sufStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_suf, other.id_suf);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class extractionStruct implements
			routines.system.IPersistableRow<extractionStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		public Integer numero_disposition;

		public Integer getNumero_disposition() {
			return this.numero_disposition;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public String nature_mutation;

		public String getNature_mutation() {
			return this.nature_mutation;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public Integer numero_voie;

		public Integer getNumero_voie() {
			return this.numero_voie;
		}

		public String complement_numero_voie;

		public String getComplement_numero_voie() {
			return this.complement_numero_voie;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero_plan;

		public String getNumero_plan() {
			return this.numero_plan;
		}

		public String numero_volume;

		public String getNumero_volume() {
			return this.numero_volume;
		}

		public String lot1;

		public String getLot1() {
			return this.lot1;
		}

		public Double surface_carrez_lot1;

		public Double getSurface_carrez_lot1() {
			return this.surface_carrez_lot1;
		}

		public String lot2;

		public String getLot2() {
			return this.lot2;
		}

		public Double surface_carrez_lot2;

		public Double getSurface_carrez_lot2() {
			return this.surface_carrez_lot2;
		}

		public String lot3;

		public String getLot3() {
			return this.lot3;
		}

		public Double surface_carrez_lot3;

		public Double getSurface_carrez_lot3() {
			return this.surface_carrez_lot3;
		}

		public String lot4;

		public String getLot4() {
			return this.lot4;
		}

		public Double surface_carrez_lot4;

		public Double getSurface_carrez_lot4() {
			return this.surface_carrez_lot4;
		}

		public String lot5;

		public String getLot5() {
			return this.lot5;
		}

		public Double surface_carrez_lot5;

		public Double getSurface_carrez_lot5() {
			return this.surface_carrez_lot5;
		}

		public Integer nombre_lots;

		public Integer getNombre_lots() {
			return this.nombre_lots;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public Double surface_reelle_bati;

		public Double getSurface_reelle_bati() {
			return this.surface_reelle_bati;
		}

		public Integer nombre_pieces_principales;

		public Integer getNombre_pieces_principales() {
			return this.nombre_pieces_principales;
		}

		public String nature_culture;

		public String getNature_culture() {
			return this.nature_culture;
		}

		public String nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public Integer id_ligne;

		public Integer getId_ligne() {
			return this.id_ligne;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

					this.numero_disposition = readInteger(dis);

					this.date_mutation = readDate(dis);

					this.nature_mutation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.numero_voie = readInteger(dis);

					this.complement_numero_voie = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero_plan = readString(dis);

					this.numero_volume = readString(dis);

					this.lot1 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot1 = null;
					} else {
						this.surface_carrez_lot1 = dis.readDouble();
					}

					this.lot2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot2 = null;
					} else {
						this.surface_carrez_lot2 = dis.readDouble();
					}

					this.lot3 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot3 = null;
					} else {
						this.surface_carrez_lot3 = dis.readDouble();
					}

					this.lot4 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot4 = null;
					} else {
						this.surface_carrez_lot4 = dis.readDouble();
					}

					this.lot5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot5 = null;
					} else {
						this.surface_carrez_lot5 = dis.readDouble();
					}

					this.nombre_lots = readInteger(dis);

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

					this.identifiant_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_bati = null;
					} else {
						this.surface_reelle_bati = dis.readDouble();
					}

					this.nombre_pieces_principales = readInteger(dis);

					this.nature_culture = readString(dis);

					this.nature_culture_speciale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_ligne = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

				// Integer

				writeInteger(this.numero_disposition, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// String

				writeString(this.nature_mutation, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// Integer

				writeInteger(this.numero_voie, dos);

				// String

				writeString(this.complement_numero_voie, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero_plan, dos);

				// String

				writeString(this.numero_volume, dos);

				// String

				writeString(this.lot1, dos);

				// Double

				if (this.surface_carrez_lot1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot1);
				}

				// String

				writeString(this.lot2, dos);

				// Double

				if (this.surface_carrez_lot2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot2);
				}

				// String

				writeString(this.lot3, dos);

				// Double

				if (this.surface_carrez_lot3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot3);
				}

				// String

				writeString(this.lot4, dos);

				// Double

				if (this.surface_carrez_lot4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot4);
				}

				// String

				writeString(this.lot5, dos);

				// Double

				if (this.surface_carrez_lot5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot5);
				}

				// Integer

				writeInteger(this.nombre_lots, dos);

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.identifiant_local, dos);

				// Double

				if (this.surface_reelle_bati == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_bati);
				}

				// Integer

				writeInteger(this.nombre_pieces_principales, dos);

				// String

				writeString(this.nature_culture, dos);

				// String

				writeString(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// Integer

				writeInteger(this.id_ligne, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append(",numero_disposition="
					+ String.valueOf(numero_disposition));
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",nature_mutation=" + nature_mutation);
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",numero_voie=" + String.valueOf(numero_voie));
			sb.append(",complement_numero_voie=" + complement_numero_voie);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero_plan=" + numero_plan);
			sb.append(",numero_volume=" + numero_volume);
			sb.append(",lot1=" + lot1);
			sb.append(",surface_carrez_lot1="
					+ String.valueOf(surface_carrez_lot1));
			sb.append(",lot2=" + lot2);
			sb.append(",surface_carrez_lot2="
					+ String.valueOf(surface_carrez_lot2));
			sb.append(",lot3=" + lot3);
			sb.append(",surface_carrez_lot3="
					+ String.valueOf(surface_carrez_lot3));
			sb.append(",lot4=" + lot4);
			sb.append(",surface_carrez_lot4="
					+ String.valueOf(surface_carrez_lot4));
			sb.append(",lot5=" + lot5);
			sb.append(",surface_carrez_lot5="
					+ String.valueOf(surface_carrez_lot5));
			sb.append(",nombre_lots=" + String.valueOf(nombre_lots));
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",surface_reelle_bati="
					+ String.valueOf(surface_reelle_bati));
			sb.append(",nombre_pieces_principales="
					+ String.valueOf(nombre_pieces_principales));
			sb.append(",nature_culture=" + nature_culture);
			sb.append(",nature_culture_speciale=" + nature_culture_speciale);
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_ligne=" + String.valueOf(id_ligne));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(extractionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		public Integer numero_disposition;

		public Integer getNumero_disposition() {
			return this.numero_disposition;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public String nature_mutation;

		public String getNature_mutation() {
			return this.nature_mutation;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public Integer numero_voie;

		public Integer getNumero_voie() {
			return this.numero_voie;
		}

		public String complement_numero_voie;

		public String getComplement_numero_voie() {
			return this.complement_numero_voie;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero_plan;

		public String getNumero_plan() {
			return this.numero_plan;
		}

		public String numero_volume;

		public String getNumero_volume() {
			return this.numero_volume;
		}

		public String lot1;

		public String getLot1() {
			return this.lot1;
		}

		public Double surface_carrez_lot1;

		public Double getSurface_carrez_lot1() {
			return this.surface_carrez_lot1;
		}

		public String lot2;

		public String getLot2() {
			return this.lot2;
		}

		public Double surface_carrez_lot2;

		public Double getSurface_carrez_lot2() {
			return this.surface_carrez_lot2;
		}

		public String lot3;

		public String getLot3() {
			return this.lot3;
		}

		public Double surface_carrez_lot3;

		public Double getSurface_carrez_lot3() {
			return this.surface_carrez_lot3;
		}

		public String lot4;

		public String getLot4() {
			return this.lot4;
		}

		public Double surface_carrez_lot4;

		public Double getSurface_carrez_lot4() {
			return this.surface_carrez_lot4;
		}

		public String lot5;

		public String getLot5() {
			return this.lot5;
		}

		public Double surface_carrez_lot5;

		public Double getSurface_carrez_lot5() {
			return this.surface_carrez_lot5;
		}

		public Integer nombre_lots;

		public Integer getNombre_lots() {
			return this.nombre_lots;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public Double surface_reelle_bati;

		public Double getSurface_reelle_bati() {
			return this.surface_reelle_bati;
		}

		public Integer nombre_pieces_principales;

		public Integer getNombre_pieces_principales() {
			return this.nombre_pieces_principales;
		}

		public String nature_culture;

		public String getNature_culture() {
			return this.nature_culture;
		}

		public String nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public Integer id_ligne;

		public Integer getId_ligne() {
			return this.id_ligne;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

					this.numero_disposition = readInteger(dis);

					this.date_mutation = readDate(dis);

					this.nature_mutation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.numero_voie = readInteger(dis);

					this.complement_numero_voie = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero_plan = readString(dis);

					this.numero_volume = readString(dis);

					this.lot1 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot1 = null;
					} else {
						this.surface_carrez_lot1 = dis.readDouble();
					}

					this.lot2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot2 = null;
					} else {
						this.surface_carrez_lot2 = dis.readDouble();
					}

					this.lot3 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot3 = null;
					} else {
						this.surface_carrez_lot3 = dis.readDouble();
					}

					this.lot4 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot4 = null;
					} else {
						this.surface_carrez_lot4 = dis.readDouble();
					}

					this.lot5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot5 = null;
					} else {
						this.surface_carrez_lot5 = dis.readDouble();
					}

					this.nombre_lots = readInteger(dis);

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

					this.identifiant_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_bati = null;
					} else {
						this.surface_reelle_bati = dis.readDouble();
					}

					this.nombre_pieces_principales = readInteger(dis);

					this.nature_culture = readString(dis);

					this.nature_culture_speciale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_ligne = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

				// Integer

				writeInteger(this.numero_disposition, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// String

				writeString(this.nature_mutation, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// Integer

				writeInteger(this.numero_voie, dos);

				// String

				writeString(this.complement_numero_voie, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero_plan, dos);

				// String

				writeString(this.numero_volume, dos);

				// String

				writeString(this.lot1, dos);

				// Double

				if (this.surface_carrez_lot1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot1);
				}

				// String

				writeString(this.lot2, dos);

				// Double

				if (this.surface_carrez_lot2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot2);
				}

				// String

				writeString(this.lot3, dos);

				// Double

				if (this.surface_carrez_lot3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot3);
				}

				// String

				writeString(this.lot4, dos);

				// Double

				if (this.surface_carrez_lot4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot4);
				}

				// String

				writeString(this.lot5, dos);

				// Double

				if (this.surface_carrez_lot5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot5);
				}

				// Integer

				writeInteger(this.nombre_lots, dos);

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.identifiant_local, dos);

				// Double

				if (this.surface_reelle_bati == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_bati);
				}

				// Integer

				writeInteger(this.nombre_pieces_principales, dos);

				// String

				writeString(this.nature_culture, dos);

				// String

				writeString(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// Integer

				writeInteger(this.id_ligne, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append(",numero_disposition="
					+ String.valueOf(numero_disposition));
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",nature_mutation=" + nature_mutation);
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",numero_voie=" + String.valueOf(numero_voie));
			sb.append(",complement_numero_voie=" + complement_numero_voie);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero_plan=" + numero_plan);
			sb.append(",numero_volume=" + numero_volume);
			sb.append(",lot1=" + lot1);
			sb.append(",surface_carrez_lot1="
					+ String.valueOf(surface_carrez_lot1));
			sb.append(",lot2=" + lot2);
			sb.append(",surface_carrez_lot2="
					+ String.valueOf(surface_carrez_lot2));
			sb.append(",lot3=" + lot3);
			sb.append(",surface_carrez_lot3="
					+ String.valueOf(surface_carrez_lot3));
			sb.append(",lot4=" + lot4);
			sb.append(",surface_carrez_lot4="
					+ String.valueOf(surface_carrez_lot4));
			sb.append(",lot5=" + lot5);
			sb.append(",surface_carrez_lot5="
					+ String.valueOf(surface_carrez_lot5));
			sb.append(",nombre_lots=" + String.valueOf(nombre_lots));
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",surface_reelle_bati="
					+ String.valueOf(surface_reelle_bati));
			sb.append(",nombre_pieces_principales="
					+ String.valueOf(nombre_pieces_principales));
			sb.append(",nature_culture=" + nature_culture);
			sb.append(",nature_culture_speciale=" + nature_culture_speciale);
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_ligne=" + String.valueOf(id_ligne));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class extraireStruct implements
			routines.system.IPersistableRow<extraireStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		public Integer numero_disposition;

		public Integer getNumero_disposition() {
			return this.numero_disposition;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public String nature_mutation;

		public String getNature_mutation() {
			return this.nature_mutation;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public Integer numero_voie;

		public Integer getNumero_voie() {
			return this.numero_voie;
		}

		public String complement_numero_voie;

		public String getComplement_numero_voie() {
			return this.complement_numero_voie;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero_plan;

		public String getNumero_plan() {
			return this.numero_plan;
		}

		public String numero_volume;

		public String getNumero_volume() {
			return this.numero_volume;
		}

		public String lot1;

		public String getLot1() {
			return this.lot1;
		}

		public Double surface_carrez_lot1;

		public Double getSurface_carrez_lot1() {
			return this.surface_carrez_lot1;
		}

		public String lot2;

		public String getLot2() {
			return this.lot2;
		}

		public Double surface_carrez_lot2;

		public Double getSurface_carrez_lot2() {
			return this.surface_carrez_lot2;
		}

		public String lot3;

		public String getLot3() {
			return this.lot3;
		}

		public Double surface_carrez_lot3;

		public Double getSurface_carrez_lot3() {
			return this.surface_carrez_lot3;
		}

		public String lot4;

		public String getLot4() {
			return this.lot4;
		}

		public Double surface_carrez_lot4;

		public Double getSurface_carrez_lot4() {
			return this.surface_carrez_lot4;
		}

		public String lot5;

		public String getLot5() {
			return this.lot5;
		}

		public Double surface_carrez_lot5;

		public Double getSurface_carrez_lot5() {
			return this.surface_carrez_lot5;
		}

		public Integer nombre_lots;

		public Integer getNombre_lots() {
			return this.nombre_lots;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public Double surface_reelle_bati;

		public Double getSurface_reelle_bati() {
			return this.surface_reelle_bati;
		}

		public Integer nombre_pieces_principales;

		public Integer getNombre_pieces_principales() {
			return this.nombre_pieces_principales;
		}

		public String nature_culture;

		public String getNature_culture() {
			return this.nature_culture;
		}

		public String nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		public Integer id_ligne;

		public Integer getId_ligne() {
			return this.id_ligne;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

					this.numero_disposition = readInteger(dis);

					this.date_mutation = readDate(dis);

					this.nature_mutation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.numero_voie = readInteger(dis);

					this.complement_numero_voie = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero_plan = readString(dis);

					this.numero_volume = readString(dis);

					this.lot1 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot1 = null;
					} else {
						this.surface_carrez_lot1 = dis.readDouble();
					}

					this.lot2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot2 = null;
					} else {
						this.surface_carrez_lot2 = dis.readDouble();
					}

					this.lot3 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot3 = null;
					} else {
						this.surface_carrez_lot3 = dis.readDouble();
					}

					this.lot4 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot4 = null;
					} else {
						this.surface_carrez_lot4 = dis.readDouble();
					}

					this.lot5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot5 = null;
					} else {
						this.surface_carrez_lot5 = dis.readDouble();
					}

					this.nombre_lots = readInteger(dis);

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

					this.identifiant_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_bati = null;
					} else {
						this.surface_reelle_bati = dis.readDouble();
					}

					this.nombre_pieces_principales = readInteger(dis);

					this.nature_culture = readString(dis);

					this.nature_culture_speciale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

					this.id_ligne = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

				// Integer

				writeInteger(this.numero_disposition, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// String

				writeString(this.nature_mutation, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// Integer

				writeInteger(this.numero_voie, dos);

				// String

				writeString(this.complement_numero_voie, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero_plan, dos);

				// String

				writeString(this.numero_volume, dos);

				// String

				writeString(this.lot1, dos);

				// Double

				if (this.surface_carrez_lot1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot1);
				}

				// String

				writeString(this.lot2, dos);

				// Double

				if (this.surface_carrez_lot2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot2);
				}

				// String

				writeString(this.lot3, dos);

				// Double

				if (this.surface_carrez_lot3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot3);
				}

				// String

				writeString(this.lot4, dos);

				// Double

				if (this.surface_carrez_lot4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot4);
				}

				// String

				writeString(this.lot5, dos);

				// Double

				if (this.surface_carrez_lot5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot5);
				}

				// Integer

				writeInteger(this.nombre_lots, dos);

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.identifiant_local, dos);

				// Double

				if (this.surface_reelle_bati == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_bati);
				}

				// Integer

				writeInteger(this.nombre_pieces_principales, dos);

				// String

				writeString(this.nature_culture, dos);

				// String

				writeString(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

				// Integer

				writeInteger(this.id_ligne, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append(",numero_disposition="
					+ String.valueOf(numero_disposition));
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",nature_mutation=" + nature_mutation);
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",numero_voie=" + String.valueOf(numero_voie));
			sb.append(",complement_numero_voie=" + complement_numero_voie);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero_plan=" + numero_plan);
			sb.append(",numero_volume=" + numero_volume);
			sb.append(",lot1=" + lot1);
			sb.append(",surface_carrez_lot1="
					+ String.valueOf(surface_carrez_lot1));
			sb.append(",lot2=" + lot2);
			sb.append(",surface_carrez_lot2="
					+ String.valueOf(surface_carrez_lot2));
			sb.append(",lot3=" + lot3);
			sb.append(",surface_carrez_lot3="
					+ String.valueOf(surface_carrez_lot3));
			sb.append(",lot4=" + lot4);
			sb.append(",surface_carrez_lot4="
					+ String.valueOf(surface_carrez_lot4));
			sb.append(",lot5=" + lot5);
			sb.append(",surface_carrez_lot5="
					+ String.valueOf(surface_carrez_lot5));
			sb.append(",nombre_lots=" + String.valueOf(nombre_lots));
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",surface_reelle_bati="
					+ String.valueOf(surface_reelle_bati));
			sb.append(",nombre_pieces_principales="
					+ String.valueOf(nombre_pieces_principales));
			sb.append(",nature_culture=" + nature_culture);
			sb.append(",nature_culture_speciale=" + nature_culture_speciale);
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append(",id_ligne=" + String.valueOf(id_ligne));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(extraireStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sourceStruct implements
			routines.system.IPersistableRow<sourceStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		public Integer numero_disposition;

		public Integer getNumero_disposition() {
			return this.numero_disposition;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public String nature_mutation;

		public String getNature_mutation() {
			return this.nature_mutation;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public Integer numero_voie;

		public Integer getNumero_voie() {
			return this.numero_voie;
		}

		public String complement_numero_voie;

		public String getComplement_numero_voie() {
			return this.complement_numero_voie;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero_plan;

		public String getNumero_plan() {
			return this.numero_plan;
		}

		public String numero_volume;

		public String getNumero_volume() {
			return this.numero_volume;
		}

		public String lot1;

		public String getLot1() {
			return this.lot1;
		}

		public Double surface_carrez_lot1;

		public Double getSurface_carrez_lot1() {
			return this.surface_carrez_lot1;
		}

		public String lot2;

		public String getLot2() {
			return this.lot2;
		}

		public Double surface_carrez_lot2;

		public Double getSurface_carrez_lot2() {
			return this.surface_carrez_lot2;
		}

		public String lot3;

		public String getLot3() {
			return this.lot3;
		}

		public Double surface_carrez_lot3;

		public Double getSurface_carrez_lot3() {
			return this.surface_carrez_lot3;
		}

		public String lot4;

		public String getLot4() {
			return this.lot4;
		}

		public Double surface_carrez_lot4;

		public Double getSurface_carrez_lot4() {
			return this.surface_carrez_lot4;
		}

		public String lot5;

		public String getLot5() {
			return this.lot5;
		}

		public Double surface_carrez_lot5;

		public Double getSurface_carrez_lot5() {
			return this.surface_carrez_lot5;
		}

		public Integer nombre_lots;

		public Integer getNombre_lots() {
			return this.nombre_lots;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public Double surface_reelle_bati;

		public Double getSurface_reelle_bati() {
			return this.surface_reelle_bati;
		}

		public Integer nombre_pieces_principales;

		public Integer getNombre_pieces_principales() {
			return this.nombre_pieces_principales;
		}

		public String nature_culture;

		public String getNature_culture() {
			return this.nature_culture;
		}

		public String nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

					this.numero_disposition = readInteger(dis);

					this.date_mutation = readDate(dis);

					this.nature_mutation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.numero_voie = readInteger(dis);

					this.complement_numero_voie = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero_plan = readString(dis);

					this.numero_volume = readString(dis);

					this.lot1 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot1 = null;
					} else {
						this.surface_carrez_lot1 = dis.readDouble();
					}

					this.lot2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot2 = null;
					} else {
						this.surface_carrez_lot2 = dis.readDouble();
					}

					this.lot3 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot3 = null;
					} else {
						this.surface_carrez_lot3 = dis.readDouble();
					}

					this.lot4 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot4 = null;
					} else {
						this.surface_carrez_lot4 = dis.readDouble();
					}

					this.lot5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot5 = null;
					} else {
						this.surface_carrez_lot5 = dis.readDouble();
					}

					this.nombre_lots = readInteger(dis);

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

					this.identifiant_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_bati = null;
					} else {
						this.surface_reelle_bati = dis.readDouble();
					}

					this.nombre_pieces_principales = readInteger(dis);

					this.nature_culture = readString(dis);

					this.nature_culture_speciale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

				// Integer

				writeInteger(this.numero_disposition, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// String

				writeString(this.nature_mutation, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// Integer

				writeInteger(this.numero_voie, dos);

				// String

				writeString(this.complement_numero_voie, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero_plan, dos);

				// String

				writeString(this.numero_volume, dos);

				// String

				writeString(this.lot1, dos);

				// Double

				if (this.surface_carrez_lot1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot1);
				}

				// String

				writeString(this.lot2, dos);

				// Double

				if (this.surface_carrez_lot2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot2);
				}

				// String

				writeString(this.lot3, dos);

				// Double

				if (this.surface_carrez_lot3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot3);
				}

				// String

				writeString(this.lot4, dos);

				// Double

				if (this.surface_carrez_lot4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot4);
				}

				// String

				writeString(this.lot5, dos);

				// Double

				if (this.surface_carrez_lot5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot5);
				}

				// Integer

				writeInteger(this.nombre_lots, dos);

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.identifiant_local, dos);

				// Double

				if (this.surface_reelle_bati == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_bati);
				}

				// Integer

				writeInteger(this.nombre_pieces_principales, dos);

				// String

				writeString(this.nature_culture, dos);

				// String

				writeString(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append(",numero_disposition="
					+ String.valueOf(numero_disposition));
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",nature_mutation=" + nature_mutation);
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",numero_voie=" + String.valueOf(numero_voie));
			sb.append(",complement_numero_voie=" + complement_numero_voie);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero_plan=" + numero_plan);
			sb.append(",numero_volume=" + numero_volume);
			sb.append(",lot1=" + lot1);
			sb.append(",surface_carrez_lot1="
					+ String.valueOf(surface_carrez_lot1));
			sb.append(",lot2=" + lot2);
			sb.append(",surface_carrez_lot2="
					+ String.valueOf(surface_carrez_lot2));
			sb.append(",lot3=" + lot3);
			sb.append(",surface_carrez_lot3="
					+ String.valueOf(surface_carrez_lot3));
			sb.append(",lot4=" + lot4);
			sb.append(",surface_carrez_lot4="
					+ String.valueOf(surface_carrez_lot4));
			sb.append(",lot5=" + lot5);
			sb.append(",surface_carrez_lot5="
					+ String.valueOf(surface_carrez_lot5));
			sb.append(",nombre_lots=" + String.valueOf(nombre_lots));
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",surface_reelle_bati="
					+ String.valueOf(surface_reelle_bati));
			sb.append(",nombre_pieces_principales="
					+ String.valueOf(nombre_pieces_principales));
			sb.append(",nature_culture=" + nature_culture);
			sb.append(",nature_culture_speciale=" + nature_culture_speciale);
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sourceStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];

		public String code_service_ch;

		public String getCode_service_ch() {
			return this.code_service_ch;
		}

		public String reference_document;

		public String getReference_document() {
			return this.reference_document;
		}

		public String a_articles_cgi;

		public String getA_articles_cgi() {
			return this.a_articles_cgi;
		}

		public String b_articles_cgi;

		public String getB_articles_cgi() {
			return this.b_articles_cgi;
		}

		public String c_articles_cgi;

		public String getC_articles_cgi() {
			return this.c_articles_cgi;
		}

		public String d_articles_cgi;

		public String getD_articles_cgi() {
			return this.d_articles_cgi;
		}

		public String e_articles_cgi;

		public String getE_articles_cgi() {
			return this.e_articles_cgi;
		}

		public Integer numero_disposition;

		public Integer getNumero_disposition() {
			return this.numero_disposition;
		}

		public java.util.Date date_mutation;

		public java.util.Date getDate_mutation() {
			return this.date_mutation;
		}

		public String nature_mutation;

		public String getNature_mutation() {
			return this.nature_mutation;
		}

		public Double valeur_fonciere;

		public Double getValeur_fonciere() {
			return this.valeur_fonciere;
		}

		public Integer numero_voie;

		public Integer getNumero_voie() {
			return this.numero_voie;
		}

		public String complement_numero_voie;

		public String getComplement_numero_voie() {
			return this.complement_numero_voie;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String code_voie;

		public String getCode_voie() {
			return this.code_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String code_departement;

		public String getCode_departement() {
			return this.code_departement;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String prefixe_section;

		public String getPrefixe_section() {
			return this.prefixe_section;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		public String numero_plan;

		public String getNumero_plan() {
			return this.numero_plan;
		}

		public String numero_volume;

		public String getNumero_volume() {
			return this.numero_volume;
		}

		public String lot1;

		public String getLot1() {
			return this.lot1;
		}

		public Double surface_carrez_lot1;

		public Double getSurface_carrez_lot1() {
			return this.surface_carrez_lot1;
		}

		public String lot2;

		public String getLot2() {
			return this.lot2;
		}

		public Double surface_carrez_lot2;

		public Double getSurface_carrez_lot2() {
			return this.surface_carrez_lot2;
		}

		public String lot3;

		public String getLot3() {
			return this.lot3;
		}

		public Double surface_carrez_lot3;

		public Double getSurface_carrez_lot3() {
			return this.surface_carrez_lot3;
		}

		public String lot4;

		public String getLot4() {
			return this.lot4;
		}

		public Double surface_carrez_lot4;

		public Double getSurface_carrez_lot4() {
			return this.surface_carrez_lot4;
		}

		public String lot5;

		public String getLot5() {
			return this.lot5;
		}

		public Double surface_carrez_lot5;

		public Double getSurface_carrez_lot5() {
			return this.surface_carrez_lot5;
		}

		public Integer nombre_lots;

		public Integer getNombre_lots() {
			return this.nombre_lots;
		}

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		public String identifiant_local;

		public String getIdentifiant_local() {
			return this.identifiant_local;
		}

		public Double surface_reelle_bati;

		public Double getSurface_reelle_bati() {
			return this.surface_reelle_bati;
		}

		public Integer nombre_pieces_principales;

		public Integer getNombre_pieces_principales() {
			return this.nombre_pieces_principales;
		}

		public String nature_culture;

		public String getNature_culture() {
			return this.nature_culture;
		}

		public String nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public Double surface_terrain;

		public Double getSurface_terrain() {
			return this.surface_terrain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.code_service_ch = readString(dis);

					this.reference_document = readString(dis);

					this.a_articles_cgi = readString(dis);

					this.b_articles_cgi = readString(dis);

					this.c_articles_cgi = readString(dis);

					this.d_articles_cgi = readString(dis);

					this.e_articles_cgi = readString(dis);

					this.numero_disposition = readInteger(dis);

					this.date_mutation = readDate(dis);

					this.nature_mutation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valeur_fonciere = null;
					} else {
						this.valeur_fonciere = dis.readDouble();
					}

					this.numero_voie = readInteger(dis);

					this.complement_numero_voie = readString(dis);

					this.type_voie = readString(dis);

					this.code_voie = readString(dis);

					this.voie = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.code_departement = readString(dis);

					this.code_commune = readString(dis);

					this.prefixe_section = readString(dis);

					this.section = readString(dis);

					this.numero_plan = readString(dis);

					this.numero_volume = readString(dis);

					this.lot1 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot1 = null;
					} else {
						this.surface_carrez_lot1 = dis.readDouble();
					}

					this.lot2 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot2 = null;
					} else {
						this.surface_carrez_lot2 = dis.readDouble();
					}

					this.lot3 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot3 = null;
					} else {
						this.surface_carrez_lot3 = dis.readDouble();
					}

					this.lot4 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot4 = null;
					} else {
						this.surface_carrez_lot4 = dis.readDouble();
					}

					this.lot5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_carrez_lot5 = null;
					} else {
						this.surface_carrez_lot5 = dis.readDouble();
					}

					this.nombre_lots = readInteger(dis);

					this.code_type_local = readString(dis);

					this.type_local = readString(dis);

					this.identifiant_local = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_reelle_bati = null;
					} else {
						this.surface_reelle_bati = dis.readDouble();
					}

					this.nombre_pieces_principales = readInteger(dis);

					this.nature_culture = readString(dis);

					this.nature_culture_speciale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.surface_terrain = null;
					} else {
						this.surface_terrain = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_service_ch, dos);

				// String

				writeString(this.reference_document, dos);

				// String

				writeString(this.a_articles_cgi, dos);

				// String

				writeString(this.b_articles_cgi, dos);

				// String

				writeString(this.c_articles_cgi, dos);

				// String

				writeString(this.d_articles_cgi, dos);

				// String

				writeString(this.e_articles_cgi, dos);

				// Integer

				writeInteger(this.numero_disposition, dos);

				// java.util.Date

				writeDate(this.date_mutation, dos);

				// String

				writeString(this.nature_mutation, dos);

				// Double

				if (this.valeur_fonciere == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valeur_fonciere);
				}

				// Integer

				writeInteger(this.numero_voie, dos);

				// String

				writeString(this.complement_numero_voie, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.code_voie, dos);

				// String

				writeString(this.voie, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.code_departement, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.prefixe_section, dos);

				// String

				writeString(this.section, dos);

				// String

				writeString(this.numero_plan, dos);

				// String

				writeString(this.numero_volume, dos);

				// String

				writeString(this.lot1, dos);

				// Double

				if (this.surface_carrez_lot1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot1);
				}

				// String

				writeString(this.lot2, dos);

				// Double

				if (this.surface_carrez_lot2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot2);
				}

				// String

				writeString(this.lot3, dos);

				// Double

				if (this.surface_carrez_lot3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot3);
				}

				// String

				writeString(this.lot4, dos);

				// Double

				if (this.surface_carrez_lot4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot4);
				}

				// String

				writeString(this.lot5, dos);

				// Double

				if (this.surface_carrez_lot5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_carrez_lot5);
				}

				// Integer

				writeInteger(this.nombre_lots, dos);

				// String

				writeString(this.code_type_local, dos);

				// String

				writeString(this.type_local, dos);

				// String

				writeString(this.identifiant_local, dos);

				// Double

				if (this.surface_reelle_bati == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_reelle_bati);
				}

				// Integer

				writeInteger(this.nombre_pieces_principales, dos);

				// String

				writeString(this.nature_culture, dos);

				// String

				writeString(this.nature_culture_speciale, dos);

				// Double

				if (this.surface_terrain == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.surface_terrain);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_service_ch=" + code_service_ch);
			sb.append(",reference_document=" + reference_document);
			sb.append(",a_articles_cgi=" + a_articles_cgi);
			sb.append(",b_articles_cgi=" + b_articles_cgi);
			sb.append(",c_articles_cgi=" + c_articles_cgi);
			sb.append(",d_articles_cgi=" + d_articles_cgi);
			sb.append(",e_articles_cgi=" + e_articles_cgi);
			sb.append(",numero_disposition="
					+ String.valueOf(numero_disposition));
			sb.append(",date_mutation=" + String.valueOf(date_mutation));
			sb.append(",nature_mutation=" + nature_mutation);
			sb.append(",valeur_fonciere=" + String.valueOf(valeur_fonciere));
			sb.append(",numero_voie=" + String.valueOf(numero_voie));
			sb.append(",complement_numero_voie=" + complement_numero_voie);
			sb.append(",type_voie=" + type_voie);
			sb.append(",code_voie=" + code_voie);
			sb.append(",voie=" + voie);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",code_departement=" + code_departement);
			sb.append(",code_commune=" + code_commune);
			sb.append(",prefixe_section=" + prefixe_section);
			sb.append(",section=" + section);
			sb.append(",numero_plan=" + numero_plan);
			sb.append(",numero_volume=" + numero_volume);
			sb.append(",lot1=" + lot1);
			sb.append(",surface_carrez_lot1="
					+ String.valueOf(surface_carrez_lot1));
			sb.append(",lot2=" + lot2);
			sb.append(",surface_carrez_lot2="
					+ String.valueOf(surface_carrez_lot2));
			sb.append(",lot3=" + lot3);
			sb.append(",surface_carrez_lot3="
					+ String.valueOf(surface_carrez_lot3));
			sb.append(",lot4=" + lot4);
			sb.append(",surface_carrez_lot4="
					+ String.valueOf(surface_carrez_lot4));
			sb.append(",lot5=" + lot5);
			sb.append(",surface_carrez_lot5="
					+ String.valueOf(surface_carrez_lot5));
			sb.append(",nombre_lots=" + String.valueOf(nombre_lots));
			sb.append(",code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append(",identifiant_local=" + identifiant_local);
			sb.append(",surface_reelle_bati="
					+ String.valueOf(surface_reelle_bati));
			sb.append(",nombre_pieces_principales="
					+ String.valueOf(nombre_pieces_principales));
			sb.append(",nature_culture=" + nature_culture);
			sb.append(",nature_culture_speciale=" + nature_culture_speciale);
			sb.append(",surface_terrain=" + String.valueOf(surface_terrain));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_6Process(globalMap);
				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_7Process(globalMap);
				tFileInputDelimited_8Process(globalMap);
				tFileInputDelimited_10Process(globalMap);

				sourceStruct source = new sourceStruct();
				extraireStruct extraire = new extraireStruct();
				extractionStruct extraction = new extractionStruct();
				mutation_article_cgi_non_normaliseStruct mutation_article_cgi_non_normalise = new mutation_article_cgi_non_normaliseStruct();
				row6Struct row6 = new row6Struct();
				row17Struct row17 = new row17Struct();
				row18Struct row18 = new row18Struct();
				row19Struct row19 = new row19Struct();
				avec_id_article_cgiStruct avec_id_article_cgi = new avec_id_article_cgiStruct();
				row22Struct row22 = new row22Struct();
				parcelleStruct parcelle = new parcelleStruct();
				row8Struct row8 = new row8Struct();
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				lotsStruct lots = new lotsStruct();
				lots_uStruct lots_u = new lots_uStruct();
				row16Struct row16 = new row16Struct();
				row23Struct row23 = new row23Struct();
				row12Struct row12 = new row12Struct();
				row31Struct row31 = new row31Struct();
				row32Struct row32 = new row32Struct();
				adresseStruct adresse = new adresseStruct();
				row14Struct row14 = new row14Struct();
				row21Struct row21 = new row21Struct();
				row15Struct row15 = new row15Struct();
				mutationStruct mutation = new mutationStruct();
				row1Struct row1 = new row1Struct();
				row24Struct row24 = new row24Struct();
				row2Struct row2 = new row2Struct();
				dispositionStruct disposition = new dispositionStruct();
				row5Struct row5 = new row5Struct();
				row26Struct row26 = new row26Struct();
				row7Struct row7 = new row7Struct();
				disposition_parcelleStruct disposition_parcelle = new disposition_parcelleStruct();
				row20Struct row20 = new row20Struct();
				row27Struct row27 = new row27Struct();
				adresse_dispoparcStruct adresse_dispoparc = new adresse_dispoparcStruct();
				row13Struct row13 = new row13Struct();
				locauxStruct locaux = new locauxStruct();
				row9Struct row9 = new row9Struct();
				row28Struct row28 = new row28Struct();
				volumeStruct volume = new volumeStruct();
				row10Struct row10 = new row10Struct();
				row29Struct row29 = new row29Struct();
				sufStruct suf = new sufStruct();
				row11Struct row11 = new row11Struct();
				row30Struct row30 = new row30Struct();
				row25Struct row25 = new row25Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.target_path + "mutation_article_cgi.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				String[] headColutFileOutputDelimited_2 = new String[4];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
				try {
					CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_2,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_2
							.setSeparator(csvSettings_tFileOutputDelimited_2
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_2
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_2.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_2
										.getRowDelim());
					}

					if (filetFileOutputDelimited_2.length() == 0) {

						headColutFileOutputDelimited_2[0] = "id_mutation";

						headColutFileOutputDelimited_2[1] = "id_article_cgi";

						headColutFileOutputDelimited_2[2] = "ordre_article_cgi";

						headColutFileOutputDelimited_2[3] = "id_mutation_temp";

						CsvWritertFileOutputDelimited_2
								.writeNext(headColutFileOutputDelimited_2);
						CsvWritertFileOutputDelimited_2.flush();

					}

					CsvWritertFileOutputDelimited_2
							.setEscapeChar(csvSettings_tFileOutputDelimited_2
									.getEscapeChar());
					CsvWritertFileOutputDelimited_2
							.setQuoteChar(csvSettings_tFileOutputDelimited_2
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_2
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tMap_4 begin ] start
					 */

					ok_Hash.put("tMap_4", false);
					start_Hash.put("tMap_4", System.currentTimeMillis());
					currentComponent = "tMap_4";

					int tos_count_tMap_4 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<article_cgiStruct> tHash_Lookup_article_cgi = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<article_cgiStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<article_cgiStruct>) globalMap
							.get("tHash_Lookup_article_cgi"));

					article_cgiStruct article_cgiHashKey = new article_cgiStruct();
					article_cgiStruct article_cgiDefault = new article_cgiStruct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_4__Struct {
					}
					Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					avec_id_article_cgiStruct avec_id_article_cgi_tmp = new avec_id_article_cgiStruct();
					// ###############################

					/**
					 * [tMap_4 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_21 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_21", false);
					start_Hash.put("tFileOutputDelimited_21",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_21";

					int tos_count_tFileOutputDelimited_21 = 0;

					String fileName_tFileOutputDelimited_21 = "";
					fileName_tFileOutputDelimited_21 = (new java.io.File(
							context.log_path
									+ "doublons_mutation_article_cgi_sans_id.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_21 = null;
					String extension_tFileOutputDelimited_21 = null;
					String directory_tFileOutputDelimited_21 = null;
					if ((fileName_tFileOutputDelimited_21.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_21.lastIndexOf(".") < fileName_tFileOutputDelimited_21
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21;
							extension_tFileOutputDelimited_21 = "";
						} else {
							fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
									.substring(0,
											fileName_tFileOutputDelimited_21
													.lastIndexOf("."));
							extension_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
									.substring(fileName_tFileOutputDelimited_21
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(0, fileName_tFileOutputDelimited_21
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_21.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
									.substring(0,
											fileName_tFileOutputDelimited_21
													.lastIndexOf("."));
							extension_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
									.substring(fileName_tFileOutputDelimited_21
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21;
							extension_tFileOutputDelimited_21 = "";
						}
						directory_tFileOutputDelimited_21 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_21 = true;
					java.io.File filetFileOutputDelimited_21 = new java.io.File(
							fileName_tFileOutputDelimited_21);
					globalMap.put("tFileOutputDelimited_21_FILE_NAME",
							fileName_tFileOutputDelimited_21);

					String[] headColutFileOutputDelimited_21 = new String[3];
					class CSVBasicSet_tFileOutputDelimited_21 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_21[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_21 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_21[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator(";");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_21[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_21 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_21[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_21[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_21 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_21[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_21 = 0;
					int splitEvery_tFileOutputDelimited_21 = 1000;
					int splitedFileNo_tFileOutputDelimited_21 = 0;
					int currentRow_tFileOutputDelimited_21 = 0;

					CSVBasicSet_tFileOutputDelimited_21 csvSettings_tFileOutputDelimited_21 = new CSVBasicSet_tFileOutputDelimited_21();
					csvSettings_tFileOutputDelimited_21.setFieldSeparator(";");
					csvSettings_tFileOutputDelimited_21.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_21
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_21 != null
							&& directory_tFileOutputDelimited_21.trim()
									.length() != 0) {
						java.io.File dir_tFileOutputDelimited_21 = new java.io.File(
								directory_tFileOutputDelimited_21);
						if (!dir_tFileOutputDelimited_21.exists()) {
							dir_tFileOutputDelimited_21.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_21 = null;
					try {
						CsvWritertFileOutputDelimited_21 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_21,
														false), "ISO-8859-15")));
						CsvWritertFileOutputDelimited_21
								.setSeparator(csvSettings_tFileOutputDelimited_21
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_21
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_21
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_21
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_21.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_21
											.getRowDelim());
						}

						if (filetFileOutputDelimited_21.length() == 0) {

							headColutFileOutputDelimited_21[0] = "article_cgi";

							headColutFileOutputDelimited_21[1] = "ordre_article_cgi";

							headColutFileOutputDelimited_21[2] = "id_mutation_temp";

							CsvWritertFileOutputDelimited_21
									.writeNext(headColutFileOutputDelimited_21);
							CsvWritertFileOutputDelimited_21.flush();

						}

						CsvWritertFileOutputDelimited_21
								.setEscapeChar(csvSettings_tFileOutputDelimited_21
										.getEscapeChar());
						CsvWritertFileOutputDelimited_21
								.setQuoteChar(csvSettings_tFileOutputDelimited_21
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_21
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_21 begin ] stop
						 */

						/**
						 * [tUniqRow_15 begin ] start
						 */

						ok_Hash.put("tUniqRow_15", false);
						start_Hash.put("tUniqRow_15",
								System.currentTimeMillis());
						currentComponent = "tUniqRow_15";

						int tos_count_tUniqRow_15 = 0;

						class KeyStruct_tUniqRow_15 {

							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;

							String article_cgi;
							String id_mutation_temp;

							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;

									result = prime
											* result
											+ ((this.article_cgi == null) ? 0
													: this.article_cgi
															.hashCode());

									result = prime
											* result
											+ ((this.id_mutation_temp == null) ? 0
													: this.id_mutation_temp
															.hashCode());

									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}

							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final KeyStruct_tUniqRow_15 other = (KeyStruct_tUniqRow_15) obj;

								if (this.article_cgi == null) {
									if (other.article_cgi != null)
										return false;
								} else if (!this.article_cgi
										.equals(other.article_cgi))
									return false;

								if (this.id_mutation_temp == null) {
									if (other.id_mutation_temp != null)
										return false;
								} else if (!this.id_mutation_temp
										.equals(other.id_mutation_temp))
									return false;

								return true;
							}

						}

						int nb_uniques_tUniqRow_15 = 0;
						int nb_duplicates_tUniqRow_15 = 0;
						KeyStruct_tUniqRow_15 finder_tUniqRow_15 = new KeyStruct_tUniqRow_15();
						java.util.Set<KeyStruct_tUniqRow_15> keystUniqRow_15 = new java.util.HashSet<KeyStruct_tUniqRow_15>();

						/**
						 * [tUniqRow_15 begin ] stop
						 */

						/**
						 * [tFilterRow_1 begin ] start
						 */

						ok_Hash.put("tFilterRow_1", false);
						start_Hash.put("tFilterRow_1",
								System.currentTimeMillis());
						currentComponent = "tFilterRow_1";

						int tos_count_tFilterRow_1 = 0;
						int nb_line_tFilterRow_1 = 0;
						int nb_line_ok_tFilterRow_1 = 0;
						int nb_line_reject_tFilterRow_1 = 0;

						class Operator_tFilterRow_1 {
							private String sErrorMsg = "";
							private boolean bMatchFlag = true;
							private String sUnionFlag = "&&";

							public Operator_tFilterRow_1(String unionFlag) {
								sUnionFlag = unionFlag;
								bMatchFlag = "||".equals(unionFlag) ? false
										: true;
							}

							public String getErrorMsg() {
								if (sErrorMsg != null && sErrorMsg.length() > 1)
									return sErrorMsg.substring(1);
								else
									return null;
							}

							public boolean getMatchFlag() {
								return bMatchFlag;
							}

							public void matches(boolean partMatched,
									String reason) {
								// no need to care about the next judgement
								if ("||".equals(sUnionFlag) && bMatchFlag) {
									return;
								}

								if (!partMatched) {
									sErrorMsg += "|" + reason;
								}

								if ("||".equals(sUnionFlag))
									bMatchFlag = bMatchFlag || partMatched;
								else
									bMatchFlag = bMatchFlag && partMatched;
							}
						}

						/**
						 * [tFilterRow_1 begin ] stop
						 */

						/**
						 * [tSplitRow_1 begin ] start
						 */

						ok_Hash.put("tSplitRow_1", false);
						start_Hash.put("tSplitRow_1",
								System.currentTimeMillis());
						currentComponent = "tSplitRow_1";

						int tos_count_tSplitRow_1 = 0;
						int nb_line_tSplitRow_1 = 0;

						/**
						 * [tSplitRow_1 begin ] stop
						 */

						/**
						 * [tUniqRow_4 begin ] start
						 */

						ok_Hash.put("tUniqRow_4", false);
						start_Hash
								.put("tUniqRow_4", System.currentTimeMillis());
						currentComponent = "tUniqRow_4";

						int tos_count_tUniqRow_4 = 0;

						class KeyStruct_tUniqRow_4 {

							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;

							String id_mutation_temp;
							String a_articles_cgi;
							String b_articles_cgi;
							String c_articles_cgi;
							String d_articles_cgi;
							String e_articles_cgi;

							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;

									result = prime
											* result
											+ ((this.id_mutation_temp == null) ? 0
													: this.id_mutation_temp
															.hashCode());

									result = prime
											* result
											+ ((this.a_articles_cgi == null) ? 0
													: this.a_articles_cgi
															.hashCode());

									result = prime
											* result
											+ ((this.b_articles_cgi == null) ? 0
													: this.b_articles_cgi
															.hashCode());

									result = prime
											* result
											+ ((this.c_articles_cgi == null) ? 0
													: this.c_articles_cgi
															.hashCode());

									result = prime
											* result
											+ ((this.d_articles_cgi == null) ? 0
													: this.d_articles_cgi
															.hashCode());

									result = prime
											* result
											+ ((this.e_articles_cgi == null) ? 0
													: this.e_articles_cgi
															.hashCode());

									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}

							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

								if (this.id_mutation_temp == null) {
									if (other.id_mutation_temp != null)
										return false;
								} else if (!this.id_mutation_temp
										.equals(other.id_mutation_temp))
									return false;

								if (this.a_articles_cgi == null) {
									if (other.a_articles_cgi != null)
										return false;
								} else if (!this.a_articles_cgi
										.equals(other.a_articles_cgi))
									return false;

								if (this.b_articles_cgi == null) {
									if (other.b_articles_cgi != null)
										return false;
								} else if (!this.b_articles_cgi
										.equals(other.b_articles_cgi))
									return false;

								if (this.c_articles_cgi == null) {
									if (other.c_articles_cgi != null)
										return false;
								} else if (!this.c_articles_cgi
										.equals(other.c_articles_cgi))
									return false;

								if (this.d_articles_cgi == null) {
									if (other.d_articles_cgi != null)
										return false;
								} else if (!this.d_articles_cgi
										.equals(other.d_articles_cgi))
									return false;

								if (this.e_articles_cgi == null) {
									if (other.e_articles_cgi != null)
										return false;
								} else if (!this.e_articles_cgi
										.equals(other.e_articles_cgi))
									return false;

								return true;
							}

						}

						int nb_uniques_tUniqRow_4 = 0;
						int nb_duplicates_tUniqRow_4 = 0;
						KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
						java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

						/**
						 * [tUniqRow_4 begin ] stop
						 */

						/**
						 * [tSortRow_1_SortOut begin ] start
						 */

						ok_Hash.put("tSortRow_1_SortOut", false);
						start_Hash.put("tSortRow_1_SortOut",
								System.currentTimeMillis());
						currentComponent = "tSortRow_1_SortOut";

						int tos_count_tSortRow_1_SortOut = 0;

						class Comparablerow8Struct extends row8Struct implements
								Comparable<Comparablerow8Struct> {

							public int compareTo(Comparablerow8Struct other) {

								if (this.idpar == null && other.idpar != null) {
									return -1;

								} else if (this.idpar != null
										&& other.idpar == null) {
									return 1;

								} else if (this.idpar != null
										&& other.idpar != null) {
									if (!this.idpar.equals(other.idpar)) {
										return this.idpar
												.compareTo(other.idpar);
									}
								}
								return 0;
							}
						}

						java.util.List<Comparablerow8Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow8Struct>();

						/**
						 * [tSortRow_1_SortOut begin ] stop
						 */

						/**
						 * [tUniqRow_6 begin ] start
						 */

						ok_Hash.put("tUniqRow_6", false);
						start_Hash
								.put("tUniqRow_6", System.currentTimeMillis());
						currentComponent = "tUniqRow_6";

						int tos_count_tUniqRow_6 = 0;

						class KeyStruct_tUniqRow_6 {

							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;

							String idpar;

							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;

									result = prime
											* result
											+ ((this.idpar == null) ? 0
													: this.idpar.hashCode());

									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}

							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

								if (this.idpar == null) {
									if (other.idpar != null)
										return false;
								} else if (!this.idpar.equals(other.idpar))
									return false;

								return true;
							}

						}

						int nb_uniques_tUniqRow_6 = 0;
						int nb_duplicates_tUniqRow_6 = 0;
						KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
						java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

						/**
						 * [tUniqRow_6 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_11", false);
						start_Hash.put("tFileOutputDelimited_11",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_11";

						int tos_count_tFileOutputDelimited_11 = 0;

						String fileName_tFileOutputDelimited_11 = "";
						fileName_tFileOutputDelimited_11 = (new java.io.File(
								context.target_path + "lot.csv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_11 = null;
						String extension_tFileOutputDelimited_11 = null;
						String directory_tFileOutputDelimited_11 = null;
						if ((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_11
									.lastIndexOf(".") < fileName_tFileOutputDelimited_11
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
								extension_tFileOutputDelimited_11 = "";
							} else {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(0,
												fileName_tFileOutputDelimited_11
														.lastIndexOf("."));
								extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(fileName_tFileOutputDelimited_11
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
									.substring(0,
											fileName_tFileOutputDelimited_11
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_11
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(0,
												fileName_tFileOutputDelimited_11
														.lastIndexOf("."));
								extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(fileName_tFileOutputDelimited_11
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
								extension_tFileOutputDelimited_11 = "";
							}
							directory_tFileOutputDelimited_11 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_11 = true;
						java.io.File filetFileOutputDelimited_11 = new java.io.File(
								fileName_tFileOutputDelimited_11);
						globalMap.put("tFileOutputDelimited_11_FILE_NAME",
								fileName_tFileOutputDelimited_11);

						String[] headColutFileOutputDelimited_11 = new String[10];
						class CSVBasicSet_tFileOutputDelimited_11 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_11[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_11 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_11[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator(";");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_11[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_11 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_11[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_11[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_11 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_11[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_11 = 0;
						int splitEvery_tFileOutputDelimited_11 = 1000;
						int splitedFileNo_tFileOutputDelimited_11 = 0;
						int currentRow_tFileOutputDelimited_11 = 0;

						CSVBasicSet_tFileOutputDelimited_11 csvSettings_tFileOutputDelimited_11 = new CSVBasicSet_tFileOutputDelimited_11();
						csvSettings_tFileOutputDelimited_11
								.setFieldSeparator(";");
						csvSettings_tFileOutputDelimited_11
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_11
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_11 != null
								&& directory_tFileOutputDelimited_11.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_11 = new java.io.File(
									directory_tFileOutputDelimited_11);
							if (!dir_tFileOutputDelimited_11.exists()) {
								dir_tFileOutputDelimited_11.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_11 = null;
						try {
							CsvWritertFileOutputDelimited_11 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_11,
															false),
													"ISO-8859-15")));
							CsvWritertFileOutputDelimited_11
									.setSeparator(csvSettings_tFileOutputDelimited_11
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_11
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_11
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_11
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_11.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_11
												.getRowDelim());
							}

							if (filetFileOutputDelimited_11.length() == 0) {

								headColutFileOutputDelimited_11[0] = "id_lot";

								headColutFileOutputDelimited_11[1] = "id_dispoparc";

								headColutFileOutputDelimited_11[2] = "id_local";

								headColutFileOutputDelimited_11[3] = "id_volume";

								headColutFileOutputDelimited_11[4] = "no_lot";

								headColutFileOutputDelimited_11[5] = "surface_carrez";

								headColutFileOutputDelimited_11[6] = "id_lot_temp";

								headColutFileOutputDelimited_11[7] = "id_dispoparc_temp";

								headColutFileOutputDelimited_11[8] = "id_local_temp";

								headColutFileOutputDelimited_11[9] = "id_volume_temp";

								CsvWritertFileOutputDelimited_11
										.writeNext(headColutFileOutputDelimited_11);
								CsvWritertFileOutputDelimited_11.flush();

							}

							CsvWritertFileOutputDelimited_11
									.setEscapeChar(csvSettings_tFileOutputDelimited_11
											.getEscapeChar());
							CsvWritertFileOutputDelimited_11
									.setQuoteChar(csvSettings_tFileOutputDelimited_11
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_11
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_11 begin ] stop
							 */

							/**
							 * [tJavaRow_10 begin ] start
							 */

							ok_Hash.put("tJavaRow_10", false);
							start_Hash.put("tJavaRow_10",
									System.currentTimeMillis());
							currentComponent = "tJavaRow_10";

							int tos_count_tJavaRow_10 = 0;

							int nb_line_tJavaRow_10 = 0;

							/**
							 * [tJavaRow_10 begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_12 begin ] start
							 */

							ok_Hash.put("tFileOutputDelimited_12", false);
							start_Hash.put("tFileOutputDelimited_12",
									System.currentTimeMillis());
							currentComponent = "tFileOutputDelimited_12";

							int tos_count_tFileOutputDelimited_12 = 0;

							String fileName_tFileOutputDelimited_12 = "";
							fileName_tFileOutputDelimited_12 = (new java.io.File(
									context.log_path + "doublons_lot.csv"))
									.getAbsolutePath().replace("\\", "/");
							String fullName_tFileOutputDelimited_12 = null;
							String extension_tFileOutputDelimited_12 = null;
							String directory_tFileOutputDelimited_12 = null;
							if ((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
								if (fileName_tFileOutputDelimited_12
										.lastIndexOf(".") < fileName_tFileOutputDelimited_12
										.lastIndexOf("/")) {
									fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
									extension_tFileOutputDelimited_12 = "";
								} else {
									fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
											.substring(0,
													fileName_tFileOutputDelimited_12
															.lastIndexOf("."));
									extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
											.substring(fileName_tFileOutputDelimited_12
													.lastIndexOf("."));
								}
								directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
										.substring(0,
												fileName_tFileOutputDelimited_12
														.lastIndexOf("/"));
							} else {
								if (fileName_tFileOutputDelimited_12
										.lastIndexOf(".") != -1) {
									fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
											.substring(0,
													fileName_tFileOutputDelimited_12
															.lastIndexOf("."));
									extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
											.substring(fileName_tFileOutputDelimited_12
													.lastIndexOf("."));
								} else {
									fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
									extension_tFileOutputDelimited_12 = "";
								}
								directory_tFileOutputDelimited_12 = "";
							}
							boolean isFileGenerated_tFileOutputDelimited_12 = true;
							java.io.File filetFileOutputDelimited_12 = new java.io.File(
									fileName_tFileOutputDelimited_12);
							globalMap.put("tFileOutputDelimited_12_FILE_NAME",
									fileName_tFileOutputDelimited_12);

							String[] headColutFileOutputDelimited_12 = new String[10];
							class CSVBasicSet_tFileOutputDelimited_12 {
								private char field_Delim;
								private char row_Delim;
								private char escape;
								private char textEnclosure;
								private boolean useCRLFRecordDelimiter;

								public boolean isUseCRLFRecordDelimiter() {
									return useCRLFRecordDelimiter;
								}

								public void setFieldSeparator(String fieldSep)
										throws IllegalArgumentException {
									char field_Delim_tFileOutputDelimited_12[] = null;

									// support passing value (property: Field
									// Separator) by 'context.fs' or
									// 'globalMap.get("fs")'.
									if (fieldSep.length() > 0) {
										field_Delim_tFileOutputDelimited_12 = fieldSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Field Separator must be assigned a char.");
									}
									this.field_Delim = field_Delim_tFileOutputDelimited_12[0];
								}

								public char getFieldDelim() {
									if (this.field_Delim == 0) {
										setFieldSeparator(";");
									}
									return this.field_Delim;
								}

								public void setRowSeparator(String rowSep) {
									if ("\r\n".equals(rowSep)) {
										useCRLFRecordDelimiter = true;
										return;
									}
									char row_DelimtFileOutputDelimited_12[] = null;

									// support passing value (property: Row
									// Separator) by 'context.rs' or
									// 'globalMap.get("rs")'.
									if (rowSep.length() > 0) {
										row_DelimtFileOutputDelimited_12 = rowSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Row Separator must be assigned a char.");
									}
									this.row_Delim = row_DelimtFileOutputDelimited_12[0];
								}

								public char getRowDelim() {
									if (this.row_Delim == 0) {
										setRowSeparator("\n");
									}
									return this.row_Delim;
								}

								public void setEscapeAndTextEnclosure(
										String strEscape,
										String strTextEnclosure)
										throws IllegalArgumentException {
									if (strEscape.length() <= 0) {
										throw new IllegalArgumentException(
												"Escape Char must be assigned a char.");
									}

									if ("".equals(strTextEnclosure))
										strTextEnclosure = "\0";
									char textEnclosure_tFileOutputDelimited_12[] = null;

									if (strTextEnclosure.length() > 0) {
										textEnclosure_tFileOutputDelimited_12 = strTextEnclosure
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Text Enclosure must be assigned a char.");
									}

									this.textEnclosure = textEnclosure_tFileOutputDelimited_12[0];

									if (("\\").equals(strEscape)) {
										this.escape = '\\';
									} else if (strEscape
											.equals(strTextEnclosure)) {
										this.escape = this.textEnclosure;
									} else {
										// the default escape mode is double
										// escape
										this.escape = this.textEnclosure;
									}

								}

								public char getEscapeChar() {
									return (char) this.escape;
								}

								public char getTextEnclosure() {
									return this.textEnclosure;
								}
							}

							int nb_line_tFileOutputDelimited_12 = 0;
							int splitEvery_tFileOutputDelimited_12 = 1000;
							int splitedFileNo_tFileOutputDelimited_12 = 0;
							int currentRow_tFileOutputDelimited_12 = 0;

							CSVBasicSet_tFileOutputDelimited_12 csvSettings_tFileOutputDelimited_12 = new CSVBasicSet_tFileOutputDelimited_12();
							csvSettings_tFileOutputDelimited_12
									.setFieldSeparator(";");
							csvSettings_tFileOutputDelimited_12
									.setRowSeparator("\n");
							csvSettings_tFileOutputDelimited_12
									.setEscapeAndTextEnclosure("\"", "\"");
							// create directory only if not exists
							if (directory_tFileOutputDelimited_12 != null
									&& directory_tFileOutputDelimited_12.trim()
											.length() != 0) {
								java.io.File dir_tFileOutputDelimited_12 = new java.io.File(
										directory_tFileOutputDelimited_12);
								if (!dir_tFileOutputDelimited_12.exists()) {
									dir_tFileOutputDelimited_12.mkdirs();
								}
							}
							com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_12 = null;
							try {
								CsvWritertFileOutputDelimited_12 = new com.talend.csv.CSVWriter(
										new java.io.BufferedWriter(
												new java.io.OutputStreamWriter(
														new java.io.FileOutputStream(
																fileName_tFileOutputDelimited_12,
																false),
														"ISO-8859-15")));
								CsvWritertFileOutputDelimited_12
										.setSeparator(csvSettings_tFileOutputDelimited_12
												.getFieldDelim());

								if (!csvSettings_tFileOutputDelimited_12
										.isUseCRLFRecordDelimiter()
										&& csvSettings_tFileOutputDelimited_12
												.getRowDelim() != '\r'
										&& csvSettings_tFileOutputDelimited_12
												.getRowDelim() != '\n') {
									CsvWritertFileOutputDelimited_12
											.setLineEnd(""
													+ csvSettings_tFileOutputDelimited_12
															.getRowDelim());
								}

								if (filetFileOutputDelimited_12.length() == 0) {

									headColutFileOutputDelimited_12[0] = "id_lot";

									headColutFileOutputDelimited_12[1] = "id_dispoparc";

									headColutFileOutputDelimited_12[2] = "id_local";

									headColutFileOutputDelimited_12[3] = "id_volume";

									headColutFileOutputDelimited_12[4] = "no_lot";

									headColutFileOutputDelimited_12[5] = "surface_carrez";

									headColutFileOutputDelimited_12[6] = "id_lot_temp";

									headColutFileOutputDelimited_12[7] = "id_dispoparc_temp";

									headColutFileOutputDelimited_12[8] = "id_local_temp";

									headColutFileOutputDelimited_12[9] = "id_volume_temp";

									CsvWritertFileOutputDelimited_12
											.writeNext(headColutFileOutputDelimited_12);
									CsvWritertFileOutputDelimited_12.flush();

								}

								CsvWritertFileOutputDelimited_12
										.setEscapeChar(csvSettings_tFileOutputDelimited_12
												.getEscapeChar());
								CsvWritertFileOutputDelimited_12
										.setQuoteChar(csvSettings_tFileOutputDelimited_12
												.getTextEnclosure());
								CsvWritertFileOutputDelimited_12
										.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

								/**
								 * [tFileOutputDelimited_12 begin ] stop
								 */

								/**
								 * [tUniqRow_14 begin ] start
								 */

								ok_Hash.put("tUniqRow_14", false);
								start_Hash.put("tUniqRow_14",
										System.currentTimeMillis());
								currentComponent = "tUniqRow_14";

								int tos_count_tUniqRow_14 = 0;

								class KeyStruct_tUniqRow_14 {

									private static final int DEFAULT_HASHCODE = 1;
									private static final int PRIME = 31;
									private int hashCode = DEFAULT_HASHCODE;
									public boolean hashCodeDirty = true;

									String id_lot_temp;

									@Override
									public int hashCode() {
										if (this.hashCodeDirty) {
											final int prime = PRIME;
											int result = DEFAULT_HASHCODE;

											result = prime
													* result
													+ ((this.id_lot_temp == null) ? 0
															: this.id_lot_temp
																	.hashCode());

											this.hashCode = result;
											this.hashCodeDirty = false;
										}
										return this.hashCode;
									}

									@Override
									public boolean equals(Object obj) {
										if (this == obj)
											return true;
										if (obj == null)
											return false;
										if (getClass() != obj.getClass())
											return false;
										final KeyStruct_tUniqRow_14 other = (KeyStruct_tUniqRow_14) obj;

										if (this.id_lot_temp == null) {
											if (other.id_lot_temp != null)
												return false;
										} else if (!this.id_lot_temp
												.equals(other.id_lot_temp))
											return false;

										return true;
									}

								}

								int nb_uniques_tUniqRow_14 = 0;
								int nb_duplicates_tUniqRow_14 = 0;
								KeyStruct_tUniqRow_14 finder_tUniqRow_14 = new KeyStruct_tUniqRow_14();
								java.util.Set<KeyStruct_tUniqRow_14> keystUniqRow_14 = new java.util.HashSet<KeyStruct_tUniqRow_14>();

								/**
								 * [tUniqRow_14 begin ] stop
								 */

								/**
								 * [tFilterRow_2 begin ] start
								 */

								ok_Hash.put("tFilterRow_2", false);
								start_Hash.put("tFilterRow_2",
										System.currentTimeMillis());
								currentComponent = "tFilterRow_2";

								int tos_count_tFilterRow_2 = 0;
								int nb_line_tFilterRow_2 = 0;
								int nb_line_ok_tFilterRow_2 = 0;
								int nb_line_reject_tFilterRow_2 = 0;

								class Operator_tFilterRow_2 {
									private String sErrorMsg = "";
									private boolean bMatchFlag = true;
									private String sUnionFlag = "&&";

									public Operator_tFilterRow_2(
											String unionFlag) {
										sUnionFlag = unionFlag;
										bMatchFlag = "||".equals(unionFlag) ? false
												: true;
									}

									public String getErrorMsg() {
										if (sErrorMsg != null
												&& sErrorMsg.length() > 1)
											return sErrorMsg.substring(1);
										else
											return null;
									}

									public boolean getMatchFlag() {
										return bMatchFlag;
									}

									public void matches(boolean partMatched,
											String reason) {
										// no need to care about the next
										// judgement
										if ("||".equals(sUnionFlag)
												&& bMatchFlag) {
											return;
										}

										if (!partMatched) {
											sErrorMsg += "|" + reason;
										}

										if ("||".equals(sUnionFlag))
											bMatchFlag = bMatchFlag
													|| partMatched;
										else
											bMatchFlag = bMatchFlag
													&& partMatched;
									}
								}

								/**
								 * [tFilterRow_2 begin ] stop
								 */

								/**
								 * [tSplitRow_2 begin ] start
								 */

								ok_Hash.put("tSplitRow_2", false);
								start_Hash.put("tSplitRow_2",
										System.currentTimeMillis());
								currentComponent = "tSplitRow_2";

								int tos_count_tSplitRow_2 = 0;
								int nb_line_tSplitRow_2 = 0;

								/**
								 * [tSplitRow_2 begin ] stop
								 */

								/**
								 * [tUniqRow_10 begin ] start
								 */

								ok_Hash.put("tUniqRow_10", false);
								start_Hash.put("tUniqRow_10",
										System.currentTimeMillis());
								currentComponent = "tUniqRow_10";

								int tos_count_tUniqRow_10 = 0;

								class KeyStruct_tUniqRow_10 {

									private static final int DEFAULT_HASHCODE = 1;
									private static final int PRIME = 31;
									private int hashCode = DEFAULT_HASHCODE;
									public boolean hashCodeDirty = true;

									String code_service_ch;
									String reference_document;
									Integer numero_disposition;
									String code_departement;
									String code_commune;
									String prefixe_section;
									String section;
									String numero_plan;
									String identifiant_local;
									Integer nature_culture;
									Integer nature_culture_speciale;
									Double surface_terrain;
									String lot1;
									Double surface_carrez_lot1;
									String lot2;
									Double surface_carrez_lot2;
									String lot3;
									Double surface_carrez_lot3;
									String lot4;
									Double surface_carrez_lot4;
									String lot5;
									Double surface_carrez_lot5;
									String id_suf_temp;
									String id_local_temp;
									String id_volume_temp;
									String id_dispoparc_temp;

									@Override
									public int hashCode() {
										if (this.hashCodeDirty) {
											final int prime = PRIME;
											int result = DEFAULT_HASHCODE;

											result = prime
													* result
													+ ((this.code_service_ch == null) ? 0
															: this.code_service_ch
																	.hashCode());

											result = prime
													* result
													+ ((this.reference_document == null) ? 0
															: this.reference_document
																	.hashCode());

											result = prime
													* result
													+ ((this.numero_disposition == null) ? 0
															: this.numero_disposition
																	.hashCode());

											result = prime
													* result
													+ ((this.code_departement == null) ? 0
															: this.code_departement
																	.hashCode());

											result = prime
													* result
													+ ((this.code_commune == null) ? 0
															: this.code_commune
																	.hashCode());

											result = prime
													* result
													+ ((this.prefixe_section == null) ? 0
															: this.prefixe_section
																	.hashCode());

											result = prime
													* result
													+ ((this.section == null) ? 0
															: this.section
																	.hashCode());

											result = prime
													* result
													+ ((this.numero_plan == null) ? 0
															: this.numero_plan
																	.hashCode());

											result = prime
													* result
													+ ((this.identifiant_local == null) ? 0
															: this.identifiant_local
																	.hashCode());

											result = prime
													* result
													+ ((this.nature_culture == null) ? 0
															: this.nature_culture
																	.hashCode());

											result = prime
													* result
													+ ((this.nature_culture_speciale == null) ? 0
															: this.nature_culture_speciale
																	.hashCode());

											result = prime
													* result
													+ ((this.surface_terrain == null) ? 0
															: this.surface_terrain
																	.hashCode());

											result = prime
													* result
													+ ((this.lot1 == null) ? 0
															: this.lot1
																	.hashCode());

											result = prime
													* result
													+ ((this.surface_carrez_lot1 == null) ? 0
															: this.surface_carrez_lot1
																	.hashCode());

											result = prime
													* result
													+ ((this.lot2 == null) ? 0
															: this.lot2
																	.hashCode());

											result = prime
													* result
													+ ((this.surface_carrez_lot2 == null) ? 0
															: this.surface_carrez_lot2
																	.hashCode());

											result = prime
													* result
													+ ((this.lot3 == null) ? 0
															: this.lot3
																	.hashCode());

											result = prime
													* result
													+ ((this.surface_carrez_lot3 == null) ? 0
															: this.surface_carrez_lot3
																	.hashCode());

											result = prime
													* result
													+ ((this.lot4 == null) ? 0
															: this.lot4
																	.hashCode());

											result = prime
													* result
													+ ((this.surface_carrez_lot4 == null) ? 0
															: this.surface_carrez_lot4
																	.hashCode());

											result = prime
													* result
													+ ((this.lot5 == null) ? 0
															: this.lot5
																	.hashCode());

											result = prime
													* result
													+ ((this.surface_carrez_lot5 == null) ? 0
															: this.surface_carrez_lot5
																	.hashCode());

											result = prime
													* result
													+ ((this.id_suf_temp == null) ? 0
															: this.id_suf_temp
																	.hashCode());

											result = prime
													* result
													+ ((this.id_local_temp == null) ? 0
															: this.id_local_temp
																	.hashCode());

											result = prime
													* result
													+ ((this.id_volume_temp == null) ? 0
															: this.id_volume_temp
																	.hashCode());

											result = prime
													* result
													+ ((this.id_dispoparc_temp == null) ? 0
															: this.id_dispoparc_temp
																	.hashCode());

											this.hashCode = result;
											this.hashCodeDirty = false;
										}
										return this.hashCode;
									}

									@Override
									public boolean equals(Object obj) {
										if (this == obj)
											return true;
										if (obj == null)
											return false;
										if (getClass() != obj.getClass())
											return false;
										final KeyStruct_tUniqRow_10 other = (KeyStruct_tUniqRow_10) obj;

										if (this.code_service_ch == null) {
											if (other.code_service_ch != null)
												return false;
										} else if (!this.code_service_ch
												.equals(other.code_service_ch))
											return false;

										if (this.reference_document == null) {
											if (other.reference_document != null)
												return false;
										} else if (!this.reference_document
												.equals(other.reference_document))
											return false;

										if (this.numero_disposition == null) {
											if (other.numero_disposition != null)
												return false;
										} else if (!this.numero_disposition
												.equals(other.numero_disposition))
											return false;

										if (this.code_departement == null) {
											if (other.code_departement != null)
												return false;
										} else if (!this.code_departement
												.equals(other.code_departement))
											return false;

										if (this.code_commune == null) {
											if (other.code_commune != null)
												return false;
										} else if (!this.code_commune
												.equals(other.code_commune))
											return false;

										if (this.prefixe_section == null) {
											if (other.prefixe_section != null)
												return false;
										} else if (!this.prefixe_section
												.equals(other.prefixe_section))
											return false;

										if (this.section == null) {
											if (other.section != null)
												return false;
										} else if (!this.section
												.equals(other.section))
											return false;

										if (this.numero_plan == null) {
											if (other.numero_plan != null)
												return false;
										} else if (!this.numero_plan
												.equals(other.numero_plan))
											return false;

										if (this.identifiant_local == null) {
											if (other.identifiant_local != null)
												return false;
										} else if (!this.identifiant_local
												.equals(other.identifiant_local))
											return false;

										if (this.nature_culture == null) {
											if (other.nature_culture != null)
												return false;
										} else if (!this.nature_culture
												.equals(other.nature_culture))
											return false;

										if (this.nature_culture_speciale == null) {
											if (other.nature_culture_speciale != null)
												return false;
										} else if (!this.nature_culture_speciale
												.equals(other.nature_culture_speciale))
											return false;

										if (this.surface_terrain == null) {
											if (other.surface_terrain != null)
												return false;
										} else if (!this.surface_terrain
												.equals(other.surface_terrain))
											return false;

										if (this.lot1 == null) {
											if (other.lot1 != null)
												return false;
										} else if (!this.lot1
												.equals(other.lot1))
											return false;

										if (this.surface_carrez_lot1 == null) {
											if (other.surface_carrez_lot1 != null)
												return false;
										} else if (!this.surface_carrez_lot1
												.equals(other.surface_carrez_lot1))
											return false;

										if (this.lot2 == null) {
											if (other.lot2 != null)
												return false;
										} else if (!this.lot2
												.equals(other.lot2))
											return false;

										if (this.surface_carrez_lot2 == null) {
											if (other.surface_carrez_lot2 != null)
												return false;
										} else if (!this.surface_carrez_lot2
												.equals(other.surface_carrez_lot2))
											return false;

										if (this.lot3 == null) {
											if (other.lot3 != null)
												return false;
										} else if (!this.lot3
												.equals(other.lot3))
											return false;

										if (this.surface_carrez_lot3 == null) {
											if (other.surface_carrez_lot3 != null)
												return false;
										} else if (!this.surface_carrez_lot3
												.equals(other.surface_carrez_lot3))
											return false;

										if (this.lot4 == null) {
											if (other.lot4 != null)
												return false;
										} else if (!this.lot4
												.equals(other.lot4))
											return false;

										if (this.surface_carrez_lot4 == null) {
											if (other.surface_carrez_lot4 != null)
												return false;
										} else if (!this.surface_carrez_lot4
												.equals(other.surface_carrez_lot4))
											return false;

										if (this.lot5 == null) {
											if (other.lot5 != null)
												return false;
										} else if (!this.lot5
												.equals(other.lot5))
											return false;

										if (this.surface_carrez_lot5 == null) {
											if (other.surface_carrez_lot5 != null)
												return false;
										} else if (!this.surface_carrez_lot5
												.equals(other.surface_carrez_lot5))
											return false;

										if (this.id_suf_temp == null) {
											if (other.id_suf_temp != null)
												return false;
										} else if (!this.id_suf_temp
												.equals(other.id_suf_temp))
											return false;

										if (this.id_local_temp == null) {
											if (other.id_local_temp != null)
												return false;
										} else if (!this.id_local_temp
												.equals(other.id_local_temp))
											return false;

										if (this.id_volume_temp == null) {
											if (other.id_volume_temp != null)
												return false;
										} else if (!this.id_volume_temp
												.equals(other.id_volume_temp))
											return false;

										if (this.id_dispoparc_temp == null) {
											if (other.id_dispoparc_temp != null)
												return false;
										} else if (!this.id_dispoparc_temp
												.equals(other.id_dispoparc_temp))
											return false;

										return true;
									}

								}

								int nb_uniques_tUniqRow_10 = 0;
								int nb_duplicates_tUniqRow_10 = 0;
								KeyStruct_tUniqRow_10 finder_tUniqRow_10 = new KeyStruct_tUniqRow_10();
								java.util.Set<KeyStruct_tUniqRow_10> keystUniqRow_10 = new java.util.HashSet<KeyStruct_tUniqRow_10>();

								/**
								 * [tUniqRow_10 begin ] stop
								 */

								/**
								 * [tSortRow_2_SortOut begin ] start
								 */

								ok_Hash.put("tSortRow_2_SortOut", false);
								start_Hash.put("tSortRow_2_SortOut",
										System.currentTimeMillis());
								currentComponent = "tSortRow_2_SortOut";

								int tos_count_tSortRow_2_SortOut = 0;

								class Comparablerow14Struct extends row14Struct
										implements
										Comparable<Comparablerow14Struct> {

									public int compareTo(
											Comparablerow14Struct other) {

										if (this.code_postal == null
												&& other.code_postal != null) {
											return -1;

										} else if (this.code_postal != null
												&& other.code_postal == null) {
											return 1;

										} else if (this.code_postal != null
												&& other.code_postal != null) {
											if (!this.code_postal
													.equals(other.code_postal)) {
												return this.code_postal
														.compareTo(other.code_postal);
											}
										}
										if (this.voie == null
												&& other.voie != null) {
											return -1;

										} else if (this.voie != null
												&& other.voie == null) {
											return 1;

										} else if (this.voie != null
												&& other.voie != null) {
											if (!this.voie.equals(other.voie)) {
												return this.voie
														.compareTo(other.voie);
											}
										}
										if (this.num_voie == null
												&& other.num_voie != null) {
											return -1;

										} else if (this.num_voie != null
												&& other.num_voie == null) {
											return 1;

										} else if (this.num_voie != null
												&& other.num_voie != null) {
											if (!this.num_voie
													.equals(other.num_voie)) {
												return this.num_voie
														.compareTo(other.num_voie);
											}
										}
										if (this.b_t_q == null
												&& other.b_t_q != null) {
											return -1;

										} else if (this.b_t_q != null
												&& other.b_t_q == null) {
											return 1;

										} else if (this.b_t_q != null
												&& other.b_t_q != null) {
											if (!this.b_t_q.equals(other.b_t_q)) {
												return this.b_t_q
														.compareTo(other.b_t_q);
											}
										}
										return 0;
									}
								}

								java.util.List<Comparablerow14Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow14Struct>();

								/**
								 * [tSortRow_2_SortOut begin ] stop
								 */

								/**
								 * [tUniqRow_12 begin ] start
								 */

								ok_Hash.put("tUniqRow_12", false);
								start_Hash.put("tUniqRow_12",
										System.currentTimeMillis());
								currentComponent = "tUniqRow_12";

								int tos_count_tUniqRow_12 = 0;

								class KeyStruct_tUniqRow_12 {

									private static final int DEFAULT_HASHCODE = 1;
									private static final int PRIME = 31;
									private int hashCode = DEFAULT_HASHCODE;
									public boolean hashCodeDirty = true;

									Integer num_voie;
									String b_t_q;
									String type_voie;
									String code_voie;
									String voie;
									String code_postal;
									String commune;

									@Override
									public int hashCode() {
										if (this.hashCodeDirty) {
											final int prime = PRIME;
											int result = DEFAULT_HASHCODE;

											result = prime
													* result
													+ ((this.num_voie == null) ? 0
															: this.num_voie
																	.hashCode());

											result = prime
													* result
													+ ((this.b_t_q == null) ? 0
															: this.b_t_q
																	.hashCode());

											result = prime
													* result
													+ ((this.type_voie == null) ? 0
															: this.type_voie
																	.hashCode());

											result = prime
													* result
													+ ((this.code_voie == null) ? 0
															: this.code_voie
																	.hashCode());

											result = prime
													* result
													+ ((this.voie == null) ? 0
															: this.voie
																	.hashCode());

											result = prime
													* result
													+ ((this.code_postal == null) ? 0
															: this.code_postal
																	.hashCode());

											result = prime
													* result
													+ ((this.commune == null) ? 0
															: this.commune
																	.hashCode());

											this.hashCode = result;
											this.hashCodeDirty = false;
										}
										return this.hashCode;
									}

									@Override
									public boolean equals(Object obj) {
										if (this == obj)
											return true;
										if (obj == null)
											return false;
										if (getClass() != obj.getClass())
											return false;
										final KeyStruct_tUniqRow_12 other = (KeyStruct_tUniqRow_12) obj;

										if (this.num_voie == null) {
											if (other.num_voie != null)
												return false;
										} else if (!this.num_voie
												.equals(other.num_voie))
											return false;

										if (this.b_t_q == null) {
											if (other.b_t_q != null)
												return false;
										} else if (!this.b_t_q
												.equals(other.b_t_q))
											return false;

										if (this.type_voie == null) {
											if (other.type_voie != null)
												return false;
										} else if (!this.type_voie
												.equals(other.type_voie))
											return false;

										if (this.code_voie == null) {
											if (other.code_voie != null)
												return false;
										} else if (!this.code_voie
												.equals(other.code_voie))
											return false;

										if (this.voie == null) {
											if (other.voie != null)
												return false;
										} else if (!this.voie
												.equals(other.voie))
											return false;

										if (this.code_postal == null) {
											if (other.code_postal != null)
												return false;
										} else if (!this.code_postal
												.equals(other.code_postal))
											return false;

										if (this.commune == null) {
											if (other.commune != null)
												return false;
										} else if (!this.commune
												.equals(other.commune))
											return false;

										return true;
									}

								}

								int nb_uniques_tUniqRow_12 = 0;
								int nb_duplicates_tUniqRow_12 = 0;
								KeyStruct_tUniqRow_12 finder_tUniqRow_12 = new KeyStruct_tUniqRow_12();
								java.util.Set<KeyStruct_tUniqRow_12> keystUniqRow_12 = new java.util.HashSet<KeyStruct_tUniqRow_12>();

								/**
								 * [tUniqRow_12 begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_6 begin ] start
								 */

								ok_Hash.put("tFileOutputDelimited_6", false);
								start_Hash.put("tFileOutputDelimited_6",
										System.currentTimeMillis());
								currentComponent = "tFileOutputDelimited_6";

								int tos_count_tFileOutputDelimited_6 = 0;

								String fileName_tFileOutputDelimited_6 = "";
								fileName_tFileOutputDelimited_6 = (new java.io.File(
										context.target_path + "mutation.csv"))
										.getAbsolutePath().replace("\\", "/");
								String fullName_tFileOutputDelimited_6 = null;
								String extension_tFileOutputDelimited_6 = null;
								String directory_tFileOutputDelimited_6 = null;
								if ((fileName_tFileOutputDelimited_6
										.indexOf("/") != -1)) {
									if (fileName_tFileOutputDelimited_6
											.lastIndexOf(".") < fileName_tFileOutputDelimited_6
											.lastIndexOf("/")) {
										fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
										extension_tFileOutputDelimited_6 = "";
									} else {
										fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
												.substring(
														0,
														fileName_tFileOutputDelimited_6
																.lastIndexOf("."));
										extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
												.substring(fileName_tFileOutputDelimited_6
														.lastIndexOf("."));
									}
									directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
											.substring(0,
													fileName_tFileOutputDelimited_6
															.lastIndexOf("/"));
								} else {
									if (fileName_tFileOutputDelimited_6
											.lastIndexOf(".") != -1) {
										fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
												.substring(
														0,
														fileName_tFileOutputDelimited_6
																.lastIndexOf("."));
										extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
												.substring(fileName_tFileOutputDelimited_6
														.lastIndexOf("."));
									} else {
										fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
										extension_tFileOutputDelimited_6 = "";
									}
									directory_tFileOutputDelimited_6 = "";
								}
								boolean isFileGenerated_tFileOutputDelimited_6 = true;
								java.io.File filetFileOutputDelimited_6 = new java.io.File(
										fileName_tFileOutputDelimited_6);
								globalMap.put(
										"tFileOutputDelimited_6_FILE_NAME",
										fileName_tFileOutputDelimited_6);

								String[] headColutFileOutputDelimited_6 = new String[7];
								class CSVBasicSet_tFileOutputDelimited_6 {
									private char field_Delim;
									private char row_Delim;
									private char escape;
									private char textEnclosure;
									private boolean useCRLFRecordDelimiter;

									public boolean isUseCRLFRecordDelimiter() {
										return useCRLFRecordDelimiter;
									}

									public void setFieldSeparator(
											String fieldSep)
											throws IllegalArgumentException {
										char field_Delim_tFileOutputDelimited_6[] = null;

										// support passing value (property:
										// Field Separator) by 'context.fs' or
										// 'globalMap.get("fs")'.
										if (fieldSep.length() > 0) {
											field_Delim_tFileOutputDelimited_6 = fieldSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Field Separator must be assigned a char.");
										}
										this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
									}

									public char getFieldDelim() {
										if (this.field_Delim == 0) {
											setFieldSeparator(";");
										}
										return this.field_Delim;
									}

									public void setRowSeparator(String rowSep) {
										if ("\r\n".equals(rowSep)) {
											useCRLFRecordDelimiter = true;
											return;
										}
										char row_DelimtFileOutputDelimited_6[] = null;

										// support passing value (property: Row
										// Separator) by 'context.rs' or
										// 'globalMap.get("rs")'.
										if (rowSep.length() > 0) {
											row_DelimtFileOutputDelimited_6 = rowSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Row Separator must be assigned a char.");
										}
										this.row_Delim = row_DelimtFileOutputDelimited_6[0];
									}

									public char getRowDelim() {
										if (this.row_Delim == 0) {
											setRowSeparator("\n");
										}
										return this.row_Delim;
									}

									public void setEscapeAndTextEnclosure(
											String strEscape,
											String strTextEnclosure)
											throws IllegalArgumentException {
										if (strEscape.length() <= 0) {
											throw new IllegalArgumentException(
													"Escape Char must be assigned a char.");
										}

										if ("".equals(strTextEnclosure))
											strTextEnclosure = "\0";
										char textEnclosure_tFileOutputDelimited_6[] = null;

										if (strTextEnclosure.length() > 0) {
											textEnclosure_tFileOutputDelimited_6 = strTextEnclosure
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Text Enclosure must be assigned a char.");
										}

										this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

										if (("\\").equals(strEscape)) {
											this.escape = '\\';
										} else if (strEscape
												.equals(strTextEnclosure)) {
											this.escape = this.textEnclosure;
										} else {
											// the default escape mode is double
											// escape
											this.escape = this.textEnclosure;
										}

									}

									public char getEscapeChar() {
										return (char) this.escape;
									}

									public char getTextEnclosure() {
										return this.textEnclosure;
									}
								}

								int nb_line_tFileOutputDelimited_6 = 0;
								int splitEvery_tFileOutputDelimited_6 = 1000;
								int splitedFileNo_tFileOutputDelimited_6 = 0;
								int currentRow_tFileOutputDelimited_6 = 0;

								CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
								csvSettings_tFileOutputDelimited_6
										.setFieldSeparator(";");
								csvSettings_tFileOutputDelimited_6
										.setRowSeparator("\n");
								csvSettings_tFileOutputDelimited_6
										.setEscapeAndTextEnclosure("\"", "\"");
								// create directory only if not exists
								if (directory_tFileOutputDelimited_6 != null
										&& directory_tFileOutputDelimited_6
												.trim().length() != 0) {
									java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
											directory_tFileOutputDelimited_6);
									if (!dir_tFileOutputDelimited_6.exists()) {
										dir_tFileOutputDelimited_6.mkdirs();
									}
								}
								com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;
								try {
									CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(
											new java.io.BufferedWriter(
													new java.io.OutputStreamWriter(
															new java.io.FileOutputStream(
																	fileName_tFileOutputDelimited_6,
																	false),
															"ISO-8859-15")));
									CsvWritertFileOutputDelimited_6
											.setSeparator(csvSettings_tFileOutputDelimited_6
													.getFieldDelim());

									if (!csvSettings_tFileOutputDelimited_6
											.isUseCRLFRecordDelimiter()
											&& csvSettings_tFileOutputDelimited_6
													.getRowDelim() != '\r'
											&& csvSettings_tFileOutputDelimited_6
													.getRowDelim() != '\n') {
										CsvWritertFileOutputDelimited_6
												.setLineEnd(""
														+ csvSettings_tFileOutputDelimited_6
																.getRowDelim());
									}

									if (filetFileOutputDelimited_6.length() == 0) {

										headColutFileOutputDelimited_6[0] = "id_mutation";

										headColutFileOutputDelimited_6[1] = "code_service_ch";

										headColutFileOutputDelimited_6[2] = "reference_document";

										headColutFileOutputDelimited_6[3] = "code_insee";

										headColutFileOutputDelimited_6[4] = "date_mutation";

										headColutFileOutputDelimited_6[5] = "id_nature_mutation";

										headColutFileOutputDelimited_6[6] = "id_mutation_temp";

										CsvWritertFileOutputDelimited_6
												.writeNext(headColutFileOutputDelimited_6);
										CsvWritertFileOutputDelimited_6.flush();

									}

									CsvWritertFileOutputDelimited_6
											.setEscapeChar(csvSettings_tFileOutputDelimited_6
													.getEscapeChar());
									CsvWritertFileOutputDelimited_6
											.setQuoteChar(csvSettings_tFileOutputDelimited_6
													.getTextEnclosure());
									CsvWritertFileOutputDelimited_6
											.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

									/**
									 * [tFileOutputDelimited_6 begin ] stop
									 */

									/**
									 * [tJavaRow_4 begin ] start
									 */

									ok_Hash.put("tJavaRow_4", false);
									start_Hash.put("tJavaRow_4",
											System.currentTimeMillis());
									currentComponent = "tJavaRow_4";

									int tos_count_tJavaRow_4 = 0;

									int nb_line_tJavaRow_4 = 0;

									/**
									 * [tJavaRow_4 begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_20 begin ] start
									 */

									ok_Hash.put("tFileOutputDelimited_20",
											false);
									start_Hash.put("tFileOutputDelimited_20",
											System.currentTimeMillis());
									currentComponent = "tFileOutputDelimited_20";

									int tos_count_tFileOutputDelimited_20 = 0;

									String fileName_tFileOutputDelimited_20 = "";
									fileName_tFileOutputDelimited_20 = (new java.io.File(
											context.log_path
													+ "doublons_mutation.csv"))
											.getAbsolutePath().replace("\\",
													"/");
									String fullName_tFileOutputDelimited_20 = null;
									String extension_tFileOutputDelimited_20 = null;
									String directory_tFileOutputDelimited_20 = null;
									if ((fileName_tFileOutputDelimited_20
											.indexOf("/") != -1)) {
										if (fileName_tFileOutputDelimited_20
												.lastIndexOf(".") < fileName_tFileOutputDelimited_20
												.lastIndexOf("/")) {
											fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
											extension_tFileOutputDelimited_20 = "";
										} else {
											fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
													.substring(
															0,
															fileName_tFileOutputDelimited_20
																	.lastIndexOf("."));
											extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
													.substring(fileName_tFileOutputDelimited_20
															.lastIndexOf("."));
										}
										directory_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
												.substring(
														0,
														fileName_tFileOutputDelimited_20
																.lastIndexOf("/"));
									} else {
										if (fileName_tFileOutputDelimited_20
												.lastIndexOf(".") != -1) {
											fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
													.substring(
															0,
															fileName_tFileOutputDelimited_20
																	.lastIndexOf("."));
											extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
													.substring(fileName_tFileOutputDelimited_20
															.lastIndexOf("."));
										} else {
											fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
											extension_tFileOutputDelimited_20 = "";
										}
										directory_tFileOutputDelimited_20 = "";
									}
									boolean isFileGenerated_tFileOutputDelimited_20 = true;
									java.io.File filetFileOutputDelimited_20 = new java.io.File(
											fileName_tFileOutputDelimited_20);
									globalMap
											.put("tFileOutputDelimited_20_FILE_NAME",
													fileName_tFileOutputDelimited_20);

									String[] headColutFileOutputDelimited_20 = new String[7];
									class CSVBasicSet_tFileOutputDelimited_20 {
										private char field_Delim;
										private char row_Delim;
										private char escape;
										private char textEnclosure;
										private boolean useCRLFRecordDelimiter;

										public boolean isUseCRLFRecordDelimiter() {
											return useCRLFRecordDelimiter;
										}

										public void setFieldSeparator(
												String fieldSep)
												throws IllegalArgumentException {
											char field_Delim_tFileOutputDelimited_20[] = null;

											// support passing value (property:
											// Field Separator) by 'context.fs'
											// or 'globalMap.get("fs")'.
											if (fieldSep.length() > 0) {
												field_Delim_tFileOutputDelimited_20 = fieldSep
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Field Separator must be assigned a char.");
											}
											this.field_Delim = field_Delim_tFileOutputDelimited_20[0];
										}

										public char getFieldDelim() {
											if (this.field_Delim == 0) {
												setFieldSeparator(";");
											}
											return this.field_Delim;
										}

										public void setRowSeparator(
												String rowSep) {
											if ("\r\n".equals(rowSep)) {
												useCRLFRecordDelimiter = true;
												return;
											}
											char row_DelimtFileOutputDelimited_20[] = null;

											// support passing value (property:
											// Row Separator) by 'context.rs' or
											// 'globalMap.get("rs")'.
											if (rowSep.length() > 0) {
												row_DelimtFileOutputDelimited_20 = rowSep
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Row Separator must be assigned a char.");
											}
											this.row_Delim = row_DelimtFileOutputDelimited_20[0];
										}

										public char getRowDelim() {
											if (this.row_Delim == 0) {
												setRowSeparator("\n");
											}
											return this.row_Delim;
										}

										public void setEscapeAndTextEnclosure(
												String strEscape,
												String strTextEnclosure)
												throws IllegalArgumentException {
											if (strEscape.length() <= 0) {
												throw new IllegalArgumentException(
														"Escape Char must be assigned a char.");
											}

											if ("".equals(strTextEnclosure))
												strTextEnclosure = "\0";
											char textEnclosure_tFileOutputDelimited_20[] = null;

											if (strTextEnclosure.length() > 0) {
												textEnclosure_tFileOutputDelimited_20 = strTextEnclosure
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Text Enclosure must be assigned a char.");
											}

											this.textEnclosure = textEnclosure_tFileOutputDelimited_20[0];

											if (("\\").equals(strEscape)) {
												this.escape = '\\';
											} else if (strEscape
													.equals(strTextEnclosure)) {
												this.escape = this.textEnclosure;
											} else {
												// the default escape mode is
												// double escape
												this.escape = this.textEnclosure;
											}

										}

										public char getEscapeChar() {
											return (char) this.escape;
										}

										public char getTextEnclosure() {
											return this.textEnclosure;
										}
									}

									int nb_line_tFileOutputDelimited_20 = 0;
									int splitEvery_tFileOutputDelimited_20 = 1000;
									int splitedFileNo_tFileOutputDelimited_20 = 0;
									int currentRow_tFileOutputDelimited_20 = 0;

									CSVBasicSet_tFileOutputDelimited_20 csvSettings_tFileOutputDelimited_20 = new CSVBasicSet_tFileOutputDelimited_20();
									csvSettings_tFileOutputDelimited_20
											.setFieldSeparator(";");
									csvSettings_tFileOutputDelimited_20
											.setRowSeparator("\n");
									csvSettings_tFileOutputDelimited_20
											.setEscapeAndTextEnclosure("\"",
													"\"");
									// create directory only if not exists
									if (directory_tFileOutputDelimited_20 != null
											&& directory_tFileOutputDelimited_20
													.trim().length() != 0) {
										java.io.File dir_tFileOutputDelimited_20 = new java.io.File(
												directory_tFileOutputDelimited_20);
										if (!dir_tFileOutputDelimited_20
												.exists()) {
											dir_tFileOutputDelimited_20
													.mkdirs();
										}
									}
									com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_20 = null;
									try {
										CsvWritertFileOutputDelimited_20 = new com.talend.csv.CSVWriter(
												new java.io.BufferedWriter(
														new java.io.OutputStreamWriter(
																new java.io.FileOutputStream(
																		fileName_tFileOutputDelimited_20,
																		false),
																"ISO-8859-15")));
										CsvWritertFileOutputDelimited_20
												.setSeparator(csvSettings_tFileOutputDelimited_20
														.getFieldDelim());

										if (!csvSettings_tFileOutputDelimited_20
												.isUseCRLFRecordDelimiter()
												&& csvSettings_tFileOutputDelimited_20
														.getRowDelim() != '\r'
												&& csvSettings_tFileOutputDelimited_20
														.getRowDelim() != '\n') {
											CsvWritertFileOutputDelimited_20
													.setLineEnd(""
															+ csvSettings_tFileOutputDelimited_20
																	.getRowDelim());
										}

										if (filetFileOutputDelimited_20
												.length() == 0) {

											headColutFileOutputDelimited_20[0] = "id_mutation";

											headColutFileOutputDelimited_20[1] = "code_service_ch";

											headColutFileOutputDelimited_20[2] = "reference_document";

											headColutFileOutputDelimited_20[3] = "code_insee";

											headColutFileOutputDelimited_20[4] = "date_mutation";

											headColutFileOutputDelimited_20[5] = "id_nature_mutation";

											headColutFileOutputDelimited_20[6] = "id_mutation_temp";

											CsvWritertFileOutputDelimited_20
													.writeNext(headColutFileOutputDelimited_20);
											CsvWritertFileOutputDelimited_20
													.flush();

										}

										CsvWritertFileOutputDelimited_20
												.setEscapeChar(csvSettings_tFileOutputDelimited_20
														.getEscapeChar());
										CsvWritertFileOutputDelimited_20
												.setQuoteChar(csvSettings_tFileOutputDelimited_20
														.getTextEnclosure());
										CsvWritertFileOutputDelimited_20
												.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

										/**
										 * [tFileOutputDelimited_20 begin ] stop
										 */

										/**
										 * [tUniqRow_2 begin ] start
										 */

										ok_Hash.put("tUniqRow_2", false);
										start_Hash.put("tUniqRow_2",
												System.currentTimeMillis());
										currentComponent = "tUniqRow_2";

										int tos_count_tUniqRow_2 = 0;

										class KeyStruct_tUniqRow_2 {

											private static final int DEFAULT_HASHCODE = 1;
											private static final int PRIME = 31;
											private int hashCode = DEFAULT_HASHCODE;
											public boolean hashCodeDirty = true;

											String code_service_ch;
											String reference_document;
											String code_insee;

											@Override
											public int hashCode() {
												if (this.hashCodeDirty) {
													final int prime = PRIME;
													int result = DEFAULT_HASHCODE;

													result = prime
															* result
															+ ((this.code_service_ch == null) ? 0
																	: this.code_service_ch
																			.hashCode());

													result = prime
															* result
															+ ((this.reference_document == null) ? 0
																	: this.reference_document
																			.hashCode());

													result = prime
															* result
															+ ((this.code_insee == null) ? 0
																	: this.code_insee
																			.hashCode());

													this.hashCode = result;
													this.hashCodeDirty = false;
												}
												return this.hashCode;
											}

											@Override
											public boolean equals(Object obj) {
												if (this == obj)
													return true;
												if (obj == null)
													return false;
												if (getClass() != obj
														.getClass())
													return false;
												final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

												if (this.code_service_ch == null) {
													if (other.code_service_ch != null)
														return false;
												} else if (!this.code_service_ch
														.equals(other.code_service_ch))
													return false;

												if (this.reference_document == null) {
													if (other.reference_document != null)
														return false;
												} else if (!this.reference_document
														.equals(other.reference_document))
													return false;

												if (this.code_insee == null) {
													if (other.code_insee != null)
														return false;
												} else if (!this.code_insee
														.equals(other.code_insee))
													return false;

												return true;
											}

										}

										int nb_uniques_tUniqRow_2 = 0;
										int nb_duplicates_tUniqRow_2 = 0;
										KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
										java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

										/**
										 * [tUniqRow_2 begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_25 begin ]
										 * start
										 */

										ok_Hash.put("tFileOutputDelimited_25",
												false);
										start_Hash.put(
												"tFileOutputDelimited_25",
												System.currentTimeMillis());
										currentComponent = "tFileOutputDelimited_25";

										int tos_count_tFileOutputDelimited_25 = 0;

										String fileName_tFileOutputDelimited_25 = "";
										fileName_tFileOutputDelimited_25 = (new java.io.File(
												context.target_path
														+ "disposition.csv"))
												.getAbsolutePath().replace(
														"\\", "/");
										String fullName_tFileOutputDelimited_25 = null;
										String extension_tFileOutputDelimited_25 = null;
										String directory_tFileOutputDelimited_25 = null;
										if ((fileName_tFileOutputDelimited_25
												.indexOf("/") != -1)) {
											if (fileName_tFileOutputDelimited_25
													.lastIndexOf(".") < fileName_tFileOutputDelimited_25
													.lastIndexOf("/")) {
												fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25;
												extension_tFileOutputDelimited_25 = "";
											} else {
												fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
														.substring(
																0,
																fileName_tFileOutputDelimited_25
																		.lastIndexOf("."));
												extension_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
														.substring(fileName_tFileOutputDelimited_25
																.lastIndexOf("."));
											}
											directory_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
													.substring(
															0,
															fileName_tFileOutputDelimited_25
																	.lastIndexOf("/"));
										} else {
											if (fileName_tFileOutputDelimited_25
													.lastIndexOf(".") != -1) {
												fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
														.substring(
																0,
																fileName_tFileOutputDelimited_25
																		.lastIndexOf("."));
												extension_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
														.substring(fileName_tFileOutputDelimited_25
																.lastIndexOf("."));
											} else {
												fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25;
												extension_tFileOutputDelimited_25 = "";
											}
											directory_tFileOutputDelimited_25 = "";
										}
										boolean isFileGenerated_tFileOutputDelimited_25 = true;
										java.io.File filetFileOutputDelimited_25 = new java.io.File(
												fileName_tFileOutputDelimited_25);
										globalMap
												.put("tFileOutputDelimited_25_FILE_NAME",
														fileName_tFileOutputDelimited_25);

										String[] headColutFileOutputDelimited_25 = new String[6];
										class CSVBasicSet_tFileOutputDelimited_25 {
											private char field_Delim;
											private char row_Delim;
											private char escape;
											private char textEnclosure;
											private boolean useCRLFRecordDelimiter;

											public boolean isUseCRLFRecordDelimiter() {
												return useCRLFRecordDelimiter;
											}

											public void setFieldSeparator(
													String fieldSep)
													throws IllegalArgumentException {
												char field_Delim_tFileOutputDelimited_25[] = null;

												// support passing value
												// (property: Field Separator)
												// by 'context.fs' or
												// 'globalMap.get("fs")'.
												if (fieldSep.length() > 0) {
													field_Delim_tFileOutputDelimited_25 = fieldSep
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Field Separator must be assigned a char.");
												}
												this.field_Delim = field_Delim_tFileOutputDelimited_25[0];
											}

											public char getFieldDelim() {
												if (this.field_Delim == 0) {
													setFieldSeparator(";");
												}
												return this.field_Delim;
											}

											public void setRowSeparator(
													String rowSep) {
												if ("\r\n".equals(rowSep)) {
													useCRLFRecordDelimiter = true;
													return;
												}
												char row_DelimtFileOutputDelimited_25[] = null;

												// support passing value
												// (property: Row Separator) by
												// 'context.rs' or
												// 'globalMap.get("rs")'.
												if (rowSep.length() > 0) {
													row_DelimtFileOutputDelimited_25 = rowSep
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Row Separator must be assigned a char.");
												}
												this.row_Delim = row_DelimtFileOutputDelimited_25[0];
											}

											public char getRowDelim() {
												if (this.row_Delim == 0) {
													setRowSeparator("\n");
												}
												return this.row_Delim;
											}

											public void setEscapeAndTextEnclosure(
													String strEscape,
													String strTextEnclosure)
													throws IllegalArgumentException {
												if (strEscape.length() <= 0) {
													throw new IllegalArgumentException(
															"Escape Char must be assigned a char.");
												}

												if ("".equals(strTextEnclosure))
													strTextEnclosure = "\0";
												char textEnclosure_tFileOutputDelimited_25[] = null;

												if (strTextEnclosure.length() > 0) {
													textEnclosure_tFileOutputDelimited_25 = strTextEnclosure
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Text Enclosure must be assigned a char.");
												}

												this.textEnclosure = textEnclosure_tFileOutputDelimited_25[0];

												if (("\\").equals(strEscape)) {
													this.escape = '\\';
												} else if (strEscape
														.equals(strTextEnclosure)) {
													this.escape = this.textEnclosure;
												} else {
													// the default escape mode
													// is double escape
													this.escape = this.textEnclosure;
												}

											}

											public char getEscapeChar() {
												return (char) this.escape;
											}

											public char getTextEnclosure() {
												return this.textEnclosure;
											}
										}

										int nb_line_tFileOutputDelimited_25 = 0;
										int splitEvery_tFileOutputDelimited_25 = 1000;
										int splitedFileNo_tFileOutputDelimited_25 = 0;
										int currentRow_tFileOutputDelimited_25 = 0;

										CSVBasicSet_tFileOutputDelimited_25 csvSettings_tFileOutputDelimited_25 = new CSVBasicSet_tFileOutputDelimited_25();
										csvSettings_tFileOutputDelimited_25
												.setFieldSeparator(";");
										csvSettings_tFileOutputDelimited_25
												.setRowSeparator("\n");
										csvSettings_tFileOutputDelimited_25
												.setEscapeAndTextEnclosure(
														"\"", "\"");
										// create directory only if not exists
										if (directory_tFileOutputDelimited_25 != null
												&& directory_tFileOutputDelimited_25
														.trim().length() != 0) {
											java.io.File dir_tFileOutputDelimited_25 = new java.io.File(
													directory_tFileOutputDelimited_25);
											if (!dir_tFileOutputDelimited_25
													.exists()) {
												dir_tFileOutputDelimited_25
														.mkdirs();
											}
										}
										com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_25 = null;
										try {
											CsvWritertFileOutputDelimited_25 = new com.talend.csv.CSVWriter(
													new java.io.BufferedWriter(
															new java.io.OutputStreamWriter(
																	new java.io.FileOutputStream(
																			fileName_tFileOutputDelimited_25,
																			false),
																	"ISO-8859-15")));
											CsvWritertFileOutputDelimited_25
													.setSeparator(csvSettings_tFileOutputDelimited_25
															.getFieldDelim());

											if (!csvSettings_tFileOutputDelimited_25
													.isUseCRLFRecordDelimiter()
													&& csvSettings_tFileOutputDelimited_25
															.getRowDelim() != '\r'
													&& csvSettings_tFileOutputDelimited_25
															.getRowDelim() != '\n') {
												CsvWritertFileOutputDelimited_25
														.setLineEnd(""
																+ csvSettings_tFileOutputDelimited_25
																		.getRowDelim());
											}

											if (filetFileOutputDelimited_25
													.length() == 0) {

												headColutFileOutputDelimited_25[0] = "id_disposition";

												headColutFileOutputDelimited_25[1] = "id_mutation";

												headColutFileOutputDelimited_25[2] = "no_disposition";

												headColutFileOutputDelimited_25[3] = "valeur_fonciere";

												headColutFileOutputDelimited_25[4] = "id_disposition_temp";

												headColutFileOutputDelimited_25[5] = "id_mutation_temp";

												CsvWritertFileOutputDelimited_25
														.writeNext(headColutFileOutputDelimited_25);
												CsvWritertFileOutputDelimited_25
														.flush();

											}

											CsvWritertFileOutputDelimited_25
													.setEscapeChar(csvSettings_tFileOutputDelimited_25
															.getEscapeChar());
											CsvWritertFileOutputDelimited_25
													.setQuoteChar(csvSettings_tFileOutputDelimited_25
															.getTextEnclosure());
											CsvWritertFileOutputDelimited_25
													.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

											/**
											 * [tFileOutputDelimited_25 begin ]
											 * stop
											 */

											/**
											 * [tJavaRow_5 begin ] start
											 */

											ok_Hash.put("tJavaRow_5", false);
											start_Hash.put("tJavaRow_5",
													System.currentTimeMillis());
											currentComponent = "tJavaRow_5";

											int tos_count_tJavaRow_5 = 0;

											int nb_line_tJavaRow_5 = 0;

											/**
											 * [tJavaRow_5 begin ] stop
											 */

											/**
											 * [tFileOutputDelimited_1 begin ]
											 * start
											 */

											ok_Hash.put(
													"tFileOutputDelimited_1",
													false);
											start_Hash.put(
													"tFileOutputDelimited_1",
													System.currentTimeMillis());
											currentComponent = "tFileOutputDelimited_1";

											int tos_count_tFileOutputDelimited_1 = 0;

											String fileName_tFileOutputDelimited_1 = "";
											fileName_tFileOutputDelimited_1 = (new java.io.File(
													context.log_path
															+ "doublon_disposition.csv"))
													.getAbsolutePath().replace(
															"\\", "/");
											String fullName_tFileOutputDelimited_1 = null;
											String extension_tFileOutputDelimited_1 = null;
											String directory_tFileOutputDelimited_1 = null;
											if ((fileName_tFileOutputDelimited_1
													.indexOf("/") != -1)) {
												if (fileName_tFileOutputDelimited_1
														.lastIndexOf(".") < fileName_tFileOutputDelimited_1
														.lastIndexOf("/")) {
													fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
													extension_tFileOutputDelimited_1 = "";
												} else {
													fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
															.substring(
																	0,
																	fileName_tFileOutputDelimited_1
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
															.substring(fileName_tFileOutputDelimited_1
																	.lastIndexOf("."));
												}
												directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
														.substring(
																0,
																fileName_tFileOutputDelimited_1
																		.lastIndexOf("/"));
											} else {
												if (fileName_tFileOutputDelimited_1
														.lastIndexOf(".") != -1) {
													fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
															.substring(
																	0,
																	fileName_tFileOutputDelimited_1
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
															.substring(fileName_tFileOutputDelimited_1
																	.lastIndexOf("."));
												} else {
													fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
													extension_tFileOutputDelimited_1 = "";
												}
												directory_tFileOutputDelimited_1 = "";
											}
											boolean isFileGenerated_tFileOutputDelimited_1 = true;
											java.io.File filetFileOutputDelimited_1 = new java.io.File(
													fileName_tFileOutputDelimited_1);
											globalMap
													.put("tFileOutputDelimited_1_FILE_NAME",
															fileName_tFileOutputDelimited_1);

											String[] headColutFileOutputDelimited_1 = new String[6];
											class CSVBasicSet_tFileOutputDelimited_1 {
												private char field_Delim;
												private char row_Delim;
												private char escape;
												private char textEnclosure;
												private boolean useCRLFRecordDelimiter;

												public boolean isUseCRLFRecordDelimiter() {
													return useCRLFRecordDelimiter;
												}

												public void setFieldSeparator(
														String fieldSep)
														throws IllegalArgumentException {
													char field_Delim_tFileOutputDelimited_1[] = null;

													// support passing value
													// (property: Field
													// Separator) by
													// 'context.fs' or
													// 'globalMap.get("fs")'.
													if (fieldSep.length() > 0) {
														field_Delim_tFileOutputDelimited_1 = fieldSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Field Separator must be assigned a char.");
													}
													this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
												}

												public char getFieldDelim() {
													if (this.field_Delim == 0) {
														setFieldSeparator(";");
													}
													return this.field_Delim;
												}

												public void setRowSeparator(
														String rowSep) {
													if ("\r\n".equals(rowSep)) {
														useCRLFRecordDelimiter = true;
														return;
													}
													char row_DelimtFileOutputDelimited_1[] = null;

													// support passing value
													// (property: Row Separator)
													// by 'context.rs' or
													// 'globalMap.get("rs")'.
													if (rowSep.length() > 0) {
														row_DelimtFileOutputDelimited_1 = rowSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Row Separator must be assigned a char.");
													}
													this.row_Delim = row_DelimtFileOutputDelimited_1[0];
												}

												public char getRowDelim() {
													if (this.row_Delim == 0) {
														setRowSeparator("\n");
													}
													return this.row_Delim;
												}

												public void setEscapeAndTextEnclosure(
														String strEscape,
														String strTextEnclosure)
														throws IllegalArgumentException {
													if (strEscape.length() <= 0) {
														throw new IllegalArgumentException(
																"Escape Char must be assigned a char.");
													}

													if ("".equals(strTextEnclosure))
														strTextEnclosure = "\0";
													char textEnclosure_tFileOutputDelimited_1[] = null;

													if (strTextEnclosure
															.length() > 0) {
														textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Text Enclosure must be assigned a char.");
													}

													this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

													if (("\\")
															.equals(strEscape)) {
														this.escape = '\\';
													} else if (strEscape
															.equals(strTextEnclosure)) {
														this.escape = this.textEnclosure;
													} else {
														// the default escape
														// mode is double escape
														this.escape = this.textEnclosure;
													}

												}

												public char getEscapeChar() {
													return (char) this.escape;
												}

												public char getTextEnclosure() {
													return this.textEnclosure;
												}
											}

											int nb_line_tFileOutputDelimited_1 = 0;
											int splitEvery_tFileOutputDelimited_1 = 1000;
											int splitedFileNo_tFileOutputDelimited_1 = 0;
											int currentRow_tFileOutputDelimited_1 = 0;

											CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
											csvSettings_tFileOutputDelimited_1
													.setFieldSeparator(";");
											csvSettings_tFileOutputDelimited_1
													.setRowSeparator("\n");
											csvSettings_tFileOutputDelimited_1
													.setEscapeAndTextEnclosure(
															"\"", "\"");
											// create directory only if not
											// exists
											if (directory_tFileOutputDelimited_1 != null
													&& directory_tFileOutputDelimited_1
															.trim().length() != 0) {
												java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
														directory_tFileOutputDelimited_1);
												if (!dir_tFileOutputDelimited_1
														.exists()) {
													dir_tFileOutputDelimited_1
															.mkdirs();
												}
											}
											com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;
											try {
												CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
														new java.io.BufferedWriter(
																new java.io.OutputStreamWriter(
																		new java.io.FileOutputStream(
																				fileName_tFileOutputDelimited_1,
																				false),
																		"ISO-8859-15")));
												CsvWritertFileOutputDelimited_1
														.setSeparator(csvSettings_tFileOutputDelimited_1
																.getFieldDelim());

												if (!csvSettings_tFileOutputDelimited_1
														.isUseCRLFRecordDelimiter()
														&& csvSettings_tFileOutputDelimited_1
																.getRowDelim() != '\r'
														&& csvSettings_tFileOutputDelimited_1
																.getRowDelim() != '\n') {
													CsvWritertFileOutputDelimited_1
															.setLineEnd(""
																	+ csvSettings_tFileOutputDelimited_1
																			.getRowDelim());
												}

												if (filetFileOutputDelimited_1
														.length() == 0) {

													headColutFileOutputDelimited_1[0] = "id_disposition";

													headColutFileOutputDelimited_1[1] = "id_mutation";

													headColutFileOutputDelimited_1[2] = "no_disposition";

													headColutFileOutputDelimited_1[3] = "valeur_fonciere";

													headColutFileOutputDelimited_1[4] = "id_disposition_temp";

													headColutFileOutputDelimited_1[5] = "id_mutation_temp";

													CsvWritertFileOutputDelimited_1
															.writeNext(headColutFileOutputDelimited_1);
													CsvWritertFileOutputDelimited_1
															.flush();

												}

												CsvWritertFileOutputDelimited_1
														.setEscapeChar(csvSettings_tFileOutputDelimited_1
																.getEscapeChar());
												CsvWritertFileOutputDelimited_1
														.setQuoteChar(csvSettings_tFileOutputDelimited_1
																.getTextEnclosure());
												CsvWritertFileOutputDelimited_1
														.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

												/**
												 * [tFileOutputDelimited_1 begin
												 * ] stop
												 */

												/**
												 * [tUniqRow_3 begin ] start
												 */

												ok_Hash.put("tUniqRow_3", false);
												start_Hash
														.put("tUniqRow_3",
																System.currentTimeMillis());
												currentComponent = "tUniqRow_3";

												int tos_count_tUniqRow_3 = 0;

												class KeyStruct_tUniqRow_3 {

													private static final int DEFAULT_HASHCODE = 1;
													private static final int PRIME = 31;
													private int hashCode = DEFAULT_HASHCODE;
													public boolean hashCodeDirty = true;

													String id_disposition_temp;

													@Override
													public int hashCode() {
														if (this.hashCodeDirty) {
															final int prime = PRIME;
															int result = DEFAULT_HASHCODE;

															result = prime
																	* result
																	+ ((this.id_disposition_temp == null) ? 0
																			: this.id_disposition_temp
																					.hashCode());

															this.hashCode = result;
															this.hashCodeDirty = false;
														}
														return this.hashCode;
													}

													@Override
													public boolean equals(
															Object obj) {
														if (this == obj)
															return true;
														if (obj == null)
															return false;
														if (getClass() != obj
																.getClass())
															return false;
														final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

														if (this.id_disposition_temp == null) {
															if (other.id_disposition_temp != null)
																return false;
														} else if (!this.id_disposition_temp
																.equals(other.id_disposition_temp))
															return false;

														return true;
													}

												}

												int nb_uniques_tUniqRow_3 = 0;
												int nb_duplicates_tUniqRow_3 = 0;
												KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
												java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

												/**
												 * [tUniqRow_3 begin ] stop
												 */

												/**
												 * [tFileOutputDelimited_3 begin
												 * ] start
												 */

												ok_Hash.put(
														"tFileOutputDelimited_3",
														false);
												start_Hash
														.put("tFileOutputDelimited_3",
																System.currentTimeMillis());
												currentComponent = "tFileOutputDelimited_3";

												int tos_count_tFileOutputDelimited_3 = 0;

												String fileName_tFileOutputDelimited_3 = "";
												fileName_tFileOutputDelimited_3 = (new java.io.File(
														context.target_path
																+ "disposition_parcelle.csv"))
														.getAbsolutePath()
														.replace("\\", "/");
												String fullName_tFileOutputDelimited_3 = null;
												String extension_tFileOutputDelimited_3 = null;
												String directory_tFileOutputDelimited_3 = null;
												if ((fileName_tFileOutputDelimited_3
														.indexOf("/") != -1)) {
													if (fileName_tFileOutputDelimited_3
															.lastIndexOf(".") < fileName_tFileOutputDelimited_3
															.lastIndexOf("/")) {
														fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
														extension_tFileOutputDelimited_3 = "";
													} else {
														fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
																.substring(
																		0,
																		fileName_tFileOutputDelimited_3
																				.lastIndexOf("."));
														extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
																.substring(fileName_tFileOutputDelimited_3
																		.lastIndexOf("."));
													}
													directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
															.substring(
																	0,
																	fileName_tFileOutputDelimited_3
																			.lastIndexOf("/"));
												} else {
													if (fileName_tFileOutputDelimited_3
															.lastIndexOf(".") != -1) {
														fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
																.substring(
																		0,
																		fileName_tFileOutputDelimited_3
																				.lastIndexOf("."));
														extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
																.substring(fileName_tFileOutputDelimited_3
																		.lastIndexOf("."));
													} else {
														fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
														extension_tFileOutputDelimited_3 = "";
													}
													directory_tFileOutputDelimited_3 = "";
												}
												boolean isFileGenerated_tFileOutputDelimited_3 = true;
												java.io.File filetFileOutputDelimited_3 = new java.io.File(
														fileName_tFileOutputDelimited_3);
												globalMap
														.put("tFileOutputDelimited_3_FILE_NAME",
																fileName_tFileOutputDelimited_3);

												String[] headColutFileOutputDelimited_3 = new String[7];
												class CSVBasicSet_tFileOutputDelimited_3 {
													private char field_Delim;
													private char row_Delim;
													private char escape;
													private char textEnclosure;
													private boolean useCRLFRecordDelimiter;

													public boolean isUseCRLFRecordDelimiter() {
														return useCRLFRecordDelimiter;
													}

													public void setFieldSeparator(
															String fieldSep)
															throws IllegalArgumentException {
														char field_Delim_tFileOutputDelimited_3[] = null;

														// support passing value
														// (property: Field
														// Separator) by
														// 'context.fs' or
														// 'globalMap.get("fs")'.
														if (fieldSep.length() > 0) {
															field_Delim_tFileOutputDelimited_3 = fieldSep
																	.toCharArray();
														} else {
															throw new IllegalArgumentException(
																	"Field Separator must be assigned a char.");
														}
														this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
													}

													public char getFieldDelim() {
														if (this.field_Delim == 0) {
															setFieldSeparator(";");
														}
														return this.field_Delim;
													}

													public void setRowSeparator(
															String rowSep) {
														if ("\r\n"
																.equals(rowSep)) {
															useCRLFRecordDelimiter = true;
															return;
														}
														char row_DelimtFileOutputDelimited_3[] = null;

														// support passing value
														// (property: Row
														// Separator) by
														// 'context.rs' or
														// 'globalMap.get("rs")'.
														if (rowSep.length() > 0) {
															row_DelimtFileOutputDelimited_3 = rowSep
																	.toCharArray();
														} else {
															throw new IllegalArgumentException(
																	"Row Separator must be assigned a char.");
														}
														this.row_Delim = row_DelimtFileOutputDelimited_3[0];
													}

													public char getRowDelim() {
														if (this.row_Delim == 0) {
															setRowSeparator("\n");
														}
														return this.row_Delim;
													}

													public void setEscapeAndTextEnclosure(
															String strEscape,
															String strTextEnclosure)
															throws IllegalArgumentException {
														if (strEscape.length() <= 0) {
															throw new IllegalArgumentException(
																	"Escape Char must be assigned a char.");
														}

														if ("".equals(strTextEnclosure))
															strTextEnclosure = "\0";
														char textEnclosure_tFileOutputDelimited_3[] = null;

														if (strTextEnclosure
																.length() > 0) {
															textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
																	.toCharArray();
														} else {
															throw new IllegalArgumentException(
																	"Text Enclosure must be assigned a char.");
														}

														this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

														if (("\\")
																.equals(strEscape)) {
															this.escape = '\\';
														} else if (strEscape
																.equals(strTextEnclosure)) {
															this.escape = this.textEnclosure;
														} else {
															// the default
															// escape mode is
															// double escape
															this.escape = this.textEnclosure;
														}

													}

													public char getEscapeChar() {
														return (char) this.escape;
													}

													public char getTextEnclosure() {
														return this.textEnclosure;
													}
												}

												int nb_line_tFileOutputDelimited_3 = 0;
												int splitEvery_tFileOutputDelimited_3 = 1000;
												int splitedFileNo_tFileOutputDelimited_3 = 0;
												int currentRow_tFileOutputDelimited_3 = 0;

												CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
												csvSettings_tFileOutputDelimited_3
														.setFieldSeparator(";");
												csvSettings_tFileOutputDelimited_3
														.setRowSeparator("\n");
												csvSettings_tFileOutputDelimited_3
														.setEscapeAndTextEnclosure(
																"\"", "\"");
												// create directory only if not
												// exists
												if (directory_tFileOutputDelimited_3 != null
														&& directory_tFileOutputDelimited_3
																.trim()
																.length() != 0) {
													java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
															directory_tFileOutputDelimited_3);
													if (!dir_tFileOutputDelimited_3
															.exists()) {
														dir_tFileOutputDelimited_3
																.mkdirs();
													}
												}
												com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;
												try {
													CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
															new java.io.BufferedWriter(
																	new java.io.OutputStreamWriter(
																			new java.io.FileOutputStream(
																					fileName_tFileOutputDelimited_3,
																					false),
																			"ISO-8859-15")));
													CsvWritertFileOutputDelimited_3
															.setSeparator(csvSettings_tFileOutputDelimited_3
																	.getFieldDelim());

													if (!csvSettings_tFileOutputDelimited_3
															.isUseCRLFRecordDelimiter()
															&& csvSettings_tFileOutputDelimited_3
																	.getRowDelim() != '\r'
															&& csvSettings_tFileOutputDelimited_3
																	.getRowDelim() != '\n') {
														CsvWritertFileOutputDelimited_3
																.setLineEnd(""
																		+ csvSettings_tFileOutputDelimited_3
																				.getRowDelim());
													}

													if (filetFileOutputDelimited_3
															.length() == 0) {

														headColutFileOutputDelimited_3[0] = "id_dispoparc";

														headColutFileOutputDelimited_3[1] = "id_disposition";

														headColutFileOutputDelimited_3[2] = "id_parcelle";

														headColutFileOutputDelimited_3[3] = "nombre_de_lots";

														headColutFileOutputDelimited_3[4] = "id_dispoparc_temp";

														headColutFileOutputDelimited_3[5] = "id_disposition_temp";

														headColutFileOutputDelimited_3[6] = "id_parcelle_temp";

														CsvWritertFileOutputDelimited_3
																.writeNext(headColutFileOutputDelimited_3);
														CsvWritertFileOutputDelimited_3
																.flush();

													}

													CsvWritertFileOutputDelimited_3
															.setEscapeChar(csvSettings_tFileOutputDelimited_3
																	.getEscapeChar());
													CsvWritertFileOutputDelimited_3
															.setQuoteChar(csvSettings_tFileOutputDelimited_3
																	.getTextEnclosure());
													CsvWritertFileOutputDelimited_3
															.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

													/**
													 * [tFileOutputDelimited_3
													 * begin ] stop
													 */

													/**
													 * [tJavaRow_6 begin ] start
													 */

													ok_Hash.put("tJavaRow_6",
															false);
													start_Hash
															.put("tJavaRow_6",
																	System.currentTimeMillis());
													currentComponent = "tJavaRow_6";

													int tos_count_tJavaRow_6 = 0;

													int nb_line_tJavaRow_6 = 0;

													/**
													 * [tJavaRow_6 begin ] stop
													 */

													/**
													 * [tUniqRow_5 begin ] start
													 */

													ok_Hash.put("tUniqRow_5",
															false);
													start_Hash
															.put("tUniqRow_5",
																	System.currentTimeMillis());
													currentComponent = "tUniqRow_5";

													int tos_count_tUniqRow_5 = 0;

													class KeyStruct_tUniqRow_5 {

														private static final int DEFAULT_HASHCODE = 1;
														private static final int PRIME = 31;
														private int hashCode = DEFAULT_HASHCODE;
														public boolean hashCodeDirty = true;

														String id_dispoparc_temp;

														@Override
														public int hashCode() {
															if (this.hashCodeDirty) {
																final int prime = PRIME;
																int result = DEFAULT_HASHCODE;

																result = prime
																		* result
																		+ ((this.id_dispoparc_temp == null) ? 0
																				: this.id_dispoparc_temp
																						.hashCode());

																this.hashCode = result;
																this.hashCodeDirty = false;
															}
															return this.hashCode;
														}

														@Override
														public boolean equals(
																Object obj) {
															if (this == obj)
																return true;
															if (obj == null)
																return false;
															if (getClass() != obj
																	.getClass())
																return false;
															final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

															if (this.id_dispoparc_temp == null) {
																if (other.id_dispoparc_temp != null)
																	return false;
															} else if (!this.id_dispoparc_temp
																	.equals(other.id_dispoparc_temp))
																return false;

															return true;
														}

													}

													int nb_uniques_tUniqRow_5 = 0;
													int nb_duplicates_tUniqRow_5 = 0;
													KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
													java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

													/**
													 * [tUniqRow_5 begin ] stop
													 */

													/**
													 * [tFileOutputDelimited_10
													 * begin ] start
													 */

													ok_Hash.put(
															"tFileOutputDelimited_10",
															false);
													start_Hash
															.put("tFileOutputDelimited_10",
																	System.currentTimeMillis());
													currentComponent = "tFileOutputDelimited_10";

													int tos_count_tFileOutputDelimited_10 = 0;

													String fileName_tFileOutputDelimited_10 = "";
													fileName_tFileOutputDelimited_10 = (new java.io.File(
															context.target_path
																	+ "adresse_dispoparc.csv"))
															.getAbsolutePath()
															.replace("\\", "/");
													String fullName_tFileOutputDelimited_10 = null;
													String extension_tFileOutputDelimited_10 = null;
													String directory_tFileOutputDelimited_10 = null;
													if ((fileName_tFileOutputDelimited_10
															.indexOf("/") != -1)) {
														if (fileName_tFileOutputDelimited_10
																.lastIndexOf(".") < fileName_tFileOutputDelimited_10
																.lastIndexOf("/")) {
															fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
															extension_tFileOutputDelimited_10 = "";
														} else {
															fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
																	.substring(
																			0,
																			fileName_tFileOutputDelimited_10
																					.lastIndexOf("."));
															extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
																	.substring(fileName_tFileOutputDelimited_10
																			.lastIndexOf("."));
														}
														directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
																.substring(
																		0,
																		fileName_tFileOutputDelimited_10
																				.lastIndexOf("/"));
													} else {
														if (fileName_tFileOutputDelimited_10
																.lastIndexOf(".") != -1) {
															fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
																	.substring(
																			0,
																			fileName_tFileOutputDelimited_10
																					.lastIndexOf("."));
															extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
																	.substring(fileName_tFileOutputDelimited_10
																			.lastIndexOf("."));
														} else {
															fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
															extension_tFileOutputDelimited_10 = "";
														}
														directory_tFileOutputDelimited_10 = "";
													}
													boolean isFileGenerated_tFileOutputDelimited_10 = true;
													java.io.File filetFileOutputDelimited_10 = new java.io.File(
															fileName_tFileOutputDelimited_10);
													globalMap
															.put("tFileOutputDelimited_10_FILE_NAME",
																	fileName_tFileOutputDelimited_10);

													String[] headColutFileOutputDelimited_10 = new String[4];
													class CSVBasicSet_tFileOutputDelimited_10 {
														private char field_Delim;
														private char row_Delim;
														private char escape;
														private char textEnclosure;
														private boolean useCRLFRecordDelimiter;

														public boolean isUseCRLFRecordDelimiter() {
															return useCRLFRecordDelimiter;
														}

														public void setFieldSeparator(
																String fieldSep)
																throws IllegalArgumentException {
															char field_Delim_tFileOutputDelimited_10[] = null;

															// support passing
															// value (property:
															// Field Separator)
															// by 'context.fs'
															// or
															// 'globalMap.get("fs")'.
															if (fieldSep
																	.length() > 0) {
																field_Delim_tFileOutputDelimited_10 = fieldSep
																		.toCharArray();
															} else {
																throw new IllegalArgumentException(
																		"Field Separator must be assigned a char.");
															}
															this.field_Delim = field_Delim_tFileOutputDelimited_10[0];
														}

														public char getFieldDelim() {
															if (this.field_Delim == 0) {
																setFieldSeparator(";");
															}
															return this.field_Delim;
														}

														public void setRowSeparator(
																String rowSep) {
															if ("\r\n"
																	.equals(rowSep)) {
																useCRLFRecordDelimiter = true;
																return;
															}
															char row_DelimtFileOutputDelimited_10[] = null;

															// support passing
															// value (property:
															// Row Separator) by
															// 'context.rs' or
															// 'globalMap.get("rs")'.
															if (rowSep.length() > 0) {
																row_DelimtFileOutputDelimited_10 = rowSep
																		.toCharArray();
															} else {
																throw new IllegalArgumentException(
																		"Row Separator must be assigned a char.");
															}
															this.row_Delim = row_DelimtFileOutputDelimited_10[0];
														}

														public char getRowDelim() {
															if (this.row_Delim == 0) {
																setRowSeparator("\n");
															}
															return this.row_Delim;
														}

														public void setEscapeAndTextEnclosure(
																String strEscape,
																String strTextEnclosure)
																throws IllegalArgumentException {
															if (strEscape
																	.length() <= 0) {
																throw new IllegalArgumentException(
																		"Escape Char must be assigned a char.");
															}

															if ("".equals(strTextEnclosure))
																strTextEnclosure = "\0";
															char textEnclosure_tFileOutputDelimited_10[] = null;

															if (strTextEnclosure
																	.length() > 0) {
																textEnclosure_tFileOutputDelimited_10 = strTextEnclosure
																		.toCharArray();
															} else {
																throw new IllegalArgumentException(
																		"Text Enclosure must be assigned a char.");
															}

															this.textEnclosure = textEnclosure_tFileOutputDelimited_10[0];

															if (("\\")
																	.equals(strEscape)) {
																this.escape = '\\';
															} else if (strEscape
																	.equals(strTextEnclosure)) {
																this.escape = this.textEnclosure;
															} else {
																// the default
																// escape mode
																// is double
																// escape
																this.escape = this.textEnclosure;
															}

														}

														public char getEscapeChar() {
															return (char) this.escape;
														}

														public char getTextEnclosure() {
															return this.textEnclosure;
														}
													}

													int nb_line_tFileOutputDelimited_10 = 0;
													int splitEvery_tFileOutputDelimited_10 = 1000;
													int splitedFileNo_tFileOutputDelimited_10 = 0;
													int currentRow_tFileOutputDelimited_10 = 0;

													CSVBasicSet_tFileOutputDelimited_10 csvSettings_tFileOutputDelimited_10 = new CSVBasicSet_tFileOutputDelimited_10();
													csvSettings_tFileOutputDelimited_10
															.setFieldSeparator(";");
													csvSettings_tFileOutputDelimited_10
															.setRowSeparator("\n");
													csvSettings_tFileOutputDelimited_10
															.setEscapeAndTextEnclosure(
																	"\"", "\"");
													// create directory only if
													// not exists
													if (directory_tFileOutputDelimited_10 != null
															&& directory_tFileOutputDelimited_10
																	.trim()
																	.length() != 0) {
														java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
																directory_tFileOutputDelimited_10);
														if (!dir_tFileOutputDelimited_10
																.exists()) {
															dir_tFileOutputDelimited_10
																	.mkdirs();
														}
													}
													com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = null;
													try {
														CsvWritertFileOutputDelimited_10 = new com.talend.csv.CSVWriter(
																new java.io.BufferedWriter(
																		new java.io.OutputStreamWriter(
																				new java.io.FileOutputStream(
																						fileName_tFileOutputDelimited_10,
																						false),
																				"ISO-8859-15")));
														CsvWritertFileOutputDelimited_10
																.setSeparator(csvSettings_tFileOutputDelimited_10
																		.getFieldDelim());

														if (!csvSettings_tFileOutputDelimited_10
																.isUseCRLFRecordDelimiter()
																&& csvSettings_tFileOutputDelimited_10
																		.getRowDelim() != '\r'
																&& csvSettings_tFileOutputDelimited_10
																		.getRowDelim() != '\n') {
															CsvWritertFileOutputDelimited_10
																	.setLineEnd(""
																			+ csvSettings_tFileOutputDelimited_10
																					.getRowDelim());
														}

														if (filetFileOutputDelimited_10
																.length() == 0) {

															headColutFileOutputDelimited_10[0] = "id_adresse";

															headColutFileOutputDelimited_10[1] = "id_dispoparc";

															headColutFileOutputDelimited_10[2] = "id_adresse_temp";

															headColutFileOutputDelimited_10[3] = "id_dispoparc_temp";

															CsvWritertFileOutputDelimited_10
																	.writeNext(headColutFileOutputDelimited_10);
															CsvWritertFileOutputDelimited_10
																	.flush();

														}

														CsvWritertFileOutputDelimited_10
																.setEscapeChar(csvSettings_tFileOutputDelimited_10
																		.getEscapeChar());
														CsvWritertFileOutputDelimited_10
																.setQuoteChar(csvSettings_tFileOutputDelimited_10
																		.getTextEnclosure());
														CsvWritertFileOutputDelimited_10
																.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

														/**
														 * [
														 * tFileOutputDelimited_10
														 * begin ] stop
														 */

														/**
														 * [tUniqRow_11 begin ]
														 * start
														 */

														ok_Hash.put(
																"tUniqRow_11",
																false);
														start_Hash
																.put("tUniqRow_11",
																		System.currentTimeMillis());
														currentComponent = "tUniqRow_11";

														int tos_count_tUniqRow_11 = 0;

														class KeyStruct_tUniqRow_11 {

															private static final int DEFAULT_HASHCODE = 1;
															private static final int PRIME = 31;
															private int hashCode = DEFAULT_HASHCODE;
															public boolean hashCodeDirty = true;

															String id_adresse_temp;
															String id_dispoparc_temp;

															@Override
															public int hashCode() {
																if (this.hashCodeDirty) {
																	final int prime = PRIME;
																	int result = DEFAULT_HASHCODE;

																	result = prime
																			* result
																			+ ((this.id_adresse_temp == null) ? 0
																					: this.id_adresse_temp
																							.hashCode());

																	result = prime
																			* result
																			+ ((this.id_dispoparc_temp == null) ? 0
																					: this.id_dispoparc_temp
																							.hashCode());

																	this.hashCode = result;
																	this.hashCodeDirty = false;
																}
																return this.hashCode;
															}

															@Override
															public boolean equals(
																	Object obj) {
																if (this == obj)
																	return true;
																if (obj == null)
																	return false;
																if (getClass() != obj
																		.getClass())
																	return false;
																final KeyStruct_tUniqRow_11 other = (KeyStruct_tUniqRow_11) obj;

																if (this.id_adresse_temp == null) {
																	if (other.id_adresse_temp != null)
																		return false;
																} else if (!this.id_adresse_temp
																		.equals(other.id_adresse_temp))
																	return false;

																if (this.id_dispoparc_temp == null) {
																	if (other.id_dispoparc_temp != null)
																		return false;
																} else if (!this.id_dispoparc_temp
																		.equals(other.id_dispoparc_temp))
																	return false;

																return true;
															}

														}

														int nb_uniques_tUniqRow_11 = 0;
														int nb_duplicates_tUniqRow_11 = 0;
														KeyStruct_tUniqRow_11 finder_tUniqRow_11 = new KeyStruct_tUniqRow_11();
														java.util.Set<KeyStruct_tUniqRow_11> keystUniqRow_11 = new java.util.HashSet<KeyStruct_tUniqRow_11>();

														/**
														 * [tUniqRow_11 begin ]
														 * stop
														 */

														/**
														 * [
														 * tFileOutputDelimited_5
														 * begin ] start
														 */

														ok_Hash.put(
																"tFileOutputDelimited_5",
																false);
														start_Hash
																.put("tFileOutputDelimited_5",
																		System.currentTimeMillis());
														currentComponent = "tFileOutputDelimited_5";

														int tos_count_tFileOutputDelimited_5 = 0;

														String fileName_tFileOutputDelimited_5 = "";
														fileName_tFileOutputDelimited_5 = (new java.io.File(
																context.target_path
																		+ "local.csv"))
																.getAbsolutePath()
																.replace("\\",
																		"/");
														String fullName_tFileOutputDelimited_5 = null;
														String extension_tFileOutputDelimited_5 = null;
														String directory_tFileOutputDelimited_5 = null;
														if ((fileName_tFileOutputDelimited_5
																.indexOf("/") != -1)) {
															if (fileName_tFileOutputDelimited_5
																	.lastIndexOf(".") < fileName_tFileOutputDelimited_5
																	.lastIndexOf("/")) {
																fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
																extension_tFileOutputDelimited_5 = "";
															} else {
																fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
																		.substring(
																				0,
																				fileName_tFileOutputDelimited_5
																						.lastIndexOf("."));
																extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
																		.substring(fileName_tFileOutputDelimited_5
																				.lastIndexOf("."));
															}
															directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
																	.substring(
																			0,
																			fileName_tFileOutputDelimited_5
																					.lastIndexOf("/"));
														} else {
															if (fileName_tFileOutputDelimited_5
																	.lastIndexOf(".") != -1) {
																fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
																		.substring(
																				0,
																				fileName_tFileOutputDelimited_5
																						.lastIndexOf("."));
																extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
																		.substring(fileName_tFileOutputDelimited_5
																				.lastIndexOf("."));
															} else {
																fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
																extension_tFileOutputDelimited_5 = "";
															}
															directory_tFileOutputDelimited_5 = "";
														}
														boolean isFileGenerated_tFileOutputDelimited_5 = true;
														java.io.File filetFileOutputDelimited_5 = new java.io.File(
																fileName_tFileOutputDelimited_5);
														globalMap
																.put("tFileOutputDelimited_5_FILE_NAME",
																		fileName_tFileOutputDelimited_5);

														String[] headColutFileOutputDelimited_5 = new String[8];
														class CSVBasicSet_tFileOutputDelimited_5 {
															private char field_Delim;
															private char row_Delim;
															private char escape;
															private char textEnclosure;
															private boolean useCRLFRecordDelimiter;

															public boolean isUseCRLFRecordDelimiter() {
																return useCRLFRecordDelimiter;
															}

															public void setFieldSeparator(
																	String fieldSep)
																	throws IllegalArgumentException {
																char field_Delim_tFileOutputDelimited_5[] = null;

																// support
																// passing value
																// (property:
																// Field
																// Separator) by
																// 'context.fs'
																// or
																// 'globalMap.get("fs")'.
																if (fieldSep
																		.length() > 0) {
																	field_Delim_tFileOutputDelimited_5 = fieldSep
																			.toCharArray();
																} else {
																	throw new IllegalArgumentException(
																			"Field Separator must be assigned a char.");
																}
																this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
															}

															public char getFieldDelim() {
																if (this.field_Delim == 0) {
																	setFieldSeparator(";");
																}
																return this.field_Delim;
															}

															public void setRowSeparator(
																	String rowSep) {
																if ("\r\n"
																		.equals(rowSep)) {
																	useCRLFRecordDelimiter = true;
																	return;
																}
																char row_DelimtFileOutputDelimited_5[] = null;

																// support
																// passing value
																// (property:
																// Row
																// Separator) by
																// 'context.rs'
																// or
																// 'globalMap.get("rs")'.
																if (rowSep
																		.length() > 0) {
																	row_DelimtFileOutputDelimited_5 = rowSep
																			.toCharArray();
																} else {
																	throw new IllegalArgumentException(
																			"Row Separator must be assigned a char.");
																}
																this.row_Delim = row_DelimtFileOutputDelimited_5[0];
															}

															public char getRowDelim() {
																if (this.row_Delim == 0) {
																	setRowSeparator("\n");
																}
																return this.row_Delim;
															}

															public void setEscapeAndTextEnclosure(
																	String strEscape,
																	String strTextEnclosure)
																	throws IllegalArgumentException {
																if (strEscape
																		.length() <= 0) {
																	throw new IllegalArgumentException(
																			"Escape Char must be assigned a char.");
																}

																if ("".equals(strTextEnclosure))
																	strTextEnclosure = "\0";
																char textEnclosure_tFileOutputDelimited_5[] = null;

																if (strTextEnclosure
																		.length() > 0) {
																	textEnclosure_tFileOutputDelimited_5 = strTextEnclosure
																			.toCharArray();
																} else {
																	throw new IllegalArgumentException(
																			"Text Enclosure must be assigned a char.");
																}

																this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

																if (("\\")
																		.equals(strEscape)) {
																	this.escape = '\\';
																} else if (strEscape
																		.equals(strTextEnclosure)) {
																	this.escape = this.textEnclosure;
																} else {
																	// the
																	// default
																	// escape
																	// mode is
																	// double
																	// escape
																	this.escape = this.textEnclosure;
																}

															}

															public char getEscapeChar() {
																return (char) this.escape;
															}

															public char getTextEnclosure() {
																return this.textEnclosure;
															}
														}

														int nb_line_tFileOutputDelimited_5 = 0;
														int splitEvery_tFileOutputDelimited_5 = 1000;
														int splitedFileNo_tFileOutputDelimited_5 = 0;
														int currentRow_tFileOutputDelimited_5 = 0;

														CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
														csvSettings_tFileOutputDelimited_5
																.setFieldSeparator(";");
														csvSettings_tFileOutputDelimited_5
																.setRowSeparator("\n");
														csvSettings_tFileOutputDelimited_5
																.setEscapeAndTextEnclosure(
																		"\"",
																		"\"");
														// create directory only
														// if not exists
														if (directory_tFileOutputDelimited_5 != null
																&& directory_tFileOutputDelimited_5
																		.trim()
																		.length() != 0) {
															java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
																	directory_tFileOutputDelimited_5);
															if (!dir_tFileOutputDelimited_5
																	.exists()) {
																dir_tFileOutputDelimited_5
																		.mkdirs();
															}
														}
														com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;
														try {
															CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(
																	new java.io.BufferedWriter(
																			new java.io.OutputStreamWriter(
																					new java.io.FileOutputStream(
																							fileName_tFileOutputDelimited_5,
																							false),
																					"ISO-8859-15")));
															CsvWritertFileOutputDelimited_5
																	.setSeparator(csvSettings_tFileOutputDelimited_5
																			.getFieldDelim());

															if (!csvSettings_tFileOutputDelimited_5
																	.isUseCRLFRecordDelimiter()
																	&& csvSettings_tFileOutputDelimited_5
																			.getRowDelim() != '\r'
																	&& csvSettings_tFileOutputDelimited_5
																			.getRowDelim() != '\n') {
																CsvWritertFileOutputDelimited_5
																		.setLineEnd(""
																				+ csvSettings_tFileOutputDelimited_5
																						.getRowDelim());
															}

															if (filetFileOutputDelimited_5
																	.length() == 0) {

																headColutFileOutputDelimited_5[0] = "id_local";

																headColutFileOutputDelimited_5[1] = "id_dispoparc";

																headColutFileOutputDelimited_5[2] = "identifiant_local";

																headColutFileOutputDelimited_5[3] = "code_type_local";

																headColutFileOutputDelimited_5[4] = "surface_reelle_batie";

																headColutFileOutputDelimited_5[5] = "nb_pieces_principales";

																headColutFileOutputDelimited_5[6] = "id_local_temp";

																headColutFileOutputDelimited_5[7] = "id_dispoparc_temp";

																CsvWritertFileOutputDelimited_5
																		.writeNext(headColutFileOutputDelimited_5);
																CsvWritertFileOutputDelimited_5
																		.flush();

															}

															CsvWritertFileOutputDelimited_5
																	.setEscapeChar(csvSettings_tFileOutputDelimited_5
																			.getEscapeChar());
															CsvWritertFileOutputDelimited_5
																	.setQuoteChar(csvSettings_tFileOutputDelimited_5
																			.getTextEnclosure());
															CsvWritertFileOutputDelimited_5
																	.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

															/**
															 * [
															 * tFileOutputDelimited_5
															 * begin ] stop
															 */

															/**
															 * [tJavaRow_7 begin
															 * ] start
															 */

															ok_Hash.put(
																	"tJavaRow_7",
																	false);
															start_Hash
																	.put("tJavaRow_7",
																			System.currentTimeMillis());
															currentComponent = "tJavaRow_7";

															int tos_count_tJavaRow_7 = 0;

															int nb_line_tJavaRow_7 = 0;

															/**
															 * [tJavaRow_7 begin
															 * ] stop
															 */

															/**
															 * [tUniqRow_7 begin
															 * ] start
															 */

															ok_Hash.put(
																	"tUniqRow_7",
																	false);
															start_Hash
																	.put("tUniqRow_7",
																			System.currentTimeMillis());
															currentComponent = "tUniqRow_7";

															int tos_count_tUniqRow_7 = 0;

															class KeyStruct_tUniqRow_7 {

																private static final int DEFAULT_HASHCODE = 1;
																private static final int PRIME = 31;
																private int hashCode = DEFAULT_HASHCODE;
																public boolean hashCodeDirty = true;

																String id_local_temp;

																@Override
																public int hashCode() {
																	if (this.hashCodeDirty) {
																		final int prime = PRIME;
																		int result = DEFAULT_HASHCODE;

																		result = prime
																				* result
																				+ ((this.id_local_temp == null) ? 0
																						: this.id_local_temp
																								.hashCode());

																		this.hashCode = result;
																		this.hashCodeDirty = false;
																	}
																	return this.hashCode;
																}

																@Override
																public boolean equals(
																		Object obj) {
																	if (this == obj)
																		return true;
																	if (obj == null)
																		return false;
																	if (getClass() != obj
																			.getClass())
																		return false;
																	final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;

																	if (this.id_local_temp == null) {
																		if (other.id_local_temp != null)
																			return false;
																	} else if (!this.id_local_temp
																			.equals(other.id_local_temp))
																		return false;

																	return true;
																}

															}

															int nb_uniques_tUniqRow_7 = 0;
															int nb_duplicates_tUniqRow_7 = 0;
															KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
															java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>();

															/**
															 * [tUniqRow_7 begin
															 * ] stop
															 */

															/**
															 * [
															 * tFileOutputDelimited_8
															 * begin ] start
															 */

															ok_Hash.put(
																	"tFileOutputDelimited_8",
																	false);
															start_Hash
																	.put("tFileOutputDelimited_8",
																			System.currentTimeMillis());
															currentComponent = "tFileOutputDelimited_8";

															int tos_count_tFileOutputDelimited_8 = 0;

															String fileName_tFileOutputDelimited_8 = "";
															fileName_tFileOutputDelimited_8 = (new java.io.File(
																	context.target_path
																			+ "volume.csv"))
																	.getAbsolutePath()
																	.replace(
																			"\\",
																			"/");
															String fullName_tFileOutputDelimited_8 = null;
															String extension_tFileOutputDelimited_8 = null;
															String directory_tFileOutputDelimited_8 = null;
															if ((fileName_tFileOutputDelimited_8
																	.indexOf("/") != -1)) {
																if (fileName_tFileOutputDelimited_8
																		.lastIndexOf(".") < fileName_tFileOutputDelimited_8
																		.lastIndexOf("/")) {
																	fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
																	extension_tFileOutputDelimited_8 = "";
																} else {
																	fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
																			.substring(
																					0,
																					fileName_tFileOutputDelimited_8
																							.lastIndexOf("."));
																	extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
																			.substring(fileName_tFileOutputDelimited_8
																					.lastIndexOf("."));
																}
																directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
																		.substring(
																				0,
																				fileName_tFileOutputDelimited_8
																						.lastIndexOf("/"));
															} else {
																if (fileName_tFileOutputDelimited_8
																		.lastIndexOf(".") != -1) {
																	fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
																			.substring(
																					0,
																					fileName_tFileOutputDelimited_8
																							.lastIndexOf("."));
																	extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
																			.substring(fileName_tFileOutputDelimited_8
																					.lastIndexOf("."));
																} else {
																	fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
																	extension_tFileOutputDelimited_8 = "";
																}
																directory_tFileOutputDelimited_8 = "";
															}
															boolean isFileGenerated_tFileOutputDelimited_8 = true;
															java.io.File filetFileOutputDelimited_8 = new java.io.File(
																	fileName_tFileOutputDelimited_8);
															globalMap
																	.put("tFileOutputDelimited_8_FILE_NAME",
																			fileName_tFileOutputDelimited_8);

															String[] headColutFileOutputDelimited_8 = new String[5];
															class CSVBasicSet_tFileOutputDelimited_8 {
																private char field_Delim;
																private char row_Delim;
																private char escape;
																private char textEnclosure;
																private boolean useCRLFRecordDelimiter;

																public boolean isUseCRLFRecordDelimiter() {
																	return useCRLFRecordDelimiter;
																}

																public void setFieldSeparator(
																		String fieldSep)
																		throws IllegalArgumentException {
																	char field_Delim_tFileOutputDelimited_8[] = null;

																	// support
																	// passing
																	// value
																	// (property:
																	// Field
																	// Separator)
																	// by
																	// 'context.fs'
																	// or
																	// 'globalMap.get("fs")'.
																	if (fieldSep
																			.length() > 0) {
																		field_Delim_tFileOutputDelimited_8 = fieldSep
																				.toCharArray();
																	} else {
																		throw new IllegalArgumentException(
																				"Field Separator must be assigned a char.");
																	}
																	this.field_Delim = field_Delim_tFileOutputDelimited_8[0];
																}

																public char getFieldDelim() {
																	if (this.field_Delim == 0) {
																		setFieldSeparator(";");
																	}
																	return this.field_Delim;
																}

																public void setRowSeparator(
																		String rowSep) {
																	if ("\r\n"
																			.equals(rowSep)) {
																		useCRLFRecordDelimiter = true;
																		return;
																	}
																	char row_DelimtFileOutputDelimited_8[] = null;

																	// support
																	// passing
																	// value
																	// (property:
																	// Row
																	// Separator)
																	// by
																	// 'context.rs'
																	// or
																	// 'globalMap.get("rs")'.
																	if (rowSep
																			.length() > 0) {
																		row_DelimtFileOutputDelimited_8 = rowSep
																				.toCharArray();
																	} else {
																		throw new IllegalArgumentException(
																				"Row Separator must be assigned a char.");
																	}
																	this.row_Delim = row_DelimtFileOutputDelimited_8[0];
																}

																public char getRowDelim() {
																	if (this.row_Delim == 0) {
																		setRowSeparator("\n");
																	}
																	return this.row_Delim;
																}

																public void setEscapeAndTextEnclosure(
																		String strEscape,
																		String strTextEnclosure)
																		throws IllegalArgumentException {
																	if (strEscape
																			.length() <= 0) {
																		throw new IllegalArgumentException(
																				"Escape Char must be assigned a char.");
																	}

																	if ("".equals(strTextEnclosure))
																		strTextEnclosure = "\0";
																	char textEnclosure_tFileOutputDelimited_8[] = null;

																	if (strTextEnclosure
																			.length() > 0) {
																		textEnclosure_tFileOutputDelimited_8 = strTextEnclosure
																				.toCharArray();
																	} else {
																		throw new IllegalArgumentException(
																				"Text Enclosure must be assigned a char.");
																	}

																	this.textEnclosure = textEnclosure_tFileOutputDelimited_8[0];

																	if (("\\")
																			.equals(strEscape)) {
																		this.escape = '\\';
																	} else if (strEscape
																			.equals(strTextEnclosure)) {
																		this.escape = this.textEnclosure;
																	} else {
																		// the
																		// default
																		// escape
																		// mode
																		// is
																		// double
																		// escape
																		this.escape = this.textEnclosure;
																	}

																}

																public char getEscapeChar() {
																	return (char) this.escape;
																}

																public char getTextEnclosure() {
																	return this.textEnclosure;
																}
															}

															int nb_line_tFileOutputDelimited_8 = 0;
															int splitEvery_tFileOutputDelimited_8 = 1000;
															int splitedFileNo_tFileOutputDelimited_8 = 0;
															int currentRow_tFileOutputDelimited_8 = 0;

															CSVBasicSet_tFileOutputDelimited_8 csvSettings_tFileOutputDelimited_8 = new CSVBasicSet_tFileOutputDelimited_8();
															csvSettings_tFileOutputDelimited_8
																	.setFieldSeparator(";");
															csvSettings_tFileOutputDelimited_8
																	.setRowSeparator("\n");
															csvSettings_tFileOutputDelimited_8
																	.setEscapeAndTextEnclosure(
																			"\"",
																			"\"");
															// create directory
															// only if not
															// exists
															if (directory_tFileOutputDelimited_8 != null
																	&& directory_tFileOutputDelimited_8
																			.trim()
																			.length() != 0) {
																java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
																		directory_tFileOutputDelimited_8);
																if (!dir_tFileOutputDelimited_8
																		.exists()) {
																	dir_tFileOutputDelimited_8
																			.mkdirs();
																}
															}
															com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_8 = null;
															try {
																CsvWritertFileOutputDelimited_8 = new com.talend.csv.CSVWriter(
																		new java.io.BufferedWriter(
																				new java.io.OutputStreamWriter(
																						new java.io.FileOutputStream(
																								fileName_tFileOutputDelimited_8,
																								false),
																						"ISO-8859-15")));
																CsvWritertFileOutputDelimited_8
																		.setSeparator(csvSettings_tFileOutputDelimited_8
																				.getFieldDelim());

																if (!csvSettings_tFileOutputDelimited_8
																		.isUseCRLFRecordDelimiter()
																		&& csvSettings_tFileOutputDelimited_8
																				.getRowDelim() != '\r'
																		&& csvSettings_tFileOutputDelimited_8
																				.getRowDelim() != '\n') {
																	CsvWritertFileOutputDelimited_8
																			.setLineEnd(""
																					+ csvSettings_tFileOutputDelimited_8
																							.getRowDelim());
																}

																if (filetFileOutputDelimited_8
																		.length() == 0) {

																	headColutFileOutputDelimited_8[0] = "id_volume";

																	headColutFileOutputDelimited_8[1] = "id_dispoparc";

																	headColutFileOutputDelimited_8[2] = "no_volume";

																	headColutFileOutputDelimited_8[3] = "id_volume_temp";

																	headColutFileOutputDelimited_8[4] = "id_dispoparc_temp";

																	CsvWritertFileOutputDelimited_8
																			.writeNext(headColutFileOutputDelimited_8);
																	CsvWritertFileOutputDelimited_8
																			.flush();

																}

																CsvWritertFileOutputDelimited_8
																		.setEscapeChar(csvSettings_tFileOutputDelimited_8
																				.getEscapeChar());
																CsvWritertFileOutputDelimited_8
																		.setQuoteChar(csvSettings_tFileOutputDelimited_8
																				.getTextEnclosure());
																CsvWritertFileOutputDelimited_8
																		.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

																/**
																 * [
																 * tFileOutputDelimited_8
																 * begin ] stop
																 */

																/**
																 * [tJavaRow_8
																 * begin ] start
																 */

																ok_Hash.put(
																		"tJavaRow_8",
																		false);
																start_Hash
																		.put("tJavaRow_8",
																				System.currentTimeMillis());
																currentComponent = "tJavaRow_8";

																int tos_count_tJavaRow_8 = 0;

																int nb_line_tJavaRow_8 = 0;

																/**
																 * [tJavaRow_8
																 * begin ] stop
																 */

																/**
																 * [tUniqRow_8
																 * begin ] start
																 */

																ok_Hash.put(
																		"tUniqRow_8",
																		false);
																start_Hash
																		.put("tUniqRow_8",
																				System.currentTimeMillis());
																currentComponent = "tUniqRow_8";

																int tos_count_tUniqRow_8 = 0;

																class KeyStruct_tUniqRow_8 {

																	private static final int DEFAULT_HASHCODE = 1;
																	private static final int PRIME = 31;
																	private int hashCode = DEFAULT_HASHCODE;
																	public boolean hashCodeDirty = true;

																	String id_volume_temp;

																	@Override
																	public int hashCode() {
																		if (this.hashCodeDirty) {
																			final int prime = PRIME;
																			int result = DEFAULT_HASHCODE;

																			result = prime
																					* result
																					+ ((this.id_volume_temp == null) ? 0
																							: this.id_volume_temp
																									.hashCode());

																			this.hashCode = result;
																			this.hashCodeDirty = false;
																		}
																		return this.hashCode;
																	}

																	@Override
																	public boolean equals(
																			Object obj) {
																		if (this == obj)
																			return true;
																		if (obj == null)
																			return false;
																		if (getClass() != obj
																				.getClass())
																			return false;
																		final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;

																		if (this.id_volume_temp == null) {
																			if (other.id_volume_temp != null)
																				return false;
																		} else if (!this.id_volume_temp
																				.equals(other.id_volume_temp))
																			return false;

																		return true;
																	}

																}

																int nb_uniques_tUniqRow_8 = 0;
																int nb_duplicates_tUniqRow_8 = 0;
																KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
																java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>();

																/**
																 * [tUniqRow_8
																 * begin ] stop
																 */

																/**
																 * [
																 * tFileOutputDelimited_9
																 * begin ] start
																 */

																ok_Hash.put(
																		"tFileOutputDelimited_9",
																		false);
																start_Hash
																		.put("tFileOutputDelimited_9",
																				System.currentTimeMillis());
																currentComponent = "tFileOutputDelimited_9";

																int tos_count_tFileOutputDelimited_9 = 0;

																String fileName_tFileOutputDelimited_9 = "";
																fileName_tFileOutputDelimited_9 = (new java.io.File(
																		context.target_path
																				+ "suf.csv"))
																		.getAbsolutePath()
																		.replace(
																				"\\",
																				"/");
																String fullName_tFileOutputDelimited_9 = null;
																String extension_tFileOutputDelimited_9 = null;
																String directory_tFileOutputDelimited_9 = null;
																if ((fileName_tFileOutputDelimited_9
																		.indexOf("/") != -1)) {
																	if (fileName_tFileOutputDelimited_9
																			.lastIndexOf(".") < fileName_tFileOutputDelimited_9
																			.lastIndexOf("/")) {
																		fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
																		extension_tFileOutputDelimited_9 = "";
																	} else {
																		fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
																				.substring(
																						0,
																						fileName_tFileOutputDelimited_9
																								.lastIndexOf("."));
																		extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
																				.substring(fileName_tFileOutputDelimited_9
																						.lastIndexOf("."));
																	}
																	directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
																			.substring(
																					0,
																					fileName_tFileOutputDelimited_9
																							.lastIndexOf("/"));
																} else {
																	if (fileName_tFileOutputDelimited_9
																			.lastIndexOf(".") != -1) {
																		fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
																				.substring(
																						0,
																						fileName_tFileOutputDelimited_9
																								.lastIndexOf("."));
																		extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
																				.substring(fileName_tFileOutputDelimited_9
																						.lastIndexOf("."));
																	} else {
																		fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
																		extension_tFileOutputDelimited_9 = "";
																	}
																	directory_tFileOutputDelimited_9 = "";
																}
																boolean isFileGenerated_tFileOutputDelimited_9 = true;
																java.io.File filetFileOutputDelimited_9 = new java.io.File(
																		fileName_tFileOutputDelimited_9);
																globalMap
																		.put("tFileOutputDelimited_9_FILE_NAME",
																				fileName_tFileOutputDelimited_9);

																String[] headColutFileOutputDelimited_9 = new String[8];
																class CSVBasicSet_tFileOutputDelimited_9 {
																	private char field_Delim;
																	private char row_Delim;
																	private char escape;
																	private char textEnclosure;
																	private boolean useCRLFRecordDelimiter;

																	public boolean isUseCRLFRecordDelimiter() {
																		return useCRLFRecordDelimiter;
																	}

																	public void setFieldSeparator(
																			String fieldSep)
																			throws IllegalArgumentException {
																		char field_Delim_tFileOutputDelimited_9[] = null;

																		// support
																		// passing
																		// value
																		// (property:
																		// Field
																		// Separator)
																		// by
																		// 'context.fs'
																		// or
																		// 'globalMap.get("fs")'.
																		if (fieldSep
																				.length() > 0) {
																			field_Delim_tFileOutputDelimited_9 = fieldSep
																					.toCharArray();
																		} else {
																			throw new IllegalArgumentException(
																					"Field Separator must be assigned a char.");
																		}
																		this.field_Delim = field_Delim_tFileOutputDelimited_9[0];
																	}

																	public char getFieldDelim() {
																		if (this.field_Delim == 0) {
																			setFieldSeparator(";");
																		}
																		return this.field_Delim;
																	}

																	public void setRowSeparator(
																			String rowSep) {
																		if ("\r\n"
																				.equals(rowSep)) {
																			useCRLFRecordDelimiter = true;
																			return;
																		}
																		char row_DelimtFileOutputDelimited_9[] = null;

																		// support
																		// passing
																		// value
																		// (property:
																		// Row
																		// Separator)
																		// by
																		// 'context.rs'
																		// or
																		// 'globalMap.get("rs")'.
																		if (rowSep
																				.length() > 0) {
																			row_DelimtFileOutputDelimited_9 = rowSep
																					.toCharArray();
																		} else {
																			throw new IllegalArgumentException(
																					"Row Separator must be assigned a char.");
																		}
																		this.row_Delim = row_DelimtFileOutputDelimited_9[0];
																	}

																	public char getRowDelim() {
																		if (this.row_Delim == 0) {
																			setRowSeparator("\n");
																		}
																		return this.row_Delim;
																	}

																	public void setEscapeAndTextEnclosure(
																			String strEscape,
																			String strTextEnclosure)
																			throws IllegalArgumentException {
																		if (strEscape
																				.length() <= 0) {
																			throw new IllegalArgumentException(
																					"Escape Char must be assigned a char.");
																		}

																		if ("".equals(strTextEnclosure))
																			strTextEnclosure = "\0";
																		char textEnclosure_tFileOutputDelimited_9[] = null;

																		if (strTextEnclosure
																				.length() > 0) {
																			textEnclosure_tFileOutputDelimited_9 = strTextEnclosure
																					.toCharArray();
																		} else {
																			throw new IllegalArgumentException(
																					"Text Enclosure must be assigned a char.");
																		}

																		this.textEnclosure = textEnclosure_tFileOutputDelimited_9[0];

																		if (("\\")
																				.equals(strEscape)) {
																			this.escape = '\\';
																		} else if (strEscape
																				.equals(strTextEnclosure)) {
																			this.escape = this.textEnclosure;
																		} else {
																			// the
																			// default
																			// escape
																			// mode
																			// is
																			// double
																			// escape
																			this.escape = this.textEnclosure;
																		}

																	}

																	public char getEscapeChar() {
																		return (char) this.escape;
																	}

																	public char getTextEnclosure() {
																		return this.textEnclosure;
																	}
																}

																int nb_line_tFileOutputDelimited_9 = 0;
																int splitEvery_tFileOutputDelimited_9 = 1000;
																int splitedFileNo_tFileOutputDelimited_9 = 0;
																int currentRow_tFileOutputDelimited_9 = 0;

																CSVBasicSet_tFileOutputDelimited_9 csvSettings_tFileOutputDelimited_9 = new CSVBasicSet_tFileOutputDelimited_9();
																csvSettings_tFileOutputDelimited_9
																		.setFieldSeparator(";");
																csvSettings_tFileOutputDelimited_9
																		.setRowSeparator("\n");
																csvSettings_tFileOutputDelimited_9
																		.setEscapeAndTextEnclosure(
																				"\"",
																				"\"");
																// create
																// directory
																// only if not
																// exists
																if (directory_tFileOutputDelimited_9 != null
																		&& directory_tFileOutputDelimited_9
																				.trim()
																				.length() != 0) {
																	java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
																			directory_tFileOutputDelimited_9);
																	if (!dir_tFileOutputDelimited_9
																			.exists()) {
																		dir_tFileOutputDelimited_9
																				.mkdirs();
																	}
																}
																com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_9 = null;
																try {
																	CsvWritertFileOutputDelimited_9 = new com.talend.csv.CSVWriter(
																			new java.io.BufferedWriter(
																					new java.io.OutputStreamWriter(
																							new java.io.FileOutputStream(
																									fileName_tFileOutputDelimited_9,
																									false),
																							"ISO-8859-15")));
																	CsvWritertFileOutputDelimited_9
																			.setSeparator(csvSettings_tFileOutputDelimited_9
																					.getFieldDelim());

																	if (!csvSettings_tFileOutputDelimited_9
																			.isUseCRLFRecordDelimiter()
																			&& csvSettings_tFileOutputDelimited_9
																					.getRowDelim() != '\r'
																			&& csvSettings_tFileOutputDelimited_9
																					.getRowDelim() != '\n') {
																		CsvWritertFileOutputDelimited_9
																				.setLineEnd(""
																						+ csvSettings_tFileOutputDelimited_9
																								.getRowDelim());
																	}

																	if (filetFileOutputDelimited_9
																			.length() == 0) {

																		headColutFileOutputDelimited_9[0] = "id_suf";

																		headColutFileOutputDelimited_9[1] = "id_dispoparc";

																		headColutFileOutputDelimited_9[2] = "id_suf_cplmt";

																		headColutFileOutputDelimited_9[3] = "nature_culture";

																		headColutFileOutputDelimited_9[4] = "nature_culture_speciale";

																		headColutFileOutputDelimited_9[5] = "surface_terrain";

																		headColutFileOutputDelimited_9[6] = "id_suf_temp";

																		headColutFileOutputDelimited_9[7] = "id_dispoparc_temp";

																		CsvWritertFileOutputDelimited_9
																				.writeNext(headColutFileOutputDelimited_9);
																		CsvWritertFileOutputDelimited_9
																				.flush();

																	}

																	CsvWritertFileOutputDelimited_9
																			.setEscapeChar(csvSettings_tFileOutputDelimited_9
																					.getEscapeChar());
																	CsvWritertFileOutputDelimited_9
																			.setQuoteChar(csvSettings_tFileOutputDelimited_9
																					.getTextEnclosure());
																	CsvWritertFileOutputDelimited_9
																			.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

																	/**
																	 * [
																	 * tFileOutputDelimited_9
																	 * begin ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tJavaRow_9
																	 * begin ]
																	 * start
																	 */

																	ok_Hash.put(
																			"tJavaRow_9",
																			false);
																	start_Hash
																			.put("tJavaRow_9",
																					System.currentTimeMillis());
																	currentComponent = "tJavaRow_9";

																	int tos_count_tJavaRow_9 = 0;

																	int nb_line_tJavaRow_9 = 0;

																	/**
																	 * [
																	 * tJavaRow_9
																	 * begin ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tUniqRow_9
																	 * begin ]
																	 * start
																	 */

																	ok_Hash.put(
																			"tUniqRow_9",
																			false);
																	start_Hash
																			.put("tUniqRow_9",
																					System.currentTimeMillis());
																	currentComponent = "tUniqRow_9";

																	int tos_count_tUniqRow_9 = 0;

																	class KeyStruct_tUniqRow_9 {

																		private static final int DEFAULT_HASHCODE = 1;
																		private static final int PRIME = 31;
																		private int hashCode = DEFAULT_HASHCODE;
																		public boolean hashCodeDirty = true;

																		String id_suf_temp;

																		@Override
																		public int hashCode() {
																			if (this.hashCodeDirty) {
																				final int prime = PRIME;
																				int result = DEFAULT_HASHCODE;

																				result = prime
																						* result
																						+ ((this.id_suf_temp == null) ? 0
																								: this.id_suf_temp
																										.hashCode());

																				this.hashCode = result;
																				this.hashCodeDirty = false;
																			}
																			return this.hashCode;
																		}

																		@Override
																		public boolean equals(
																				Object obj) {
																			if (this == obj)
																				return true;
																			if (obj == null)
																				return false;
																			if (getClass() != obj
																					.getClass())
																				return false;
																			final KeyStruct_tUniqRow_9 other = (KeyStruct_tUniqRow_9) obj;

																			if (this.id_suf_temp == null) {
																				if (other.id_suf_temp != null)
																					return false;
																			} else if (!this.id_suf_temp
																					.equals(other.id_suf_temp))
																				return false;

																			return true;
																		}

																	}

																	int nb_uniques_tUniqRow_9 = 0;
																	int nb_duplicates_tUniqRow_9 = 0;
																	KeyStruct_tUniqRow_9 finder_tUniqRow_9 = new KeyStruct_tUniqRow_9();
																	java.util.Set<KeyStruct_tUniqRow_9> keystUniqRow_9 = new java.util.HashSet<KeyStruct_tUniqRow_9>();

																	/**
																	 * [
																	 * tUniqRow_9
																	 * begin ]
																	 * stop
																	 */

																	/**
																	 * [tMap_1
																	 * begin ]
																	 * start
																	 */

																	ok_Hash.put(
																			"tMap_1",
																			false);
																	start_Hash
																			.put("tMap_1",
																					System.currentTimeMillis());
																	currentComponent = "tMap_1";

																	int tos_count_tMap_1 = 0;

																	// ###############################
																	// #
																	// Lookup's
																	// keys
																	// initialization

																	org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_mutationStruct> tHash_Lookup_nature_mutation = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_mutationStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_mutationStruct>) globalMap
																			.get("tHash_Lookup_nature_mutation"));

																	nature_mutationStruct nature_mutationHashKey = new nature_mutationStruct();
																	nature_mutationStruct nature_mutationDefault = new nature_mutationStruct();

																	org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_cultureStruct> tHash_Lookup_nature_culture = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_cultureStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_cultureStruct>) globalMap
																			.get("tHash_Lookup_nature_culture"));

																	nature_cultureStruct nature_cultureHashKey = new nature_cultureStruct();
																	nature_cultureStruct nature_cultureDefault = new nature_cultureStruct();

																	org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<type_localStruct> tHash_Lookup_type_local = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<type_localStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<type_localStruct>) globalMap
																			.get("tHash_Lookup_type_local"));

																	type_localStruct type_localHashKey = new type_localStruct();
																	type_localStruct type_localDefault = new type_localStruct();

																	org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_culture_specialeStruct> tHash_Lookup_nature_culture_speciale = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_culture_specialeStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_culture_specialeStruct>) globalMap
																			.get("tHash_Lookup_nature_culture_speciale"));

																	nature_culture_specialeStruct nature_culture_specialeHashKey = new nature_culture_specialeStruct();
																	nature_culture_specialeStruct nature_culture_specialeDefault = new nature_culture_specialeStruct();
																	// ###############################

																	// ###############################
																	// # Vars
																	// initialization
																	class Var__tMap_1__Struct {
																		String prefixe_section;
																		String code_commune;
																		String numero_plan;
																		String idpar;
																		String id_mutation_temp;
																		String id_disposition_temp;
																		String id_parcelle_temp;
																		String id_dispoparc_temp;
																		String id_adresse_temp;
																		String id_volume_temp;
																		String id_local_temp;
																		String id_suf_temp;
																	}
																	Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
																	// ###############################

																	// ###############################
																	// # Outputs
																	// initialization
																	mutation_article_cgi_non_normaliseStruct mutation_article_cgi_non_normalise_tmp = new mutation_article_cgi_non_normaliseStruct();
																	parcelleStruct parcelle_tmp = new parcelleStruct();
																	lotsStruct lots_tmp = new lotsStruct();
																	adresseStruct adresse_tmp = new adresseStruct();
																	mutationStruct mutation_tmp = new mutationStruct();
																	dispositionStruct disposition_tmp = new dispositionStruct();
																	disposition_parcelleStruct disposition_parcelle_tmp = new disposition_parcelleStruct();
																	adresse_dispoparcStruct adresse_dispoparc_tmp = new adresse_dispoparcStruct();
																	locauxStruct locaux_tmp = new locauxStruct();
																	volumeStruct volume_tmp = new volumeStruct();
																	sufStruct suf_tmp = new sufStruct();
																	// ###############################

																	/**
																	 * [tMap_1
																	 * begin ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tFileOutputDelimited_22
																	 * begin ]
																	 * start
																	 */

																	ok_Hash.put(
																			"tFileOutputDelimited_22",
																			false);
																	start_Hash
																			.put("tFileOutputDelimited_22",
																					System.currentTimeMillis());
																	currentComponent = "tFileOutputDelimited_22";

																	int tos_count_tFileOutputDelimited_22 = 0;

																	String fileName_tFileOutputDelimited_22 = "";
																	fileName_tFileOutputDelimited_22 = (new java.io.File(
																			context.temp_path
																					+ "extraction.csv"))
																			.getAbsolutePath()
																			.replace(
																					"\\",
																					"/");
																	String fullName_tFileOutputDelimited_22 = null;
																	String extension_tFileOutputDelimited_22 = null;
																	String directory_tFileOutputDelimited_22 = null;
																	if ((fileName_tFileOutputDelimited_22
																			.indexOf("/") != -1)) {
																		if (fileName_tFileOutputDelimited_22
																				.lastIndexOf(".") < fileName_tFileOutputDelimited_22
																				.lastIndexOf("/")) {
																			fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22;
																			extension_tFileOutputDelimited_22 = "";
																		} else {
																			fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
																					.substring(
																							0,
																							fileName_tFileOutputDelimited_22
																									.lastIndexOf("."));
																			extension_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
																					.substring(fileName_tFileOutputDelimited_22
																							.lastIndexOf("."));
																		}
																		directory_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
																				.substring(
																						0,
																						fileName_tFileOutputDelimited_22
																								.lastIndexOf("/"));
																	} else {
																		if (fileName_tFileOutputDelimited_22
																				.lastIndexOf(".") != -1) {
																			fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
																					.substring(
																							0,
																							fileName_tFileOutputDelimited_22
																									.lastIndexOf("."));
																			extension_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
																					.substring(fileName_tFileOutputDelimited_22
																							.lastIndexOf("."));
																		} else {
																			fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22;
																			extension_tFileOutputDelimited_22 = "";
																		}
																		directory_tFileOutputDelimited_22 = "";
																	}
																	boolean isFileGenerated_tFileOutputDelimited_22 = true;
																	java.io.File filetFileOutputDelimited_22 = new java.io.File(
																			fileName_tFileOutputDelimited_22);
																	globalMap
																			.put("tFileOutputDelimited_22_FILE_NAME",
																					fileName_tFileOutputDelimited_22);

																	String[] headColutFileOutputDelimited_22 = new String[44];
																	class CSVBasicSet_tFileOutputDelimited_22 {
																		private char field_Delim;
																		private char row_Delim;
																		private char escape;
																		private char textEnclosure;
																		private boolean useCRLFRecordDelimiter;

																		public boolean isUseCRLFRecordDelimiter() {
																			return useCRLFRecordDelimiter;
																		}

																		public void setFieldSeparator(
																				String fieldSep)
																				throws IllegalArgumentException {
																			char field_Delim_tFileOutputDelimited_22[] = null;

																			// support
																			// passing
																			// value
																			// (property:
																			// Field
																			// Separator)
																			// by
																			// 'context.fs'
																			// or
																			// 'globalMap.get("fs")'.
																			if (fieldSep
																					.length() > 0) {
																				field_Delim_tFileOutputDelimited_22 = fieldSep
																						.toCharArray();
																			} else {
																				throw new IllegalArgumentException(
																						"Field Separator must be assigned a char.");
																			}
																			this.field_Delim = field_Delim_tFileOutputDelimited_22[0];
																		}

																		public char getFieldDelim() {
																			if (this.field_Delim == 0) {
																				setFieldSeparator(";");
																			}
																			return this.field_Delim;
																		}

																		public void setRowSeparator(
																				String rowSep) {
																			if ("\r\n"
																					.equals(rowSep)) {
																				useCRLFRecordDelimiter = true;
																				return;
																			}
																			char row_DelimtFileOutputDelimited_22[] = null;

																			// support
																			// passing
																			// value
																			// (property:
																			// Row
																			// Separator)
																			// by
																			// 'context.rs'
																			// or
																			// 'globalMap.get("rs")'.
																			if (rowSep
																					.length() > 0) {
																				row_DelimtFileOutputDelimited_22 = rowSep
																						.toCharArray();
																			} else {
																				throw new IllegalArgumentException(
																						"Row Separator must be assigned a char.");
																			}
																			this.row_Delim = row_DelimtFileOutputDelimited_22[0];
																		}

																		public char getRowDelim() {
																			if (this.row_Delim == 0) {
																				setRowSeparator("\n");
																			}
																			return this.row_Delim;
																		}

																		public void setEscapeAndTextEnclosure(
																				String strEscape,
																				String strTextEnclosure)
																				throws IllegalArgumentException {
																			if (strEscape
																					.length() <= 0) {
																				throw new IllegalArgumentException(
																						"Escape Char must be assigned a char.");
																			}

																			if ("".equals(strTextEnclosure))
																				strTextEnclosure = "\0";
																			char textEnclosure_tFileOutputDelimited_22[] = null;

																			if (strTextEnclosure
																					.length() > 0) {
																				textEnclosure_tFileOutputDelimited_22 = strTextEnclosure
																						.toCharArray();
																			} else {
																				throw new IllegalArgumentException(
																						"Text Enclosure must be assigned a char.");
																			}

																			this.textEnclosure = textEnclosure_tFileOutputDelimited_22[0];

																			if (("\\")
																					.equals(strEscape)) {
																				this.escape = '\\';
																			} else if (strEscape
																					.equals(strTextEnclosure)) {
																				this.escape = this.textEnclosure;
																			} else {
																				// the
																				// default
																				// escape
																				// mode
																				// is
																				// double
																				// escape
																				this.escape = this.textEnclosure;
																			}

																		}

																		public char getEscapeChar() {
																			return (char) this.escape;
																		}

																		public char getTextEnclosure() {
																			return this.textEnclosure;
																		}
																	}

																	int nb_line_tFileOutputDelimited_22 = 0;
																	int splitEvery_tFileOutputDelimited_22 = 1000;
																	int splitedFileNo_tFileOutputDelimited_22 = 0;
																	int currentRow_tFileOutputDelimited_22 = 0;

																	CSVBasicSet_tFileOutputDelimited_22 csvSettings_tFileOutputDelimited_22 = new CSVBasicSet_tFileOutputDelimited_22();
																	csvSettings_tFileOutputDelimited_22
																			.setFieldSeparator(";");
																	csvSettings_tFileOutputDelimited_22
																			.setRowSeparator("\n");
																	csvSettings_tFileOutputDelimited_22
																			.setEscapeAndTextEnclosure(
																					"\"",
																					"\"");
																	// create
																	// directory
																	// only if
																	// not
																	// exists
																	if (directory_tFileOutputDelimited_22 != null
																			&& directory_tFileOutputDelimited_22
																					.trim()
																					.length() != 0) {
																		java.io.File dir_tFileOutputDelimited_22 = new java.io.File(
																				directory_tFileOutputDelimited_22);
																		if (!dir_tFileOutputDelimited_22
																				.exists()) {
																			dir_tFileOutputDelimited_22
																					.mkdirs();
																		}
																	}
																	com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_22 = null;
																	try {
																		CsvWritertFileOutputDelimited_22 = new com.talend.csv.CSVWriter(
																				new java.io.BufferedWriter(
																						new java.io.OutputStreamWriter(
																								new java.io.FileOutputStream(
																										fileName_tFileOutputDelimited_22,
																										false),
																								"ISO-8859-15")));
																		CsvWritertFileOutputDelimited_22
																				.setSeparator(csvSettings_tFileOutputDelimited_22
																						.getFieldDelim());

																		if (!csvSettings_tFileOutputDelimited_22
																				.isUseCRLFRecordDelimiter()
																				&& csvSettings_tFileOutputDelimited_22
																						.getRowDelim() != '\r'
																				&& csvSettings_tFileOutputDelimited_22
																						.getRowDelim() != '\n') {
																			CsvWritertFileOutputDelimited_22
																					.setLineEnd(""
																							+ csvSettings_tFileOutputDelimited_22
																									.getRowDelim());
																		}

																		if (filetFileOutputDelimited_22
																				.length() == 0) {

																			headColutFileOutputDelimited_22[0] = "code_service_ch";

																			headColutFileOutputDelimited_22[1] = "reference_document";

																			headColutFileOutputDelimited_22[2] = "a_articles_cgi";

																			headColutFileOutputDelimited_22[3] = "b_articles_cgi";

																			headColutFileOutputDelimited_22[4] = "c_articles_cgi";

																			headColutFileOutputDelimited_22[5] = "d_articles_cgi";

																			headColutFileOutputDelimited_22[6] = "e_articles_cgi";

																			headColutFileOutputDelimited_22[7] = "numero_disposition";

																			headColutFileOutputDelimited_22[8] = "date_mutation";

																			headColutFileOutputDelimited_22[9] = "nature_mutation";

																			headColutFileOutputDelimited_22[10] = "valeur_fonciere";

																			headColutFileOutputDelimited_22[11] = "numero_voie";

																			headColutFileOutputDelimited_22[12] = "complement_numero_voie";

																			headColutFileOutputDelimited_22[13] = "type_voie";

																			headColutFileOutputDelimited_22[14] = "code_voie";

																			headColutFileOutputDelimited_22[15] = "voie";

																			headColutFileOutputDelimited_22[16] = "code_postal";

																			headColutFileOutputDelimited_22[17] = "commune";

																			headColutFileOutputDelimited_22[18] = "code_departement";

																			headColutFileOutputDelimited_22[19] = "code_commune";

																			headColutFileOutputDelimited_22[20] = "prefixe_section";

																			headColutFileOutputDelimited_22[21] = "section";

																			headColutFileOutputDelimited_22[22] = "numero_plan";

																			headColutFileOutputDelimited_22[23] = "numero_volume";

																			headColutFileOutputDelimited_22[24] = "lot1";

																			headColutFileOutputDelimited_22[25] = "surface_carrez_lot1";

																			headColutFileOutputDelimited_22[26] = "lot2";

																			headColutFileOutputDelimited_22[27] = "surface_carrez_lot2";

																			headColutFileOutputDelimited_22[28] = "lot3";

																			headColutFileOutputDelimited_22[29] = "surface_carrez_lot3";

																			headColutFileOutputDelimited_22[30] = "lot4";

																			headColutFileOutputDelimited_22[31] = "surface_carrez_lot4";

																			headColutFileOutputDelimited_22[32] = "lot5";

																			headColutFileOutputDelimited_22[33] = "surface_carrez_lot5";

																			headColutFileOutputDelimited_22[34] = "nombre_lots";

																			headColutFileOutputDelimited_22[35] = "code_type_local";

																			headColutFileOutputDelimited_22[36] = "type_local";

																			headColutFileOutputDelimited_22[37] = "identifiant_local";

																			headColutFileOutputDelimited_22[38] = "surface_reelle_bati";

																			headColutFileOutputDelimited_22[39] = "nombre_pieces_principales";

																			headColutFileOutputDelimited_22[40] = "nature_culture";

																			headColutFileOutputDelimited_22[41] = "nature_culture_speciale";

																			headColutFileOutputDelimited_22[42] = "surface_terrain";

																			headColutFileOutputDelimited_22[43] = "id_ligne";

																			CsvWritertFileOutputDelimited_22
																					.writeNext(headColutFileOutputDelimited_22);
																			CsvWritertFileOutputDelimited_22
																					.flush();

																		}

																		CsvWritertFileOutputDelimited_22
																				.setEscapeChar(csvSettings_tFileOutputDelimited_22
																						.getEscapeChar());
																		CsvWritertFileOutputDelimited_22
																				.setQuoteChar(csvSettings_tFileOutputDelimited_22
																						.getTextEnclosure());
																		CsvWritertFileOutputDelimited_22
																				.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

																		/**
																		 * [
																		 * tFileOutputDelimited_22
																		 * begin
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tReplicate_1
																		 * begin
																		 * ]
																		 * start
																		 */

																		ok_Hash.put(
																				"tReplicate_1",
																				false);
																		start_Hash
																				.put("tReplicate_1",
																						System.currentTimeMillis());
																		currentComponent = "tReplicate_1";

																		int tos_count_tReplicate_1 = 0;

																		/**
																		 * [
																		 * tReplicate_1
																		 * begin
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tJavaRow_1
																		 * begin
																		 * ]
																		 * start
																		 */

																		ok_Hash.put(
																				"tJavaRow_1",
																				false);
																		start_Hash
																				.put("tJavaRow_1",
																						System.currentTimeMillis());
																		currentComponent = "tJavaRow_1";

																		int tos_count_tJavaRow_1 = 0;

																		int nb_line_tJavaRow_1 = 0;

																		/**
																		 * [
																		 * tJavaRow_1
																		 * begin
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tFileInputDelimited_2
																		 * begin
																		 * ]
																		 * start
																		 */

																		ok_Hash.put(
																				"tFileInputDelimited_2",
																				false);
																		start_Hash
																				.put("tFileInputDelimited_2",
																						System.currentTimeMillis());
																		currentComponent = "tFileInputDelimited_2";

																		int tos_count_tFileInputDelimited_2 = 0;

																		int nb_line_tFileInputDelimited_2 = 0;
																		int footer_tFileInputDelimited_2 = 0;
																		int totalLinetFileInputDelimited_2 = 0;
																		int limittFileInputDelimited_2 = -1;
																		int lastLinetFileInputDelimited_2 = -1;

																		char fieldSeparator_tFileInputDelimited_2[] = null;

																		// support
																		// passing
																		// value
																		// (property:
																		// Field
																		// Separator)
																		// by
																		// 'context.fs'
																		// or
																		// 'globalMap.get("fs")'.
																		if (((String) "|")
																				.length() > 0) {
																			fieldSeparator_tFileInputDelimited_2 = ((String) "|")
																					.toCharArray();
																		} else {
																			throw new IllegalArgumentException(
																					"Field Separator must be assigned a char.");
																		}

																		char rowSeparator_tFileInputDelimited_2[] = null;

																		// support
																		// passing
																		// value
																		// (property:
																		// Row
																		// Separator)
																		// by
																		// 'context.rs'
																		// or
																		// 'globalMap.get("rs")'.
																		if (((String) "\n")
																				.length() > 0) {
																			rowSeparator_tFileInputDelimited_2 = ((String) "\n")
																					.toCharArray();
																		} else {
																			throw new IllegalArgumentException(
																					"Row Separator must be assigned a char.");
																		}

																		Object filename_tFileInputDelimited_2 = /**
																		 * 
																		 * Start
																		 * field
																		 * tFileInputDelimited_2
																		 * :
																		 * FILENAME
																		 */
																		context.source_path
																				+ context.dvf_file/**
																		 * 
																		 * End
																		 * field
																		 * tFileInputDelimited_2
																		 * :
																		 * FILENAME
																		 */
																		;
																		com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

																		try {

																			String[] rowtFileInputDelimited_2 = null;
																			int currentLinetFileInputDelimited_2 = 0;
																			int outputLinetFileInputDelimited_2 = 0;
																			try {// TD110
																					// begin
																				if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

																					int footer_value_tFileInputDelimited_2 = 0;
																					if (footer_value_tFileInputDelimited_2 > 0) {
																						throw new java.lang.Exception(
																								"When the input source is a stream,footer shouldn't be bigger than 0.");
																					}

																					csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
																							(java.io.InputStream) filename_tFileInputDelimited_2,
																							fieldSeparator_tFileInputDelimited_2[0],
																							"ISO-8859-15");
																				} else {
																					csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
																							new java.io.BufferedReader(
																									new java.io.InputStreamReader(
																											new java.io.FileInputStream(
																													String.valueOf(filename_tFileInputDelimited_2)),
																											"ISO-8859-15")),
																							fieldSeparator_tFileInputDelimited_2[0]);
																				}

																				csvReadertFileInputDelimited_2
																						.setTrimWhitespace(false);
																				if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
																						&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
																					csvReadertFileInputDelimited_2
																							.setLineEnd(""
																									+ rowSeparator_tFileInputDelimited_2[0]);

																				csvReadertFileInputDelimited_2
																						.setQuoteChar('"');

																				csvReadertFileInputDelimited_2
																						.setEscapeChar(csvReadertFileInputDelimited_2
																								.getQuoteChar());

																				if (footer_tFileInputDelimited_2 > 0) {
																					for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
																						csvReadertFileInputDelimited_2
																								.readNext();
																					}
																					csvReadertFileInputDelimited_2
																							.setSkipEmptyRecords(true);
																					while (csvReadertFileInputDelimited_2
																							.readNext()) {

																						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
																								.getValues();
																						if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
																								.equals(rowtFileInputDelimited_2[0]))) {// empty
																																		// line
																																		// when
																																		// row
																																		// separator
																																		// is
																																		// '\n'

																							totalLinetFileInputDelimited_2++;

																						}

																					}
																					int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
																							- footer_tFileInputDelimited_2 < 0 ? 0
																							: totalLinetFileInputDelimited_2
																									- footer_tFileInputDelimited_2;
																					if (lastLinetFileInputDelimited_2 > 0) {
																						lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
																								: lastLineTemptFileInputDelimited_2;
																					} else {
																						lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
																					}

																					csvReadertFileInputDelimited_2
																							.close();
																					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
																						csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
																								(java.io.InputStream) filename_tFileInputDelimited_2,
																								fieldSeparator_tFileInputDelimited_2[0],
																								"ISO-8859-15");
																					} else {
																						csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
																								new java.io.BufferedReader(
																										new java.io.InputStreamReader(
																												new java.io.FileInputStream(
																														String.valueOf(filename_tFileInputDelimited_2)),
																												"ISO-8859-15")),
																								fieldSeparator_tFileInputDelimited_2[0]);
																					}
																					csvReadertFileInputDelimited_2
																							.setTrimWhitespace(false);
																					if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
																							&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
																						csvReadertFileInputDelimited_2
																								.setLineEnd(""
																										+ rowSeparator_tFileInputDelimited_2[0]);

																					csvReadertFileInputDelimited_2
																							.setQuoteChar('"');

																					csvReadertFileInputDelimited_2
																							.setEscapeChar(csvReadertFileInputDelimited_2
																									.getQuoteChar());

																				}

																				if (limittFileInputDelimited_2 != 0) {
																					for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
																						csvReadertFileInputDelimited_2
																								.readNext();
																					}
																				}
																				csvReadertFileInputDelimited_2
																						.setSkipEmptyRecords(true);

																			} catch (java.lang.Exception e) {

																				System.err
																						.println(e
																								.getMessage());

																			}// TD110
																				// end

																			while (limittFileInputDelimited_2 != 0
																					&& csvReadertFileInputDelimited_2 != null
																					&& csvReadertFileInputDelimited_2
																							.readNext()) {

																				rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
																						.getValues();

																				if (rowtFileInputDelimited_2.length == 1
																						&& ("\015")
																								.equals(rowtFileInputDelimited_2[0])) {// empty
																																		// line
																																		// when
																																		// row
																																		// separator
																																		// is
																																		// '\n'
																					continue;
																				}

																				currentLinetFileInputDelimited_2++;

																				if (lastLinetFileInputDelimited_2 > -1
																						&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
																					break;
																				}
																				outputLinetFileInputDelimited_2++;
																				if (limittFileInputDelimited_2 > 0
																						&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
																					break;
																				}

																				source = null;

																				boolean whetherReject_tFileInputDelimited_2 = false;
																				source = new sourceStruct();
																				try {

																					if (rowtFileInputDelimited_2.length == 1
																							&& ("\015")
																									.equals(rowtFileInputDelimited_2[0])) {// empty
																																			// line
																																			// when
																																			// row
																																			// separator
																																			// is
																																			// '\n'

																						source.code_service_ch = null;

																						source.reference_document = null;

																						source.a_articles_cgi = null;

																						source.b_articles_cgi = null;

																						source.c_articles_cgi = null;

																						source.d_articles_cgi = null;

																						source.e_articles_cgi = null;

																						source.numero_disposition = null;

																						source.date_mutation = null;

																						source.nature_mutation = null;

																						source.valeur_fonciere = null;

																						source.numero_voie = null;

																						source.complement_numero_voie = null;

																						source.type_voie = null;

																						source.code_voie = null;

																						source.voie = null;

																						source.code_postal = null;

																						source.commune = null;

																						source.code_departement = null;

																						source.code_commune = null;

																						source.prefixe_section = null;

																						source.section = null;

																						source.numero_plan = null;

																						source.numero_volume = null;

																						source.lot1 = null;

																						source.surface_carrez_lot1 = null;

																						source.lot2 = null;

																						source.surface_carrez_lot2 = null;

																						source.lot3 = null;

																						source.surface_carrez_lot3 = null;

																						source.lot4 = null;

																						source.surface_carrez_lot4 = null;

																						source.lot5 = null;

																						source.surface_carrez_lot5 = null;

																						source.nombre_lots = null;

																						source.code_type_local = null;

																						source.type_local = null;

																						source.identifiant_local = null;

																						source.surface_reelle_bati = null;

																						source.nombre_pieces_principales = null;

																						source.nature_culture = null;

																						source.nature_culture_speciale = null;

																						source.surface_terrain = null;

																					} else {

																						for (int i_tFileInputDelimited_2 = 0; i_tFileInputDelimited_2 < rowtFileInputDelimited_2.length; i_tFileInputDelimited_2++) {
																							rowtFileInputDelimited_2[i_tFileInputDelimited_2] = rowtFileInputDelimited_2[i_tFileInputDelimited_2]
																									.trim();
																						}

																						int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																																		// Index

																						columnIndexWithD_tFileInputDelimited_2 = 0;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.code_service_ch = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.code_service_ch = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 1;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.reference_document = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.reference_document = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 2;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.a_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.a_articles_cgi = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 3;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.b_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.b_articles_cgi = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 4;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.c_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.c_articles_cgi = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 5;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.d_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.d_articles_cgi = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 6;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.e_articles_cgi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.e_articles_cgi = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 7;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.numero_disposition = ParserUtils
																										.parseTo_Integer(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.numero_disposition = null;
																							}

																						} else {
																							source.numero_disposition = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 8;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.date_mutation = ParserUtils
																										.parseTo_Date(
																												rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																												"dd/MM/yyyy");

																							} else {
																								source.date_mutation = null;
																							}

																						} else {
																							source.date_mutation = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 9;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.nature_mutation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.nature_mutation = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 10;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.valeur_fonciere = ParserUtils
																										.parseTo_Double(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.valeur_fonciere = null;
																							}

																						} else {
																							source.valeur_fonciere = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 11;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.numero_voie = ParserUtils
																										.parseTo_Integer(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.numero_voie = null;
																							}

																						} else {
																							source.numero_voie = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 12;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.complement_numero_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.complement_numero_voie = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 13;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.type_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.type_voie = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 14;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.code_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.code_voie = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 15;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.voie = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 16;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.code_postal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.code_postal = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 17;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.commune = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.commune = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 18;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.code_departement = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.code_departement = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 19;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.code_commune = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.code_commune = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 20;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.prefixe_section = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.prefixe_section = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 21;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.section = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.section = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 22;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.numero_plan = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.numero_plan = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 23;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.numero_volume = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.numero_volume = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 24;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.lot1 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.lot1 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 25;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.surface_carrez_lot1 = ParserUtils
																										.parseTo_Double(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.surface_carrez_lot1 = null;
																							}

																						} else {
																							source.surface_carrez_lot1 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 26;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.lot2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.lot2 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 27;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.surface_carrez_lot2 = ParserUtils
																										.parseTo_Double(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.surface_carrez_lot2 = null;
																							}

																						} else {
																							source.surface_carrez_lot2 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 28;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.lot3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.lot3 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 29;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.surface_carrez_lot3 = ParserUtils
																										.parseTo_Double(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.surface_carrez_lot3 = null;
																							}

																						} else {
																							source.surface_carrez_lot3 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 30;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.lot4 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.lot4 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 31;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.surface_carrez_lot4 = ParserUtils
																										.parseTo_Double(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.surface_carrez_lot4 = null;
																							}

																						} else {
																							source.surface_carrez_lot4 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 32;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.lot5 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.lot5 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 33;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.surface_carrez_lot5 = ParserUtils
																										.parseTo_Double(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.surface_carrez_lot5 = null;
																							}

																						} else {
																							source.surface_carrez_lot5 = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 34;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.nombre_lots = ParserUtils
																										.parseTo_Integer(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.nombre_lots = null;
																							}

																						} else {
																							source.nombre_lots = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 35;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.code_type_local = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.code_type_local = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 36;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.type_local = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.type_local = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 37;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.identifiant_local = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.identifiant_local = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 38;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.surface_reelle_bati = ParserUtils
																										.parseTo_Double(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.surface_reelle_bati = null;
																							}

																						} else {
																							source.surface_reelle_bati = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 39;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.nombre_pieces_principales = ParserUtils
																										.parseTo_Integer(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.nombre_pieces_principales = null;
																							}

																						} else {
																							source.nombre_pieces_principales = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 40;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.nature_culture = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.nature_culture = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 41;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							source.nature_culture_speciale = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

																						} else {
																							source.nature_culture_speciale = null;
																						}

																						columnIndexWithD_tFileInputDelimited_2 = 42;

																						if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

																							if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
																									.length() > 0) {

																								source.surface_terrain = ParserUtils
																										.parseTo_Double(ParserUtils
																												.parseTo_Number(
																														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																														null,
																														','));

																							} else {
																								source.surface_terrain = null;
																							}

																						} else {
																							source.surface_terrain = null;
																						}

																					}

																				} catch (java.lang.Exception e) {
																					whetherReject_tFileInputDelimited_2 = true;

																					System.err
																							.println(e
																									.getMessage());
																					source = null;

																				}

																				/**
																				 * [
																				 * tFileInputDelimited_2
																				 * begin
																				 * ]
																				 * stop
																				 */
																				/**
																				 * [
																				 * tFileInputDelimited_2
																				 * main
																				 * ]
																				 * start
																				 */

																				currentComponent = "tFileInputDelimited_2";

																				tos_count_tFileInputDelimited_2++;

																				/**
																				 * [
																				 * tFileInputDelimited_2
																				 * main
																				 * ]
																				 * stop
																				 */
																				// Start
																				// of
																				// branch
																				// "source"
																				if (source != null) {

																					/**
																					 * [
																					 * tJavaRow_1
																					 * main
																					 * ]
																					 * start
																					 */

																					currentComponent = "tJavaRow_1";

																					// Code
																					// généré
																					// selon
																					// le
																					// schémas
																					// d'entrée
																					// et
																					// de
																					// sortie
																					extraire.code_service_ch = source.code_service_ch;
																					extraire.reference_document = source.reference_document;
																					extraire.a_articles_cgi = source.a_articles_cgi;
																					extraire.b_articles_cgi = source.b_articles_cgi;
																					extraire.c_articles_cgi = source.c_articles_cgi;
																					extraire.d_articles_cgi = source.d_articles_cgi;
																					extraire.e_articles_cgi = source.e_articles_cgi;
																					extraire.numero_disposition = source.numero_disposition;
																					extraire.date_mutation = source.date_mutation;
																					extraire.nature_mutation = source.nature_mutation;
																					extraire.valeur_fonciere = source.valeur_fonciere;
																					extraire.numero_voie = source.numero_voie;
																					extraire.complement_numero_voie = source.complement_numero_voie;
																					extraire.type_voie = source.type_voie;
																					extraire.code_voie = source.code_voie;
																					extraire.voie = source.voie;
																					extraire.code_postal = source.code_postal;
																					extraire.commune = source.commune;
																					extraire.code_departement = source.code_departement;
																					extraire.code_commune = source.code_commune;
																					extraire.prefixe_section = source.prefixe_section;
																					extraire.section = source.section;
																					extraire.numero_plan = source.numero_plan;
																					extraire.numero_volume = source.numero_volume;
																					extraire.lot1 = source.lot1;
																					extraire.surface_carrez_lot1 = source.surface_carrez_lot1;
																					extraire.lot2 = source.lot2;
																					extraire.surface_carrez_lot2 = source.surface_carrez_lot2;
																					extraire.lot3 = source.lot3;
																					extraire.surface_carrez_lot3 = source.surface_carrez_lot3;
																					extraire.lot4 = source.lot4;
																					extraire.surface_carrez_lot4 = source.surface_carrez_lot4;
																					extraire.lot5 = source.lot5;
																					extraire.surface_carrez_lot5 = source.surface_carrez_lot5;
																					extraire.nombre_lots = source.nombre_lots;
																					extraire.code_type_local = source.code_type_local;
																					extraire.type_local = source.type_local;
																					extraire.identifiant_local = source.identifiant_local;
																					extraire.surface_reelle_bati = source.surface_reelle_bati;
																					extraire.nombre_pieces_principales = source.nombre_pieces_principales;
																					extraire.nature_culture = source.nature_culture;
																					extraire.nature_culture_speciale = source.nature_culture_speciale;
																					extraire.surface_terrain = source.surface_terrain;
																					extraire.id_ligne = Numeric
																							.sequence(
																									"s1",
																									1,
																									1);

																					nb_line_tJavaRow_1++;

																					tos_count_tJavaRow_1++;

																					/**
																					 * [
																					 * tJavaRow_1
																					 * main
																					 * ]
																					 * stop
																					 */

																					/**
																					 * [
																					 * tReplicate_1
																					 * main
																					 * ]
																					 * start
																					 */

																					currentComponent = "tReplicate_1";

																					extraction = new extractionStruct();

																					extraction.code_service_ch = extraire.code_service_ch;
																					extraction.reference_document = extraire.reference_document;
																					extraction.a_articles_cgi = extraire.a_articles_cgi;
																					extraction.b_articles_cgi = extraire.b_articles_cgi;
																					extraction.c_articles_cgi = extraire.c_articles_cgi;
																					extraction.d_articles_cgi = extraire.d_articles_cgi;
																					extraction.e_articles_cgi = extraire.e_articles_cgi;
																					extraction.numero_disposition = extraire.numero_disposition;
																					extraction.date_mutation = extraire.date_mutation;
																					extraction.nature_mutation = extraire.nature_mutation;
																					extraction.valeur_fonciere = extraire.valeur_fonciere;
																					extraction.numero_voie = extraire.numero_voie;
																					extraction.complement_numero_voie = extraire.complement_numero_voie;
																					extraction.type_voie = extraire.type_voie;
																					extraction.code_voie = extraire.code_voie;
																					extraction.voie = extraire.voie;
																					extraction.code_postal = extraire.code_postal;
																					extraction.commune = extraire.commune;
																					extraction.code_departement = extraire.code_departement;
																					extraction.code_commune = extraire.code_commune;
																					extraction.prefixe_section = extraire.prefixe_section;
																					extraction.section = extraire.section;
																					extraction.numero_plan = extraire.numero_plan;
																					extraction.numero_volume = extraire.numero_volume;
																					extraction.lot1 = extraire.lot1;
																					extraction.surface_carrez_lot1 = extraire.surface_carrez_lot1;
																					extraction.lot2 = extraire.lot2;
																					extraction.surface_carrez_lot2 = extraire.surface_carrez_lot2;
																					extraction.lot3 = extraire.lot3;
																					extraction.surface_carrez_lot3 = extraire.surface_carrez_lot3;
																					extraction.lot4 = extraire.lot4;
																					extraction.surface_carrez_lot4 = extraire.surface_carrez_lot4;
																					extraction.lot5 = extraire.lot5;
																					extraction.surface_carrez_lot5 = extraire.surface_carrez_lot5;
																					extraction.nombre_lots = extraire.nombre_lots;
																					extraction.code_type_local = extraire.code_type_local;
																					extraction.type_local = extraire.type_local;
																					extraction.identifiant_local = extraire.identifiant_local;
																					extraction.surface_reelle_bati = extraire.surface_reelle_bati;
																					extraction.nombre_pieces_principales = extraire.nombre_pieces_principales;
																					extraction.nature_culture = extraire.nature_culture;
																					extraction.nature_culture_speciale = extraire.nature_culture_speciale;
																					extraction.surface_terrain = extraire.surface_terrain;
																					extraction.id_ligne = extraire.id_ligne;
																					row25 = new row25Struct();

																					row25.code_service_ch = extraire.code_service_ch;
																					row25.reference_document = extraire.reference_document;
																					row25.a_articles_cgi = extraire.a_articles_cgi;
																					row25.b_articles_cgi = extraire.b_articles_cgi;
																					row25.c_articles_cgi = extraire.c_articles_cgi;
																					row25.d_articles_cgi = extraire.d_articles_cgi;
																					row25.e_articles_cgi = extraire.e_articles_cgi;
																					row25.numero_disposition = extraire.numero_disposition;
																					row25.date_mutation = extraire.date_mutation;
																					row25.nature_mutation = extraire.nature_mutation;
																					row25.valeur_fonciere = extraire.valeur_fonciere;
																					row25.numero_voie = extraire.numero_voie;
																					row25.complement_numero_voie = extraire.complement_numero_voie;
																					row25.type_voie = extraire.type_voie;
																					row25.code_voie = extraire.code_voie;
																					row25.voie = extraire.voie;
																					row25.code_postal = extraire.code_postal;
																					row25.commune = extraire.commune;
																					row25.code_departement = extraire.code_departement;
																					row25.code_commune = extraire.code_commune;
																					row25.prefixe_section = extraire.prefixe_section;
																					row25.section = extraire.section;
																					row25.numero_plan = extraire.numero_plan;
																					row25.numero_volume = extraire.numero_volume;
																					row25.lot1 = extraire.lot1;
																					row25.surface_carrez_lot1 = extraire.surface_carrez_lot1;
																					row25.lot2 = extraire.lot2;
																					row25.surface_carrez_lot2 = extraire.surface_carrez_lot2;
																					row25.lot3 = extraire.lot3;
																					row25.surface_carrez_lot3 = extraire.surface_carrez_lot3;
																					row25.lot4 = extraire.lot4;
																					row25.surface_carrez_lot4 = extraire.surface_carrez_lot4;
																					row25.lot5 = extraire.lot5;
																					row25.surface_carrez_lot5 = extraire.surface_carrez_lot5;
																					row25.nombre_lots = extraire.nombre_lots;
																					row25.code_type_local = extraire.code_type_local;
																					row25.type_local = extraire.type_local;
																					row25.identifiant_local = extraire.identifiant_local;
																					row25.surface_reelle_bati = extraire.surface_reelle_bati;
																					row25.nombre_pieces_principales = extraire.nombre_pieces_principales;
																					row25.nature_culture = extraire.nature_culture;
																					row25.nature_culture_speciale = extraire.nature_culture_speciale;
																					row25.surface_terrain = extraire.surface_terrain;
																					row25.id_ligne = extraire.id_ligne;

																					tos_count_tReplicate_1++;

																					/**
																					 * [
																					 * tReplicate_1
																					 * main
																					 * ]
																					 * stop
																					 */

																					/**
																					 * [
																					 * tMap_1
																					 * main
																					 * ]
																					 * start
																					 */

																					currentComponent = "tMap_1";

																					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

																					// ###############################
																					// #
																					// Input
																					// tables
																					// (lookups)
																					boolean rejectedInnerJoin_tMap_1 = false;
																					boolean mainRowRejected_tMap_1 = false;

																					// /////////////////////////////////////////////
																					// Starting
																					// Lookup
																					// Table
																					// "nature_mutation"
																					// /////////////////////////////////////////////

																					boolean forceLoopnature_mutation = false;

																					nature_mutationStruct nature_mutationObjectFromLookup = null;

																					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

																						hasCasePrimitiveKeyWithNull_tMap_1 = false;

																						nature_mutationHashKey.lib_nature_mutation = extraction.nature_mutation;

																						nature_mutationHashKey.hashCodeDirty = true;

																						tHash_Lookup_nature_mutation
																								.lookup(nature_mutationHashKey);

																					} // G_TM_M_020

																					if (tHash_Lookup_nature_mutation != null
																							&& tHash_Lookup_nature_mutation
																									.getCount(nature_mutationHashKey) > 1) { // G
																																				// 071

																						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'nature_mutation' and it contains more one result from keys :  nature_mutation.lib_nature_mutation = '"
																						// +
																						// nature_mutationHashKey.lib_nature_mutation
																						// +
																						// "'");
																					} // G
																						// 071

																					nature_mutationStruct nature_mutation = null;

																					nature_mutationStruct fromLookup_nature_mutation = null;
																					nature_mutation = nature_mutationDefault;

																					if (tHash_Lookup_nature_mutation != null
																							&& tHash_Lookup_nature_mutation
																									.hasNext()) { // G
																													// 099

																						fromLookup_nature_mutation = tHash_Lookup_nature_mutation
																								.next();

																					} // G
																						// 099

																					if (fromLookup_nature_mutation != null) {
																						nature_mutation = fromLookup_nature_mutation;
																					}

																					// /////////////////////////////////////////////
																					// Starting
																					// Lookup
																					// Table
																					// "nature_culture"
																					// /////////////////////////////////////////////

																					boolean forceLoopnature_culture = false;

																					nature_cultureStruct nature_cultureObjectFromLookup = null;

																					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

																						hasCasePrimitiveKeyWithNull_tMap_1 = false;

																						nature_cultureHashKey.lib_nature_culture = extraction.nature_culture;

																						nature_cultureHashKey.hashCodeDirty = true;

																						tHash_Lookup_nature_culture
																								.lookup(nature_cultureHashKey);

																					} // G_TM_M_020

																					if (tHash_Lookup_nature_culture != null
																							&& tHash_Lookup_nature_culture
																									.getCount(nature_cultureHashKey) > 1) { // G
																																			// 071

																						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'nature_culture' and it contains more one result from keys :  nature_culture.lib_nature_culture = '"
																						// +
																						// nature_cultureHashKey.lib_nature_culture
																						// +
																						// "'");
																					} // G
																						// 071

																					nature_cultureStruct nature_culture = null;

																					nature_cultureStruct fromLookup_nature_culture = null;
																					nature_culture = nature_cultureDefault;

																					if (tHash_Lookup_nature_culture != null
																							&& tHash_Lookup_nature_culture
																									.hasNext()) { // G
																													// 099

																						fromLookup_nature_culture = tHash_Lookup_nature_culture
																								.next();

																					} // G
																						// 099

																					if (fromLookup_nature_culture != null) {
																						nature_culture = fromLookup_nature_culture;
																					}

																					// /////////////////////////////////////////////
																					// Starting
																					// Lookup
																					// Table
																					// "type_local"
																					// /////////////////////////////////////////////

																					boolean forceLooptype_local = false;

																					type_localStruct type_localObjectFromLookup = null;

																					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

																						hasCasePrimitiveKeyWithNull_tMap_1 = false;

																						type_localHashKey.type_local = extraction.type_local;

																						type_localHashKey.hashCodeDirty = true;

																						tHash_Lookup_type_local
																								.lookup(type_localHashKey);

																					} // G_TM_M_020

																					if (tHash_Lookup_type_local != null
																							&& tHash_Lookup_type_local
																									.getCount(type_localHashKey) > 1) { // G
																																		// 071

																						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'type_local' and it contains more one result from keys :  type_local.type_local = '"
																						// +
																						// type_localHashKey.type_local
																						// +
																						// "'");
																					} // G
																						// 071

																					type_localStruct type_local = null;

																					type_localStruct fromLookup_type_local = null;
																					type_local = type_localDefault;

																					if (tHash_Lookup_type_local != null
																							&& tHash_Lookup_type_local
																									.hasNext()) { // G
																													// 099

																						fromLookup_type_local = tHash_Lookup_type_local
																								.next();

																					} // G
																						// 099

																					if (fromLookup_type_local != null) {
																						type_local = fromLookup_type_local;
																					}

																					// /////////////////////////////////////////////
																					// Starting
																					// Lookup
																					// Table
																					// "nature_culture_speciale"
																					// /////////////////////////////////////////////

																					boolean forceLoopnature_culture_speciale = false;

																					nature_culture_specialeStruct nature_culture_specialeObjectFromLookup = null;

																					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

																						hasCasePrimitiveKeyWithNull_tMap_1 = false;

																						nature_culture_specialeHashKey.lib_nature_culture_speciale = extraction.nature_culture_speciale;

																						nature_culture_specialeHashKey.hashCodeDirty = true;

																						tHash_Lookup_nature_culture_speciale
																								.lookup(nature_culture_specialeHashKey);

																					} // G_TM_M_020

																					if (tHash_Lookup_nature_culture_speciale != null
																							&& tHash_Lookup_nature_culture_speciale
																									.getCount(nature_culture_specialeHashKey) > 1) { // G
																																						// 071

																						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'nature_culture_speciale' and it contains more one result from keys :  nature_culture_speciale.lib_nature_culture_speciale = '"
																						// +
																						// nature_culture_specialeHashKey.lib_nature_culture_speciale
																						// +
																						// "'");
																					} // G
																						// 071

																					nature_culture_specialeStruct nature_culture_speciale = null;

																					nature_culture_specialeStruct fromLookup_nature_culture_speciale = null;
																					nature_culture_speciale = nature_culture_specialeDefault;

																					if (tHash_Lookup_nature_culture_speciale != null
																							&& tHash_Lookup_nature_culture_speciale
																									.hasNext()) { // G
																													// 099

																						fromLookup_nature_culture_speciale = tHash_Lookup_nature_culture_speciale
																								.next();

																					} // G
																						// 099

																					if (fromLookup_nature_culture_speciale != null) {
																						nature_culture_speciale = fromLookup_nature_culture_speciale;
																					}

																					// ###############################
																					{ // start
																						// of
																						// Var
																						// scope

																						// ###############################
																						// #
																						// Vars
																						// tables

																						Var__tMap_1__Struct Var = Var__tMap_1;
																						Var.prefixe_section = StringHandling
																								.STR('0',
																										Math.max(
																												3 - StringHandling
																														.LEN(extraction.prefixe_section),
																												0))
																								+ extraction.prefixe_section;
																						Var.code_commune = StringHandling
																								.STR('0',
																										Math.max(
																												3 - StringHandling
																														.LEN(extraction.code_commune),
																												0))
																								+ extraction.code_commune;
																						Var.numero_plan = StringHandling
																								.STR('0',
																										Math.max(
																												4 - StringHandling
																														.LEN(extraction.numero_plan),
																												0))
																								+ extraction.numero_plan;
																						Var.idpar = extraction.code_departement
																								+ Var.code_commune
																								+ Var.prefixe_section
																								+ extraction.section
																								+ Var.numero_plan;
																						Var.id_mutation_temp = extraction.code_service_ch
																								+ extraction.reference_document
																								+ Var.code_commune;
																						Var.id_disposition_temp = Var.id_mutation_temp
																								+ extraction.numero_disposition;
																						Var.id_parcelle_temp = extraction.code_departement
																								+ Var.code_commune
																								+ Var.prefixe_section
																								+ extraction.section
																								+ Var.numero_plan;
																						Var.id_dispoparc_temp = Var.id_disposition_temp
																								+ Var.id_parcelle_temp;
																						Var.id_adresse_temp = !(Relational
																								.ISNULL(extraction.code_postal) || ("")
																								.equals(extraction.code_postal)) ? extraction.numero_voie
																								+ extraction.complement_numero_voie
																								+ extraction.type_voie
																								+ extraction.code_voie
																								+ extraction.voie
																								+ extraction.code_postal
																								+ extraction.commune
																								: null;
																						;
																						Var.id_volume_temp = !(Relational
																								.ISNULL(extraction.numero_volume) || ("")
																								.equals(extraction.numero_volume)) ? Var.id_dispoparc_temp
																								+ extraction.numero_volume
																								: null;
																						;
																						Var.id_local_temp = !(Relational
																								.ISNULL(extraction.identifiant_local) || ("")
																								.equals(extraction.identifiant_local)) ? Var.id_dispoparc_temp
																								+ extraction.identifiant_local
																								: null;
																						;
																						Var.id_suf_temp = !(
																						// Aucune
																						// surface
																						// n'est
																						// renseignée
																						(Relational
																								.ISNULL(extraction.surface_terrain)) ||
																						// nature
																						// culture
																						// et
																						// nature
																						// culture
																						// spéciale
																						// sont
																						// null
																						// ou
																						// vides
																						(Relational
																								.ISNULL(nature_culture.nature_culture) && Relational
																								.ISNULL(nature_culture_speciale.nature_culture_speciale))) ? Var.id_dispoparc_temp
																								+ extraction.id_ligne
																								: null;
																						;// ###############################
																						// ###############################
																						// #
																						// Output
																						// tables

																						mutation_article_cgi_non_normalise = null;
																						parcelle = null;
																						lots = null;
																						adresse = null;
																						mutation = null;
																						disposition = null;
																						disposition_parcelle = null;
																						adresse_dispoparc = null;
																						locaux = null;
																						volume = null;
																						suf = null;

																						// #
																						// Output
																						// table
																						// :
																						// 'mutation_article_cgi_non_normalise'
																						mutation_article_cgi_non_normalise_tmp.id_mutation_temp = Var.id_mutation_temp;
																						mutation_article_cgi_non_normalise_tmp.a_articles_cgi = extraction.a_articles_cgi;
																						mutation_article_cgi_non_normalise_tmp.b_articles_cgi = extraction.b_articles_cgi;
																						mutation_article_cgi_non_normalise_tmp.c_articles_cgi = extraction.c_articles_cgi;
																						mutation_article_cgi_non_normalise_tmp.d_articles_cgi = extraction.d_articles_cgi;
																						mutation_article_cgi_non_normalise_tmp.e_articles_cgi = extraction.e_articles_cgi;
																						mutation_article_cgi_non_normalise = mutation_article_cgi_non_normalise_tmp;

																						// #
																						// Output
																						// table
																						// :
																						// 'parcelle'
																						// #
																						// Filter
																						// conditions
																						if (

																						!(Relational
																								.ISNULL(Var.numero_plan) || ("")
																								.equals(Var.numero_plan))

																						) {
																							parcelle_tmp.id_parcelle = 0;
																							parcelle_tmp.idpar = Var.idpar;
																							parcelle_tmp.code_departement = extraction.code_departement;
																							parcelle_tmp.code_commune = Var.code_commune;
																							parcelle_tmp.prefixe_section = Var.prefixe_section;
																							parcelle_tmp.section = extraction.section;
																							parcelle_tmp.numero = Var.numero_plan;
																							parcelle_tmp.id_parcelle_temp = Var.id_parcelle_temp;
																							parcelle = parcelle_tmp;
																						} // closing
																							// filter/reject

																						// #
																						// Output
																						// table
																						// :
																						// 'lots'
																						lots_tmp.code_service_ch = extraction.code_service_ch;
																						lots_tmp.reference_document = extraction.reference_document;
																						lots_tmp.numero_disposition = extraction.numero_disposition;
																						lots_tmp.code_departement = extraction.code_departement;
																						lots_tmp.code_commune = Var.code_commune;
																						lots_tmp.prefixe_section = Var.prefixe_section;
																						lots_tmp.section = extraction.section;
																						lots_tmp.numero_plan = Var.numero_plan;
																						lots_tmp.identifiant_local = extraction.identifiant_local;
																						lots_tmp.nature_culture = nature_culture.nature_culture;
																						lots_tmp.nature_culture_speciale = nature_culture_speciale.nature_culture_speciale;
																						lots_tmp.surface_terrain = extraction.surface_terrain;
																						lots_tmp.lot1 = extraction.lot1;
																						lots_tmp.surface_carrez_lot1 = extraction.surface_carrez_lot1;
																						lots_tmp.lot2 = extraction.lot2;
																						lots_tmp.surface_carrez_lot2 = extraction.surface_carrez_lot2;
																						lots_tmp.lot3 = extraction.lot3;
																						lots_tmp.surface_carrez_lot3 = extraction.surface_carrez_lot3;
																						lots_tmp.lot4 = extraction.lot4;
																						lots_tmp.surface_carrez_lot4 = extraction.surface_carrez_lot4;
																						lots_tmp.lot5 = extraction.lot5;
																						lots_tmp.surface_carrez_lot5 = extraction.surface_carrez_lot5;
																						lots_tmp.id_suf_temp = Var.id_suf_temp;
																						lots_tmp.id_local_temp = Var.id_local_temp;
																						lots_tmp.id_volume_temp = Var.id_volume_temp;
																						lots_tmp.id_dispoparc_temp = Var.id_dispoparc_temp;
																						lots = lots_tmp;

																						// #
																						// Output
																						// table
																						// :
																						// 'adresse'
																						// #
																						// Filter
																						// conditions
																						if (

																						!(Relational
																								.ISNULL(Var.id_adresse_temp) || ("")
																								.equals(Var.id_adresse_temp))

																						) {
																							adresse_tmp.id_adresse = 0;
																							adresse_tmp.num_voie = extraction.numero_voie;
																							adresse_tmp.b_t_q = extraction.complement_numero_voie;
																							adresse_tmp.type_voie = extraction.type_voie;
																							adresse_tmp.code_voie = extraction.code_voie;
																							adresse_tmp.voie = extraction.voie;
																							adresse_tmp.code_postal = extraction.code_postal;
																							adresse_tmp.commune = extraction.commune;
																							adresse_tmp.id_adresse_temp = Var.id_adresse_temp;
																							adresse = adresse_tmp;
																						} // closing
																							// filter/reject

																						// #
																						// Output
																						// table
																						// :
																						// 'mutation'
																						mutation_tmp.id_mutation = 0;
																						mutation_tmp.code_service_ch = extraction.code_service_ch;
																						mutation_tmp.reference_document = extraction.reference_document;
																						mutation_tmp.code_insee = Var.code_commune;
																						mutation_tmp.date_mutation = extraction.date_mutation;
																						mutation_tmp.id_nature_mutation = nature_mutation.id_nature_mutation;
																						mutation_tmp.id_mutation_temp = Var.id_mutation_temp;
																						mutation = mutation_tmp;

																						// #
																						// Output
																						// table
																						// :
																						// 'disposition'
																						disposition_tmp.id_disposition = 0;
																						disposition_tmp.id_mutation = 0;
																						disposition_tmp.no_disposition = extraction.numero_disposition;
																						disposition_tmp.valeur_fonciere = extraction.valeur_fonciere;
																						disposition_tmp.id_disposition_temp = Var.id_disposition_temp;
																						disposition_tmp.id_mutation_temp = Var.id_mutation_temp;
																						disposition = disposition_tmp;

																						// #
																						// Output
																						// table
																						// :
																						// 'disposition_parcelle'
																						disposition_parcelle_tmp.id_dispoparc = 0;
																						disposition_parcelle_tmp.id_disposition = 0;
																						disposition_parcelle_tmp.id_parcelle = 0;
																						disposition_parcelle_tmp.nombre_de_lots = null;
																						disposition_parcelle_tmp.id_dispoparc_temp = Var.id_dispoparc_temp;
																						disposition_parcelle_tmp.id_disposition_temp = Var.id_disposition_temp;
																						disposition_parcelle_tmp.id_parcelle_temp = Var.id_parcelle_temp;
																						disposition_parcelle = disposition_parcelle_tmp;

																						// #
																						// Output
																						// table
																						// :
																						// 'adresse_dispoparc'
																						// #
																						// Filter
																						// conditions
																						if (

																						!(Relational
																								.ISNULL(Var.id_adresse_temp))

																						) {
																							adresse_dispoparc_tmp.id_adresse = 0;
																							adresse_dispoparc_tmp.id_dispoparc = 0;
																							adresse_dispoparc_tmp.id_adresse_temp = Var.id_adresse_temp;
																							adresse_dispoparc_tmp.id_dispoparc_temp = Var.id_dispoparc_temp;
																							adresse_dispoparc = adresse_dispoparc_tmp;
																						} // closing
																							// filter/reject

																						// #
																						// Output
																						// table
																						// :
																						// 'locaux'
																						// #
																						// Filter
																						// conditions
																						if (

																						!(Relational
																								.ISNULL(extraction.identifiant_local) || ("")
																								.equals(extraction.identifiant_local))

																						) {
																							locaux_tmp.id_local = 0;
																							locaux_tmp.id_dispoparc = 0;
																							locaux_tmp.identifiant_local = extraction.identifiant_local;
																							locaux_tmp.code_type_local = type_local.code_type_local;
																							locaux_tmp.surface_reelle_batie = extraction.surface_reelle_bati;
																							locaux_tmp.nb_pieces_principales = extraction.nombre_pieces_principales;
																							locaux_tmp.id_local_temp = Var.id_local_temp;
																							locaux_tmp.id_dispoparc_temp = Var.id_dispoparc_temp;
																							locaux = locaux_tmp;
																						} // closing
																							// filter/reject

																						// #
																						// Output
																						// table
																						// :
																						// 'volume'
																						// #
																						// Filter
																						// conditions
																						if (

																						!(Relational
																								.ISNULL(extraction.numero_volume) || ("")
																								.equals(extraction.numero_volume))

																						) {
																							volume_tmp.id_volume = 0;
																							volume_tmp.id_dispoparc = 0;
																							volume_tmp.no_volume = extraction.numero_volume;
																							volume_tmp.id_volume_temp = Var.id_volume_temp;
																							volume_tmp.id_dispoparc_temp = Var.id_dispoparc_temp;
																							volume = volume_tmp;
																						} // closing
																							// filter/reject

																						// #
																						// Output
																						// table
																						// :
																						// 'suf'
																						// #
																						// Filter
																						// conditions
																						if (

																						!(Relational
																								.ISNULL(Var.id_suf_temp))

																						) {
																							suf_tmp.id_suf = 0;
																							suf_tmp.id_dispoparc = 0;
																							suf_tmp.id_suf_cplmt = extraction.id_ligne;
																							suf_tmp.nature_culture = nature_culture.nature_culture;
																							suf_tmp.nature_culture_speciale = nature_culture_speciale.nature_culture_speciale;
																							suf_tmp.surface_terrain = extraction.surface_terrain;
																							suf_tmp.id_suf_temp = Var.id_suf_temp;
																							suf_tmp.id_dispoparc_temp = Var.id_dispoparc_temp;
																							suf = suf_tmp;
																						} // closing
																							// filter/reject
																							// ###############################

																					} // end
																						// of
																						// Var
																						// scope

																					rejectedInnerJoin_tMap_1 = false;

																					tos_count_tMap_1++;

																					/**
																					 * [
																					 * tMap_1
																					 * main
																					 * ]
																					 * stop
																					 */
																					// Start
																					// of
																					// branch
																					// "mutation_article_cgi_non_normalise"
																					if (mutation_article_cgi_non_normalise != null) {

																						/**
																						 * [
																						 * tUniqRow_4
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_4";

																						row6 = null;
																						if (mutation_article_cgi_non_normalise.id_mutation_temp == null) {
																							finder_tUniqRow_4.id_mutation_temp = null;
																						} else {
																							finder_tUniqRow_4.id_mutation_temp = mutation_article_cgi_non_normalise.id_mutation_temp
																									.toLowerCase();
																						}
																						if (mutation_article_cgi_non_normalise.a_articles_cgi == null) {
																							finder_tUniqRow_4.a_articles_cgi = null;
																						} else {
																							finder_tUniqRow_4.a_articles_cgi = mutation_article_cgi_non_normalise.a_articles_cgi
																									.toLowerCase();
																						}
																						if (mutation_article_cgi_non_normalise.b_articles_cgi == null) {
																							finder_tUniqRow_4.b_articles_cgi = null;
																						} else {
																							finder_tUniqRow_4.b_articles_cgi = mutation_article_cgi_non_normalise.b_articles_cgi
																									.toLowerCase();
																						}
																						if (mutation_article_cgi_non_normalise.c_articles_cgi == null) {
																							finder_tUniqRow_4.c_articles_cgi = null;
																						} else {
																							finder_tUniqRow_4.c_articles_cgi = mutation_article_cgi_non_normalise.c_articles_cgi
																									.toLowerCase();
																						}
																						if (mutation_article_cgi_non_normalise.d_articles_cgi == null) {
																							finder_tUniqRow_4.d_articles_cgi = null;
																						} else {
																							finder_tUniqRow_4.d_articles_cgi = mutation_article_cgi_non_normalise.d_articles_cgi
																									.toLowerCase();
																						}
																						if (mutation_article_cgi_non_normalise.e_articles_cgi == null) {
																							finder_tUniqRow_4.e_articles_cgi = null;
																						} else {
																							finder_tUniqRow_4.e_articles_cgi = mutation_article_cgi_non_normalise.e_articles_cgi
																									.toLowerCase();
																						}
																						finder_tUniqRow_4.hashCodeDirty = true;
																						if (!keystUniqRow_4
																								.contains(finder_tUniqRow_4)) {
																							KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

																							if (mutation_article_cgi_non_normalise.id_mutation_temp == null) {
																								new_tUniqRow_4.id_mutation_temp = null;
																							} else {
																								new_tUniqRow_4.id_mutation_temp = mutation_article_cgi_non_normalise.id_mutation_temp
																										.toLowerCase();
																							}
																							if (mutation_article_cgi_non_normalise.a_articles_cgi == null) {
																								new_tUniqRow_4.a_articles_cgi = null;
																							} else {
																								new_tUniqRow_4.a_articles_cgi = mutation_article_cgi_non_normalise.a_articles_cgi
																										.toLowerCase();
																							}
																							if (mutation_article_cgi_non_normalise.b_articles_cgi == null) {
																								new_tUniqRow_4.b_articles_cgi = null;
																							} else {
																								new_tUniqRow_4.b_articles_cgi = mutation_article_cgi_non_normalise.b_articles_cgi
																										.toLowerCase();
																							}
																							if (mutation_article_cgi_non_normalise.c_articles_cgi == null) {
																								new_tUniqRow_4.c_articles_cgi = null;
																							} else {
																								new_tUniqRow_4.c_articles_cgi = mutation_article_cgi_non_normalise.c_articles_cgi
																										.toLowerCase();
																							}
																							if (mutation_article_cgi_non_normalise.d_articles_cgi == null) {
																								new_tUniqRow_4.d_articles_cgi = null;
																							} else {
																								new_tUniqRow_4.d_articles_cgi = mutation_article_cgi_non_normalise.d_articles_cgi
																										.toLowerCase();
																							}
																							if (mutation_article_cgi_non_normalise.e_articles_cgi == null) {
																								new_tUniqRow_4.e_articles_cgi = null;
																							} else {
																								new_tUniqRow_4.e_articles_cgi = mutation_article_cgi_non_normalise.e_articles_cgi
																										.toLowerCase();
																							}

																							keystUniqRow_4
																									.add(new_tUniqRow_4);
																							if (row6 == null) {
																								row6 = new row6Struct();
																							}
																							row6.id_mutation_temp = mutation_article_cgi_non_normalise.id_mutation_temp;
																							row6.a_articles_cgi = mutation_article_cgi_non_normalise.a_articles_cgi;
																							row6.b_articles_cgi = mutation_article_cgi_non_normalise.b_articles_cgi;
																							row6.c_articles_cgi = mutation_article_cgi_non_normalise.c_articles_cgi;
																							row6.d_articles_cgi = mutation_article_cgi_non_normalise.d_articles_cgi;
																							row6.e_articles_cgi = mutation_article_cgi_non_normalise.e_articles_cgi;
																							nb_uniques_tUniqRow_4++;
																						} else {
																							nb_duplicates_tUniqRow_4++;
																						}

																						tos_count_tUniqRow_4++;

																						/**
																						 * [
																						 * tUniqRow_4
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row6"
																						if (row6 != null) {

																							/**
																							 * [
																							 * tSplitRow_1
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tSplitRow_1";

																							java.util.List<row17Struct> rows_tSplitRow_1 = new java.util.ArrayList<row17Struct>(
																									5);
																							row17Struct rowTmp_tSplitRow_1 = null;

																							// cache
																							// output
																							// rows
																							// for
																							// the
																							// loop
																							rowTmp_tSplitRow_1 = new row17Struct();

																							rowTmp_tSplitRow_1.article_cgi = row6.a_articles_cgi;
																							rowTmp_tSplitRow_1.ordre_article_cgi = 1;
																							rowTmp_tSplitRow_1.id_mutation_temp = row6.id_mutation_temp;
																							rows_tSplitRow_1
																									.add(rowTmp_tSplitRow_1);
																							nb_line_tSplitRow_1++;
																							rowTmp_tSplitRow_1 = new row17Struct();

																							rowTmp_tSplitRow_1.article_cgi = row6.b_articles_cgi;
																							rowTmp_tSplitRow_1.ordre_article_cgi = 2;
																							rowTmp_tSplitRow_1.id_mutation_temp = row6.id_mutation_temp;
																							rows_tSplitRow_1
																									.add(rowTmp_tSplitRow_1);
																							nb_line_tSplitRow_1++;
																							rowTmp_tSplitRow_1 = new row17Struct();

																							rowTmp_tSplitRow_1.article_cgi = row6.c_articles_cgi;
																							rowTmp_tSplitRow_1.ordre_article_cgi = 3;
																							rowTmp_tSplitRow_1.id_mutation_temp = row6.id_mutation_temp;
																							rows_tSplitRow_1
																									.add(rowTmp_tSplitRow_1);
																							nb_line_tSplitRow_1++;
																							rowTmp_tSplitRow_1 = new row17Struct();

																							rowTmp_tSplitRow_1.article_cgi = row6.d_articles_cgi;
																							rowTmp_tSplitRow_1.ordre_article_cgi = 4;
																							rowTmp_tSplitRow_1.id_mutation_temp = row6.id_mutation_temp;
																							rows_tSplitRow_1
																									.add(rowTmp_tSplitRow_1);
																							nb_line_tSplitRow_1++;
																							rowTmp_tSplitRow_1 = new row17Struct();

																							rowTmp_tSplitRow_1.article_cgi = row6.e_articles_cgi;
																							rowTmp_tSplitRow_1.ordre_article_cgi = 5;
																							rowTmp_tSplitRow_1.id_mutation_temp = row6.id_mutation_temp;
																							rows_tSplitRow_1
																									.add(rowTmp_tSplitRow_1);
																							nb_line_tSplitRow_1++;

																							for (row17Struct row_tSplitRow_1 : rows_tSplitRow_1) {// C_01
																								row17 = row_tSplitRow_1;

																								tos_count_tSplitRow_1++;

																								/**
																								 * [
																								 * tSplitRow_1
																								 * main
																								 * ]
																								 * stop
																								 */
																								// Start
																								// of
																								// branch
																								// "row17"
																								if (row17 != null) {

																									/**
																									 * [
																									 * tFilterRow_1
																									 * main
																									 * ]
																									 * start
																									 */

																									currentComponent = "tFilterRow_1";

																									row18 = null;
																									Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
																											"&&");
																									ope_tFilterRow_1
																											.matches(
																													(// code
																														// sample
																														// :
																														// use
																														// row17
																														// to
																														// define
																														// the
																														// condition.
																													// row17.columnName1.equals("foo")
																													// ||!(row17.columnName2.equals("bar"))
																													// replace
																													// the
																													// following
																													// expression
																													// by
																													// your
																													// own
																													// filter
																													// condition
																													!(Relational
																															.ISNULL(row17.article_cgi) || ("")
																															.equals(row17.article_cgi))),
																													"advanced condition failed");

																									if (ope_tFilterRow_1
																											.getMatchFlag()) {
																										if (row18 == null) {
																											row18 = new row18Struct();
																										}
																										row18.article_cgi = row17.article_cgi;
																										row18.ordre_article_cgi = row17.ordre_article_cgi;
																										row18.id_mutation_temp = row17.id_mutation_temp;
																										nb_line_ok_tFilterRow_1++;
																									} else {
																										nb_line_reject_tFilterRow_1++;
																									}

																									nb_line_tFilterRow_1++;

																									tos_count_tFilterRow_1++;

																									/**
																									 * [
																									 * tFilterRow_1
																									 * main
																									 * ]
																									 * stop
																									 */
																									// Start
																									// of
																									// branch
																									// "row18"
																									if (row18 != null) {

																										/**
																										 * [
																										 * tUniqRow_15
																										 * main
																										 * ]
																										 * start
																										 */

																										currentComponent = "tUniqRow_15";

																										row19 = null;
																										row22 = null;
																										if (row18.article_cgi == null) {
																											finder_tUniqRow_15.article_cgi = null;
																										} else {
																											finder_tUniqRow_15.article_cgi = row18.article_cgi
																													.toLowerCase();
																										}
																										if (row18.id_mutation_temp == null) {
																											finder_tUniqRow_15.id_mutation_temp = null;
																										} else {
																											finder_tUniqRow_15.id_mutation_temp = row18.id_mutation_temp
																													.toLowerCase();
																										}
																										finder_tUniqRow_15.hashCodeDirty = true;
																										if (!keystUniqRow_15
																												.contains(finder_tUniqRow_15)) {
																											KeyStruct_tUniqRow_15 new_tUniqRow_15 = new KeyStruct_tUniqRow_15();

																											if (row18.article_cgi == null) {
																												new_tUniqRow_15.article_cgi = null;
																											} else {
																												new_tUniqRow_15.article_cgi = row18.article_cgi
																														.toLowerCase();
																											}
																											if (row18.id_mutation_temp == null) {
																												new_tUniqRow_15.id_mutation_temp = null;
																											} else {
																												new_tUniqRow_15.id_mutation_temp = row18.id_mutation_temp
																														.toLowerCase();
																											}

																											keystUniqRow_15
																													.add(new_tUniqRow_15);
																											if (row19 == null) {
																												row19 = new row19Struct();
																											}
																											row19.article_cgi = row18.article_cgi;
																											row19.ordre_article_cgi = row18.ordre_article_cgi;
																											row19.id_mutation_temp = row18.id_mutation_temp;
																											nb_uniques_tUniqRow_15++;
																										} else {
																											if (row22 == null) {
																												row22 = new row22Struct();
																											}
																											row22.article_cgi = row18.article_cgi;
																											row22.ordre_article_cgi = row18.ordre_article_cgi;
																											row22.id_mutation_temp = row18.id_mutation_temp;
																											nb_duplicates_tUniqRow_15++;
																										}

																										tos_count_tUniqRow_15++;

																										/**
																										 * [
																										 * tUniqRow_15
																										 * main
																										 * ]
																										 * stop
																										 */
																										// Start
																										// of
																										// branch
																										// "row19"
																										if (row19 != null) {

																											/**
																											 * [
																											 * tMap_4
																											 * main
																											 * ]
																											 * start
																											 */

																											currentComponent = "tMap_4";

																											boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

																											// ###############################
																											// #
																											// Input
																											// tables
																											// (lookups)
																											boolean rejectedInnerJoin_tMap_4 = false;
																											boolean mainRowRejected_tMap_4 = false;

																											// /////////////////////////////////////////////
																											// Starting
																											// Lookup
																											// Table
																											// "article_cgi"
																											// /////////////////////////////////////////////

																											boolean forceLooparticle_cgi = false;

																											article_cgiStruct article_cgiObjectFromLookup = null;

																											if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

																												hasCasePrimitiveKeyWithNull_tMap_4 = false;

																												article_cgiHashKey.code_article_cgi = row19.article_cgi;

																												article_cgiHashKey.hashCodeDirty = true;

																												tHash_Lookup_article_cgi
																														.lookup(article_cgiHashKey);

																											} // G_TM_M_020

																											if (tHash_Lookup_article_cgi != null
																													&& tHash_Lookup_article_cgi
																															.getCount(article_cgiHashKey) > 1) { // G
																																									// 071

																												// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'article_cgi' and it contains more one result from keys :  article_cgi.code_article_cgi = '"
																												// +
																												// article_cgiHashKey.code_article_cgi
																												// +
																												// "'");
																											} // G
																												// 071

																											article_cgiStruct article_cgi = null;

																											article_cgiStruct fromLookup_article_cgi = null;
																											article_cgi = article_cgiDefault;

																											if (tHash_Lookup_article_cgi != null
																													&& tHash_Lookup_article_cgi
																															.hasNext()) { // G
																																			// 099

																												fromLookup_article_cgi = tHash_Lookup_article_cgi
																														.next();

																											} // G
																												// 099

																											if (fromLookup_article_cgi != null) {
																												article_cgi = fromLookup_article_cgi;
																											}

																											// ###############################
																											{ // start
																												// of
																												// Var
																												// scope

																												// ###############################
																												// #
																												// Vars
																												// tables

																												Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
																												// ###############################
																												// #
																												// Output
																												// tables

																												avec_id_article_cgi = null;

																												// #
																												// Output
																												// table
																												// :
																												// 'avec_id_article_cgi'
																												avec_id_article_cgi_tmp.id_mutation = null;
																												avec_id_article_cgi_tmp.id_article_cgi = article_cgi.id_article_cgi;
																												avec_id_article_cgi_tmp.ordre_article_cgi = row19.ordre_article_cgi;
																												avec_id_article_cgi_tmp.id_mutation_temp = row19.id_mutation_temp;
																												avec_id_article_cgi = avec_id_article_cgi_tmp;
																												// ###############################

																											} // end
																												// of
																												// Var
																												// scope

																											rejectedInnerJoin_tMap_4 = false;

																											tos_count_tMap_4++;

																											/**
																											 * [
																											 * tMap_4
																											 * main
																											 * ]
																											 * stop
																											 */
																											// Start
																											// of
																											// branch
																											// "avec_id_article_cgi"
																											if (avec_id_article_cgi != null) {

																												/**
																												 * [
																												 * tFileOutputDelimited_2
																												 * main
																												 * ]
																												 * start
																												 */

																												currentComponent = "tFileOutputDelimited_2";

																												String[] rowtFileOutputDelimited_2 = new String[4];

																												rowtFileOutputDelimited_2[0] = avec_id_article_cgi.id_mutation == null ? ""
																														: String.valueOf(avec_id_article_cgi.id_mutation);

																												rowtFileOutputDelimited_2[1] = String
																														.valueOf(avec_id_article_cgi.id_article_cgi);

																												rowtFileOutputDelimited_2[2] = String
																														.valueOf(avec_id_article_cgi.ordre_article_cgi);

																												rowtFileOutputDelimited_2[3] = avec_id_article_cgi.id_mutation_temp == null ? ""
																														: avec_id_article_cgi.id_mutation_temp;

																												nb_line_tFileOutputDelimited_2++;
																												CsvWritertFileOutputDelimited_2
																														.writeNext(rowtFileOutputDelimited_2);

																												tos_count_tFileOutputDelimited_2++;

																												/**
																												 * [
																												 * tFileOutputDelimited_2
																												 * main
																												 * ]
																												 * stop
																												 */

																											} // End
																												// of
																												// branch
																												// "avec_id_article_cgi"

																										} // End
																											// of
																											// branch
																											// "row19"

																										// Start
																										// of
																										// branch
																										// "row22"
																										if (row22 != null) {

																											/**
																											 * [
																											 * tFileOutputDelimited_21
																											 * main
																											 * ]
																											 * start
																											 */

																											currentComponent = "tFileOutputDelimited_21";

																											String[] rowtFileOutputDelimited_21 = new String[3];

																											rowtFileOutputDelimited_21[0] = row22.article_cgi == null ? ""
																													: row22.article_cgi;

																											rowtFileOutputDelimited_21[1] = String
																													.valueOf(row22.ordre_article_cgi);

																											rowtFileOutputDelimited_21[2] = row22.id_mutation_temp == null ? ""
																													: row22.id_mutation_temp;

																											nb_line_tFileOutputDelimited_21++;
																											CsvWritertFileOutputDelimited_21
																													.writeNext(rowtFileOutputDelimited_21);

																											tos_count_tFileOutputDelimited_21++;

																											/**
																											 * [
																											 * tFileOutputDelimited_21
																											 * main
																											 * ]
																											 * stop
																											 */

																										} // End
																											// of
																											// branch
																											// "row22"

																									} // End
																										// of
																										// branch
																										// "row18"

																								} // End
																									// of
																									// branch
																									// "row17"

																							} // C_01

																						} // End
																							// of
																							// branch
																							// "row6"

																					} // End
																						// of
																						// branch
																						// "mutation_article_cgi_non_normalise"

																					// Start
																					// of
																					// branch
																					// "parcelle"
																					if (parcelle != null) {

																						/**
																						 * [
																						 * tUniqRow_6
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_6";

																						row8 = null;
																						if (parcelle.idpar == null) {
																							finder_tUniqRow_6.idpar = null;
																						} else {
																							finder_tUniqRow_6.idpar = parcelle.idpar
																									.toLowerCase();
																						}
																						finder_tUniqRow_6.hashCodeDirty = true;
																						if (!keystUniqRow_6
																								.contains(finder_tUniqRow_6)) {
																							KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

																							if (parcelle.idpar == null) {
																								new_tUniqRow_6.idpar = null;
																							} else {
																								new_tUniqRow_6.idpar = parcelle.idpar
																										.toLowerCase();
																							}

																							keystUniqRow_6
																									.add(new_tUniqRow_6);
																							if (row8 == null) {
																								row8 = new row8Struct();
																							}
																							row8.id_parcelle = parcelle.id_parcelle;
																							row8.idpar = parcelle.idpar;
																							row8.code_departement = parcelle.code_departement;
																							row8.code_commune = parcelle.code_commune;
																							row8.prefixe_section = parcelle.prefixe_section;
																							row8.section = parcelle.section;
																							row8.numero = parcelle.numero;
																							row8.id_parcelle_temp = parcelle.id_parcelle_temp;
																							nb_uniques_tUniqRow_6++;
																						} else {
																							nb_duplicates_tUniqRow_6++;
																						}

																						tos_count_tUniqRow_6++;

																						/**
																						 * [
																						 * tUniqRow_6
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row8"
																						if (row8 != null) {

																							/**
																							 * [
																							 * tSortRow_1_SortOut
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tSortRow_1_SortOut";

																							Comparablerow8Struct arrayRowtSortRow_1_SortOut = new Comparablerow8Struct();

																							arrayRowtSortRow_1_SortOut.id_parcelle = row8.id_parcelle;
																							arrayRowtSortRow_1_SortOut.idpar = row8.idpar;
																							arrayRowtSortRow_1_SortOut.code_departement = row8.code_departement;
																							arrayRowtSortRow_1_SortOut.code_commune = row8.code_commune;
																							arrayRowtSortRow_1_SortOut.prefixe_section = row8.prefixe_section;
																							arrayRowtSortRow_1_SortOut.section = row8.section;
																							arrayRowtSortRow_1_SortOut.numero = row8.numero;
																							arrayRowtSortRow_1_SortOut.id_parcelle_temp = row8.id_parcelle_temp;
																							list_tSortRow_1_SortOut
																									.add(arrayRowtSortRow_1_SortOut);

																							tos_count_tSortRow_1_SortOut++;

																							/**
																							 * [
																							 * tSortRow_1_SortOut
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row8"

																					} // End
																						// of
																						// branch
																						// "parcelle"

																					// Start
																					// of
																					// branch
																					// "lots"
																					if (lots != null) {

																						/**
																						 * [
																						 * tUniqRow_10
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_10";

																						lots_u = null;
																						if (lots.code_service_ch == null) {
																							finder_tUniqRow_10.code_service_ch = null;
																						} else {
																							finder_tUniqRow_10.code_service_ch = lots.code_service_ch
																									.toLowerCase();
																						}
																						if (lots.reference_document == null) {
																							finder_tUniqRow_10.reference_document = null;
																						} else {
																							finder_tUniqRow_10.reference_document = lots.reference_document
																									.toLowerCase();
																						}
																						finder_tUniqRow_10.numero_disposition = lots.numero_disposition;
																						if (lots.code_departement == null) {
																							finder_tUniqRow_10.code_departement = null;
																						} else {
																							finder_tUniqRow_10.code_departement = lots.code_departement
																									.toLowerCase();
																						}
																						if (lots.code_commune == null) {
																							finder_tUniqRow_10.code_commune = null;
																						} else {
																							finder_tUniqRow_10.code_commune = lots.code_commune
																									.toLowerCase();
																						}
																						if (lots.prefixe_section == null) {
																							finder_tUniqRow_10.prefixe_section = null;
																						} else {
																							finder_tUniqRow_10.prefixe_section = lots.prefixe_section
																									.toLowerCase();
																						}
																						if (lots.section == null) {
																							finder_tUniqRow_10.section = null;
																						} else {
																							finder_tUniqRow_10.section = lots.section
																									.toLowerCase();
																						}
																						if (lots.numero_plan == null) {
																							finder_tUniqRow_10.numero_plan = null;
																						} else {
																							finder_tUniqRow_10.numero_plan = lots.numero_plan
																									.toLowerCase();
																						}
																						if (lots.identifiant_local == null) {
																							finder_tUniqRow_10.identifiant_local = null;
																						} else {
																							finder_tUniqRow_10.identifiant_local = lots.identifiant_local
																									.toLowerCase();
																						}
																						finder_tUniqRow_10.nature_culture = lots.nature_culture;
																						finder_tUniqRow_10.nature_culture_speciale = lots.nature_culture_speciale;
																						finder_tUniqRow_10.surface_terrain = lots.surface_terrain;
																						if (lots.lot1 == null) {
																							finder_tUniqRow_10.lot1 = null;
																						} else {
																							finder_tUniqRow_10.lot1 = lots.lot1
																									.toLowerCase();
																						}
																						finder_tUniqRow_10.surface_carrez_lot1 = lots.surface_carrez_lot1;
																						if (lots.lot2 == null) {
																							finder_tUniqRow_10.lot2 = null;
																						} else {
																							finder_tUniqRow_10.lot2 = lots.lot2
																									.toLowerCase();
																						}
																						finder_tUniqRow_10.surface_carrez_lot2 = lots.surface_carrez_lot2;
																						if (lots.lot3 == null) {
																							finder_tUniqRow_10.lot3 = null;
																						} else {
																							finder_tUniqRow_10.lot3 = lots.lot3
																									.toLowerCase();
																						}
																						finder_tUniqRow_10.surface_carrez_lot3 = lots.surface_carrez_lot3;
																						if (lots.lot4 == null) {
																							finder_tUniqRow_10.lot4 = null;
																						} else {
																							finder_tUniqRow_10.lot4 = lots.lot4
																									.toLowerCase();
																						}
																						finder_tUniqRow_10.surface_carrez_lot4 = lots.surface_carrez_lot4;
																						if (lots.lot5 == null) {
																							finder_tUniqRow_10.lot5 = null;
																						} else {
																							finder_tUniqRow_10.lot5 = lots.lot5
																									.toLowerCase();
																						}
																						finder_tUniqRow_10.surface_carrez_lot5 = lots.surface_carrez_lot5;
																						if (lots.id_suf_temp == null) {
																							finder_tUniqRow_10.id_suf_temp = null;
																						} else {
																							finder_tUniqRow_10.id_suf_temp = lots.id_suf_temp
																									.toLowerCase();
																						}
																						if (lots.id_local_temp == null) {
																							finder_tUniqRow_10.id_local_temp = null;
																						} else {
																							finder_tUniqRow_10.id_local_temp = lots.id_local_temp
																									.toLowerCase();
																						}
																						if (lots.id_volume_temp == null) {
																							finder_tUniqRow_10.id_volume_temp = null;
																						} else {
																							finder_tUniqRow_10.id_volume_temp = lots.id_volume_temp
																									.toLowerCase();
																						}
																						if (lots.id_dispoparc_temp == null) {
																							finder_tUniqRow_10.id_dispoparc_temp = null;
																						} else {
																							finder_tUniqRow_10.id_dispoparc_temp = lots.id_dispoparc_temp
																									.toLowerCase();
																						}
																						finder_tUniqRow_10.hashCodeDirty = true;
																						if (!keystUniqRow_10
																								.contains(finder_tUniqRow_10)) {
																							KeyStruct_tUniqRow_10 new_tUniqRow_10 = new KeyStruct_tUniqRow_10();

																							if (lots.code_service_ch == null) {
																								new_tUniqRow_10.code_service_ch = null;
																							} else {
																								new_tUniqRow_10.code_service_ch = lots.code_service_ch
																										.toLowerCase();
																							}
																							if (lots.reference_document == null) {
																								new_tUniqRow_10.reference_document = null;
																							} else {
																								new_tUniqRow_10.reference_document = lots.reference_document
																										.toLowerCase();
																							}
																							new_tUniqRow_10.numero_disposition = lots.numero_disposition;
																							if (lots.code_departement == null) {
																								new_tUniqRow_10.code_departement = null;
																							} else {
																								new_tUniqRow_10.code_departement = lots.code_departement
																										.toLowerCase();
																							}
																							if (lots.code_commune == null) {
																								new_tUniqRow_10.code_commune = null;
																							} else {
																								new_tUniqRow_10.code_commune = lots.code_commune
																										.toLowerCase();
																							}
																							if (lots.prefixe_section == null) {
																								new_tUniqRow_10.prefixe_section = null;
																							} else {
																								new_tUniqRow_10.prefixe_section = lots.prefixe_section
																										.toLowerCase();
																							}
																							if (lots.section == null) {
																								new_tUniqRow_10.section = null;
																							} else {
																								new_tUniqRow_10.section = lots.section
																										.toLowerCase();
																							}
																							if (lots.numero_plan == null) {
																								new_tUniqRow_10.numero_plan = null;
																							} else {
																								new_tUniqRow_10.numero_plan = lots.numero_plan
																										.toLowerCase();
																							}
																							if (lots.identifiant_local == null) {
																								new_tUniqRow_10.identifiant_local = null;
																							} else {
																								new_tUniqRow_10.identifiant_local = lots.identifiant_local
																										.toLowerCase();
																							}
																							new_tUniqRow_10.nature_culture = lots.nature_culture;
																							new_tUniqRow_10.nature_culture_speciale = lots.nature_culture_speciale;
																							new_tUniqRow_10.surface_terrain = lots.surface_terrain;
																							if (lots.lot1 == null) {
																								new_tUniqRow_10.lot1 = null;
																							} else {
																								new_tUniqRow_10.lot1 = lots.lot1
																										.toLowerCase();
																							}
																							new_tUniqRow_10.surface_carrez_lot1 = lots.surface_carrez_lot1;
																							if (lots.lot2 == null) {
																								new_tUniqRow_10.lot2 = null;
																							} else {
																								new_tUniqRow_10.lot2 = lots.lot2
																										.toLowerCase();
																							}
																							new_tUniqRow_10.surface_carrez_lot2 = lots.surface_carrez_lot2;
																							if (lots.lot3 == null) {
																								new_tUniqRow_10.lot3 = null;
																							} else {
																								new_tUniqRow_10.lot3 = lots.lot3
																										.toLowerCase();
																							}
																							new_tUniqRow_10.surface_carrez_lot3 = lots.surface_carrez_lot3;
																							if (lots.lot4 == null) {
																								new_tUniqRow_10.lot4 = null;
																							} else {
																								new_tUniqRow_10.lot4 = lots.lot4
																										.toLowerCase();
																							}
																							new_tUniqRow_10.surface_carrez_lot4 = lots.surface_carrez_lot4;
																							if (lots.lot5 == null) {
																								new_tUniqRow_10.lot5 = null;
																							} else {
																								new_tUniqRow_10.lot5 = lots.lot5
																										.toLowerCase();
																							}
																							new_tUniqRow_10.surface_carrez_lot5 = lots.surface_carrez_lot5;
																							if (lots.id_suf_temp == null) {
																								new_tUniqRow_10.id_suf_temp = null;
																							} else {
																								new_tUniqRow_10.id_suf_temp = lots.id_suf_temp
																										.toLowerCase();
																							}
																							if (lots.id_local_temp == null) {
																								new_tUniqRow_10.id_local_temp = null;
																							} else {
																								new_tUniqRow_10.id_local_temp = lots.id_local_temp
																										.toLowerCase();
																							}
																							if (lots.id_volume_temp == null) {
																								new_tUniqRow_10.id_volume_temp = null;
																							} else {
																								new_tUniqRow_10.id_volume_temp = lots.id_volume_temp
																										.toLowerCase();
																							}
																							if (lots.id_dispoparc_temp == null) {
																								new_tUniqRow_10.id_dispoparc_temp = null;
																							} else {
																								new_tUniqRow_10.id_dispoparc_temp = lots.id_dispoparc_temp
																										.toLowerCase();
																							}

																							keystUniqRow_10
																									.add(new_tUniqRow_10);
																							if (lots_u == null) {
																								lots_u = new lots_uStruct();
																							}
																							lots_u.code_service_ch = lots.code_service_ch;
																							lots_u.reference_document = lots.reference_document;
																							lots_u.numero_disposition = lots.numero_disposition;
																							lots_u.code_departement = lots.code_departement;
																							lots_u.code_commune = lots.code_commune;
																							lots_u.prefixe_section = lots.prefixe_section;
																							lots_u.section = lots.section;
																							lots_u.numero_plan = lots.numero_plan;
																							lots_u.identifiant_local = lots.identifiant_local;
																							lots_u.nature_culture = lots.nature_culture;
																							lots_u.nature_culture_speciale = lots.nature_culture_speciale;
																							lots_u.surface_terrain = lots.surface_terrain;
																							lots_u.lot1 = lots.lot1;
																							lots_u.surface_carrez_lot1 = lots.surface_carrez_lot1;
																							lots_u.lot2 = lots.lot2;
																							lots_u.surface_carrez_lot2 = lots.surface_carrez_lot2;
																							lots_u.lot3 = lots.lot3;
																							lots_u.surface_carrez_lot3 = lots.surface_carrez_lot3;
																							lots_u.lot4 = lots.lot4;
																							lots_u.surface_carrez_lot4 = lots.surface_carrez_lot4;
																							lots_u.lot5 = lots.lot5;
																							lots_u.surface_carrez_lot5 = lots.surface_carrez_lot5;
																							lots_u.id_suf_temp = lots.id_suf_temp;
																							lots_u.id_local_temp = lots.id_local_temp;
																							lots_u.id_volume_temp = lots.id_volume_temp;
																							lots_u.id_dispoparc_temp = lots.id_dispoparc_temp;
																							nb_uniques_tUniqRow_10++;
																						} else {
																							nb_duplicates_tUniqRow_10++;
																						}

																						tos_count_tUniqRow_10++;

																						/**
																						 * [
																						 * tUniqRow_10
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "lots_u"
																						if (lots_u != null) {

																							/**
																							 * [
																							 * tSplitRow_2
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tSplitRow_2";

																							java.util.List<row16Struct> rows_tSplitRow_2 = new java.util.ArrayList<row16Struct>(
																									5);
																							row16Struct rowTmp_tSplitRow_2 = null;

																							// cache
																							// output
																							// rows
																							// for
																							// the
																							// loop
																							rowTmp_tSplitRow_2 = new row16Struct();

																							rowTmp_tSplitRow_2.id_lot = 0;
																							rowTmp_tSplitRow_2.id_dispoparc = 0;
																							rowTmp_tSplitRow_2.id_local = 0;
																							rowTmp_tSplitRow_2.id_volume = 0;
																							rowTmp_tSplitRow_2.no_lot = lots_u.lot1;
																							rowTmp_tSplitRow_2.surface_carrez = lots_u.surface_carrez_lot1;
																							rowTmp_tSplitRow_2.id_lot_temp = lots_u.id_dispoparc_temp
																									+ lots_u.lot1;
																							rowTmp_tSplitRow_2.id_dispoparc_temp = lots_u.id_dispoparc_temp;
																							rowTmp_tSplitRow_2.id_local_temp = lots_u.id_local_temp;
																							rowTmp_tSplitRow_2.id_volume_temp = lots_u.id_volume_temp;
																							rows_tSplitRow_2
																									.add(rowTmp_tSplitRow_2);
																							nb_line_tSplitRow_2++;
																							rowTmp_tSplitRow_2 = new row16Struct();

																							rowTmp_tSplitRow_2.id_lot = 0;
																							rowTmp_tSplitRow_2.id_dispoparc = 0;
																							rowTmp_tSplitRow_2.id_local = 0;
																							rowTmp_tSplitRow_2.id_volume = 0;
																							rowTmp_tSplitRow_2.no_lot = lots_u.lot2;
																							rowTmp_tSplitRow_2.surface_carrez = lots_u.surface_carrez_lot2;
																							rowTmp_tSplitRow_2.id_lot_temp = lots_u.id_dispoparc_temp
																									+ lots_u.lot2;
																							rowTmp_tSplitRow_2.id_dispoparc_temp = lots_u.id_dispoparc_temp;
																							rowTmp_tSplitRow_2.id_local_temp = lots_u.id_local_temp;
																							rowTmp_tSplitRow_2.id_volume_temp = lots_u.id_volume_temp;
																							rows_tSplitRow_2
																									.add(rowTmp_tSplitRow_2);
																							nb_line_tSplitRow_2++;
																							rowTmp_tSplitRow_2 = new row16Struct();

																							rowTmp_tSplitRow_2.id_lot = 0;
																							rowTmp_tSplitRow_2.id_dispoparc = 0;
																							rowTmp_tSplitRow_2.id_local = 0;
																							rowTmp_tSplitRow_2.id_volume = 0;
																							rowTmp_tSplitRow_2.no_lot = lots_u.lot3;
																							rowTmp_tSplitRow_2.surface_carrez = lots_u.surface_carrez_lot3;
																							rowTmp_tSplitRow_2.id_lot_temp = lots_u.id_dispoparc_temp
																									+ lots_u.lot3;
																							rowTmp_tSplitRow_2.id_dispoparc_temp = lots_u.id_dispoparc_temp;
																							rowTmp_tSplitRow_2.id_local_temp = lots_u.id_local_temp;
																							rowTmp_tSplitRow_2.id_volume_temp = lots_u.id_volume_temp;
																							rows_tSplitRow_2
																									.add(rowTmp_tSplitRow_2);
																							nb_line_tSplitRow_2++;
																							rowTmp_tSplitRow_2 = new row16Struct();

																							rowTmp_tSplitRow_2.id_lot = 0;
																							rowTmp_tSplitRow_2.id_dispoparc = 0;
																							rowTmp_tSplitRow_2.id_local = 0;
																							rowTmp_tSplitRow_2.id_volume = 0;
																							rowTmp_tSplitRow_2.no_lot = lots_u.lot4;
																							rowTmp_tSplitRow_2.surface_carrez = lots_u.surface_carrez_lot4;
																							rowTmp_tSplitRow_2.id_lot_temp = lots_u.id_dispoparc_temp
																									+ lots_u.lot4;
																							rowTmp_tSplitRow_2.id_dispoparc_temp = lots_u.id_dispoparc_temp;
																							rowTmp_tSplitRow_2.id_local_temp = lots_u.id_local_temp;
																							rowTmp_tSplitRow_2.id_volume_temp = lots_u.id_volume_temp;
																							rows_tSplitRow_2
																									.add(rowTmp_tSplitRow_2);
																							nb_line_tSplitRow_2++;
																							rowTmp_tSplitRow_2 = new row16Struct();

																							rowTmp_tSplitRow_2.id_lot = 0;
																							rowTmp_tSplitRow_2.id_dispoparc = 0;
																							rowTmp_tSplitRow_2.id_local = 0;
																							rowTmp_tSplitRow_2.id_volume = 0;
																							rowTmp_tSplitRow_2.no_lot = lots_u.lot5;
																							rowTmp_tSplitRow_2.surface_carrez = lots_u.surface_carrez_lot5;
																							rowTmp_tSplitRow_2.id_lot_temp = lots_u.id_dispoparc_temp
																									+ lots_u.lot5;
																							rowTmp_tSplitRow_2.id_dispoparc_temp = lots_u.id_dispoparc_temp;
																							rowTmp_tSplitRow_2.id_local_temp = lots_u.id_local_temp;
																							rowTmp_tSplitRow_2.id_volume_temp = lots_u.id_volume_temp;
																							rows_tSplitRow_2
																									.add(rowTmp_tSplitRow_2);
																							nb_line_tSplitRow_2++;

																							for (row16Struct row_tSplitRow_2 : rows_tSplitRow_2) {// C_01
																								row16 = row_tSplitRow_2;

																								tos_count_tSplitRow_2++;

																								/**
																								 * [
																								 * tSplitRow_2
																								 * main
																								 * ]
																								 * stop
																								 */
																								// Start
																								// of
																								// branch
																								// "row16"
																								if (row16 != null) {

																									/**
																									 * [
																									 * tFilterRow_2
																									 * main
																									 * ]
																									 * start
																									 */

																									currentComponent = "tFilterRow_2";

																									row23 = null;
																									Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
																											"&&");
																									ope_tFilterRow_2
																											.matches(
																													(// code
																														// sample
																														// :
																														// use
																														// row16
																														// to
																														// define
																														// the
																														// condition.
																													// row16.columnName1.equals("foo")
																													// ||!(row16.columnName2.equals("bar"))
																													// replace
																													// the
																													// following
																													// expression
																													// by
																													// your
																													// own
																													// filter
																													// condition
																													!(Relational
																															.ISNULL(row16.no_lot) || ("")
																															.equals(row16.no_lot))),
																													"advanced condition failed");

																									if (ope_tFilterRow_2
																											.getMatchFlag()) {
																										if (row23 == null) {
																											row23 = new row23Struct();
																										}
																										row23.id_lot = row16.id_lot;
																										row23.id_dispoparc = row16.id_dispoparc;
																										row23.id_local = row16.id_local;
																										row23.id_volume = row16.id_volume;
																										row23.no_lot = row16.no_lot;
																										row23.surface_carrez = row16.surface_carrez;
																										row23.id_lot_temp = row16.id_lot_temp;
																										row23.id_dispoparc_temp = row16.id_dispoparc_temp;
																										row23.id_local_temp = row16.id_local_temp;
																										row23.id_volume_temp = row16.id_volume_temp;
																										nb_line_ok_tFilterRow_2++;
																									} else {
																										nb_line_reject_tFilterRow_2++;
																									}

																									nb_line_tFilterRow_2++;

																									tos_count_tFilterRow_2++;

																									/**
																									 * [
																									 * tFilterRow_2
																									 * main
																									 * ]
																									 * stop
																									 */
																									// Start
																									// of
																									// branch
																									// "row23"
																									if (row23 != null) {

																										/**
																										 * [
																										 * tUniqRow_14
																										 * main
																										 * ]
																										 * start
																										 */

																										currentComponent = "tUniqRow_14";

																										row12 = null;
																										row32 = null;
																										if (row23.id_lot_temp == null) {
																											finder_tUniqRow_14.id_lot_temp = null;
																										} else {
																											finder_tUniqRow_14.id_lot_temp = row23.id_lot_temp
																													.toLowerCase();
																										}
																										finder_tUniqRow_14.hashCodeDirty = true;
																										if (!keystUniqRow_14
																												.contains(finder_tUniqRow_14)) {
																											KeyStruct_tUniqRow_14 new_tUniqRow_14 = new KeyStruct_tUniqRow_14();

																											if (row23.id_lot_temp == null) {
																												new_tUniqRow_14.id_lot_temp = null;
																											} else {
																												new_tUniqRow_14.id_lot_temp = row23.id_lot_temp
																														.toLowerCase();
																											}

																											keystUniqRow_14
																													.add(new_tUniqRow_14);
																											if (row12 == null) {
																												row12 = new row12Struct();
																											}
																											row12.id_lot = row23.id_lot;
																											row12.id_dispoparc = row23.id_dispoparc;
																											row12.id_local = row23.id_local;
																											row12.id_volume = row23.id_volume;
																											row12.no_lot = row23.no_lot;
																											row12.surface_carrez = row23.surface_carrez;
																											row12.id_lot_temp = row23.id_lot_temp;
																											row12.id_dispoparc_temp = row23.id_dispoparc_temp;
																											row12.id_local_temp = row23.id_local_temp;
																											row12.id_volume_temp = row23.id_volume_temp;
																											nb_uniques_tUniqRow_14++;
																										} else {
																											if (row32 == null) {
																												row32 = new row32Struct();
																											}
																											row32.id_lot = row23.id_lot;
																											row32.id_dispoparc = row23.id_dispoparc;
																											row32.id_local = row23.id_local;
																											row32.id_volume = row23.id_volume;
																											row32.no_lot = row23.no_lot;
																											row32.surface_carrez = row23.surface_carrez;
																											row32.id_lot_temp = row23.id_lot_temp;
																											row32.id_dispoparc_temp = row23.id_dispoparc_temp;
																											row32.id_local_temp = row23.id_local_temp;
																											row32.id_volume_temp = row23.id_volume_temp;
																											nb_duplicates_tUniqRow_14++;
																										}

																										tos_count_tUniqRow_14++;

																										/**
																										 * [
																										 * tUniqRow_14
																										 * main
																										 * ]
																										 * stop
																										 */
																										// Start
																										// of
																										// branch
																										// "row12"
																										if (row12 != null) {

																											/**
																											 * [
																											 * tJavaRow_10
																											 * main
																											 * ]
																											 * start
																											 */

																											currentComponent = "tJavaRow_10";

																											// Code
																											// généré
																											// selon
																											// le
																											// schémas
																											// d'entrée
																											// et
																											// de
																											// sortie
																											row31.id_lot = Numeric
																													.sequence(
																															"s_lot",
																															1,
																															1);
																											row31.id_dispoparc = row12.id_dispoparc;
																											row31.id_local = row12.id_local;
																											row31.id_volume = row12.id_volume;
																											row31.no_lot = row12.no_lot;
																											row31.surface_carrez = row12.surface_carrez;
																											row31.id_lot_temp = row12.id_lot_temp;
																											row31.id_dispoparc_temp = row12.id_dispoparc_temp;
																											row31.id_local_temp = row12.id_local_temp;
																											row31.id_volume_temp = row12.id_volume_temp;

																											nb_line_tJavaRow_10++;

																											tos_count_tJavaRow_10++;

																											/**
																											 * [
																											 * tJavaRow_10
																											 * main
																											 * ]
																											 * stop
																											 */

																											/**
																											 * [
																											 * tFileOutputDelimited_11
																											 * main
																											 * ]
																											 * start
																											 */

																											currentComponent = "tFileOutputDelimited_11";

																											String[] rowtFileOutputDelimited_11 = new String[10];

																											rowtFileOutputDelimited_11[0] = String
																													.valueOf(row31.id_lot);

																											rowtFileOutputDelimited_11[1] = String
																													.valueOf(row31.id_dispoparc);

																											rowtFileOutputDelimited_11[2] = row31.id_local == null ? ""
																													: String.valueOf(row31.id_local);

																											rowtFileOutputDelimited_11[3] = row31.id_volume == null ? ""
																													: String.valueOf(row31.id_volume);

																											rowtFileOutputDelimited_11[4] = row31.no_lot == null ? ""
																													: row31.no_lot;

																											rowtFileOutputDelimited_11[5] = row31.surface_carrez == null ? ""
																													: String.valueOf(row31.surface_carrez);

																											rowtFileOutputDelimited_11[6] = row31.id_lot_temp == null ? ""
																													: row31.id_lot_temp;

																											rowtFileOutputDelimited_11[7] = row31.id_dispoparc_temp == null ? ""
																													: row31.id_dispoparc_temp;

																											rowtFileOutputDelimited_11[8] = row31.id_local_temp == null ? ""
																													: row31.id_local_temp;

																											rowtFileOutputDelimited_11[9] = row31.id_volume_temp == null ? ""
																													: row31.id_volume_temp;

																											nb_line_tFileOutputDelimited_11++;
																											CsvWritertFileOutputDelimited_11
																													.writeNext(rowtFileOutputDelimited_11);

																											tos_count_tFileOutputDelimited_11++;

																											/**
																											 * [
																											 * tFileOutputDelimited_11
																											 * main
																											 * ]
																											 * stop
																											 */

																										} // End
																											// of
																											// branch
																											// "row12"

																										// Start
																										// of
																										// branch
																										// "row32"
																										if (row32 != null) {

																											/**
																											 * [
																											 * tFileOutputDelimited_12
																											 * main
																											 * ]
																											 * start
																											 */

																											currentComponent = "tFileOutputDelimited_12";

																											String[] rowtFileOutputDelimited_12 = new String[10];

																											rowtFileOutputDelimited_12[0] = String
																													.valueOf(row32.id_lot);

																											rowtFileOutputDelimited_12[1] = String
																													.valueOf(row32.id_dispoparc);

																											rowtFileOutputDelimited_12[2] = row32.id_local == null ? ""
																													: String.valueOf(row32.id_local);

																											rowtFileOutputDelimited_12[3] = row32.id_volume == null ? ""
																													: String.valueOf(row32.id_volume);

																											rowtFileOutputDelimited_12[4] = row32.no_lot == null ? ""
																													: row32.no_lot;

																											rowtFileOutputDelimited_12[5] = row32.surface_carrez == null ? ""
																													: String.valueOf(row32.surface_carrez);

																											rowtFileOutputDelimited_12[6] = row32.id_lot_temp == null ? ""
																													: row32.id_lot_temp;

																											rowtFileOutputDelimited_12[7] = row32.id_dispoparc_temp == null ? ""
																													: row32.id_dispoparc_temp;

																											rowtFileOutputDelimited_12[8] = row32.id_local_temp == null ? ""
																													: row32.id_local_temp;

																											rowtFileOutputDelimited_12[9] = row32.id_volume_temp == null ? ""
																													: row32.id_volume_temp;

																											nb_line_tFileOutputDelimited_12++;
																											CsvWritertFileOutputDelimited_12
																													.writeNext(rowtFileOutputDelimited_12);

																											tos_count_tFileOutputDelimited_12++;

																											/**
																											 * [
																											 * tFileOutputDelimited_12
																											 * main
																											 * ]
																											 * stop
																											 */

																										} // End
																											// of
																											// branch
																											// "row32"

																									} // End
																										// of
																										// branch
																										// "row23"

																								} // End
																									// of
																									// branch
																									// "row16"

																							} // C_01

																						} // End
																							// of
																							// branch
																							// "lots_u"

																					} // End
																						// of
																						// branch
																						// "lots"

																					// Start
																					// of
																					// branch
																					// "adresse"
																					if (adresse != null) {

																						/**
																						 * [
																						 * tUniqRow_12
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_12";

																						row14 = null;
																						finder_tUniqRow_12.num_voie = adresse.num_voie;
																						if (adresse.b_t_q == null) {
																							finder_tUniqRow_12.b_t_q = null;
																						} else {
																							finder_tUniqRow_12.b_t_q = adresse.b_t_q
																									.toLowerCase();
																						}
																						if (adresse.type_voie == null) {
																							finder_tUniqRow_12.type_voie = null;
																						} else {
																							finder_tUniqRow_12.type_voie = adresse.type_voie
																									.toLowerCase();
																						}
																						if (adresse.code_voie == null) {
																							finder_tUniqRow_12.code_voie = null;
																						} else {
																							finder_tUniqRow_12.code_voie = adresse.code_voie
																									.toLowerCase();
																						}
																						if (adresse.voie == null) {
																							finder_tUniqRow_12.voie = null;
																						} else {
																							finder_tUniqRow_12.voie = adresse.voie
																									.toLowerCase();
																						}
																						if (adresse.code_postal == null) {
																							finder_tUniqRow_12.code_postal = null;
																						} else {
																							finder_tUniqRow_12.code_postal = adresse.code_postal
																									.toLowerCase();
																						}
																						if (adresse.commune == null) {
																							finder_tUniqRow_12.commune = null;
																						} else {
																							finder_tUniqRow_12.commune = adresse.commune
																									.toLowerCase();
																						}
																						finder_tUniqRow_12.hashCodeDirty = true;
																						if (!keystUniqRow_12
																								.contains(finder_tUniqRow_12)) {
																							KeyStruct_tUniqRow_12 new_tUniqRow_12 = new KeyStruct_tUniqRow_12();

																							new_tUniqRow_12.num_voie = adresse.num_voie;
																							if (adresse.b_t_q == null) {
																								new_tUniqRow_12.b_t_q = null;
																							} else {
																								new_tUniqRow_12.b_t_q = adresse.b_t_q
																										.toLowerCase();
																							}
																							if (adresse.type_voie == null) {
																								new_tUniqRow_12.type_voie = null;
																							} else {
																								new_tUniqRow_12.type_voie = adresse.type_voie
																										.toLowerCase();
																							}
																							if (adresse.code_voie == null) {
																								new_tUniqRow_12.code_voie = null;
																							} else {
																								new_tUniqRow_12.code_voie = adresse.code_voie
																										.toLowerCase();
																							}
																							if (adresse.voie == null) {
																								new_tUniqRow_12.voie = null;
																							} else {
																								new_tUniqRow_12.voie = adresse.voie
																										.toLowerCase();
																							}
																							if (adresse.code_postal == null) {
																								new_tUniqRow_12.code_postal = null;
																							} else {
																								new_tUniqRow_12.code_postal = adresse.code_postal
																										.toLowerCase();
																							}
																							if (adresse.commune == null) {
																								new_tUniqRow_12.commune = null;
																							} else {
																								new_tUniqRow_12.commune = adresse.commune
																										.toLowerCase();
																							}

																							keystUniqRow_12
																									.add(new_tUniqRow_12);
																							if (row14 == null) {
																								row14 = new row14Struct();
																							}
																							row14.id_adresse = adresse.id_adresse;
																							row14.num_voie = adresse.num_voie;
																							row14.b_t_q = adresse.b_t_q;
																							row14.type_voie = adresse.type_voie;
																							row14.code_voie = adresse.code_voie;
																							row14.voie = adresse.voie;
																							row14.code_postal = adresse.code_postal;
																							row14.commune = adresse.commune;
																							row14.id_adresse_temp = adresse.id_adresse_temp;
																							nb_uniques_tUniqRow_12++;
																						} else {
																							nb_duplicates_tUniqRow_12++;
																						}

																						tos_count_tUniqRow_12++;

																						/**
																						 * [
																						 * tUniqRow_12
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row14"
																						if (row14 != null) {

																							/**
																							 * [
																							 * tSortRow_2_SortOut
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tSortRow_2_SortOut";

																							Comparablerow14Struct arrayRowtSortRow_2_SortOut = new Comparablerow14Struct();

																							arrayRowtSortRow_2_SortOut.id_adresse = row14.id_adresse;
																							arrayRowtSortRow_2_SortOut.num_voie = row14.num_voie;
																							arrayRowtSortRow_2_SortOut.b_t_q = row14.b_t_q;
																							arrayRowtSortRow_2_SortOut.type_voie = row14.type_voie;
																							arrayRowtSortRow_2_SortOut.code_voie = row14.code_voie;
																							arrayRowtSortRow_2_SortOut.voie = row14.voie;
																							arrayRowtSortRow_2_SortOut.code_postal = row14.code_postal;
																							arrayRowtSortRow_2_SortOut.commune = row14.commune;
																							arrayRowtSortRow_2_SortOut.id_adresse_temp = row14.id_adresse_temp;
																							list_tSortRow_2_SortOut
																									.add(arrayRowtSortRow_2_SortOut);

																							tos_count_tSortRow_2_SortOut++;

																							/**
																							 * [
																							 * tSortRow_2_SortOut
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row14"

																					} // End
																						// of
																						// branch
																						// "adresse"

																					// Start
																					// of
																					// branch
																					// "mutation"
																					if (mutation != null) {

																						/**
																						 * [
																						 * tUniqRow_2
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_2";

																						row1 = null;
																						row2 = null;
																						if (mutation.code_service_ch == null) {
																							finder_tUniqRow_2.code_service_ch = null;
																						} else {
																							finder_tUniqRow_2.code_service_ch = mutation.code_service_ch
																									.toLowerCase();
																						}
																						if (mutation.reference_document == null) {
																							finder_tUniqRow_2.reference_document = null;
																						} else {
																							finder_tUniqRow_2.reference_document = mutation.reference_document
																									.toLowerCase();
																						}
																						if (mutation.code_insee == null) {
																							finder_tUniqRow_2.code_insee = null;
																						} else {
																							finder_tUniqRow_2.code_insee = mutation.code_insee
																									.toLowerCase();
																						}
																						finder_tUniqRow_2.hashCodeDirty = true;
																						if (!keystUniqRow_2
																								.contains(finder_tUniqRow_2)) {
																							KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

																							if (mutation.code_service_ch == null) {
																								new_tUniqRow_2.code_service_ch = null;
																							} else {
																								new_tUniqRow_2.code_service_ch = mutation.code_service_ch
																										.toLowerCase();
																							}
																							if (mutation.reference_document == null) {
																								new_tUniqRow_2.reference_document = null;
																							} else {
																								new_tUniqRow_2.reference_document = mutation.reference_document
																										.toLowerCase();
																							}
																							if (mutation.code_insee == null) {
																								new_tUniqRow_2.code_insee = null;
																							} else {
																								new_tUniqRow_2.code_insee = mutation.code_insee
																										.toLowerCase();
																							}

																							keystUniqRow_2
																									.add(new_tUniqRow_2);
																							if (row1 == null) {
																								row1 = new row1Struct();
																							}
																							row1.id_mutation = mutation.id_mutation;
																							row1.code_service_ch = mutation.code_service_ch;
																							row1.reference_document = mutation.reference_document;
																							row1.code_insee = mutation.code_insee;
																							row1.date_mutation = mutation.date_mutation;
																							row1.id_nature_mutation = mutation.id_nature_mutation;
																							row1.id_mutation_temp = mutation.id_mutation_temp;
																							nb_uniques_tUniqRow_2++;
																						} else {
																							if (row2 == null) {
																								row2 = new row2Struct();
																							}
																							row2.id_mutation = mutation.id_mutation;
																							row2.code_service_ch = mutation.code_service_ch;
																							row2.reference_document = mutation.reference_document;
																							row2.code_insee = mutation.code_insee;
																							row2.date_mutation = mutation.date_mutation;
																							row2.id_nature_mutation = mutation.id_nature_mutation;
																							row2.id_mutation_temp = mutation.id_mutation_temp;
																							nb_duplicates_tUniqRow_2++;
																						}

																						tos_count_tUniqRow_2++;

																						/**
																						 * [
																						 * tUniqRow_2
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row1"
																						if (row1 != null) {

																							/**
																							 * [
																							 * tJavaRow_4
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tJavaRow_4";

																							// Code
																							// généré
																							// selon
																							// le
																							// schémas
																							// d'entrée
																							// et
																							// de
																							// sortie
																							row24.id_mutation = Numeric
																									.sequence(
																											"s_mutation",
																											1,
																											1);
																							row24.code_service_ch = row1.code_service_ch;
																							row24.reference_document = row1.reference_document;
																							row24.code_insee = row1.code_insee;
																							row24.date_mutation = row1.date_mutation;
																							row24.id_nature_mutation = row1.id_nature_mutation;
																							row24.id_mutation_temp = row1.id_mutation_temp;

																							nb_line_tJavaRow_4++;

																							tos_count_tJavaRow_4++;

																							/**
																							 * [
																							 * tJavaRow_4
																							 * main
																							 * ]
																							 * stop
																							 */

																							/**
																							 * [
																							 * tFileOutputDelimited_6
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_6";

																							String[] rowtFileOutputDelimited_6 = new String[7];

																							rowtFileOutputDelimited_6[0] = row24.id_mutation == null ? ""
																									: String.valueOf(row24.id_mutation);

																							rowtFileOutputDelimited_6[1] = row24.code_service_ch == null ? ""
																									: row24.code_service_ch;

																							rowtFileOutputDelimited_6[2] = row24.reference_document == null ? ""
																									: row24.reference_document;

																							rowtFileOutputDelimited_6[3] = row24.code_insee == null ? ""
																									: row24.code_insee;

																							rowtFileOutputDelimited_6[4] = row24.date_mutation == null ? ""
																									: FormatterUtils
																											.format_Date(
																													row24.date_mutation,
																													"dd/MM/yyyy");

																							rowtFileOutputDelimited_6[5] = row24.id_nature_mutation == null ? ""
																									: String.valueOf(row24.id_nature_mutation);

																							rowtFileOutputDelimited_6[6] = row24.id_mutation_temp == null ? ""
																									: row24.id_mutation_temp;

																							nb_line_tFileOutputDelimited_6++;
																							CsvWritertFileOutputDelimited_6
																									.writeNext(rowtFileOutputDelimited_6);

																							tos_count_tFileOutputDelimited_6++;

																							/**
																							 * [
																							 * tFileOutputDelimited_6
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row1"

																						// Start
																						// of
																						// branch
																						// "row2"
																						if (row2 != null) {

																							/**
																							 * [
																							 * tFileOutputDelimited_20
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_20";

																							String[] rowtFileOutputDelimited_20 = new String[7];

																							rowtFileOutputDelimited_20[0] = String
																									.valueOf(row2.id_mutation);

																							rowtFileOutputDelimited_20[1] = row2.code_service_ch == null ? ""
																									: row2.code_service_ch;

																							rowtFileOutputDelimited_20[2] = row2.reference_document == null ? ""
																									: row2.reference_document;

																							rowtFileOutputDelimited_20[3] = row2.code_insee == null ? ""
																									: row2.code_insee;

																							rowtFileOutputDelimited_20[4] = row2.date_mutation == null ? ""
																									: FormatterUtils
																											.format_Date(
																													row2.date_mutation,
																													"dd/MM/yyyy");

																							rowtFileOutputDelimited_20[5] = row2.id_nature_mutation == null ? ""
																									: String.valueOf(row2.id_nature_mutation);

																							rowtFileOutputDelimited_20[6] = row2.id_mutation_temp == null ? ""
																									: row2.id_mutation_temp;

																							nb_line_tFileOutputDelimited_20++;
																							CsvWritertFileOutputDelimited_20
																									.writeNext(rowtFileOutputDelimited_20);

																							tos_count_tFileOutputDelimited_20++;

																							/**
																							 * [
																							 * tFileOutputDelimited_20
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row2"

																					} // End
																						// of
																						// branch
																						// "mutation"

																					// Start
																					// of
																					// branch
																					// "disposition"
																					if (disposition != null) {

																						/**
																						 * [
																						 * tUniqRow_3
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_3";

																						row5 = null;
																						row7 = null;
																						if (disposition.id_disposition_temp == null) {
																							finder_tUniqRow_3.id_disposition_temp = null;
																						} else {
																							finder_tUniqRow_3.id_disposition_temp = disposition.id_disposition_temp
																									.toLowerCase();
																						}
																						finder_tUniqRow_3.hashCodeDirty = true;
																						if (!keystUniqRow_3
																								.contains(finder_tUniqRow_3)) {
																							KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

																							if (disposition.id_disposition_temp == null) {
																								new_tUniqRow_3.id_disposition_temp = null;
																							} else {
																								new_tUniqRow_3.id_disposition_temp = disposition.id_disposition_temp
																										.toLowerCase();
																							}

																							keystUniqRow_3
																									.add(new_tUniqRow_3);
																							if (row5 == null) {
																								row5 = new row5Struct();
																							}
																							row5.id_disposition = disposition.id_disposition;
																							row5.id_mutation = disposition.id_mutation;
																							row5.no_disposition = disposition.no_disposition;
																							row5.valeur_fonciere = disposition.valeur_fonciere;
																							row5.id_disposition_temp = disposition.id_disposition_temp;
																							row5.id_mutation_temp = disposition.id_mutation_temp;
																							nb_uniques_tUniqRow_3++;
																						} else {
																							if (row7 == null) {
																								row7 = new row7Struct();
																							}
																							row7.id_disposition = disposition.id_disposition;
																							row7.id_mutation = disposition.id_mutation;
																							row7.no_disposition = disposition.no_disposition;
																							row7.valeur_fonciere = disposition.valeur_fonciere;
																							row7.id_disposition_temp = disposition.id_disposition_temp;
																							row7.id_mutation_temp = disposition.id_mutation_temp;
																							nb_duplicates_tUniqRow_3++;
																						}

																						tos_count_tUniqRow_3++;

																						/**
																						 * [
																						 * tUniqRow_3
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row5"
																						if (row5 != null) {

																							/**
																							 * [
																							 * tJavaRow_5
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tJavaRow_5";

																							// Code
																							// généré
																							// selon
																							// le
																							// schémas
																							// d'entrée
																							// et
																							// de
																							// sortie
																							row26.id_disposition = Numeric
																									.sequence(
																											"s_disposition",
																											1,
																											1);
																							row26.id_mutation = row5.id_mutation;
																							row26.no_disposition = row5.no_disposition;
																							row26.valeur_fonciere = row5.valeur_fonciere;
																							row26.id_disposition_temp = row5.id_disposition_temp;
																							row26.id_mutation_temp = row5.id_mutation_temp;

																							nb_line_tJavaRow_5++;

																							tos_count_tJavaRow_5++;

																							/**
																							 * [
																							 * tJavaRow_5
																							 * main
																							 * ]
																							 * stop
																							 */

																							/**
																							 * [
																							 * tFileOutputDelimited_25
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_25";

																							String[] rowtFileOutputDelimited_25 = new String[6];

																							rowtFileOutputDelimited_25[0] = String
																									.valueOf(row26.id_disposition);

																							rowtFileOutputDelimited_25[1] = row26.id_mutation == null ? ""
																									: String.valueOf(row26.id_mutation);

																							rowtFileOutputDelimited_25[2] = row26.no_disposition == null ? ""
																									: String.valueOf(row26.no_disposition);

																							rowtFileOutputDelimited_25[3] = row26.valeur_fonciere == null ? ""
																									: String.valueOf(row26.valeur_fonciere);

																							rowtFileOutputDelimited_25[4] = row26.id_disposition_temp == null ? ""
																									: row26.id_disposition_temp;

																							rowtFileOutputDelimited_25[5] = row26.id_mutation_temp == null ? ""
																									: row26.id_mutation_temp;

																							nb_line_tFileOutputDelimited_25++;
																							CsvWritertFileOutputDelimited_25
																									.writeNext(rowtFileOutputDelimited_25);

																							tos_count_tFileOutputDelimited_25++;

																							/**
																							 * [
																							 * tFileOutputDelimited_25
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row5"

																						// Start
																						// of
																						// branch
																						// "row7"
																						if (row7 != null) {

																							/**
																							 * [
																							 * tFileOutputDelimited_1
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_1";

																							String[] rowtFileOutputDelimited_1 = new String[6];

																							rowtFileOutputDelimited_1[0] = String
																									.valueOf(row7.id_disposition);

																							rowtFileOutputDelimited_1[1] = String
																									.valueOf(row7.id_mutation);

																							rowtFileOutputDelimited_1[2] = row7.no_disposition == null ? ""
																									: String.valueOf(row7.no_disposition);

																							rowtFileOutputDelimited_1[3] = row7.valeur_fonciere == null ? ""
																									: String.valueOf(row7.valeur_fonciere);

																							rowtFileOutputDelimited_1[4] = row7.id_disposition_temp == null ? ""
																									: row7.id_disposition_temp;

																							rowtFileOutputDelimited_1[5] = row7.id_mutation_temp == null ? ""
																									: row7.id_mutation_temp;

																							nb_line_tFileOutputDelimited_1++;
																							CsvWritertFileOutputDelimited_1
																									.writeNext(rowtFileOutputDelimited_1);

																							tos_count_tFileOutputDelimited_1++;

																							/**
																							 * [
																							 * tFileOutputDelimited_1
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row7"

																					} // End
																						// of
																						// branch
																						// "disposition"

																					// Start
																					// of
																					// branch
																					// "disposition_parcelle"
																					if (disposition_parcelle != null) {

																						/**
																						 * [
																						 * tUniqRow_5
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_5";

																						row20 = null;
																						if (disposition_parcelle.id_dispoparc_temp == null) {
																							finder_tUniqRow_5.id_dispoparc_temp = null;
																						} else {
																							finder_tUniqRow_5.id_dispoparc_temp = disposition_parcelle.id_dispoparc_temp
																									.toLowerCase();
																						}
																						finder_tUniqRow_5.hashCodeDirty = true;
																						if (!keystUniqRow_5
																								.contains(finder_tUniqRow_5)) {
																							KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

																							if (disposition_parcelle.id_dispoparc_temp == null) {
																								new_tUniqRow_5.id_dispoparc_temp = null;
																							} else {
																								new_tUniqRow_5.id_dispoparc_temp = disposition_parcelle.id_dispoparc_temp
																										.toLowerCase();
																							}

																							keystUniqRow_5
																									.add(new_tUniqRow_5);
																							if (row20 == null) {
																								row20 = new row20Struct();
																							}
																							row20.id_dispoparc = disposition_parcelle.id_dispoparc;
																							row20.id_disposition = disposition_parcelle.id_disposition;
																							row20.id_parcelle = disposition_parcelle.id_parcelle;
																							row20.nombre_de_lots = disposition_parcelle.nombre_de_lots;
																							row20.id_dispoparc_temp = disposition_parcelle.id_dispoparc_temp;
																							row20.id_disposition_temp = disposition_parcelle.id_disposition_temp;
																							row20.id_parcelle_temp = disposition_parcelle.id_parcelle_temp;
																							nb_uniques_tUniqRow_5++;
																						} else {
																							nb_duplicates_tUniqRow_5++;
																						}

																						tos_count_tUniqRow_5++;

																						/**
																						 * [
																						 * tUniqRow_5
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row20"
																						if (row20 != null) {

																							/**
																							 * [
																							 * tJavaRow_6
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tJavaRow_6";

																							// Code
																							// généré
																							// selon
																							// le
																							// schémas
																							// d'entrée
																							// et
																							// de
																							// sortie
																							row27.id_dispoparc = Numeric
																									.sequence(
																											"s_dispoparc",
																											1,
																											1);
																							row27.id_disposition = row20.id_disposition;
																							row27.id_parcelle = row20.id_parcelle;
																							row27.nombre_de_lots = row20.nombre_de_lots;
																							row27.id_dispoparc_temp = row20.id_dispoparc_temp;
																							row27.id_disposition_temp = row20.id_disposition_temp;
																							row27.id_parcelle_temp = row20.id_parcelle_temp;

																							nb_line_tJavaRow_6++;

																							tos_count_tJavaRow_6++;

																							/**
																							 * [
																							 * tJavaRow_6
																							 * main
																							 * ]
																							 * stop
																							 */

																							/**
																							 * [
																							 * tFileOutputDelimited_3
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_3";

																							String[] rowtFileOutputDelimited_3 = new String[7];

																							rowtFileOutputDelimited_3[0] = String
																									.valueOf(row27.id_dispoparc);

																							rowtFileOutputDelimited_3[1] = String
																									.valueOf(row27.id_disposition);

																							rowtFileOutputDelimited_3[2] = String
																									.valueOf(row27.id_parcelle);

																							rowtFileOutputDelimited_3[3] = row27.nombre_de_lots == null ? ""
																									: String.valueOf(row27.nombre_de_lots);

																							rowtFileOutputDelimited_3[4] = row27.id_dispoparc_temp == null ? ""
																									: row27.id_dispoparc_temp;

																							rowtFileOutputDelimited_3[5] = row27.id_disposition_temp == null ? ""
																									: row27.id_disposition_temp;

																							rowtFileOutputDelimited_3[6] = row27.id_parcelle_temp == null ? ""
																									: row27.id_parcelle_temp;

																							nb_line_tFileOutputDelimited_3++;
																							CsvWritertFileOutputDelimited_3
																									.writeNext(rowtFileOutputDelimited_3);

																							tos_count_tFileOutputDelimited_3++;

																							/**
																							 * [
																							 * tFileOutputDelimited_3
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row20"

																					} // End
																						// of
																						// branch
																						// "disposition_parcelle"

																					// Start
																					// of
																					// branch
																					// "adresse_dispoparc"
																					if (adresse_dispoparc != null) {

																						/**
																						 * [
																						 * tUniqRow_11
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_11";

																						row13 = null;
																						if (adresse_dispoparc.id_adresse_temp == null) {
																							finder_tUniqRow_11.id_adresse_temp = null;
																						} else {
																							finder_tUniqRow_11.id_adresse_temp = adresse_dispoparc.id_adresse_temp
																									.toLowerCase();
																						}
																						if (adresse_dispoparc.id_dispoparc_temp == null) {
																							finder_tUniqRow_11.id_dispoparc_temp = null;
																						} else {
																							finder_tUniqRow_11.id_dispoparc_temp = adresse_dispoparc.id_dispoparc_temp
																									.toLowerCase();
																						}
																						finder_tUniqRow_11.hashCodeDirty = true;
																						if (!keystUniqRow_11
																								.contains(finder_tUniqRow_11)) {
																							KeyStruct_tUniqRow_11 new_tUniqRow_11 = new KeyStruct_tUniqRow_11();

																							if (adresse_dispoparc.id_adresse_temp == null) {
																								new_tUniqRow_11.id_adresse_temp = null;
																							} else {
																								new_tUniqRow_11.id_adresse_temp = adresse_dispoparc.id_adresse_temp
																										.toLowerCase();
																							}
																							if (adresse_dispoparc.id_dispoparc_temp == null) {
																								new_tUniqRow_11.id_dispoparc_temp = null;
																							} else {
																								new_tUniqRow_11.id_dispoparc_temp = adresse_dispoparc.id_dispoparc_temp
																										.toLowerCase();
																							}

																							keystUniqRow_11
																									.add(new_tUniqRow_11);
																							if (row13 == null) {
																								row13 = new row13Struct();
																							}
																							row13.id_adresse = adresse_dispoparc.id_adresse;
																							row13.id_dispoparc = adresse_dispoparc.id_dispoparc;
																							row13.id_adresse_temp = adresse_dispoparc.id_adresse_temp;
																							row13.id_dispoparc_temp = adresse_dispoparc.id_dispoparc_temp;
																							nb_uniques_tUniqRow_11++;
																						} else {
																							nb_duplicates_tUniqRow_11++;
																						}

																						tos_count_tUniqRow_11++;

																						/**
																						 * [
																						 * tUniqRow_11
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row13"
																						if (row13 != null) {

																							/**
																							 * [
																							 * tFileOutputDelimited_10
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_10";

																							String[] rowtFileOutputDelimited_10 = new String[4];

																							rowtFileOutputDelimited_10[0] = String
																									.valueOf(row13.id_adresse);

																							rowtFileOutputDelimited_10[1] = String
																									.valueOf(row13.id_dispoparc);

																							rowtFileOutputDelimited_10[2] = row13.id_adresse_temp == null ? ""
																									: row13.id_adresse_temp;

																							rowtFileOutputDelimited_10[3] = row13.id_dispoparc_temp == null ? ""
																									: row13.id_dispoparc_temp;

																							nb_line_tFileOutputDelimited_10++;
																							CsvWritertFileOutputDelimited_10
																									.writeNext(rowtFileOutputDelimited_10);

																							tos_count_tFileOutputDelimited_10++;

																							/**
																							 * [
																							 * tFileOutputDelimited_10
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row13"

																					} // End
																						// of
																						// branch
																						// "adresse_dispoparc"

																					// Start
																					// of
																					// branch
																					// "locaux"
																					if (locaux != null) {

																						/**
																						 * [
																						 * tUniqRow_7
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_7";

																						row9 = null;
																						if (locaux.id_local_temp == null) {
																							finder_tUniqRow_7.id_local_temp = null;
																						} else {
																							finder_tUniqRow_7.id_local_temp = locaux.id_local_temp
																									.toLowerCase();
																						}
																						finder_tUniqRow_7.hashCodeDirty = true;
																						if (!keystUniqRow_7
																								.contains(finder_tUniqRow_7)) {
																							KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

																							if (locaux.id_local_temp == null) {
																								new_tUniqRow_7.id_local_temp = null;
																							} else {
																								new_tUniqRow_7.id_local_temp = locaux.id_local_temp
																										.toLowerCase();
																							}

																							keystUniqRow_7
																									.add(new_tUniqRow_7);
																							if (row9 == null) {
																								row9 = new row9Struct();
																							}
																							row9.id_local = locaux.id_local;
																							row9.id_dispoparc = locaux.id_dispoparc;
																							row9.identifiant_local = locaux.identifiant_local;
																							row9.code_type_local = locaux.code_type_local;
																							row9.surface_reelle_batie = locaux.surface_reelle_batie;
																							row9.nb_pieces_principales = locaux.nb_pieces_principales;
																							row9.id_local_temp = locaux.id_local_temp;
																							row9.id_dispoparc_temp = locaux.id_dispoparc_temp;
																							nb_uniques_tUniqRow_7++;
																						} else {
																							nb_duplicates_tUniqRow_7++;
																						}

																						tos_count_tUniqRow_7++;

																						/**
																						 * [
																						 * tUniqRow_7
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row9"
																						if (row9 != null) {

																							/**
																							 * [
																							 * tJavaRow_7
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tJavaRow_7";

																							// Code
																							// généré
																							// selon
																							// le
																							// schémas
																							// d'entrée
																							// et
																							// de
																							// sortie
																							row28.id_local = Numeric
																									.sequence(
																											"s_local",
																											1,
																											1);
																							row28.id_dispoparc = row9.id_dispoparc;
																							row28.identifiant_local = row9.identifiant_local;
																							row28.code_type_local = row9.code_type_local;
																							row28.surface_reelle_batie = row9.surface_reelle_batie;
																							row28.nb_pieces_principales = row9.nb_pieces_principales;
																							row28.id_local_temp = row9.id_local_temp;
																							row28.id_dispoparc_temp = row9.id_dispoparc_temp;

																							nb_line_tJavaRow_7++;

																							tos_count_tJavaRow_7++;

																							/**
																							 * [
																							 * tJavaRow_7
																							 * main
																							 * ]
																							 * stop
																							 */

																							/**
																							 * [
																							 * tFileOutputDelimited_5
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_5";

																							String[] rowtFileOutputDelimited_5 = new String[8];

																							rowtFileOutputDelimited_5[0] = String
																									.valueOf(row28.id_local);

																							rowtFileOutputDelimited_5[1] = String
																									.valueOf(row28.id_dispoparc);

																							rowtFileOutputDelimited_5[2] = row28.identifiant_local == null ? ""
																									: row28.identifiant_local;

																							rowtFileOutputDelimited_5[3] = row28.code_type_local == null ? ""
																									: row28.code_type_local;

																							rowtFileOutputDelimited_5[4] = row28.surface_reelle_batie == null ? ""
																									: String.valueOf(row28.surface_reelle_batie);

																							rowtFileOutputDelimited_5[5] = row28.nb_pieces_principales == null ? ""
																									: String.valueOf(row28.nb_pieces_principales);

																							rowtFileOutputDelimited_5[6] = row28.id_local_temp == null ? ""
																									: row28.id_local_temp;

																							rowtFileOutputDelimited_5[7] = row28.id_dispoparc_temp == null ? ""
																									: row28.id_dispoparc_temp;

																							nb_line_tFileOutputDelimited_5++;
																							CsvWritertFileOutputDelimited_5
																									.writeNext(rowtFileOutputDelimited_5);

																							tos_count_tFileOutputDelimited_5++;

																							/**
																							 * [
																							 * tFileOutputDelimited_5
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row9"

																					} // End
																						// of
																						// branch
																						// "locaux"

																					// Start
																					// of
																					// branch
																					// "volume"
																					if (volume != null) {

																						/**
																						 * [
																						 * tUniqRow_8
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_8";

																						row10 = null;
																						if (volume.id_volume_temp == null) {
																							finder_tUniqRow_8.id_volume_temp = null;
																						} else {
																							finder_tUniqRow_8.id_volume_temp = volume.id_volume_temp
																									.toLowerCase();
																						}
																						finder_tUniqRow_8.hashCodeDirty = true;
																						if (!keystUniqRow_8
																								.contains(finder_tUniqRow_8)) {
																							KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

																							if (volume.id_volume_temp == null) {
																								new_tUniqRow_8.id_volume_temp = null;
																							} else {
																								new_tUniqRow_8.id_volume_temp = volume.id_volume_temp
																										.toLowerCase();
																							}

																							keystUniqRow_8
																									.add(new_tUniqRow_8);
																							if (row10 == null) {
																								row10 = new row10Struct();
																							}
																							row10.id_volume = volume.id_volume;
																							row10.id_dispoparc = volume.id_dispoparc;
																							row10.no_volume = volume.no_volume;
																							row10.id_volume_temp = volume.id_volume_temp;
																							row10.id_dispoparc_temp = volume.id_dispoparc_temp;
																							nb_uniques_tUniqRow_8++;
																						} else {
																							nb_duplicates_tUniqRow_8++;
																						}

																						tos_count_tUniqRow_8++;

																						/**
																						 * [
																						 * tUniqRow_8
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row10"
																						if (row10 != null) {

																							/**
																							 * [
																							 * tJavaRow_8
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tJavaRow_8";

																							// Code
																							// généré
																							// selon
																							// le
																							// schémas
																							// d'entrée
																							// et
																							// de
																							// sortie
																							row29.id_volume = Numeric
																									.sequence(
																											"s_volume",
																											1,
																											1);
																							row29.id_dispoparc = row10.id_dispoparc;
																							row29.no_volume = row10.no_volume;
																							row29.id_volume_temp = row10.id_volume_temp;
																							row29.id_dispoparc_temp = row10.id_dispoparc_temp;

																							nb_line_tJavaRow_8++;

																							tos_count_tJavaRow_8++;

																							/**
																							 * [
																							 * tJavaRow_8
																							 * main
																							 * ]
																							 * stop
																							 */

																							/**
																							 * [
																							 * tFileOutputDelimited_8
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_8";

																							String[] rowtFileOutputDelimited_8 = new String[5];

																							rowtFileOutputDelimited_8[0] = String
																									.valueOf(row29.id_volume);

																							rowtFileOutputDelimited_8[1] = String
																									.valueOf(row29.id_dispoparc);

																							rowtFileOutputDelimited_8[2] = row29.no_volume == null ? ""
																									: row29.no_volume;

																							rowtFileOutputDelimited_8[3] = row29.id_volume_temp == null ? ""
																									: row29.id_volume_temp;

																							rowtFileOutputDelimited_8[4] = row29.id_dispoparc_temp == null ? ""
																									: row29.id_dispoparc_temp;

																							nb_line_tFileOutputDelimited_8++;
																							CsvWritertFileOutputDelimited_8
																									.writeNext(rowtFileOutputDelimited_8);

																							tos_count_tFileOutputDelimited_8++;

																							/**
																							 * [
																							 * tFileOutputDelimited_8
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row10"

																					} // End
																						// of
																						// branch
																						// "volume"

																					// Start
																					// of
																					// branch
																					// "suf"
																					if (suf != null) {

																						/**
																						 * [
																						 * tUniqRow_9
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_9";

																						row11 = null;
																						if (suf.id_suf_temp == null) {
																							finder_tUniqRow_9.id_suf_temp = null;
																						} else {
																							finder_tUniqRow_9.id_suf_temp = suf.id_suf_temp
																									.toLowerCase();
																						}
																						finder_tUniqRow_9.hashCodeDirty = true;
																						if (!keystUniqRow_9
																								.contains(finder_tUniqRow_9)) {
																							KeyStruct_tUniqRow_9 new_tUniqRow_9 = new KeyStruct_tUniqRow_9();

																							if (suf.id_suf_temp == null) {
																								new_tUniqRow_9.id_suf_temp = null;
																							} else {
																								new_tUniqRow_9.id_suf_temp = suf.id_suf_temp
																										.toLowerCase();
																							}

																							keystUniqRow_9
																									.add(new_tUniqRow_9);
																							if (row11 == null) {
																								row11 = new row11Struct();
																							}
																							row11.id_suf = suf.id_suf;
																							row11.id_dispoparc = suf.id_dispoparc;
																							row11.id_suf_cplmt = suf.id_suf_cplmt;
																							row11.nature_culture = suf.nature_culture;
																							row11.nature_culture_speciale = suf.nature_culture_speciale;
																							row11.surface_terrain = suf.surface_terrain;
																							row11.id_suf_temp = suf.id_suf_temp;
																							row11.id_dispoparc_temp = suf.id_dispoparc_temp;
																							nb_uniques_tUniqRow_9++;
																						} else {
																							nb_duplicates_tUniqRow_9++;
																						}

																						tos_count_tUniqRow_9++;

																						/**
																						 * [
																						 * tUniqRow_9
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row11"
																						if (row11 != null) {

																							/**
																							 * [
																							 * tJavaRow_9
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tJavaRow_9";

																							// Code
																							// généré
																							// selon
																							// le
																							// schémas
																							// d'entrée
																							// et
																							// de
																							// sortie
																							row30.id_suf = Numeric
																									.sequence(
																											"s_suf",
																											1,
																											1);
																							row30.id_dispoparc = row11.id_dispoparc;
																							row30.id_suf_cplmt = row11.id_suf_cplmt;
																							row30.nature_culture = row11.nature_culture;
																							row30.nature_culture_speciale = row11.nature_culture_speciale;
																							row30.surface_terrain = row11.surface_terrain;
																							row30.id_suf_temp = row11.id_suf_temp;
																							row30.id_dispoparc_temp = row11.id_dispoparc_temp;

																							nb_line_tJavaRow_9++;

																							tos_count_tJavaRow_9++;

																							/**
																							 * [
																							 * tJavaRow_9
																							 * main
																							 * ]
																							 * stop
																							 */

																							/**
																							 * [
																							 * tFileOutputDelimited_9
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_9";

																							String[] rowtFileOutputDelimited_9 = new String[8];

																							rowtFileOutputDelimited_9[0] = String
																									.valueOf(row30.id_suf);

																							rowtFileOutputDelimited_9[1] = String
																									.valueOf(row30.id_dispoparc);

																							rowtFileOutputDelimited_9[2] = row30.id_suf_cplmt == null ? ""
																									: String.valueOf(row30.id_suf_cplmt);

																							rowtFileOutputDelimited_9[3] = row30.nature_culture == null ? ""
																									: String.valueOf(row30.nature_culture);

																							rowtFileOutputDelimited_9[4] = row30.nature_culture_speciale == null ? ""
																									: String.valueOf(row30.nature_culture_speciale);

																							rowtFileOutputDelimited_9[5] = row30.surface_terrain == null ? ""
																									: String.valueOf(row30.surface_terrain);

																							rowtFileOutputDelimited_9[6] = row30.id_suf_temp == null ? ""
																									: row30.id_suf_temp;

																							rowtFileOutputDelimited_9[7] = row30.id_dispoparc_temp == null ? ""
																									: row30.id_dispoparc_temp;

																							nb_line_tFileOutputDelimited_9++;
																							CsvWritertFileOutputDelimited_9
																									.writeNext(rowtFileOutputDelimited_9);

																							tos_count_tFileOutputDelimited_9++;

																							/**
																							 * [
																							 * tFileOutputDelimited_9
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row11"

																					} // End
																						// of
																						// branch
																						// "suf"

																					/**
																					 * [
																					 * tFileOutputDelimited_22
																					 * main
																					 * ]
																					 * start
																					 */

																					currentComponent = "tFileOutputDelimited_22";

																					String[] rowtFileOutputDelimited_22 = new String[44];

																					rowtFileOutputDelimited_22[0] = row25.code_service_ch == null ? ""
																							: row25.code_service_ch;

																					rowtFileOutputDelimited_22[1] = row25.reference_document == null ? ""
																							: row25.reference_document;

																					rowtFileOutputDelimited_22[2] = row25.a_articles_cgi == null ? ""
																							: row25.a_articles_cgi;

																					rowtFileOutputDelimited_22[3] = row25.b_articles_cgi == null ? ""
																							: row25.b_articles_cgi;

																					rowtFileOutputDelimited_22[4] = row25.c_articles_cgi == null ? ""
																							: row25.c_articles_cgi;

																					rowtFileOutputDelimited_22[5] = row25.d_articles_cgi == null ? ""
																							: row25.d_articles_cgi;

																					rowtFileOutputDelimited_22[6] = row25.e_articles_cgi == null ? ""
																							: row25.e_articles_cgi;

																					rowtFileOutputDelimited_22[7] = row25.numero_disposition == null ? ""
																							: String.valueOf(row25.numero_disposition);

																					rowtFileOutputDelimited_22[8] = row25.date_mutation == null ? ""
																							: FormatterUtils
																									.format_Date(
																											row25.date_mutation,
																											"dd/MM/yyyy");

																					rowtFileOutputDelimited_22[9] = row25.nature_mutation == null ? ""
																							: row25.nature_mutation;

																					rowtFileOutputDelimited_22[10] = row25.valeur_fonciere == null ? ""
																							: String.valueOf(row25.valeur_fonciere);

																					rowtFileOutputDelimited_22[11] = row25.numero_voie == null ? ""
																							: String.valueOf(row25.numero_voie);

																					rowtFileOutputDelimited_22[12] = row25.complement_numero_voie == null ? ""
																							: row25.complement_numero_voie;

																					rowtFileOutputDelimited_22[13] = row25.type_voie == null ? ""
																							: row25.type_voie;

																					rowtFileOutputDelimited_22[14] = row25.code_voie == null ? ""
																							: row25.code_voie;

																					rowtFileOutputDelimited_22[15] = row25.voie == null ? ""
																							: row25.voie;

																					rowtFileOutputDelimited_22[16] = row25.code_postal == null ? ""
																							: row25.code_postal;

																					rowtFileOutputDelimited_22[17] = row25.commune == null ? ""
																							: row25.commune;

																					rowtFileOutputDelimited_22[18] = row25.code_departement == null ? ""
																							: row25.code_departement;

																					rowtFileOutputDelimited_22[19] = row25.code_commune == null ? ""
																							: row25.code_commune;

																					rowtFileOutputDelimited_22[20] = row25.prefixe_section == null ? ""
																							: row25.prefixe_section;

																					rowtFileOutputDelimited_22[21] = row25.section == null ? ""
																							: row25.section;

																					rowtFileOutputDelimited_22[22] = row25.numero_plan == null ? ""
																							: row25.numero_plan;

																					rowtFileOutputDelimited_22[23] = row25.numero_volume == null ? ""
																							: row25.numero_volume;

																					rowtFileOutputDelimited_22[24] = row25.lot1 == null ? ""
																							: row25.lot1;

																					rowtFileOutputDelimited_22[25] = row25.surface_carrez_lot1 == null ? ""
																							: String.valueOf(row25.surface_carrez_lot1);

																					rowtFileOutputDelimited_22[26] = row25.lot2 == null ? ""
																							: row25.lot2;

																					rowtFileOutputDelimited_22[27] = row25.surface_carrez_lot2 == null ? ""
																							: String.valueOf(row25.surface_carrez_lot2);

																					rowtFileOutputDelimited_22[28] = row25.lot3 == null ? ""
																							: row25.lot3;

																					rowtFileOutputDelimited_22[29] = row25.surface_carrez_lot3 == null ? ""
																							: String.valueOf(row25.surface_carrez_lot3);

																					rowtFileOutputDelimited_22[30] = row25.lot4 == null ? ""
																							: row25.lot4;

																					rowtFileOutputDelimited_22[31] = row25.surface_carrez_lot4 == null ? ""
																							: String.valueOf(row25.surface_carrez_lot4);

																					rowtFileOutputDelimited_22[32] = row25.lot5 == null ? ""
																							: row25.lot5;

																					rowtFileOutputDelimited_22[33] = row25.surface_carrez_lot5 == null ? ""
																							: String.valueOf(row25.surface_carrez_lot5);

																					rowtFileOutputDelimited_22[34] = row25.nombre_lots == null ? ""
																							: String.valueOf(row25.nombre_lots);

																					rowtFileOutputDelimited_22[35] = row25.code_type_local == null ? ""
																							: row25.code_type_local;

																					rowtFileOutputDelimited_22[36] = row25.type_local == null ? ""
																							: row25.type_local;

																					rowtFileOutputDelimited_22[37] = row25.identifiant_local == null ? ""
																							: row25.identifiant_local;

																					rowtFileOutputDelimited_22[38] = row25.surface_reelle_bati == null ? ""
																							: String.valueOf(row25.surface_reelle_bati);

																					rowtFileOutputDelimited_22[39] = row25.nombre_pieces_principales == null ? ""
																							: String.valueOf(row25.nombre_pieces_principales);

																					rowtFileOutputDelimited_22[40] = row25.nature_culture == null ? ""
																							: row25.nature_culture;

																					rowtFileOutputDelimited_22[41] = row25.nature_culture_speciale == null ? ""
																							: row25.nature_culture_speciale;

																					rowtFileOutputDelimited_22[42] = row25.surface_terrain == null ? ""
																							: String.valueOf(row25.surface_terrain);

																					rowtFileOutputDelimited_22[43] = row25.id_ligne == null ? ""
																							: String.valueOf(row25.id_ligne);

																					nb_line_tFileOutputDelimited_22++;
																					CsvWritertFileOutputDelimited_22
																							.writeNext(rowtFileOutputDelimited_22);

																					tos_count_tFileOutputDelimited_22++;

																					/**
																					 * [
																					 * tFileOutputDelimited_22
																					 * main
																					 * ]
																					 * stop
																					 */

																				} // End
																					// of
																					// branch
																					// "source"

																				/**
																				 * [
																				 * tFileInputDelimited_2
																				 * end
																				 * ]
																				 * start
																				 */

																				currentComponent = "tFileInputDelimited_2";

																				nb_line_tFileInputDelimited_2++;
																			}

																		} finally {
																			if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
																				if (csvReadertFileInputDelimited_2 != null) {
																					csvReadertFileInputDelimited_2
																							.close();
																				}
																			}
																			if (csvReadertFileInputDelimited_2 != null) {
																				globalMap
																						.put("tFileInputDelimited_2_NB_LINE",
																								nb_line_tFileInputDelimited_2);
																			}
																		}

																		ok_Hash.put(
																				"tFileInputDelimited_2",
																				true);
																		end_Hash.put(
																				"tFileInputDelimited_2",
																				System.currentTimeMillis());

																		/**
																		 * [
																		 * tFileInputDelimited_2
																		 * end ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tJavaRow_1
																		 * end ]
																		 * start
																		 */

																		currentComponent = "tJavaRow_1";

																		globalMap
																				.put("tJavaRow_1_NB_LINE",
																						nb_line_tJavaRow_1);

																		ok_Hash.put(
																				"tJavaRow_1",
																				true);
																		end_Hash.put(
																				"tJavaRow_1",
																				System.currentTimeMillis());

																		/**
																		 * [
																		 * tJavaRow_1
																		 * end ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tReplicate_1
																		 * end ]
																		 * start
																		 */

																		currentComponent = "tReplicate_1";

																		ok_Hash.put(
																				"tReplicate_1",
																				true);
																		end_Hash.put(
																				"tReplicate_1",
																				System.currentTimeMillis());

																		/**
																		 * [
																		 * tReplicate_1
																		 * end ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tFileOutputDelimited_22
																		 * end ]
																		 * start
																		 */

																		currentComponent = "tFileOutputDelimited_22";

																	} finally {

																		if (CsvWritertFileOutputDelimited_22 != null) {
																			CsvWritertFileOutputDelimited_22
																					.close();
																		}
																		globalMap
																				.put("tFileOutputDelimited_22_NB_LINE",
																						nb_line_tFileOutputDelimited_22);
																	} // finally

																	ok_Hash.put(
																			"tFileOutputDelimited_22",
																			true);
																	end_Hash.put(
																			"tFileOutputDelimited_22",
																			System.currentTimeMillis());

																	/**
																	 * [
																	 * tFileOutputDelimited_22
																	 * end ]
																	 * stop
																	 */

																	/**
																	 * [tMap_1
																	 * end ]
																	 * start
																	 */

																	currentComponent = "tMap_1";

																	// ###############################
																	// # Lookup
																	// hashes
																	// releasing
																	if (tHash_Lookup_nature_mutation != null) {
																		tHash_Lookup_nature_mutation
																				.endGet();
																	}
																	globalMap
																			.remove("tHash_Lookup_nature_mutation");

																	if (tHash_Lookup_nature_culture != null) {
																		tHash_Lookup_nature_culture
																				.endGet();
																	}
																	globalMap
																			.remove("tHash_Lookup_nature_culture");

																	if (tHash_Lookup_type_local != null) {
																		tHash_Lookup_type_local
																				.endGet();
																	}
																	globalMap
																			.remove("tHash_Lookup_type_local");

																	if (tHash_Lookup_nature_culture_speciale != null) {
																		tHash_Lookup_nature_culture_speciale
																				.endGet();
																	}
																	globalMap
																			.remove("tHash_Lookup_nature_culture_speciale");

																	// ###############################

																	ok_Hash.put(
																			"tMap_1",
																			true);
																	end_Hash.put(
																			"tMap_1",
																			System.currentTimeMillis());

																	/**
																	 * [tMap_1
																	 * end ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tUniqRow_9
																	 * end ]
																	 * start
																	 */

																	currentComponent = "tUniqRow_9";

																	globalMap
																			.put("tUniqRow_9_NB_UNIQUES",
																					nb_uniques_tUniqRow_9);
																	globalMap
																			.put("tUniqRow_9_NB_DUPLICATES",
																					nb_duplicates_tUniqRow_9);

																	ok_Hash.put(
																			"tUniqRow_9",
																			true);
																	end_Hash.put(
																			"tUniqRow_9",
																			System.currentTimeMillis());

																	/**
																	 * [
																	 * tUniqRow_9
																	 * end ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tJavaRow_9
																	 * end ]
																	 * start
																	 */

																	currentComponent = "tJavaRow_9";

																	globalMap
																			.put("tJavaRow_9_NB_LINE",
																					nb_line_tJavaRow_9);

																	ok_Hash.put(
																			"tJavaRow_9",
																			true);
																	end_Hash.put(
																			"tJavaRow_9",
																			System.currentTimeMillis());

																	/**
																	 * [
																	 * tJavaRow_9
																	 * end ]
																	 * stop
																	 */

																	/**
																	 * [
																	 * tFileOutputDelimited_9
																	 * end ]
																	 * start
																	 */

																	currentComponent = "tFileOutputDelimited_9";

																} finally {

																	if (CsvWritertFileOutputDelimited_9 != null) {
																		CsvWritertFileOutputDelimited_9
																				.close();
																	}
																	globalMap
																			.put("tFileOutputDelimited_9_NB_LINE",
																					nb_line_tFileOutputDelimited_9);
																} // finally

																ok_Hash.put(
																		"tFileOutputDelimited_9",
																		true);
																end_Hash.put(
																		"tFileOutputDelimited_9",
																		System.currentTimeMillis());

																/**
																 * [
																 * tFileOutputDelimited_9
																 * end ] stop
																 */

																/**
																 * [tUniqRow_8
																 * end ] start
																 */

																currentComponent = "tUniqRow_8";

																globalMap
																		.put("tUniqRow_8_NB_UNIQUES",
																				nb_uniques_tUniqRow_8);
																globalMap
																		.put("tUniqRow_8_NB_DUPLICATES",
																				nb_duplicates_tUniqRow_8);

																ok_Hash.put(
																		"tUniqRow_8",
																		true);
																end_Hash.put(
																		"tUniqRow_8",
																		System.currentTimeMillis());

																/**
																 * [tUniqRow_8
																 * end ] stop
																 */

																/**
																 * [tJavaRow_8
																 * end ] start
																 */

																currentComponent = "tJavaRow_8";

																globalMap
																		.put("tJavaRow_8_NB_LINE",
																				nb_line_tJavaRow_8);

																ok_Hash.put(
																		"tJavaRow_8",
																		true);
																end_Hash.put(
																		"tJavaRow_8",
																		System.currentTimeMillis());

																/**
																 * [tJavaRow_8
																 * end ] stop
																 */

																/**
																 * [
																 * tFileOutputDelimited_8
																 * end ] start
																 */

																currentComponent = "tFileOutputDelimited_8";

															} finally {

																if (CsvWritertFileOutputDelimited_8 != null) {
																	CsvWritertFileOutputDelimited_8
																			.close();
																}
																globalMap
																		.put("tFileOutputDelimited_8_NB_LINE",
																				nb_line_tFileOutputDelimited_8);
															} // finally

															ok_Hash.put(
																	"tFileOutputDelimited_8",
																	true);
															end_Hash.put(
																	"tFileOutputDelimited_8",
																	System.currentTimeMillis());

															/**
															 * [
															 * tFileOutputDelimited_8
															 * end ] stop
															 */

															/**
															 * [tUniqRow_7 end ]
															 * start
															 */

															currentComponent = "tUniqRow_7";

															globalMap
																	.put("tUniqRow_7_NB_UNIQUES",
																			nb_uniques_tUniqRow_7);
															globalMap
																	.put("tUniqRow_7_NB_DUPLICATES",
																			nb_duplicates_tUniqRow_7);

															ok_Hash.put(
																	"tUniqRow_7",
																	true);
															end_Hash.put(
																	"tUniqRow_7",
																	System.currentTimeMillis());

															/**
															 * [tUniqRow_7 end ]
															 * stop
															 */

															/**
															 * [tJavaRow_7 end ]
															 * start
															 */

															currentComponent = "tJavaRow_7";

															globalMap
																	.put("tJavaRow_7_NB_LINE",
																			nb_line_tJavaRow_7);

															ok_Hash.put(
																	"tJavaRow_7",
																	true);
															end_Hash.put(
																	"tJavaRow_7",
																	System.currentTimeMillis());

															/**
															 * [tJavaRow_7 end ]
															 * stop
															 */

															/**
															 * [
															 * tFileOutputDelimited_5
															 * end ] start
															 */

															currentComponent = "tFileOutputDelimited_5";

														} finally {

															if (CsvWritertFileOutputDelimited_5 != null) {
																CsvWritertFileOutputDelimited_5
																		.close();
															}
															globalMap
																	.put("tFileOutputDelimited_5_NB_LINE",
																			nb_line_tFileOutputDelimited_5);
														} // finally

														ok_Hash.put(
																"tFileOutputDelimited_5",
																true);
														end_Hash.put(
																"tFileOutputDelimited_5",
																System.currentTimeMillis());

														/**
														 * [
														 * tFileOutputDelimited_5
														 * end ] stop
														 */

														/**
														 * [tUniqRow_11 end ]
														 * start
														 */

														currentComponent = "tUniqRow_11";

														globalMap
																.put("tUniqRow_11_NB_UNIQUES",
																		nb_uniques_tUniqRow_11);
														globalMap
																.put("tUniqRow_11_NB_DUPLICATES",
																		nb_duplicates_tUniqRow_11);

														ok_Hash.put(
																"tUniqRow_11",
																true);
														end_Hash.put(
																"tUniqRow_11",
																System.currentTimeMillis());

														/**
														 * [tUniqRow_11 end ]
														 * stop
														 */

														/**
														 * [
														 * tFileOutputDelimited_10
														 * end ] start
														 */

														currentComponent = "tFileOutputDelimited_10";

													} finally {

														if (CsvWritertFileOutputDelimited_10 != null) {
															CsvWritertFileOutputDelimited_10
																	.close();
														}
														globalMap
																.put("tFileOutputDelimited_10_NB_LINE",
																		nb_line_tFileOutputDelimited_10);
													} // finally

													ok_Hash.put(
															"tFileOutputDelimited_10",
															true);
													end_Hash.put(
															"tFileOutputDelimited_10",
															System.currentTimeMillis());

													/**
													 * [tFileOutputDelimited_10
													 * end ] stop
													 */

													/**
													 * [tUniqRow_5 end ] start
													 */

													currentComponent = "tUniqRow_5";

													globalMap
															.put("tUniqRow_5_NB_UNIQUES",
																	nb_uniques_tUniqRow_5);
													globalMap
															.put("tUniqRow_5_NB_DUPLICATES",
																	nb_duplicates_tUniqRow_5);

													ok_Hash.put("tUniqRow_5",
															true);
													end_Hash.put(
															"tUniqRow_5",
															System.currentTimeMillis());

													/**
													 * [tUniqRow_5 end ] stop
													 */

													/**
													 * [tJavaRow_6 end ] start
													 */

													currentComponent = "tJavaRow_6";

													globalMap
															.put("tJavaRow_6_NB_LINE",
																	nb_line_tJavaRow_6);

													ok_Hash.put("tJavaRow_6",
															true);
													end_Hash.put(
															"tJavaRow_6",
															System.currentTimeMillis());

													/**
													 * [tJavaRow_6 end ] stop
													 */

													/**
													 * [tFileOutputDelimited_3
													 * end ] start
													 */

													currentComponent = "tFileOutputDelimited_3";

												} finally {

													if (CsvWritertFileOutputDelimited_3 != null) {
														CsvWritertFileOutputDelimited_3
																.close();
													}
													globalMap
															.put("tFileOutputDelimited_3_NB_LINE",
																	nb_line_tFileOutputDelimited_3);
												} // finally

												ok_Hash.put(
														"tFileOutputDelimited_3",
														true);
												end_Hash.put(
														"tFileOutputDelimited_3",
														System.currentTimeMillis());

												/**
												 * [tFileOutputDelimited_3 end ]
												 * stop
												 */

												/**
												 * [tUniqRow_3 end ] start
												 */

												currentComponent = "tUniqRow_3";

												globalMap
														.put("tUniqRow_3_NB_UNIQUES",
																nb_uniques_tUniqRow_3);
												globalMap
														.put("tUniqRow_3_NB_DUPLICATES",
																nb_duplicates_tUniqRow_3);

												ok_Hash.put("tUniqRow_3", true);
												end_Hash.put(
														"tUniqRow_3",
														System.currentTimeMillis());

												/**
												 * [tUniqRow_3 end ] stop
												 */

												/**
												 * [tFileOutputDelimited_1 end ]
												 * start
												 */

												currentComponent = "tFileOutputDelimited_1";

											} finally {

												if (CsvWritertFileOutputDelimited_1 != null) {
													CsvWritertFileOutputDelimited_1
															.close();
												}
												globalMap
														.put("tFileOutputDelimited_1_NB_LINE",
																nb_line_tFileOutputDelimited_1);
											} // finally

											ok_Hash.put(
													"tFileOutputDelimited_1",
													true);
											end_Hash.put(
													"tFileOutputDelimited_1",
													System.currentTimeMillis());

											/**
											 * [tFileOutputDelimited_1 end ]
											 * stop
											 */

											/**
											 * [tJavaRow_5 end ] start
											 */

											currentComponent = "tJavaRow_5";

											globalMap.put("tJavaRow_5_NB_LINE",
													nb_line_tJavaRow_5);

											ok_Hash.put("tJavaRow_5", true);
											end_Hash.put("tJavaRow_5",
													System.currentTimeMillis());

											/**
											 * [tJavaRow_5 end ] stop
											 */

											/**
											 * [tFileOutputDelimited_25 end ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_25";

										} finally {

											if (CsvWritertFileOutputDelimited_25 != null) {
												CsvWritertFileOutputDelimited_25
														.close();
											}
											globalMap
													.put("tFileOutputDelimited_25_NB_LINE",
															nb_line_tFileOutputDelimited_25);
										} // finally

										ok_Hash.put("tFileOutputDelimited_25",
												true);
										end_Hash.put("tFileOutputDelimited_25",
												System.currentTimeMillis());

										/**
										 * [tFileOutputDelimited_25 end ] stop
										 */

										/**
										 * [tUniqRow_2 end ] start
										 */

										currentComponent = "tUniqRow_2";

										globalMap.put("tUniqRow_2_NB_UNIQUES",
												nb_uniques_tUniqRow_2);
										globalMap.put(
												"tUniqRow_2_NB_DUPLICATES",
												nb_duplicates_tUniqRow_2);

										ok_Hash.put("tUniqRow_2", true);
										end_Hash.put("tUniqRow_2",
												System.currentTimeMillis());

										/**
										 * [tUniqRow_2 end ] stop
										 */

										/**
										 * [tFileOutputDelimited_20 end ] start
										 */

										currentComponent = "tFileOutputDelimited_20";

									} finally {

										if (CsvWritertFileOutputDelimited_20 != null) {
											CsvWritertFileOutputDelimited_20
													.close();
										}
										globalMap
												.put("tFileOutputDelimited_20_NB_LINE",
														nb_line_tFileOutputDelimited_20);
									} // finally

									ok_Hash.put("tFileOutputDelimited_20", true);
									end_Hash.put("tFileOutputDelimited_20",
											System.currentTimeMillis());

									/**
									 * [tFileOutputDelimited_20 end ] stop
									 */

									/**
									 * [tJavaRow_4 end ] start
									 */

									currentComponent = "tJavaRow_4";

									globalMap.put("tJavaRow_4_NB_LINE",
											nb_line_tJavaRow_4);

									ok_Hash.put("tJavaRow_4", true);
									end_Hash.put("tJavaRow_4",
											System.currentTimeMillis());

									/**
									 * [tJavaRow_4 end ] stop
									 */

									/**
									 * [tFileOutputDelimited_6 end ] start
									 */

									currentComponent = "tFileOutputDelimited_6";

								} finally {

									if (CsvWritertFileOutputDelimited_6 != null) {
										CsvWritertFileOutputDelimited_6.close();
									}
									globalMap.put(
											"tFileOutputDelimited_6_NB_LINE",
											nb_line_tFileOutputDelimited_6);
								} // finally

								ok_Hash.put("tFileOutputDelimited_6", true);
								end_Hash.put("tFileOutputDelimited_6",
										System.currentTimeMillis());

								/**
								 * [tFileOutputDelimited_6 end ] stop
								 */

								/**
								 * [tUniqRow_12 end ] start
								 */

								currentComponent = "tUniqRow_12";

								globalMap.put("tUniqRow_12_NB_UNIQUES",
										nb_uniques_tUniqRow_12);
								globalMap.put("tUniqRow_12_NB_DUPLICATES",
										nb_duplicates_tUniqRow_12);

								ok_Hash.put("tUniqRow_12", true);
								end_Hash.put("tUniqRow_12",
										System.currentTimeMillis());

								/**
								 * [tUniqRow_12 end ] stop
								 */

								/**
								 * [tSortRow_2_SortOut end ] start
								 */

								currentComponent = "tSortRow_2_SortOut";

								row14Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut
										.toArray(new Comparablerow14Struct[0]);

								java.util.Arrays.sort(array_tSortRow_2_SortOut);

								globalMap.put("tSortRow_2",
										array_tSortRow_2_SortOut);

								ok_Hash.put("tSortRow_2_SortOut", true);
								end_Hash.put("tSortRow_2_SortOut",
										System.currentTimeMillis());

								/**
								 * [tSortRow_2_SortOut end ] stop
								 */

								/**
								 * [tFileOutputDelimited_13 begin ] start
								 */

								ok_Hash.put("tFileOutputDelimited_13", false);
								start_Hash.put("tFileOutputDelimited_13",
										System.currentTimeMillis());
								currentComponent = "tFileOutputDelimited_13";

								int tos_count_tFileOutputDelimited_13 = 0;

								String fileName_tFileOutputDelimited_13 = "";
								fileName_tFileOutputDelimited_13 = (new java.io.File(
										context.target_path + "adresse.csv"))
										.getAbsolutePath().replace("\\", "/");
								String fullName_tFileOutputDelimited_13 = null;
								String extension_tFileOutputDelimited_13 = null;
								String directory_tFileOutputDelimited_13 = null;
								if ((fileName_tFileOutputDelimited_13
										.indexOf("/") != -1)) {
									if (fileName_tFileOutputDelimited_13
											.lastIndexOf(".") < fileName_tFileOutputDelimited_13
											.lastIndexOf("/")) {
										fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
										extension_tFileOutputDelimited_13 = "";
									} else {
										fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
												.substring(
														0,
														fileName_tFileOutputDelimited_13
																.lastIndexOf("."));
										extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
												.substring(fileName_tFileOutputDelimited_13
														.lastIndexOf("."));
									}
									directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
											.substring(0,
													fileName_tFileOutputDelimited_13
															.lastIndexOf("/"));
								} else {
									if (fileName_tFileOutputDelimited_13
											.lastIndexOf(".") != -1) {
										fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
												.substring(
														0,
														fileName_tFileOutputDelimited_13
																.lastIndexOf("."));
										extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
												.substring(fileName_tFileOutputDelimited_13
														.lastIndexOf("."));
									} else {
										fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
										extension_tFileOutputDelimited_13 = "";
									}
									directory_tFileOutputDelimited_13 = "";
								}
								boolean isFileGenerated_tFileOutputDelimited_13 = true;
								java.io.File filetFileOutputDelimited_13 = new java.io.File(
										fileName_tFileOutputDelimited_13);
								globalMap.put(
										"tFileOutputDelimited_13_FILE_NAME",
										fileName_tFileOutputDelimited_13);

								String[] headColutFileOutputDelimited_13 = new String[9];
								class CSVBasicSet_tFileOutputDelimited_13 {
									private char field_Delim;
									private char row_Delim;
									private char escape;
									private char textEnclosure;
									private boolean useCRLFRecordDelimiter;

									public boolean isUseCRLFRecordDelimiter() {
										return useCRLFRecordDelimiter;
									}

									public void setFieldSeparator(
											String fieldSep)
											throws IllegalArgumentException {
										char field_Delim_tFileOutputDelimited_13[] = null;

										// support passing value (property:
										// Field Separator) by 'context.fs' or
										// 'globalMap.get("fs")'.
										if (fieldSep.length() > 0) {
											field_Delim_tFileOutputDelimited_13 = fieldSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Field Separator must be assigned a char.");
										}
										this.field_Delim = field_Delim_tFileOutputDelimited_13[0];
									}

									public char getFieldDelim() {
										if (this.field_Delim == 0) {
											setFieldSeparator(";");
										}
										return this.field_Delim;
									}

									public void setRowSeparator(String rowSep) {
										if ("\r\n".equals(rowSep)) {
											useCRLFRecordDelimiter = true;
											return;
										}
										char row_DelimtFileOutputDelimited_13[] = null;

										// support passing value (property: Row
										// Separator) by 'context.rs' or
										// 'globalMap.get("rs")'.
										if (rowSep.length() > 0) {
											row_DelimtFileOutputDelimited_13 = rowSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Row Separator must be assigned a char.");
										}
										this.row_Delim = row_DelimtFileOutputDelimited_13[0];
									}

									public char getRowDelim() {
										if (this.row_Delim == 0) {
											setRowSeparator("\n");
										}
										return this.row_Delim;
									}

									public void setEscapeAndTextEnclosure(
											String strEscape,
											String strTextEnclosure)
											throws IllegalArgumentException {
										if (strEscape.length() <= 0) {
											throw new IllegalArgumentException(
													"Escape Char must be assigned a char.");
										}

										if ("".equals(strTextEnclosure))
											strTextEnclosure = "\0";
										char textEnclosure_tFileOutputDelimited_13[] = null;

										if (strTextEnclosure.length() > 0) {
											textEnclosure_tFileOutputDelimited_13 = strTextEnclosure
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Text Enclosure must be assigned a char.");
										}

										this.textEnclosure = textEnclosure_tFileOutputDelimited_13[0];

										if (("\\").equals(strEscape)) {
											this.escape = '\\';
										} else if (strEscape
												.equals(strTextEnclosure)) {
											this.escape = this.textEnclosure;
										} else {
											// the default escape mode is double
											// escape
											this.escape = this.textEnclosure;
										}

									}

									public char getEscapeChar() {
										return (char) this.escape;
									}

									public char getTextEnclosure() {
										return this.textEnclosure;
									}
								}

								int nb_line_tFileOutputDelimited_13 = 0;
								int splitEvery_tFileOutputDelimited_13 = 1000;
								int splitedFileNo_tFileOutputDelimited_13 = 0;
								int currentRow_tFileOutputDelimited_13 = 0;

								CSVBasicSet_tFileOutputDelimited_13 csvSettings_tFileOutputDelimited_13 = new CSVBasicSet_tFileOutputDelimited_13();
								csvSettings_tFileOutputDelimited_13
										.setFieldSeparator(";");
								csvSettings_tFileOutputDelimited_13
										.setRowSeparator("\n");
								csvSettings_tFileOutputDelimited_13
										.setEscapeAndTextEnclosure("\"", "\"");
								// create directory only if not exists
								if (directory_tFileOutputDelimited_13 != null
										&& directory_tFileOutputDelimited_13
												.trim().length() != 0) {
									java.io.File dir_tFileOutputDelimited_13 = new java.io.File(
											directory_tFileOutputDelimited_13);
									if (!dir_tFileOutputDelimited_13.exists()) {
										dir_tFileOutputDelimited_13.mkdirs();
									}
								}
								com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = null;
								try {
									CsvWritertFileOutputDelimited_13 = new com.talend.csv.CSVWriter(
											new java.io.BufferedWriter(
													new java.io.OutputStreamWriter(
															new java.io.FileOutputStream(
																	fileName_tFileOutputDelimited_13,
																	false),
															"ISO-8859-15")));
									CsvWritertFileOutputDelimited_13
											.setSeparator(csvSettings_tFileOutputDelimited_13
													.getFieldDelim());

									if (!csvSettings_tFileOutputDelimited_13
											.isUseCRLFRecordDelimiter()
											&& csvSettings_tFileOutputDelimited_13
													.getRowDelim() != '\r'
											&& csvSettings_tFileOutputDelimited_13
													.getRowDelim() != '\n') {
										CsvWritertFileOutputDelimited_13
												.setLineEnd(""
														+ csvSettings_tFileOutputDelimited_13
																.getRowDelim());
									}

									if (filetFileOutputDelimited_13.length() == 0) {

										headColutFileOutputDelimited_13[0] = "id_adresse";

										headColutFileOutputDelimited_13[1] = "num_voie";

										headColutFileOutputDelimited_13[2] = "b_t_q";

										headColutFileOutputDelimited_13[3] = "type_voie";

										headColutFileOutputDelimited_13[4] = "code_voie";

										headColutFileOutputDelimited_13[5] = "voie";

										headColutFileOutputDelimited_13[6] = "code_postal";

										headColutFileOutputDelimited_13[7] = "commune";

										headColutFileOutputDelimited_13[8] = "id_adresse_temp";

										CsvWritertFileOutputDelimited_13
												.writeNext(headColutFileOutputDelimited_13);
										CsvWritertFileOutputDelimited_13
												.flush();

									}

									CsvWritertFileOutputDelimited_13
											.setEscapeChar(csvSettings_tFileOutputDelimited_13
													.getEscapeChar());
									CsvWritertFileOutputDelimited_13
											.setQuoteChar(csvSettings_tFileOutputDelimited_13
													.getTextEnclosure());
									CsvWritertFileOutputDelimited_13
											.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

									/**
									 * [tFileOutputDelimited_13 begin ] stop
									 */

									/**
									 * [tJavaRow_3 begin ] start
									 */

									ok_Hash.put("tJavaRow_3", false);
									start_Hash.put("tJavaRow_3",
											System.currentTimeMillis());
									currentComponent = "tJavaRow_3";

									int tos_count_tJavaRow_3 = 0;

									int nb_line_tJavaRow_3 = 0;

									/**
									 * [tJavaRow_3 begin ] stop
									 */

									/**
									 * [tSortRow_2_SortIn begin ] start
									 */

									ok_Hash.put("tSortRow_2_SortIn", false);
									start_Hash.put("tSortRow_2_SortIn",
											System.currentTimeMillis());
									currentComponent = "tSortRow_2_SortIn";

									int tos_count_tSortRow_2_SortIn = 0;

									row14Struct[] array_tSortRow_2_SortIn = (row14Struct[]) globalMap
											.get("tSortRow_2");

									int nb_line_tSortRow_2_SortIn = 0;

									row14Struct current_tSortRow_2_SortIn = null;

									for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
										current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
										row21.id_adresse = current_tSortRow_2_SortIn.id_adresse;
										row21.num_voie = current_tSortRow_2_SortIn.num_voie;
										row21.b_t_q = current_tSortRow_2_SortIn.b_t_q;
										row21.type_voie = current_tSortRow_2_SortIn.type_voie;
										row21.code_voie = current_tSortRow_2_SortIn.code_voie;
										row21.voie = current_tSortRow_2_SortIn.voie;
										row21.code_postal = current_tSortRow_2_SortIn.code_postal;
										row21.commune = current_tSortRow_2_SortIn.commune;
										row21.id_adresse_temp = current_tSortRow_2_SortIn.id_adresse_temp;
										// increase number of line sorted
										nb_line_tSortRow_2_SortIn++;

										/**
										 * [tSortRow_2_SortIn begin ] stop
										 */
										/**
										 * [tSortRow_2_SortIn main ] start
										 */

										currentComponent = "tSortRow_2_SortIn";

										tos_count_tSortRow_2_SortIn++;

										/**
										 * [tSortRow_2_SortIn main ] stop
										 */

										/**
										 * [tJavaRow_3 main ] start
										 */

										currentComponent = "tJavaRow_3";

										// Code généré selon le schémas d'entrée
										// et de sortie
										row15.id_adresse = Numeric.sequence(
												"s_adresse", 1, 1);
										row15.num_voie = row21.num_voie;
										row15.b_t_q = row21.b_t_q;
										row15.type_voie = row21.type_voie;
										row15.code_voie = row21.code_voie;
										row15.voie = row21.voie;
										row15.code_postal = row21.code_postal;
										row15.commune = row21.commune;
										row15.id_adresse_temp = row21.id_adresse_temp;

										nb_line_tJavaRow_3++;

										tos_count_tJavaRow_3++;

										/**
										 * [tJavaRow_3 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_13 main ] start
										 */

										currentComponent = "tFileOutputDelimited_13";

										String[] rowtFileOutputDelimited_13 = new String[9];

										rowtFileOutputDelimited_13[0] = String
												.valueOf(row15.id_adresse);

										rowtFileOutputDelimited_13[1] = row15.num_voie == null ? ""
												: String.valueOf(row15.num_voie);

										rowtFileOutputDelimited_13[2] = row15.b_t_q == null ? ""
												: row15.b_t_q;

										rowtFileOutputDelimited_13[3] = row15.type_voie == null ? ""
												: row15.type_voie;

										rowtFileOutputDelimited_13[4] = row15.code_voie == null ? ""
												: row15.code_voie;

										rowtFileOutputDelimited_13[5] = row15.voie == null ? ""
												: row15.voie;

										rowtFileOutputDelimited_13[6] = row15.code_postal == null ? ""
												: row15.code_postal;

										rowtFileOutputDelimited_13[7] = row15.commune == null ? ""
												: row15.commune;

										rowtFileOutputDelimited_13[8] = row15.id_adresse_temp == null ? ""
												: row15.id_adresse_temp;

										nb_line_tFileOutputDelimited_13++;
										CsvWritertFileOutputDelimited_13
												.writeNext(rowtFileOutputDelimited_13);

										tos_count_tFileOutputDelimited_13++;

										/**
										 * [tFileOutputDelimited_13 main ] stop
										 */

										/**
										 * [tSortRow_2_SortIn end ] start
										 */

										currentComponent = "tSortRow_2_SortIn";

									}

									globalMap.put("tSortRow_2_SortIn_NB_LINE",
											nb_line_tSortRow_2_SortIn);

									ok_Hash.put("tSortRow_2_SortIn", true);
									end_Hash.put("tSortRow_2_SortIn",
											System.currentTimeMillis());

									/**
									 * [tSortRow_2_SortIn end ] stop
									 */

									/**
									 * [tJavaRow_3 end ] start
									 */

									currentComponent = "tJavaRow_3";

									globalMap.put("tJavaRow_3_NB_LINE",
											nb_line_tJavaRow_3);

									ok_Hash.put("tJavaRow_3", true);
									end_Hash.put("tJavaRow_3",
											System.currentTimeMillis());

									/**
									 * [tJavaRow_3 end ] stop
									 */

									/**
									 * [tFileOutputDelimited_13 end ] start
									 */

									currentComponent = "tFileOutputDelimited_13";

								} finally {

									if (CsvWritertFileOutputDelimited_13 != null) {
										CsvWritertFileOutputDelimited_13
												.close();
									}
									globalMap.put(
											"tFileOutputDelimited_13_NB_LINE",
											nb_line_tFileOutputDelimited_13);
								} // finally

								ok_Hash.put("tFileOutputDelimited_13", true);
								end_Hash.put("tFileOutputDelimited_13",
										System.currentTimeMillis());

								/**
								 * [tFileOutputDelimited_13 end ] stop
								 */

								/**
								 * [tUniqRow_10 end ] start
								 */

								currentComponent = "tUniqRow_10";

								globalMap.put("tUniqRow_10_NB_UNIQUES",
										nb_uniques_tUniqRow_10);
								globalMap.put("tUniqRow_10_NB_DUPLICATES",
										nb_duplicates_tUniqRow_10);

								ok_Hash.put("tUniqRow_10", true);
								end_Hash.put("tUniqRow_10",
										System.currentTimeMillis());

								/**
								 * [tUniqRow_10 end ] stop
								 */

								/**
								 * [tSplitRow_2 end ] start
								 */

								currentComponent = "tSplitRow_2";

								globalMap.put("tSplitRow_2_NB_LINE",
										nb_line_tSplitRow_2);

								ok_Hash.put("tSplitRow_2", true);
								end_Hash.put("tSplitRow_2",
										System.currentTimeMillis());

								/**
								 * [tSplitRow_2 end ] stop
								 */

								/**
								 * [tFilterRow_2 end ] start
								 */

								currentComponent = "tFilterRow_2";

								globalMap.put("tFilterRow_2_NB_LINE",
										nb_line_tFilterRow_2);
								globalMap.put("tFilterRow_2_NB_LINE_OK",
										nb_line_ok_tFilterRow_2);
								globalMap.put("tFilterRow_2_NB_LINE_REJECT",
										nb_line_reject_tFilterRow_2);

								ok_Hash.put("tFilterRow_2", true);
								end_Hash.put("tFilterRow_2",
										System.currentTimeMillis());

								/**
								 * [tFilterRow_2 end ] stop
								 */

								/**
								 * [tUniqRow_14 end ] start
								 */

								currentComponent = "tUniqRow_14";

								globalMap.put("tUniqRow_14_NB_UNIQUES",
										nb_uniques_tUniqRow_14);
								globalMap.put("tUniqRow_14_NB_DUPLICATES",
										nb_duplicates_tUniqRow_14);

								ok_Hash.put("tUniqRow_14", true);
								end_Hash.put("tUniqRow_14",
										System.currentTimeMillis());

								/**
								 * [tUniqRow_14 end ] stop
								 */

								/**
								 * [tFileOutputDelimited_12 end ] start
								 */

								currentComponent = "tFileOutputDelimited_12";

							} finally {

								if (CsvWritertFileOutputDelimited_12 != null) {
									CsvWritertFileOutputDelimited_12.close();
								}
								globalMap.put(
										"tFileOutputDelimited_12_NB_LINE",
										nb_line_tFileOutputDelimited_12);
							} // finally

							ok_Hash.put("tFileOutputDelimited_12", true);
							end_Hash.put("tFileOutputDelimited_12",
									System.currentTimeMillis());

							/**
							 * [tFileOutputDelimited_12 end ] stop
							 */

							/**
							 * [tJavaRow_10 end ] start
							 */

							currentComponent = "tJavaRow_10";

							globalMap.put("tJavaRow_10_NB_LINE",
									nb_line_tJavaRow_10);

							ok_Hash.put("tJavaRow_10", true);
							end_Hash.put("tJavaRow_10",
									System.currentTimeMillis());

							/**
							 * [tJavaRow_10 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_11 end ] start
							 */

							currentComponent = "tFileOutputDelimited_11";

						} finally {

							if (CsvWritertFileOutputDelimited_11 != null) {
								CsvWritertFileOutputDelimited_11.close();
							}
							globalMap.put("tFileOutputDelimited_11_NB_LINE",
									nb_line_tFileOutputDelimited_11);
						} // finally

						ok_Hash.put("tFileOutputDelimited_11", true);
						end_Hash.put("tFileOutputDelimited_11",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_11 end ] stop
						 */

						/**
						 * [tUniqRow_6 end ] start
						 */

						currentComponent = "tUniqRow_6";

						globalMap.put("tUniqRow_6_NB_UNIQUES",
								nb_uniques_tUniqRow_6);
						globalMap.put("tUniqRow_6_NB_DUPLICATES",
								nb_duplicates_tUniqRow_6);

						ok_Hash.put("tUniqRow_6", true);
						end_Hash.put("tUniqRow_6", System.currentTimeMillis());

						/**
						 * [tUniqRow_6 end ] stop
						 */

						/**
						 * [tSortRow_1_SortOut end ] start
						 */

						currentComponent = "tSortRow_1_SortOut";

						row8Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
								.toArray(new Comparablerow8Struct[0]);

						java.util.Arrays.sort(array_tSortRow_1_SortOut);

						globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

						ok_Hash.put("tSortRow_1_SortOut", true);
						end_Hash.put("tSortRow_1_SortOut",
								System.currentTimeMillis());

						/**
						 * [tSortRow_1_SortOut end ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_4", false);
						start_Hash.put("tFileOutputDelimited_4",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_4";

						int tos_count_tFileOutputDelimited_4 = 0;

						String fileName_tFileOutputDelimited_4 = "";
						fileName_tFileOutputDelimited_4 = (new java.io.File(
								context.target_path + "parcelle.csv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_4 = null;
						String extension_tFileOutputDelimited_4 = null;
						String directory_tFileOutputDelimited_4 = null;
						if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_4
									.lastIndexOf(".") < fileName_tFileOutputDelimited_4
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
								extension_tFileOutputDelimited_4 = "";
							} else {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(0,
												fileName_tFileOutputDelimited_4
														.lastIndexOf("."));
								extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(fileName_tFileOutputDelimited_4
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
									.substring(0,
											fileName_tFileOutputDelimited_4
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_4
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(0,
												fileName_tFileOutputDelimited_4
														.lastIndexOf("."));
								extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(fileName_tFileOutputDelimited_4
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
								extension_tFileOutputDelimited_4 = "";
							}
							directory_tFileOutputDelimited_4 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_4 = true;
						java.io.File filetFileOutputDelimited_4 = new java.io.File(
								fileName_tFileOutputDelimited_4);
						globalMap.put("tFileOutputDelimited_4_FILE_NAME",
								fileName_tFileOutputDelimited_4);

						String[] headColutFileOutputDelimited_4 = new String[8];
						class CSVBasicSet_tFileOutputDelimited_4 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_4[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_4 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator(";");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_4[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_4 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_4[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_4[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_4 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_4 = 0;
						int splitEvery_tFileOutputDelimited_4 = 1000;
						int splitedFileNo_tFileOutputDelimited_4 = 0;
						int currentRow_tFileOutputDelimited_4 = 0;

						CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
						csvSettings_tFileOutputDelimited_4
								.setFieldSeparator(";");
						csvSettings_tFileOutputDelimited_4
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_4
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_4 != null
								&& directory_tFileOutputDelimited_4.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
									directory_tFileOutputDelimited_4);
							if (!dir_tFileOutputDelimited_4.exists()) {
								dir_tFileOutputDelimited_4.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;
						try {
							CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_4,
															false),
													"ISO-8859-15")));
							CsvWritertFileOutputDelimited_4
									.setSeparator(csvSettings_tFileOutputDelimited_4
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_4
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_4
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_4
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_4.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_4
												.getRowDelim());
							}

							if (filetFileOutputDelimited_4.length() == 0) {

								headColutFileOutputDelimited_4[0] = "id_parcelle";

								headColutFileOutputDelimited_4[1] = "idpar";

								headColutFileOutputDelimited_4[2] = "code_departement";

								headColutFileOutputDelimited_4[3] = "code_commune";

								headColutFileOutputDelimited_4[4] = "prefixe_section";

								headColutFileOutputDelimited_4[5] = "section";

								headColutFileOutputDelimited_4[6] = "numero";

								headColutFileOutputDelimited_4[7] = "id_parcelle_temp";

								CsvWritertFileOutputDelimited_4
										.writeNext(headColutFileOutputDelimited_4);
								CsvWritertFileOutputDelimited_4.flush();

							}

							CsvWritertFileOutputDelimited_4
									.setEscapeChar(csvSettings_tFileOutputDelimited_4
											.getEscapeChar());
							CsvWritertFileOutputDelimited_4
									.setQuoteChar(csvSettings_tFileOutputDelimited_4
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_4
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_4 begin ] stop
							 */

							/**
							 * [tJavaRow_2 begin ] start
							 */

							ok_Hash.put("tJavaRow_2", false);
							start_Hash.put("tJavaRow_2",
									System.currentTimeMillis());
							currentComponent = "tJavaRow_2";

							int tos_count_tJavaRow_2 = 0;

							int nb_line_tJavaRow_2 = 0;

							/**
							 * [tJavaRow_2 begin ] stop
							 */

							/**
							 * [tSortRow_1_SortIn begin ] start
							 */

							ok_Hash.put("tSortRow_1_SortIn", false);
							start_Hash.put("tSortRow_1_SortIn",
									System.currentTimeMillis());
							currentComponent = "tSortRow_1_SortIn";

							int tos_count_tSortRow_1_SortIn = 0;

							row8Struct[] array_tSortRow_1_SortIn = (row8Struct[]) globalMap
									.get("tSortRow_1");

							int nb_line_tSortRow_1_SortIn = 0;

							row8Struct current_tSortRow_1_SortIn = null;

							for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
								current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
								row3.id_parcelle = current_tSortRow_1_SortIn.id_parcelle;
								row3.idpar = current_tSortRow_1_SortIn.idpar;
								row3.code_departement = current_tSortRow_1_SortIn.code_departement;
								row3.code_commune = current_tSortRow_1_SortIn.code_commune;
								row3.prefixe_section = current_tSortRow_1_SortIn.prefixe_section;
								row3.section = current_tSortRow_1_SortIn.section;
								row3.numero = current_tSortRow_1_SortIn.numero;
								row3.id_parcelle_temp = current_tSortRow_1_SortIn.id_parcelle_temp;
								// increase number of line sorted
								nb_line_tSortRow_1_SortIn++;

								/**
								 * [tSortRow_1_SortIn begin ] stop
								 */
								/**
								 * [tSortRow_1_SortIn main ] start
								 */

								currentComponent = "tSortRow_1_SortIn";

								tos_count_tSortRow_1_SortIn++;

								/**
								 * [tSortRow_1_SortIn main ] stop
								 */

								/**
								 * [tJavaRow_2 main ] start
								 */

								currentComponent = "tJavaRow_2";

								// Code généré selon le schémas d'entrée et de
								// sortie
								row4.id_parcelle = Numeric.sequence(
										"s_parcelle", 1, 1);
								row4.idpar = row3.idpar;
								row4.code_departement = row3.code_departement;
								row4.code_commune = row3.code_commune;
								row4.prefixe_section = row3.prefixe_section;
								row4.section = row3.section;
								row4.numero = row3.numero;
								row4.id_parcelle_temp = row3.id_parcelle_temp;

								nb_line_tJavaRow_2++;

								tos_count_tJavaRow_2++;

								/**
								 * [tJavaRow_2 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_4 main ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								String[] rowtFileOutputDelimited_4 = new String[8];

								rowtFileOutputDelimited_4[0] = String
										.valueOf(row4.id_parcelle);

								rowtFileOutputDelimited_4[1] = row4.idpar == null ? ""
										: row4.idpar;

								rowtFileOutputDelimited_4[2] = row4.code_departement == null ? ""
										: row4.code_departement;

								rowtFileOutputDelimited_4[3] = row4.code_commune == null ? ""
										: row4.code_commune;

								rowtFileOutputDelimited_4[4] = row4.prefixe_section == null ? ""
										: row4.prefixe_section;

								rowtFileOutputDelimited_4[5] = row4.section == null ? ""
										: row4.section;

								rowtFileOutputDelimited_4[6] = row4.numero == null ? ""
										: row4.numero;

								rowtFileOutputDelimited_4[7] = row4.id_parcelle_temp == null ? ""
										: row4.id_parcelle_temp;

								nb_line_tFileOutputDelimited_4++;
								CsvWritertFileOutputDelimited_4
										.writeNext(rowtFileOutputDelimited_4);

								tos_count_tFileOutputDelimited_4++;

								/**
								 * [tFileOutputDelimited_4 main ] stop
								 */

								/**
								 * [tSortRow_1_SortIn end ] start
								 */

								currentComponent = "tSortRow_1_SortIn";

							}

							globalMap.put("tSortRow_1_SortIn_NB_LINE",
									nb_line_tSortRow_1_SortIn);

							ok_Hash.put("tSortRow_1_SortIn", true);
							end_Hash.put("tSortRow_1_SortIn",
									System.currentTimeMillis());

							/**
							 * [tSortRow_1_SortIn end ] stop
							 */

							/**
							 * [tJavaRow_2 end ] start
							 */

							currentComponent = "tJavaRow_2";

							globalMap.put("tJavaRow_2_NB_LINE",
									nb_line_tJavaRow_2);

							ok_Hash.put("tJavaRow_2", true);
							end_Hash.put("tJavaRow_2",
									System.currentTimeMillis());

							/**
							 * [tJavaRow_2 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 end ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

						} finally {

							if (CsvWritertFileOutputDelimited_4 != null) {
								CsvWritertFileOutputDelimited_4.close();
							}
							globalMap.put("tFileOutputDelimited_4_NB_LINE",
									nb_line_tFileOutputDelimited_4);
						} // finally

						ok_Hash.put("tFileOutputDelimited_4", true);
						end_Hash.put("tFileOutputDelimited_4",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_4 end ] stop
						 */

						/**
						 * [tUniqRow_4 end ] start
						 */

						currentComponent = "tUniqRow_4";

						globalMap.put("tUniqRow_4_NB_UNIQUES",
								nb_uniques_tUniqRow_4);
						globalMap.put("tUniqRow_4_NB_DUPLICATES",
								nb_duplicates_tUniqRow_4);

						ok_Hash.put("tUniqRow_4", true);
						end_Hash.put("tUniqRow_4", System.currentTimeMillis());

						/**
						 * [tUniqRow_4 end ] stop
						 */

						/**
						 * [tSplitRow_1 end ] start
						 */

						currentComponent = "tSplitRow_1";

						globalMap.put("tSplitRow_1_NB_LINE",
								nb_line_tSplitRow_1);

						ok_Hash.put("tSplitRow_1", true);
						end_Hash.put("tSplitRow_1", System.currentTimeMillis());

						/**
						 * [tSplitRow_1 end ] stop
						 */

						/**
						 * [tFilterRow_1 end ] start
						 */

						currentComponent = "tFilterRow_1";

						globalMap.put("tFilterRow_1_NB_LINE",
								nb_line_tFilterRow_1);
						globalMap.put("tFilterRow_1_NB_LINE_OK",
								nb_line_ok_tFilterRow_1);
						globalMap.put("tFilterRow_1_NB_LINE_REJECT",
								nb_line_reject_tFilterRow_1);

						ok_Hash.put("tFilterRow_1", true);
						end_Hash.put("tFilterRow_1", System.currentTimeMillis());

						/**
						 * [tFilterRow_1 end ] stop
						 */

						/**
						 * [tUniqRow_15 end ] start
						 */

						currentComponent = "tUniqRow_15";

						globalMap.put("tUniqRow_15_NB_UNIQUES",
								nb_uniques_tUniqRow_15);
						globalMap.put("tUniqRow_15_NB_DUPLICATES",
								nb_duplicates_tUniqRow_15);

						ok_Hash.put("tUniqRow_15", true);
						end_Hash.put("tUniqRow_15", System.currentTimeMillis());

						/**
						 * [tUniqRow_15 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_21 end ] start
						 */

						currentComponent = "tFileOutputDelimited_21";

					} finally {

						if (CsvWritertFileOutputDelimited_21 != null) {
							CsvWritertFileOutputDelimited_21.close();
						}
						globalMap.put("tFileOutputDelimited_21_NB_LINE",
								nb_line_tFileOutputDelimited_21);
					} // finally

					ok_Hash.put("tFileOutputDelimited_21", true);
					end_Hash.put("tFileOutputDelimited_21",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_21 end ] stop
					 */

					/**
					 * [tMap_4 end ] start
					 */

					currentComponent = "tMap_4";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_article_cgi != null) {
						tHash_Lookup_article_cgi.endGet();
					}
					globalMap.remove("tHash_Lookup_article_cgi");

					// ###############################

					ok_Hash.put("tMap_4", true);
					end_Hash.put("tMap_4", System.currentTimeMillis());

					/**
					 * [tMap_4 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_article_cgi");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_nature_mutation");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_nature_culture");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_type_local");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_nature_culture_speciale");

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class article_cgiStruct implements
			routines.system.IPersistableComparableLookupRow<article_cgiStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_article_cgi;

		public Integer getId_article_cgi() {
			return this.id_article_cgi;
		}

		public String code_article_cgi;

		public String getCode_article_cgi() {
			return this.code_article_cgi;
		}

		public String lib_article_cgi;

		public String getLib_article_cgi() {
			return this.lib_article_cgi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.code_article_cgi == null) ? 0
								: this.code_article_cgi.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final article_cgiStruct other = (article_cgiStruct) obj;

			if (this.code_article_cgi == null) {
				if (other.code_article_cgi != null)
					return false;
			} else if (!this.code_article_cgi.equals(other.code_article_cgi))
				return false;

			return true;
		}

		public void copyDataTo(article_cgiStruct other) {

			other.id_article_cgi = this.id_article_cgi;
			other.code_article_cgi = this.code_article_cgi;
			other.lib_article_cgi = this.lib_article_cgi;

		}

		public void copyKeysDataTo(article_cgiStruct other) {

			other.code_article_cgi = this.code_article_cgi;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.code_article_cgi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_article_cgi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_article_cgi = readInteger(dis, ois);

				this.lib_article_cgi = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id_article_cgi, dos, oos);

				writeString(this.lib_article_cgi, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_article_cgi=" + String.valueOf(id_article_cgi));
			sb.append(",code_article_cgi=" + code_article_cgi);
			sb.append(",lib_article_cgi=" + lib_article_cgi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(article_cgiStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_article_cgi,
					other.code_article_cgi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				article_cgiStruct article_cgi = new article_cgiStruct();

				/**
				 * [tAdvancedHash_article_cgi begin ] start
				 */

				ok_Hash.put("tAdvancedHash_article_cgi", false);
				start_Hash.put("tAdvancedHash_article_cgi",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_article_cgi";

				int tos_count_tAdvancedHash_article_cgi = 0;

				// connection name:article_cgi
				// source node:tFileInputDelimited_6 -
				// inputs:(after_tFileInputDelimited_2)
				// outputs:(article_cgi,article_cgi) | target
				// node:tAdvancedHash_article_cgi - inputs:(article_cgi)
				// outputs:()
				// linked node: tMap_4 - inputs:(row19,article_cgi)
				// outputs:(avec_id_article_cgi)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_article_cgi = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<article_cgiStruct> tHash_Lookup_article_cgi = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<article_cgiStruct> getLookup(matchingModeEnum_article_cgi);

				globalMap.put("tHash_Lookup_article_cgi",
						tHash_Lookup_article_cgi);

				/**
				 * [tAdvancedHash_article_cgi begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /**
				 * Start field
				 * tFileInputDelimited_6:FILENAME
				 */
				context.tables_correspondance_path + "article_cgi.csv"/**
				 * End
				 * field tFileInputDelimited_6:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_6)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6
								.setEscapeChar(csvReadertFileInputDelimited_6
										.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_6.readNext()) {

								rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
										.getValues();
								if (!(rowtFileInputDelimited_6.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_6[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_6++;

								}

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
									: totalLinetFileInputDelimited_6
											- footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_6)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6
									.setEscapeChar(csvReadertFileInputDelimited_6
											.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_6 != 0
							&& csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
								.getValues();

						if (rowtFileInputDelimited_6.length == 1
								&& ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						article_cgi = null;

						article_cgi = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						article_cgi = new article_cgiStruct();
						try {

							if (rowtFileInputDelimited_6.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								article_cgi.id_article_cgi = null;

								article_cgi.code_article_cgi = null;

								article_cgi.lib_article_cgi = null;

							} else {

								for (int i_tFileInputDelimited_6 = 0; i_tFileInputDelimited_6 < rowtFileInputDelimited_6.length; i_tFileInputDelimited_6++) {
									rowtFileInputDelimited_6[i_tFileInputDelimited_6] = rowtFileInputDelimited_6[i_tFileInputDelimited_6]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										article_cgi.id_article_cgi = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
																null, ','));

									} else {
										article_cgi.id_article_cgi = null;
									}

								} else {
									article_cgi.id_article_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									article_cgi.code_article_cgi = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									article_cgi.code_article_cgi = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									article_cgi.lib_article_cgi = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									article_cgi.lib_article_cgi = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							article_cgi = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "article_cgi"
						if (article_cgi != null) {

							/**
							 * [tAdvancedHash_article_cgi main ] start
							 */

							currentComponent = "tAdvancedHash_article_cgi";

							article_cgiStruct article_cgi_HashRow = new article_cgiStruct();

							article_cgi_HashRow.id_article_cgi = article_cgi.id_article_cgi;

							article_cgi_HashRow.code_article_cgi = article_cgi.code_article_cgi;

							article_cgi_HashRow.lib_article_cgi = article_cgi.lib_article_cgi;

							tHash_Lookup_article_cgi.put(article_cgi_HashRow);

							tos_count_tAdvancedHash_article_cgi++;

							/**
							 * [tAdvancedHash_article_cgi main ] stop
							 */

						} // End of branch "article_cgi"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								nb_line_tFileInputDelimited_6);
					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_article_cgi end ] start
				 */

				currentComponent = "tAdvancedHash_article_cgi";

				tHash_Lookup_article_cgi.endPut();

				ok_Hash.put("tAdvancedHash_article_cgi", true);
				end_Hash.put("tAdvancedHash_article_cgi",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_article_cgi end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class nature_mutationStruct
			implements
			routines.system.IPersistableComparableLookupRow<nature_mutationStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_nature_mutation;

		public Integer getId_nature_mutation() {
			return this.id_nature_mutation;
		}

		public String lib_nature_mutation;

		public String getLib_nature_mutation() {
			return this.lib_nature_mutation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.lib_nature_mutation == null) ? 0
								: this.lib_nature_mutation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final nature_mutationStruct other = (nature_mutationStruct) obj;

			if (this.lib_nature_mutation == null) {
				if (other.lib_nature_mutation != null)
					return false;
			} else if (!this.lib_nature_mutation
					.equals(other.lib_nature_mutation))
				return false;

			return true;
		}

		public void copyDataTo(nature_mutationStruct other) {

			other.id_nature_mutation = this.id_nature_mutation;
			other.lib_nature_mutation = this.lib_nature_mutation;

		}

		public void copyKeysDataTo(nature_mutationStruct other) {

			other.lib_nature_mutation = this.lib_nature_mutation;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.lib_nature_mutation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lib_nature_mutation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_nature_mutation = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id_nature_mutation, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_nature_mutation="
					+ String.valueOf(id_nature_mutation));
			sb.append(",lib_nature_mutation=" + lib_nature_mutation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nature_mutationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.lib_nature_mutation,
					other.lib_nature_mutation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				nature_mutationStruct nature_mutation = new nature_mutationStruct();

				/**
				 * [tAdvancedHash_nature_mutation begin ] start
				 */

				ok_Hash.put("tAdvancedHash_nature_mutation", false);
				start_Hash.put("tAdvancedHash_nature_mutation",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_nature_mutation";

				int tos_count_tAdvancedHash_nature_mutation = 0;

				// connection name:nature_mutation
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_2)
				// outputs:(nature_mutation,nature_mutation) | target
				// node:tAdvancedHash_nature_mutation - inputs:(nature_mutation)
				// outputs:()
				// linked node: tMap_1 -
				// inputs:(extraction,nature_mutation,nature_culture,type_local,nature_culture_speciale)
				// outputs:(mutation_article_cgi_non_normalise,parcelle,lots,adresse,mutation,disposition,disposition_parcelle,adresse_dispoparc,locaux,volume,suf)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_nature_mutation = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_mutationStruct> tHash_Lookup_nature_mutation = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<nature_mutationStruct> getLookup(matchingModeEnum_nature_mutation);

				globalMap.put("tHash_Lookup_nature_mutation",
						tHash_Lookup_nature_mutation);

				/**
				 * [tAdvancedHash_nature_mutation begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.tables_correspondance_path + "nature_mutation.csv"/**
				 * End
				 * field tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						nature_mutation = null;

						nature_mutation = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						nature_mutation = new nature_mutationStruct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								nature_mutation.id_nature_mutation = null;

								nature_mutation.lib_nature_mutation = null;

							} else {

								for (int i_tFileInputDelimited_3 = 0; i_tFileInputDelimited_3 < rowtFileInputDelimited_3.length; i_tFileInputDelimited_3++) {
									rowtFileInputDelimited_3[i_tFileInputDelimited_3] = rowtFileInputDelimited_3[i_tFileInputDelimited_3]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										nature_mutation.id_nature_mutation = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
																null, ','));

									} else {
										nature_mutation.id_nature_mutation = null;
									}

								} else {
									nature_mutation.id_nature_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									nature_mutation.lib_nature_mutation = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									nature_mutation.lib_nature_mutation = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							nature_mutation = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "nature_mutation"
						if (nature_mutation != null) {

							/**
							 * [tAdvancedHash_nature_mutation main ] start
							 */

							currentComponent = "tAdvancedHash_nature_mutation";

							nature_mutationStruct nature_mutation_HashRow = new nature_mutationStruct();

							nature_mutation_HashRow.id_nature_mutation = nature_mutation.id_nature_mutation;

							nature_mutation_HashRow.lib_nature_mutation = nature_mutation.lib_nature_mutation;

							tHash_Lookup_nature_mutation
									.put(nature_mutation_HashRow);

							tos_count_tAdvancedHash_nature_mutation++;

							/**
							 * [tAdvancedHash_nature_mutation main ] stop
							 */

						} // End of branch "nature_mutation"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_nature_mutation end ] start
				 */

				currentComponent = "tAdvancedHash_nature_mutation";

				tHash_Lookup_nature_mutation.endPut();

				ok_Hash.put("tAdvancedHash_nature_mutation", true);
				end_Hash.put("tAdvancedHash_nature_mutation",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_nature_mutation end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class nature_cultureStruct
			implements
			routines.system.IPersistableComparableLookupRow<nature_cultureStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture;

		public Integer getNature_culture() {
			return this.nature_culture;
		}

		public String lib_nature_culture;

		public String getLib_nature_culture() {
			return this.lib_nature_culture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.lib_nature_culture == null) ? 0
								: this.lib_nature_culture.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final nature_cultureStruct other = (nature_cultureStruct) obj;

			if (this.lib_nature_culture == null) {
				if (other.lib_nature_culture != null)
					return false;
			} else if (!this.lib_nature_culture
					.equals(other.lib_nature_culture))
				return false;

			return true;
		}

		public void copyDataTo(nature_cultureStruct other) {

			other.nature_culture = this.nature_culture;
			other.lib_nature_culture = this.lib_nature_culture;

		}

		public void copyKeysDataTo(nature_cultureStruct other) {

			other.lib_nature_culture = this.lib_nature_culture;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.lib_nature_culture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lib_nature_culture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nature_culture = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.nature_culture, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture=" + String.valueOf(nature_culture));
			sb.append(",lib_nature_culture=" + lib_nature_culture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nature_cultureStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.lib_nature_culture,
					other.lib_nature_culture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				nature_cultureStruct nature_culture = new nature_cultureStruct();

				/**
				 * [tAdvancedHash_nature_culture begin ] start
				 */

				ok_Hash.put("tAdvancedHash_nature_culture", false);
				start_Hash.put("tAdvancedHash_nature_culture",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_nature_culture";

				int tos_count_tAdvancedHash_nature_culture = 0;

				// connection name:nature_culture
				// source node:tFileInputDelimited_7 -
				// inputs:(after_tFileInputDelimited_2)
				// outputs:(nature_culture,nature_culture) | target
				// node:tAdvancedHash_nature_culture - inputs:(nature_culture)
				// outputs:()
				// linked node: tMap_1 -
				// inputs:(extraction,nature_mutation,nature_culture,type_local,nature_culture_speciale)
				// outputs:(mutation_article_cgi_non_normalise,parcelle,lots,adresse,mutation,disposition,disposition_parcelle,adresse_dispoparc,locaux,volume,suf)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_nature_culture = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_cultureStruct> tHash_Lookup_nature_culture = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<nature_cultureStruct> getLookup(matchingModeEnum_nature_culture);

				globalMap.put("tHash_Lookup_nature_culture",
						tHash_Lookup_nature_culture);

				/**
				 * [tAdvancedHash_nature_culture begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				context.tables_correspondance_path + "nature_culture.csv"/**
				 * End
				 * field tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('"');

						csvReadertFileInputDelimited_7
								.setEscapeChar(csvReadertFileInputDelimited_7
										.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('"');

							csvReadertFileInputDelimited_7
									.setEscapeChar(csvReadertFileInputDelimited_7
											.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						nature_culture = null;

						nature_culture = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						nature_culture = new nature_cultureStruct();
						try {

							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								nature_culture.nature_culture = null;

								nature_culture.lib_nature_culture = null;

							} else {

								for (int i_tFileInputDelimited_7 = 0; i_tFileInputDelimited_7 < rowtFileInputDelimited_7.length; i_tFileInputDelimited_7++) {
									rowtFileInputDelimited_7[i_tFileInputDelimited_7] = rowtFileInputDelimited_7[i_tFileInputDelimited_7]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										nature_culture.nature_culture = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
																null, ','));

									} else {
										nature_culture.nature_culture = null;
									}

								} else {
									nature_culture.nature_culture = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									nature_culture.lib_nature_culture = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									nature_culture.lib_nature_culture = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							nature_culture = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "nature_culture"
						if (nature_culture != null) {

							/**
							 * [tAdvancedHash_nature_culture main ] start
							 */

							currentComponent = "tAdvancedHash_nature_culture";

							nature_cultureStruct nature_culture_HashRow = new nature_cultureStruct();

							nature_culture_HashRow.nature_culture = nature_culture.nature_culture;

							nature_culture_HashRow.lib_nature_culture = nature_culture.lib_nature_culture;

							tHash_Lookup_nature_culture
									.put(nature_culture_HashRow);

							tos_count_tAdvancedHash_nature_culture++;

							/**
							 * [tAdvancedHash_nature_culture main ] stop
							 */

						} // End of branch "nature_culture"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_nature_culture end ] start
				 */

				currentComponent = "tAdvancedHash_nature_culture";

				tHash_Lookup_nature_culture.endPut();

				ok_Hash.put("tAdvancedHash_nature_culture", true);
				end_Hash.put("tAdvancedHash_nature_culture",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_nature_culture end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class type_localStruct implements
			routines.system.IPersistableComparableLookupRow<type_localStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_type_local;

		public String getCode_type_local() {
			return this.code_type_local;
		}

		public String type_local;

		public String getType_local() {
			return this.type_local;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.type_local == null) ? 0 : this.type_local
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final type_localStruct other = (type_localStruct) obj;

			if (this.type_local == null) {
				if (other.type_local != null)
					return false;
			} else if (!this.type_local.equals(other.type_local))
				return false;

			return true;
		}

		public void copyDataTo(type_localStruct other) {

			other.code_type_local = this.code_type_local;
			other.type_local = this.type_local;

		}

		public void copyKeysDataTo(type_localStruct other) {

			other.type_local = this.type_local;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.type_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.code_type_local = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.code_type_local, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_type_local=" + code_type_local);
			sb.append(",type_local=" + type_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(type_localStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.type_local,
					other.type_local);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				type_localStruct type_local = new type_localStruct();

				/**
				 * [tAdvancedHash_type_local begin ] start
				 */

				ok_Hash.put("tAdvancedHash_type_local", false);
				start_Hash.put("tAdvancedHash_type_local",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_type_local";

				int tos_count_tAdvancedHash_type_local = 0;

				// connection name:type_local
				// source node:tFileInputDelimited_8 -
				// inputs:(after_tFileInputDelimited_2)
				// outputs:(type_local,type_local) | target
				// node:tAdvancedHash_type_local - inputs:(type_local)
				// outputs:()
				// linked node: tMap_1 -
				// inputs:(extraction,nature_mutation,nature_culture,type_local,nature_culture_speciale)
				// outputs:(mutation_article_cgi_non_normalise,parcelle,lots,adresse,mutation,disposition,disposition_parcelle,adresse_dispoparc,locaux,volume,suf)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_type_local = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<type_localStruct> tHash_Lookup_type_local = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<type_localStruct> getLookup(matchingModeEnum_type_local);

				globalMap.put("tHash_Lookup_type_local",
						tHash_Lookup_type_local);

				/**
				 * [tAdvancedHash_type_local begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.tables_correspondance_path + "type_local.csv"/**
				 * End field
				 * tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						type_local = null;

						type_local = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						type_local = new type_localStruct();
						try {

							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								type_local.code_type_local = null;

								type_local.type_local = null;

							} else {

								for (int i_tFileInputDelimited_8 = 0; i_tFileInputDelimited_8 < rowtFileInputDelimited_8.length; i_tFileInputDelimited_8++) {
									rowtFileInputDelimited_8[i_tFileInputDelimited_8] = rowtFileInputDelimited_8[i_tFileInputDelimited_8]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									type_local.code_type_local = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									type_local.code_type_local = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									type_local.type_local = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									type_local.type_local = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							type_local = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "type_local"
						if (type_local != null) {

							/**
							 * [tAdvancedHash_type_local main ] start
							 */

							currentComponent = "tAdvancedHash_type_local";

							type_localStruct type_local_HashRow = new type_localStruct();

							type_local_HashRow.code_type_local = type_local.code_type_local;

							type_local_HashRow.type_local = type_local.type_local;

							tHash_Lookup_type_local.put(type_local_HashRow);

							tos_count_tAdvancedHash_type_local++;

							/**
							 * [tAdvancedHash_type_local main ] stop
							 */

						} // End of branch "type_local"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_type_local end ] start
				 */

				currentComponent = "tAdvancedHash_type_local";

				tHash_Lookup_type_local.endPut();

				ok_Hash.put("tAdvancedHash_type_local", true);
				end_Hash.put("tAdvancedHash_type_local",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_type_local end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class nature_culture_specialeStruct
			implements
			routines.system.IPersistableComparableLookupRow<nature_culture_specialeStruct> {
		final static byte[] commonByteArrayLock_DVF_B_extraction_donnees_avec_cles = new byte[0];
		static byte[] commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer nature_culture_speciale;

		public Integer getNature_culture_speciale() {
			return this.nature_culture_speciale;
		}

		public String lib_nature_culture_speciale;

		public String getLib_nature_culture_speciale() {
			return this.lib_nature_culture_speciale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.lib_nature_culture_speciale == null) ? 0
								: this.lib_nature_culture_speciale.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final nature_culture_specialeStruct other = (nature_culture_specialeStruct) obj;

			if (this.lib_nature_culture_speciale == null) {
				if (other.lib_nature_culture_speciale != null)
					return false;
			} else if (!this.lib_nature_culture_speciale
					.equals(other.lib_nature_culture_speciale))
				return false;

			return true;
		}

		public void copyDataTo(nature_culture_specialeStruct other) {

			other.nature_culture_speciale = this.nature_culture_speciale;
			other.lib_nature_culture_speciale = this.lib_nature_culture_speciale;

		}

		public void copyKeysDataTo(nature_culture_specialeStruct other) {

			other.lib_nature_culture_speciale = this.lib_nature_culture_speciale;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_B_extraction_donnees_avec_cles.length) {
					if (length < 1024
							&& commonByteArray_DVF_B_extraction_donnees_avec_cles.length == 0) {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[1024];
					} else {
						commonByteArray_DVF_B_extraction_donnees_avec_cles = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length);
				strReturn = new String(
						commonByteArray_DVF_B_extraction_donnees_avec_cles, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_B_extraction_donnees_avec_cles) {

				try {

					int length = 0;

					this.lib_nature_culture_speciale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lib_nature_culture_speciale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nature_culture_speciale = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.nature_culture_speciale, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nature_culture_speciale="
					+ String.valueOf(nature_culture_speciale));
			sb.append(",lib_nature_culture_speciale="
					+ lib_nature_culture_speciale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nature_culture_specialeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(
					this.lib_nature_culture_speciale,
					other.lib_nature_culture_speciale);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				nature_culture_specialeStruct nature_culture_speciale = new nature_culture_specialeStruct();

				/**
				 * [tAdvancedHash_nature_culture_speciale begin ] start
				 */

				ok_Hash.put("tAdvancedHash_nature_culture_speciale", false);
				start_Hash.put("tAdvancedHash_nature_culture_speciale",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_nature_culture_speciale";

				int tos_count_tAdvancedHash_nature_culture_speciale = 0;

				// connection name:nature_culture_speciale
				// source node:tFileInputDelimited_10 -
				// inputs:(after_tFileInputDelimited_2)
				// outputs:(nature_culture_speciale,nature_culture_speciale) |
				// target node:tAdvancedHash_nature_culture_speciale -
				// inputs:(nature_culture_speciale) outputs:()
				// linked node: tMap_1 -
				// inputs:(extraction,nature_mutation,nature_culture,type_local,nature_culture_speciale)
				// outputs:(mutation_article_cgi_non_normalise,parcelle,lots,adresse,mutation,disposition,disposition_parcelle,adresse_dispoparc,locaux,volume,suf)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_nature_culture_speciale = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<nature_culture_specialeStruct> tHash_Lookup_nature_culture_speciale = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<nature_culture_specialeStruct> getLookup(matchingModeEnum_nature_culture_speciale);

				globalMap.put("tHash_Lookup_nature_culture_speciale",
						tHash_Lookup_nature_culture_speciale);

				/**
				 * [tAdvancedHash_nature_culture_speciale begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				int footer_tFileInputDelimited_10 = 0;
				int totalLinetFileInputDelimited_10 = 0;
				int limittFileInputDelimited_10 = -1;
				int lastLinetFileInputDelimited_10 = -1;

				char fieldSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_10 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_10 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_10 = /**
				 * Start field
				 * tFileInputDelimited_10:FILENAME
				 */
				context.tables_correspondance_path
						+ "nature_culture_speciale.csv"/**
				 * End field
				 * tFileInputDelimited_10:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_10 = null;

				try {

					String[] rowtFileInputDelimited_10 = null;
					int currentLinetFileInputDelimited_10 = 0;
					int outputLinetFileInputDelimited_10 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_10 = 0;
							if (footer_value_tFileInputDelimited_10 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_10,
									fieldSeparator_tFileInputDelimited_10[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_10)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_10[0]);
						}

						csvReadertFileInputDelimited_10
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
							csvReadertFileInputDelimited_10.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_10[0]);

						csvReadertFileInputDelimited_10.setQuoteChar('"');

						csvReadertFileInputDelimited_10
								.setEscapeChar(csvReadertFileInputDelimited_10
										.getQuoteChar());

						if (footer_tFileInputDelimited_10 > 0) {
							for (totalLinetFileInputDelimited_10 = 0; totalLinetFileInputDelimited_10 < 1; totalLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
							csvReadertFileInputDelimited_10
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_10.readNext()) {

								rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
										.getValues();
								if (!(rowtFileInputDelimited_10.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_10[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_10++;

								}

							}
							int lastLineTemptFileInputDelimited_10 = totalLinetFileInputDelimited_10
									- footer_tFileInputDelimited_10 < 0 ? 0
									: totalLinetFileInputDelimited_10
											- footer_tFileInputDelimited_10;
							if (lastLinetFileInputDelimited_10 > 0) {
								lastLinetFileInputDelimited_10 = lastLinetFileInputDelimited_10 < lastLineTemptFileInputDelimited_10 ? lastLinetFileInputDelimited_10
										: lastLineTemptFileInputDelimited_10;
							} else {
								lastLinetFileInputDelimited_10 = lastLineTemptFileInputDelimited_10;
							}

							csvReadertFileInputDelimited_10.close();
							if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_10,
										fieldSeparator_tFileInputDelimited_10[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_10)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_10[0]);
							}
							csvReadertFileInputDelimited_10
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
								csvReadertFileInputDelimited_10
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_10[0]);

							csvReadertFileInputDelimited_10.setQuoteChar('"');

							csvReadertFileInputDelimited_10
									.setEscapeChar(csvReadertFileInputDelimited_10
											.getQuoteChar());

						}

						if (limittFileInputDelimited_10 != 0) {
							for (currentLinetFileInputDelimited_10 = 0; currentLinetFileInputDelimited_10 < 1; currentLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
						}
						csvReadertFileInputDelimited_10
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_10 != 0
							&& csvReadertFileInputDelimited_10 != null
							&& csvReadertFileInputDelimited_10.readNext()) {

						rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
								.getValues();

						if (rowtFileInputDelimited_10.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_10[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_10++;

						if (lastLinetFileInputDelimited_10 > -1
								&& currentLinetFileInputDelimited_10 > lastLinetFileInputDelimited_10) {
							break;
						}
						outputLinetFileInputDelimited_10++;
						if (limittFileInputDelimited_10 > 0
								&& outputLinetFileInputDelimited_10 > limittFileInputDelimited_10) {
							break;
						}

						nature_culture_speciale = null;

						nature_culture_speciale = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						nature_culture_speciale = new nature_culture_specialeStruct();
						try {

							if (rowtFileInputDelimited_10.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_10[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								nature_culture_speciale.nature_culture_speciale = null;

								nature_culture_speciale.lib_nature_culture_speciale = null;

							} else {

								for (int i_tFileInputDelimited_10 = 0; i_tFileInputDelimited_10 < rowtFileInputDelimited_10.length; i_tFileInputDelimited_10++) {
									rowtFileInputDelimited_10[i_tFileInputDelimited_10] = rowtFileInputDelimited_10[i_tFileInputDelimited_10]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_10 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_10 = 0;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										nature_culture_speciale.nature_culture_speciale = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
																null, ','));

									} else {
										nature_culture_speciale.nature_culture_speciale = null;
									}

								} else {
									nature_culture_speciale.nature_culture_speciale = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 1;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									nature_culture_speciale.lib_nature_culture_speciale = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									nature_culture_speciale.lib_nature_culture_speciale = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							nature_culture_speciale = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "nature_culture_speciale"
						if (nature_culture_speciale != null) {

							/**
							 * [tAdvancedHash_nature_culture_speciale main ]
							 * start
							 */

							currentComponent = "tAdvancedHash_nature_culture_speciale";

							nature_culture_specialeStruct nature_culture_speciale_HashRow = new nature_culture_specialeStruct();

							nature_culture_speciale_HashRow.nature_culture_speciale = nature_culture_speciale.nature_culture_speciale;

							nature_culture_speciale_HashRow.lib_nature_culture_speciale = nature_culture_speciale.lib_nature_culture_speciale;

							tHash_Lookup_nature_culture_speciale
									.put(nature_culture_speciale_HashRow);

							tos_count_tAdvancedHash_nature_culture_speciale++;

							/**
							 * [tAdvancedHash_nature_culture_speciale main ]
							 * stop
							 */

						} // End of branch "nature_culture_speciale"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						nb_line_tFileInputDelimited_10++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_10 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_10 != null) {
							csvReadertFileInputDelimited_10.close();
						}
					}
					if (csvReadertFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								nb_line_tFileInputDelimited_10);
					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_nature_culture_speciale end ] start
				 */

				currentComponent = "tAdvancedHash_nature_culture_speciale";

				tHash_Lookup_nature_culture_speciale.endPut();

				ok_Hash.put("tAdvancedHash_nature_culture_speciale", true);
				end_Hash.put("tAdvancedHash_nature_culture_speciale",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_nature_culture_speciale end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "test";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final B_extraction_donnees_avec_cles B_extraction_donnees_avec_clesClass = new B_extraction_donnees_avec_cles();

		int exitCode = B_extraction_donnees_avec_clesClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = B_extraction_donnees_avec_cles.class
					.getClassLoader().getResourceAsStream(
							"dvf/b_extraction_donnees_avec_cles_0_2/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.db_host = (String) context.getProperty("db_host");
			context.db_login = (String) context.getProperty("db_login");
			context.db_name = (String) context.getProperty("db_name");
			context.db_password = (String) context.getProperty("db_password");
			context.db_port = (String) context.getProperty("db_port");
			context.db_schema = (String) context.getProperty("db_schema");
			context.dvf_file = (String) context.getProperty("dvf_file");
			context.log_path = (String) context.getProperty("log_path");
			context.prefixe_table = (String) context
					.getProperty("prefixe_table");
			context.source_path = (String) context.getProperty("source_path");
			context.tables_correspondance_path = (String) context
					.getProperty("tables_correspondance_path");
			context.target_path = (String) context.getProperty("target_path");
			context.temp_path = (String) context.getProperty("temp_path");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("db_host")) {
				context.db_host = (String) parentContextMap.get("db_host");
			}
			if (parentContextMap.containsKey("db_login")) {
				context.db_login = (String) parentContextMap.get("db_login");
			}
			if (parentContextMap.containsKey("db_name")) {
				context.db_name = (String) parentContextMap.get("db_name");
			}
			if (parentContextMap.containsKey("db_password")) {
				context.db_password = (String) parentContextMap
						.get("db_password");
			}
			if (parentContextMap.containsKey("db_port")) {
				context.db_port = (String) parentContextMap.get("db_port");
			}
			if (parentContextMap.containsKey("db_schema")) {
				context.db_schema = (String) parentContextMap.get("db_schema");
			}
			if (parentContextMap.containsKey("dvf_file")) {
				context.dvf_file = (String) parentContextMap.get("dvf_file");
			}
			if (parentContextMap.containsKey("log_path")) {
				context.log_path = (String) parentContextMap.get("log_path");
			}
			if (parentContextMap.containsKey("prefixe_table")) {
				context.prefixe_table = (String) parentContextMap
						.get("prefixe_table");
			}
			if (parentContextMap.containsKey("source_path")) {
				context.source_path = (String) parentContextMap
						.get("source_path");
			}
			if (parentContextMap.containsKey("tables_correspondance_path")) {
				context.tables_correspondance_path = (String) parentContextMap
						.get("tables_correspondance_path");
			}
			if (parentContextMap.containsKey("target_path")) {
				context.target_path = (String) parentContextMap
						.get("target_path");
			}
			if (parentContextMap.containsKey("temp_path")) {
				context.temp_path = (String) parentContextMap.get("temp_path");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {

			e_tFileInputDelimited_2.printStackTrace();
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : B_extraction_donnees_avec_cles");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 911372 characters generated by Talend Open Studio for Data Integration on the
 * 17 décembre 2013 18:32:43 CET
 ************************************************************************************************/
