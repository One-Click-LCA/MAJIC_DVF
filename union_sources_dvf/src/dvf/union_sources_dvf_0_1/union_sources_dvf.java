// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dvf.union_sources_dvf_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: union_sources_dvf Purpose: fusionner les fichiers sources à importer<br>
 * Description: Fusion au sein d'un même fichier ("dvf_file" qui sera déposé dans "source_path") les données issues d'un ensemble de fichiers dvf bruts situés dans différents répertoire (Le répertoire parent est fleché par "bulk_source_path") <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class union_sources_dvf implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (control_folder_DVF != null) {

				this.setProperty("control_folder_DVF",
						control_folder_DVF.toString());

			}

			if (extract_folder_DVF != null) {

				this.setProperty("extract_folder_DVF",
						extract_folder_DVF.toString());

			}

			if (path_DVF != null) {

				this.setProperty("path_DVF", path_DVF.toString());

			}

			if (source_folder_DVF != null) {

				this.setProperty("source_folder_DVF",
						source_folder_DVF.toString());

			}

			if (source_union_folder_DVF != null) {

				this.setProperty("source_union_folder_DVF",
						source_union_folder_DVF.toString());

			}

		}

		public String control_folder_DVF;

		public String getControl_folder_DVF() {
			return this.control_folder_DVF;
		}

		public String extract_folder_DVF;

		public String getExtract_folder_DVF() {
			return this.extract_folder_DVF;
		}

		public String path_DVF;

		public String getPath_DVF() {
			return this.path_DVF;
		}

		public String source_folder_DVF;

		public String getSource_folder_DVF() {
			return this.source_folder_DVF;
		}

		public String source_union_folder_DVF;

		public String getSource_union_folder_DVF() {
			return this.source_union_folder_DVF;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "union_sources_dvf";
	private final String projectName = "DVF";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					union_sources_dvf.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(union_sources_dvf.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileDelete_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileDelete_1", System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFilterRow_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_UniqOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1_UniqOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_UniqIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1_UniqIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileDelete_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());
				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */
				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						context.path_DVF + context.source_union_folder_DVF
								+ "toute_livraison_DVF.txt");
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exists or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", context.path_DVF
						+ context.source_union_folder_DVF
						+ "toute_livraison_DVF.txt");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */
				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DVF_union_sources_dvf = new byte[0];
		static byte[] commonByteArray_DVF_union_sources_dvf = new byte[0];

		public String Code_service_CH;

		public String getCode_service_CH() {
			return this.Code_service_CH;
		}

		public String Reference_document;

		public String getReference_document() {
			return this.Reference_document;
		}

		public String A_Articles_CGI;

		public String getA_Articles_CGI() {
			return this.A_Articles_CGI;
		}

		public String B_Articles_CGI;

		public String getB_Articles_CGI() {
			return this.B_Articles_CGI;
		}

		public String C_Articles_CGI;

		public String getC_Articles_CGI() {
			return this.C_Articles_CGI;
		}

		public String D_Articles_CGI;

		public String getD_Articles_CGI() {
			return this.D_Articles_CGI;
		}

		public String E_Articles_CGI;

		public String getE_Articles_CGI() {
			return this.E_Articles_CGI;
		}

		public String No_disposition;

		public String getNo_disposition() {
			return this.No_disposition;
		}

		public String Date_mutation;

		public String getDate_mutation() {
			return this.Date_mutation;
		}

		public String Nature_mutation;

		public String getNature_mutation() {
			return this.Nature_mutation;
		}

		public String Valeur_fonciere;

		public String getValeur_fonciere() {
			return this.Valeur_fonciere;
		}

		public String No_voie;

		public String getNo_voie() {
			return this.No_voie;
		}

		public String B_T_Q;

		public String getB_T_Q() {
			return this.B_T_Q;
		}

		public String Type_de_voie;

		public String getType_de_voie() {
			return this.Type_de_voie;
		}

		public String Code_voie;

		public String getCode_voie() {
			return this.Code_voie;
		}

		public String Voie;

		public String getVoie() {
			return this.Voie;
		}

		public String Code_postal;

		public String getCode_postal() {
			return this.Code_postal;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public String Code_departement;

		public String getCode_departement() {
			return this.Code_departement;
		}

		public String Code_commune;

		public String getCode_commune() {
			return this.Code_commune;
		}

		public String Prefixe_de_section;

		public String getPrefixe_de_section() {
			return this.Prefixe_de_section;
		}

		public String Section;

		public String getSection() {
			return this.Section;
		}

		public String No_plan;

		public String getNo_plan() {
			return this.No_plan;
		}

		public String No_Volume;

		public String getNo_Volume() {
			return this.No_Volume;
		}

		public String Aer_lot;

		public String getAer_lot() {
			return this.Aer_lot;
		}

		public String Surface_Carrez_du_Aer_lot;

		public String getSurface_Carrez_du_Aer_lot() {
			return this.Surface_Carrez_du_Aer_lot;
		}

		public String Beme_lot;

		public String getBeme_lot() {
			return this.Beme_lot;
		}

		public String Surface_Carrez_du_Beme_lot;

		public String getSurface_Carrez_du_Beme_lot() {
			return this.Surface_Carrez_du_Beme_lot;
		}

		public String Ceme_lot;

		public String getCeme_lot() {
			return this.Ceme_lot;
		}

		public String Surface_Carrez_du_Ceme_lot;

		public String getSurface_Carrez_du_Ceme_lot() {
			return this.Surface_Carrez_du_Ceme_lot;
		}

		public String Deme_lot;

		public String getDeme_lot() {
			return this.Deme_lot;
		}

		public String Surface_Carrez_du_Deme_lot;

		public String getSurface_Carrez_du_Deme_lot() {
			return this.Surface_Carrez_du_Deme_lot;
		}

		public String Eeme_lot;

		public String getEeme_lot() {
			return this.Eeme_lot;
		}

		public String Surface_Carrez_du_Eeme_lot;

		public String getSurface_Carrez_du_Eeme_lot() {
			return this.Surface_Carrez_du_Eeme_lot;
		}

		public String Nombre_de_lots;

		public String getNombre_de_lots() {
			return this.Nombre_de_lots;
		}

		public String Code_type_local;

		public String getCode_type_local() {
			return this.Code_type_local;
		}

		public String Type_local;

		public String getType_local() {
			return this.Type_local;
		}

		public String Identifiant_local;

		public String getIdentifiant_local() {
			return this.Identifiant_local;
		}

		public String Surface_reelle_bati;

		public String getSurface_reelle_bati() {
			return this.Surface_reelle_bati;
		}

		public String Nombre_pieces_principales;

		public String getNombre_pieces_principales() {
			return this.Nombre_pieces_principales;
		}

		public String Nature_culture;

		public String getNature_culture() {
			return this.Nature_culture;
		}

		public String Nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.Nature_culture_speciale;
		}

		public String Surface_terrain;

		public String getSurface_terrain() {
			return this.Surface_terrain;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_union_sources_dvf.length) {
					if (length < 1024
							&& commonByteArray_DVF_union_sources_dvf.length == 0) {
						commonByteArray_DVF_union_sources_dvf = new byte[1024];
					} else {
						commonByteArray_DVF_union_sources_dvf = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_union_sources_dvf, 0, length);
				strReturn = new String(commonByteArray_DVF_union_sources_dvf,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_union_sources_dvf) {

				try {

					int length = 0;

					this.Code_service_CH = readString(dis);

					this.Reference_document = readString(dis);

					this.A_Articles_CGI = readString(dis);

					this.B_Articles_CGI = readString(dis);

					this.C_Articles_CGI = readString(dis);

					this.D_Articles_CGI = readString(dis);

					this.E_Articles_CGI = readString(dis);

					this.No_disposition = readString(dis);

					this.Date_mutation = readString(dis);

					this.Nature_mutation = readString(dis);

					this.Valeur_fonciere = readString(dis);

					this.No_voie = readString(dis);

					this.B_T_Q = readString(dis);

					this.Type_de_voie = readString(dis);

					this.Code_voie = readString(dis);

					this.Voie = readString(dis);

					this.Code_postal = readString(dis);

					this.Commune = readString(dis);

					this.Code_departement = readString(dis);

					this.Code_commune = readString(dis);

					this.Prefixe_de_section = readString(dis);

					this.Section = readString(dis);

					this.No_plan = readString(dis);

					this.No_Volume = readString(dis);

					this.Aer_lot = readString(dis);

					this.Surface_Carrez_du_Aer_lot = readString(dis);

					this.Beme_lot = readString(dis);

					this.Surface_Carrez_du_Beme_lot = readString(dis);

					this.Ceme_lot = readString(dis);

					this.Surface_Carrez_du_Ceme_lot = readString(dis);

					this.Deme_lot = readString(dis);

					this.Surface_Carrez_du_Deme_lot = readString(dis);

					this.Eeme_lot = readString(dis);

					this.Surface_Carrez_du_Eeme_lot = readString(dis);

					this.Nombre_de_lots = readString(dis);

					this.Code_type_local = readString(dis);

					this.Type_local = readString(dis);

					this.Identifiant_local = readString(dis);

					this.Surface_reelle_bati = readString(dis);

					this.Nombre_pieces_principales = readString(dis);

					this.Nature_culture = readString(dis);

					this.Nature_culture_speciale = readString(dis);

					this.Surface_terrain = readString(dis);

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Code_service_CH, dos);

				// String

				writeString(this.Reference_document, dos);

				// String

				writeString(this.A_Articles_CGI, dos);

				// String

				writeString(this.B_Articles_CGI, dos);

				// String

				writeString(this.C_Articles_CGI, dos);

				// String

				writeString(this.D_Articles_CGI, dos);

				// String

				writeString(this.E_Articles_CGI, dos);

				// String

				writeString(this.No_disposition, dos);

				// String

				writeString(this.Date_mutation, dos);

				// String

				writeString(this.Nature_mutation, dos);

				// String

				writeString(this.Valeur_fonciere, dos);

				// String

				writeString(this.No_voie, dos);

				// String

				writeString(this.B_T_Q, dos);

				// String

				writeString(this.Type_de_voie, dos);

				// String

				writeString(this.Code_voie, dos);

				// String

				writeString(this.Voie, dos);

				// String

				writeString(this.Code_postal, dos);

				// String

				writeString(this.Commune, dos);

				// String

				writeString(this.Code_departement, dos);

				// String

				writeString(this.Code_commune, dos);

				// String

				writeString(this.Prefixe_de_section, dos);

				// String

				writeString(this.Section, dos);

				// String

				writeString(this.No_plan, dos);

				// String

				writeString(this.No_Volume, dos);

				// String

				writeString(this.Aer_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Aer_lot, dos);

				// String

				writeString(this.Beme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Beme_lot, dos);

				// String

				writeString(this.Ceme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Ceme_lot, dos);

				// String

				writeString(this.Deme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Deme_lot, dos);

				// String

				writeString(this.Eeme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Eeme_lot, dos);

				// String

				writeString(this.Nombre_de_lots, dos);

				// String

				writeString(this.Code_type_local, dos);

				// String

				writeString(this.Type_local, dos);

				// String

				writeString(this.Identifiant_local, dos);

				// String

				writeString(this.Surface_reelle_bati, dos);

				// String

				writeString(this.Nombre_pieces_principales, dos);

				// String

				writeString(this.Nature_culture, dos);

				// String

				writeString(this.Nature_culture_speciale, dos);

				// String

				writeString(this.Surface_terrain, dos);

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Code_service_CH=" + Code_service_CH);
			sb.append(",Reference_document=" + Reference_document);
			sb.append(",A_Articles_CGI=" + A_Articles_CGI);
			sb.append(",B_Articles_CGI=" + B_Articles_CGI);
			sb.append(",C_Articles_CGI=" + C_Articles_CGI);
			sb.append(",D_Articles_CGI=" + D_Articles_CGI);
			sb.append(",E_Articles_CGI=" + E_Articles_CGI);
			sb.append(",No_disposition=" + No_disposition);
			sb.append(",Date_mutation=" + Date_mutation);
			sb.append(",Nature_mutation=" + Nature_mutation);
			sb.append(",Valeur_fonciere=" + Valeur_fonciere);
			sb.append(",No_voie=" + No_voie);
			sb.append(",B_T_Q=" + B_T_Q);
			sb.append(",Type_de_voie=" + Type_de_voie);
			sb.append(",Code_voie=" + Code_voie);
			sb.append(",Voie=" + Voie);
			sb.append(",Code_postal=" + Code_postal);
			sb.append(",Commune=" + Commune);
			sb.append(",Code_departement=" + Code_departement);
			sb.append(",Code_commune=" + Code_commune);
			sb.append(",Prefixe_de_section=" + Prefixe_de_section);
			sb.append(",Section=" + Section);
			sb.append(",No_plan=" + No_plan);
			sb.append(",No_Volume=" + No_Volume);
			sb.append(",Aer_lot=" + Aer_lot);
			sb.append(",Surface_Carrez_du_Aer_lot=" + Surface_Carrez_du_Aer_lot);
			sb.append(",Beme_lot=" + Beme_lot);
			sb.append(",Surface_Carrez_du_Beme_lot="
					+ Surface_Carrez_du_Beme_lot);
			sb.append(",Ceme_lot=" + Ceme_lot);
			sb.append(",Surface_Carrez_du_Ceme_lot="
					+ Surface_Carrez_du_Ceme_lot);
			sb.append(",Deme_lot=" + Deme_lot);
			sb.append(",Surface_Carrez_du_Deme_lot="
					+ Surface_Carrez_du_Deme_lot);
			sb.append(",Eeme_lot=" + Eeme_lot);
			sb.append(",Surface_Carrez_du_Eeme_lot="
					+ Surface_Carrez_du_Eeme_lot);
			sb.append(",Nombre_de_lots=" + Nombre_de_lots);
			sb.append(",Code_type_local=" + Code_type_local);
			sb.append(",Type_local=" + Type_local);
			sb.append(",Identifiant_local=" + Identifiant_local);
			sb.append(",Surface_reelle_bati=" + Surface_reelle_bati);
			sb.append(",Nombre_pieces_principales=" + Nombre_pieces_principales);
			sb.append(",Nature_culture=" + Nature_culture);
			sb.append(",Nature_culture_speciale=" + Nature_culture_speciale);
			sb.append(",Surface_terrain=" + Surface_terrain);
			sb.append(",newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DVF_union_sources_dvf = new byte[0];
		static byte[] commonByteArray_DVF_union_sources_dvf = new byte[0];

		public String Code_service_CH;

		public String getCode_service_CH() {
			return this.Code_service_CH;
		}

		public String Reference_document;

		public String getReference_document() {
			return this.Reference_document;
		}

		public String A_Articles_CGI;

		public String getA_Articles_CGI() {
			return this.A_Articles_CGI;
		}

		public String B_Articles_CGI;

		public String getB_Articles_CGI() {
			return this.B_Articles_CGI;
		}

		public String C_Articles_CGI;

		public String getC_Articles_CGI() {
			return this.C_Articles_CGI;
		}

		public String D_Articles_CGI;

		public String getD_Articles_CGI() {
			return this.D_Articles_CGI;
		}

		public String E_Articles_CGI;

		public String getE_Articles_CGI() {
			return this.E_Articles_CGI;
		}

		public String No_disposition;

		public String getNo_disposition() {
			return this.No_disposition;
		}

		public String Date_mutation;

		public String getDate_mutation() {
			return this.Date_mutation;
		}

		public String Nature_mutation;

		public String getNature_mutation() {
			return this.Nature_mutation;
		}

		public String Valeur_fonciere;

		public String getValeur_fonciere() {
			return this.Valeur_fonciere;
		}

		public String No_voie;

		public String getNo_voie() {
			return this.No_voie;
		}

		public String B_T_Q;

		public String getB_T_Q() {
			return this.B_T_Q;
		}

		public String Type_de_voie;

		public String getType_de_voie() {
			return this.Type_de_voie;
		}

		public String Code_voie;

		public String getCode_voie() {
			return this.Code_voie;
		}

		public String Voie;

		public String getVoie() {
			return this.Voie;
		}

		public String Code_postal;

		public String getCode_postal() {
			return this.Code_postal;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public String Code_departement;

		public String getCode_departement() {
			return this.Code_departement;
		}

		public String Code_commune;

		public String getCode_commune() {
			return this.Code_commune;
		}

		public String Prefixe_de_section;

		public String getPrefixe_de_section() {
			return this.Prefixe_de_section;
		}

		public String Section;

		public String getSection() {
			return this.Section;
		}

		public String No_plan;

		public String getNo_plan() {
			return this.No_plan;
		}

		public String No_Volume;

		public String getNo_Volume() {
			return this.No_Volume;
		}

		public String Aer_lot;

		public String getAer_lot() {
			return this.Aer_lot;
		}

		public String Surface_Carrez_du_Aer_lot;

		public String getSurface_Carrez_du_Aer_lot() {
			return this.Surface_Carrez_du_Aer_lot;
		}

		public String Beme_lot;

		public String getBeme_lot() {
			return this.Beme_lot;
		}

		public String Surface_Carrez_du_Beme_lot;

		public String getSurface_Carrez_du_Beme_lot() {
			return this.Surface_Carrez_du_Beme_lot;
		}

		public String Ceme_lot;

		public String getCeme_lot() {
			return this.Ceme_lot;
		}

		public String Surface_Carrez_du_Ceme_lot;

		public String getSurface_Carrez_du_Ceme_lot() {
			return this.Surface_Carrez_du_Ceme_lot;
		}

		public String Deme_lot;

		public String getDeme_lot() {
			return this.Deme_lot;
		}

		public String Surface_Carrez_du_Deme_lot;

		public String getSurface_Carrez_du_Deme_lot() {
			return this.Surface_Carrez_du_Deme_lot;
		}

		public String Eeme_lot;

		public String getEeme_lot() {
			return this.Eeme_lot;
		}

		public String Surface_Carrez_du_Eeme_lot;

		public String getSurface_Carrez_du_Eeme_lot() {
			return this.Surface_Carrez_du_Eeme_lot;
		}

		public String Nombre_de_lots;

		public String getNombre_de_lots() {
			return this.Nombre_de_lots;
		}

		public String Code_type_local;

		public String getCode_type_local() {
			return this.Code_type_local;
		}

		public String Type_local;

		public String getType_local() {
			return this.Type_local;
		}

		public String Identifiant_local;

		public String getIdentifiant_local() {
			return this.Identifiant_local;
		}

		public String Surface_reelle_bati;

		public String getSurface_reelle_bati() {
			return this.Surface_reelle_bati;
		}

		public String Nombre_pieces_principales;

		public String getNombre_pieces_principales() {
			return this.Nombre_pieces_principales;
		}

		public String Nature_culture;

		public String getNature_culture() {
			return this.Nature_culture;
		}

		public String Nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.Nature_culture_speciale;
		}

		public String Surface_terrain;

		public String getSurface_terrain() {
			return this.Surface_terrain;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_union_sources_dvf.length) {
					if (length < 1024
							&& commonByteArray_DVF_union_sources_dvf.length == 0) {
						commonByteArray_DVF_union_sources_dvf = new byte[1024];
					} else {
						commonByteArray_DVF_union_sources_dvf = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_union_sources_dvf, 0, length);
				strReturn = new String(commonByteArray_DVF_union_sources_dvf,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_union_sources_dvf) {

				try {

					int length = 0;

					this.Code_service_CH = readString(dis);

					this.Reference_document = readString(dis);

					this.A_Articles_CGI = readString(dis);

					this.B_Articles_CGI = readString(dis);

					this.C_Articles_CGI = readString(dis);

					this.D_Articles_CGI = readString(dis);

					this.E_Articles_CGI = readString(dis);

					this.No_disposition = readString(dis);

					this.Date_mutation = readString(dis);

					this.Nature_mutation = readString(dis);

					this.Valeur_fonciere = readString(dis);

					this.No_voie = readString(dis);

					this.B_T_Q = readString(dis);

					this.Type_de_voie = readString(dis);

					this.Code_voie = readString(dis);

					this.Voie = readString(dis);

					this.Code_postal = readString(dis);

					this.Commune = readString(dis);

					this.Code_departement = readString(dis);

					this.Code_commune = readString(dis);

					this.Prefixe_de_section = readString(dis);

					this.Section = readString(dis);

					this.No_plan = readString(dis);

					this.No_Volume = readString(dis);

					this.Aer_lot = readString(dis);

					this.Surface_Carrez_du_Aer_lot = readString(dis);

					this.Beme_lot = readString(dis);

					this.Surface_Carrez_du_Beme_lot = readString(dis);

					this.Ceme_lot = readString(dis);

					this.Surface_Carrez_du_Ceme_lot = readString(dis);

					this.Deme_lot = readString(dis);

					this.Surface_Carrez_du_Deme_lot = readString(dis);

					this.Eeme_lot = readString(dis);

					this.Surface_Carrez_du_Eeme_lot = readString(dis);

					this.Nombre_de_lots = readString(dis);

					this.Code_type_local = readString(dis);

					this.Type_local = readString(dis);

					this.Identifiant_local = readString(dis);

					this.Surface_reelle_bati = readString(dis);

					this.Nombre_pieces_principales = readString(dis);

					this.Nature_culture = readString(dis);

					this.Nature_culture_speciale = readString(dis);

					this.Surface_terrain = readString(dis);

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Code_service_CH, dos);

				// String

				writeString(this.Reference_document, dos);

				// String

				writeString(this.A_Articles_CGI, dos);

				// String

				writeString(this.B_Articles_CGI, dos);

				// String

				writeString(this.C_Articles_CGI, dos);

				// String

				writeString(this.D_Articles_CGI, dos);

				// String

				writeString(this.E_Articles_CGI, dos);

				// String

				writeString(this.No_disposition, dos);

				// String

				writeString(this.Date_mutation, dos);

				// String

				writeString(this.Nature_mutation, dos);

				// String

				writeString(this.Valeur_fonciere, dos);

				// String

				writeString(this.No_voie, dos);

				// String

				writeString(this.B_T_Q, dos);

				// String

				writeString(this.Type_de_voie, dos);

				// String

				writeString(this.Code_voie, dos);

				// String

				writeString(this.Voie, dos);

				// String

				writeString(this.Code_postal, dos);

				// String

				writeString(this.Commune, dos);

				// String

				writeString(this.Code_departement, dos);

				// String

				writeString(this.Code_commune, dos);

				// String

				writeString(this.Prefixe_de_section, dos);

				// String

				writeString(this.Section, dos);

				// String

				writeString(this.No_plan, dos);

				// String

				writeString(this.No_Volume, dos);

				// String

				writeString(this.Aer_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Aer_lot, dos);

				// String

				writeString(this.Beme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Beme_lot, dos);

				// String

				writeString(this.Ceme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Ceme_lot, dos);

				// String

				writeString(this.Deme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Deme_lot, dos);

				// String

				writeString(this.Eeme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Eeme_lot, dos);

				// String

				writeString(this.Nombre_de_lots, dos);

				// String

				writeString(this.Code_type_local, dos);

				// String

				writeString(this.Type_local, dos);

				// String

				writeString(this.Identifiant_local, dos);

				// String

				writeString(this.Surface_reelle_bati, dos);

				// String

				writeString(this.Nombre_pieces_principales, dos);

				// String

				writeString(this.Nature_culture, dos);

				// String

				writeString(this.Nature_culture_speciale, dos);

				// String

				writeString(this.Surface_terrain, dos);

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Code_service_CH=" + Code_service_CH);
			sb.append(",Reference_document=" + Reference_document);
			sb.append(",A_Articles_CGI=" + A_Articles_CGI);
			sb.append(",B_Articles_CGI=" + B_Articles_CGI);
			sb.append(",C_Articles_CGI=" + C_Articles_CGI);
			sb.append(",D_Articles_CGI=" + D_Articles_CGI);
			sb.append(",E_Articles_CGI=" + E_Articles_CGI);
			sb.append(",No_disposition=" + No_disposition);
			sb.append(",Date_mutation=" + Date_mutation);
			sb.append(",Nature_mutation=" + Nature_mutation);
			sb.append(",Valeur_fonciere=" + Valeur_fonciere);
			sb.append(",No_voie=" + No_voie);
			sb.append(",B_T_Q=" + B_T_Q);
			sb.append(",Type_de_voie=" + Type_de_voie);
			sb.append(",Code_voie=" + Code_voie);
			sb.append(",Voie=" + Voie);
			sb.append(",Code_postal=" + Code_postal);
			sb.append(",Commune=" + Commune);
			sb.append(",Code_departement=" + Code_departement);
			sb.append(",Code_commune=" + Code_commune);
			sb.append(",Prefixe_de_section=" + Prefixe_de_section);
			sb.append(",Section=" + Section);
			sb.append(",No_plan=" + No_plan);
			sb.append(",No_Volume=" + No_Volume);
			sb.append(",Aer_lot=" + Aer_lot);
			sb.append(",Surface_Carrez_du_Aer_lot=" + Surface_Carrez_du_Aer_lot);
			sb.append(",Beme_lot=" + Beme_lot);
			sb.append(",Surface_Carrez_du_Beme_lot="
					+ Surface_Carrez_du_Beme_lot);
			sb.append(",Ceme_lot=" + Ceme_lot);
			sb.append(",Surface_Carrez_du_Ceme_lot="
					+ Surface_Carrez_du_Ceme_lot);
			sb.append(",Deme_lot=" + Deme_lot);
			sb.append(",Surface_Carrez_du_Deme_lot="
					+ Surface_Carrez_du_Deme_lot);
			sb.append(",Eeme_lot=" + Eeme_lot);
			sb.append(",Surface_Carrez_du_Eeme_lot="
					+ Surface_Carrez_du_Eeme_lot);
			sb.append(",Nombre_de_lots=" + Nombre_de_lots);
			sb.append(",Code_type_local=" + Code_type_local);
			sb.append(",Type_local=" + Type_local);
			sb.append(",Identifiant_local=" + Identifiant_local);
			sb.append(",Surface_reelle_bati=" + Surface_reelle_bati);
			sb.append(",Nombre_pieces_principales=" + Nombre_pieces_principales);
			sb.append(",Nature_culture=" + Nature_culture);
			sb.append(",Nature_culture_speciale=" + Nature_culture_speciale);
			sb.append(",Surface_terrain=" + Surface_terrain);
			sb.append(",newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileInputDelimited_2 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());
				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.path_DVF
						+ context.source_folder_DVF;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				maskList_tFileList_1.add("*");
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);

						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final String filemask_tFileList_1 : maskList_tFileList_1) {
								String filemask_compile_tFileList_1 = filemask_tFileList_1;

								filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_1.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_1);

								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									list_tFileList_1.add(file);
								}
							}
							return true;
						} else {
							file.listFiles(this);
						}

						return false;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */
					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */
					NB_ITERATE_tFileInputDelimited_2++;
					iterateLoop++;

					/**
					 * [tFileOutputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_1", false);
					start_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_1";

					int tos_count_tFileOutputDelimited_1 = 0;

					String fileName_tFileOutputDelimited_1 = "";
					fileName_tFileOutputDelimited_1 = (new java.io.File(
							context.path_DVF + context.source_union_folder_DVF
									+ "toute_livraison_DVF.txt"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_1 = null;
					String extension_tFileOutputDelimited_1 = null;
					String directory_tFileOutputDelimited_1 = null;
					if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						}
						directory_tFileOutputDelimited_1 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_1 = true;
					java.io.File filetFileOutputDelimited_1 = new java.io.File(
							fileName_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
					if (filetFileOutputDelimited_1.exists()) {
						isFileGenerated_tFileOutputDelimited_1 = false;
					}

					String[] headColutFileOutputDelimited_1 = new String[44];
					class CSVBasicSet_tFileOutputDelimited_1 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_1[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_1 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator(";");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_1[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_1 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_1[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_1[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_1 = 0;
					int splitEvery_tFileOutputDelimited_1 = 1000;
					int splitedFileNo_tFileOutputDelimited_1 = 0;
					int currentRow_tFileOutputDelimited_1 = 0;

					CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
					csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
					csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_1
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_1 != null
							&& directory_tFileOutputDelimited_1.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
								directory_tFileOutputDelimited_1);
						if (!dir_tFileOutputDelimited_1.exists()) {
							dir_tFileOutputDelimited_1.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;
					try {
						CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_1,
														true), "ISO-8859-15")));
						CsvWritertFileOutputDelimited_1
								.setSeparator(csvSettings_tFileOutputDelimited_1
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_1
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_1
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_1
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_1.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_1
											.getRowDelim());
						}

						CsvWritertFileOutputDelimited_1
								.setEscapeChar(csvSettings_tFileOutputDelimited_1
										.getEscapeChar());
						CsvWritertFileOutputDelimited_1
								.setQuoteChar(csvSettings_tFileOutputDelimited_1
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_1
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_1 begin ] stop
						 */

						/**
						 * [tFilterRow_1 begin ] start
						 */

						ok_Hash.put("tFilterRow_1", false);
						start_Hash.put("tFilterRow_1",
								System.currentTimeMillis());
						currentComponent = "tFilterRow_1";

						int tos_count_tFilterRow_1 = 0;
						int nb_line_tFilterRow_1 = 0;
						int nb_line_ok_tFilterRow_1 = 0;
						int nb_line_reject_tFilterRow_1 = 0;

						class Operator_tFilterRow_1 {
							private String sErrorMsg = "";
							private boolean bMatchFlag = true;
							private String sUnionFlag = "&&";

							public Operator_tFilterRow_1(String unionFlag) {
								sUnionFlag = unionFlag;
								bMatchFlag = "||".equals(unionFlag) ? false
										: true;
							}

							public String getErrorMsg() {
								if (sErrorMsg != null && sErrorMsg.length() > 1)
									return sErrorMsg.substring(1);
								else
									return null;
							}

							public boolean getMatchFlag() {
								return bMatchFlag;
							}

							public void matches(boolean partMatched,
									String reason) {
								// no need to care about the next judgement
								if ("||".equals(sUnionFlag) && bMatchFlag) {
									return;
								}

								if (!partMatched) {
									sErrorMsg += "|" + reason;
								}

								if ("||".equals(sUnionFlag))
									bMatchFlag = bMatchFlag || partMatched;
								else
									bMatchFlag = bMatchFlag && partMatched;
							}
						}

						/**
						 * [tFilterRow_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 begin ] start
						 */

						ok_Hash.put("tFileInputDelimited_2", false);
						start_Hash.put("tFileInputDelimited_2",
								System.currentTimeMillis());
						currentComponent = "tFileInputDelimited_2";

						int tos_count_tFileInputDelimited_2 = 0;

						int nb_line_tFileInputDelimited_2 = 0;
						org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
						try {

							Object filename_tFileInputDelimited_2 = ((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH"));
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
								if (footer_value_tFileInputDelimited_2 > 0
										|| random_value_tFileInputDelimited_2 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer and random shouldn't be bigger than 0.");
								}

							}
							try {
								fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
										((String) globalMap
												.get("tFileList_1_CURRENT_FILEPATH")),
										"ISO-8859-15", "|", "\n", true, 1, 0,
										-1, -1, false);
							} catch (java.lang.Exception e) {

								System.err.println(e.getMessage());

							}

							while (fid_tFileInputDelimited_2 != null
									&& fid_tFileInputDelimited_2.nextRecord()) {

								row1 = null;

								boolean whetherReject_tFileInputDelimited_2 = false;
								row1 = new row1Struct();
								try {

									int columnIndexWithD_tFileInputDelimited_2 = 0;

									columnIndexWithD_tFileInputDelimited_2 = 0;

									row1.Code_service_CH = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 1;

									row1.Reference_document = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 2;

									row1.A_Articles_CGI = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 3;

									row1.B_Articles_CGI = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 4;

									row1.C_Articles_CGI = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 5;

									row1.D_Articles_CGI = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 6;

									row1.E_Articles_CGI = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 7;

									row1.No_disposition = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 8;

									row1.Date_mutation = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 9;

									row1.Nature_mutation = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 10;

									row1.Valeur_fonciere = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 11;

									row1.No_voie = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 12;

									row1.B_T_Q = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 13;

									row1.Type_de_voie = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 14;

									row1.Code_voie = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 15;

									row1.Voie = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 16;

									row1.Code_postal = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 17;

									row1.Commune = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 18;

									row1.Code_departement = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 19;

									row1.Code_commune = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 20;

									row1.Prefixe_de_section = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 21;

									row1.Section = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 22;

									row1.No_plan = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 23;

									row1.No_Volume = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 24;

									row1.Aer_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 25;

									row1.Surface_Carrez_du_Aer_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 26;

									row1.Beme_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 27;

									row1.Surface_Carrez_du_Beme_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 28;

									row1.Ceme_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 29;

									row1.Surface_Carrez_du_Ceme_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 30;

									row1.Deme_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 31;

									row1.Surface_Carrez_du_Deme_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 32;

									row1.Eeme_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 33;

									row1.Surface_Carrez_du_Eeme_lot = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 34;

									row1.Nombre_de_lots = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 35;

									row1.Code_type_local = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 36;

									row1.Type_local = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 37;

									row1.Identifiant_local = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 38;

									row1.Surface_reelle_bati = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 39;

									row1.Nombre_pieces_principales = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 40;

									row1.Nature_culture = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 41;

									row1.Nature_culture_speciale = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 42;

									row1.Surface_terrain = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

									columnIndexWithD_tFileInputDelimited_2 = 43;

									row1.newColumn = fid_tFileInputDelimited_2
											.get(columnIndexWithD_tFileInputDelimited_2)
											.trim();

								} catch (java.lang.Exception e) {
									whetherReject_tFileInputDelimited_2 = true;

									System.err.println(e.getMessage());
									row1 = null;

								}

								/**
								 * [tFileInputDelimited_2 begin ] stop
								 */
								/**
								 * [tFileInputDelimited_2 main ] start
								 */

								currentComponent = "tFileInputDelimited_2";

								tos_count_tFileInputDelimited_2++;

								/**
								 * [tFileInputDelimited_2 main ] stop
								 */
								// Start of branch "row1"
								if (row1 != null) {

									/**
									 * [tFilterRow_1 main ] start
									 */

									currentComponent = "tFilterRow_1";

									row2 = null;
									Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
											"||");
									ope_tFilterRow_1
											.matches(
													(row1.Code_departement == null ? false
															: row1.Code_departement
																	.compareTo("77") == 0),
													"Code_departement.compareTo(\"77\") == 0 failed");
									ope_tFilterRow_1
											.matches(
													(row1.Code_departement == null ? false
															: row1.Code_departement
																	.compareTo("91") == 0),
													"Code_departement.compareTo(\"91\") == 0 failed");
									ope_tFilterRow_1
											.matches(
													(row1.Code_departement == null ? false
															: row1.Code_departement
																	.compareTo("93") == 0),
													"Code_departement.compareTo(\"93\") == 0 failed");
									ope_tFilterRow_1
											.matches(
													(row1.Code_departement == null ? false
															: row1.Code_departement
																	.compareTo("94") == 0),
													"Code_departement.compareTo(\"94\") == 0 failed");

									if (ope_tFilterRow_1.getMatchFlag()) {
										if (row2 == null) {
											row2 = new row2Struct();
										}
										row2.Code_service_CH = row1.Code_service_CH;
										row2.Reference_document = row1.Reference_document;
										row2.A_Articles_CGI = row1.A_Articles_CGI;
										row2.B_Articles_CGI = row1.B_Articles_CGI;
										row2.C_Articles_CGI = row1.C_Articles_CGI;
										row2.D_Articles_CGI = row1.D_Articles_CGI;
										row2.E_Articles_CGI = row1.E_Articles_CGI;
										row2.No_disposition = row1.No_disposition;
										row2.Date_mutation = row1.Date_mutation;
										row2.Nature_mutation = row1.Nature_mutation;
										row2.Valeur_fonciere = row1.Valeur_fonciere;
										row2.No_voie = row1.No_voie;
										row2.B_T_Q = row1.B_T_Q;
										row2.Type_de_voie = row1.Type_de_voie;
										row2.Code_voie = row1.Code_voie;
										row2.Voie = row1.Voie;
										row2.Code_postal = row1.Code_postal;
										row2.Commune = row1.Commune;
										row2.Code_departement = row1.Code_departement;
										row2.Code_commune = row1.Code_commune;
										row2.Prefixe_de_section = row1.Prefixe_de_section;
										row2.Section = row1.Section;
										row2.No_plan = row1.No_plan;
										row2.No_Volume = row1.No_Volume;
										row2.Aer_lot = row1.Aer_lot;
										row2.Surface_Carrez_du_Aer_lot = row1.Surface_Carrez_du_Aer_lot;
										row2.Beme_lot = row1.Beme_lot;
										row2.Surface_Carrez_du_Beme_lot = row1.Surface_Carrez_du_Beme_lot;
										row2.Ceme_lot = row1.Ceme_lot;
										row2.Surface_Carrez_du_Ceme_lot = row1.Surface_Carrez_du_Ceme_lot;
										row2.Deme_lot = row1.Deme_lot;
										row2.Surface_Carrez_du_Deme_lot = row1.Surface_Carrez_du_Deme_lot;
										row2.Eeme_lot = row1.Eeme_lot;
										row2.Surface_Carrez_du_Eeme_lot = row1.Surface_Carrez_du_Eeme_lot;
										row2.Nombre_de_lots = row1.Nombre_de_lots;
										row2.Code_type_local = row1.Code_type_local;
										row2.Type_local = row1.Type_local;
										row2.Identifiant_local = row1.Identifiant_local;
										row2.Surface_reelle_bati = row1.Surface_reelle_bati;
										row2.Nombre_pieces_principales = row1.Nombre_pieces_principales;
										row2.Nature_culture = row1.Nature_culture;
										row2.Nature_culture_speciale = row1.Nature_culture_speciale;
										row2.Surface_terrain = row1.Surface_terrain;
										row2.newColumn = row1.newColumn;
										nb_line_ok_tFilterRow_1++;
									} else {
										nb_line_reject_tFilterRow_1++;
									}

									nb_line_tFilterRow_1++;

									tos_count_tFilterRow_1++;

									/**
									 * [tFilterRow_1 main ] stop
									 */
									// Start of branch "row2"
									if (row2 != null) {

										/**
										 * [tFileOutputDelimited_1 main ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										String[] rowtFileOutputDelimited_1 = new String[44];

										rowtFileOutputDelimited_1[0] = row2.Code_service_CH == null ? ""
												: row2.Code_service_CH;

										rowtFileOutputDelimited_1[1] = row2.Reference_document == null ? ""
												: row2.Reference_document;

										rowtFileOutputDelimited_1[2] = row2.A_Articles_CGI == null ? ""
												: row2.A_Articles_CGI;

										rowtFileOutputDelimited_1[3] = row2.B_Articles_CGI == null ? ""
												: row2.B_Articles_CGI;

										rowtFileOutputDelimited_1[4] = row2.C_Articles_CGI == null ? ""
												: row2.C_Articles_CGI;

										rowtFileOutputDelimited_1[5] = row2.D_Articles_CGI == null ? ""
												: row2.D_Articles_CGI;

										rowtFileOutputDelimited_1[6] = row2.E_Articles_CGI == null ? ""
												: row2.E_Articles_CGI;

										rowtFileOutputDelimited_1[7] = row2.No_disposition == null ? ""
												: row2.No_disposition;

										rowtFileOutputDelimited_1[8] = row2.Date_mutation == null ? ""
												: row2.Date_mutation;

										rowtFileOutputDelimited_1[9] = row2.Nature_mutation == null ? ""
												: row2.Nature_mutation;

										rowtFileOutputDelimited_1[10] = row2.Valeur_fonciere == null ? ""
												: row2.Valeur_fonciere;

										rowtFileOutputDelimited_1[11] = row2.No_voie == null ? ""
												: row2.No_voie;

										rowtFileOutputDelimited_1[12] = row2.B_T_Q == null ? ""
												: row2.B_T_Q;

										rowtFileOutputDelimited_1[13] = row2.Type_de_voie == null ? ""
												: row2.Type_de_voie;

										rowtFileOutputDelimited_1[14] = row2.Code_voie == null ? ""
												: row2.Code_voie;

										rowtFileOutputDelimited_1[15] = row2.Voie == null ? ""
												: row2.Voie;

										rowtFileOutputDelimited_1[16] = row2.Code_postal == null ? ""
												: row2.Code_postal;

										rowtFileOutputDelimited_1[17] = row2.Commune == null ? ""
												: row2.Commune;

										rowtFileOutputDelimited_1[18] = row2.Code_departement == null ? ""
												: row2.Code_departement;

										rowtFileOutputDelimited_1[19] = row2.Code_commune == null ? ""
												: row2.Code_commune;

										rowtFileOutputDelimited_1[20] = row2.Prefixe_de_section == null ? ""
												: row2.Prefixe_de_section;

										rowtFileOutputDelimited_1[21] = row2.Section == null ? ""
												: row2.Section;

										rowtFileOutputDelimited_1[22] = row2.No_plan == null ? ""
												: row2.No_plan;

										rowtFileOutputDelimited_1[23] = row2.No_Volume == null ? ""
												: row2.No_Volume;

										rowtFileOutputDelimited_1[24] = row2.Aer_lot == null ? ""
												: row2.Aer_lot;

										rowtFileOutputDelimited_1[25] = row2.Surface_Carrez_du_Aer_lot == null ? ""
												: row2.Surface_Carrez_du_Aer_lot;

										rowtFileOutputDelimited_1[26] = row2.Beme_lot == null ? ""
												: row2.Beme_lot;

										rowtFileOutputDelimited_1[27] = row2.Surface_Carrez_du_Beme_lot == null ? ""
												: row2.Surface_Carrez_du_Beme_lot;

										rowtFileOutputDelimited_1[28] = row2.Ceme_lot == null ? ""
												: row2.Ceme_lot;

										rowtFileOutputDelimited_1[29] = row2.Surface_Carrez_du_Ceme_lot == null ? ""
												: row2.Surface_Carrez_du_Ceme_lot;

										rowtFileOutputDelimited_1[30] = row2.Deme_lot == null ? ""
												: row2.Deme_lot;

										rowtFileOutputDelimited_1[31] = row2.Surface_Carrez_du_Deme_lot == null ? ""
												: row2.Surface_Carrez_du_Deme_lot;

										rowtFileOutputDelimited_1[32] = row2.Eeme_lot == null ? ""
												: row2.Eeme_lot;

										rowtFileOutputDelimited_1[33] = row2.Surface_Carrez_du_Eeme_lot == null ? ""
												: row2.Surface_Carrez_du_Eeme_lot;

										rowtFileOutputDelimited_1[34] = row2.Nombre_de_lots == null ? ""
												: row2.Nombre_de_lots;

										rowtFileOutputDelimited_1[35] = row2.Code_type_local == null ? ""
												: row2.Code_type_local;

										rowtFileOutputDelimited_1[36] = row2.Type_local == null ? ""
												: row2.Type_local;

										rowtFileOutputDelimited_1[37] = row2.Identifiant_local == null ? ""
												: row2.Identifiant_local;

										rowtFileOutputDelimited_1[38] = row2.Surface_reelle_bati == null ? ""
												: row2.Surface_reelle_bati;

										rowtFileOutputDelimited_1[39] = row2.Nombre_pieces_principales == null ? ""
												: row2.Nombre_pieces_principales;

										rowtFileOutputDelimited_1[40] = row2.Nature_culture == null ? ""
												: row2.Nature_culture;

										rowtFileOutputDelimited_1[41] = row2.Nature_culture_speciale == null ? ""
												: row2.Nature_culture_speciale;

										rowtFileOutputDelimited_1[42] = row2.Surface_terrain == null ? ""
												: row2.Surface_terrain;

										rowtFileOutputDelimited_1[43] = row2.newColumn == null ? ""
												: row2.newColumn;

										nb_line_tFileOutputDelimited_1++;
										CsvWritertFileOutputDelimited_1
												.writeNext(rowtFileOutputDelimited_1);

										tos_count_tFileOutputDelimited_1++;

										/**
										 * [tFileOutputDelimited_1 main ] stop
										 */

									} // End of branch "row2"

								} // End of branch "row1"

								/**
								 * [tFileInputDelimited_2 end ] start
								 */

								currentComponent = "tFileInputDelimited_2";

							}
						} finally {
							if (!((Object) (((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH"))) instanceof java.io.InputStream)) {
								if (fid_tFileInputDelimited_2 != null) {
									fid_tFileInputDelimited_2.close();
								}
							}
							if (fid_tFileInputDelimited_2 != null) {
								globalMap.put("tFileInputDelimited_2_NB_LINE",
										fid_tFileInputDelimited_2
												.getRowNumber());
							}
						}

						ok_Hash.put("tFileInputDelimited_2", true);
						end_Hash.put("tFileInputDelimited_2",
								System.currentTimeMillis());

						/**
						 * [tFileInputDelimited_2 end ] stop
						 */

						/**
						 * [tFilterRow_1 end ] start
						 */

						currentComponent = "tFilterRow_1";

						globalMap.put("tFilterRow_1_NB_LINE",
								nb_line_tFilterRow_1);
						globalMap.put("tFilterRow_1_NB_LINE_OK",
								nb_line_ok_tFilterRow_1);
						globalMap.put("tFilterRow_1_NB_LINE_REJECT",
								nb_line_reject_tFilterRow_1);

						ok_Hash.put("tFilterRow_1", true);
						end_Hash.put("tFilterRow_1", System.currentTimeMillis());

						/**
						 * [tFilterRow_1 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

					} finally {

						if (CsvWritertFileOutputDelimited_1 != null) {
							CsvWritertFileOutputDelimited_1.close();
						}
						globalMap.put("tFileOutputDelimited_1_NB_LINE",
								nb_line_tFileOutputDelimited_1);
					} // finally

					ok_Hash.put("tFileOutputDelimited_1", true);
					end_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_1 end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				if (NB_FILEtFileList_1 == 0)
					throw new RuntimeException("No file found in directory "
							+ directory_tFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DVF_union_sources_dvf = new byte[0];
		static byte[] commonByteArray_DVF_union_sources_dvf = new byte[0];

		public String Code_service_CH;

		public String getCode_service_CH() {
			return this.Code_service_CH;
		}

		public String Reference_document;

		public String getReference_document() {
			return this.Reference_document;
		}

		public String A_Articles_CGI;

		public String getA_Articles_CGI() {
			return this.A_Articles_CGI;
		}

		public String B_Articles_CGI;

		public String getB_Articles_CGI() {
			return this.B_Articles_CGI;
		}

		public String C_Articles_CGI;

		public String getC_Articles_CGI() {
			return this.C_Articles_CGI;
		}

		public String D_Articles_CGI;

		public String getD_Articles_CGI() {
			return this.D_Articles_CGI;
		}

		public String E_Articles_CGI;

		public String getE_Articles_CGI() {
			return this.E_Articles_CGI;
		}

		public String No_disposition;

		public String getNo_disposition() {
			return this.No_disposition;
		}

		public String Date_mutation;

		public String getDate_mutation() {
			return this.Date_mutation;
		}

		public String Nature_mutation;

		public String getNature_mutation() {
			return this.Nature_mutation;
		}

		public String Valeur_fonciere;

		public String getValeur_fonciere() {
			return this.Valeur_fonciere;
		}

		public String No_voie;

		public String getNo_voie() {
			return this.No_voie;
		}

		public String B_T_Q;

		public String getB_T_Q() {
			return this.B_T_Q;
		}

		public String Type_de_voie;

		public String getType_de_voie() {
			return this.Type_de_voie;
		}

		public String Code_voie;

		public String getCode_voie() {
			return this.Code_voie;
		}

		public String Voie;

		public String getVoie() {
			return this.Voie;
		}

		public String Code_postal;

		public String getCode_postal() {
			return this.Code_postal;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public String Code_departement;

		public String getCode_departement() {
			return this.Code_departement;
		}

		public String Code_commune;

		public String getCode_commune() {
			return this.Code_commune;
		}

		public String Prefixe_de_section;

		public String getPrefixe_de_section() {
			return this.Prefixe_de_section;
		}

		public String Section;

		public String getSection() {
			return this.Section;
		}

		public String No_plan;

		public String getNo_plan() {
			return this.No_plan;
		}

		public String No_Volume;

		public String getNo_Volume() {
			return this.No_Volume;
		}

		public String Aer_lot;

		public String getAer_lot() {
			return this.Aer_lot;
		}

		public String Surface_Carrez_du_Aer_lot;

		public String getSurface_Carrez_du_Aer_lot() {
			return this.Surface_Carrez_du_Aer_lot;
		}

		public String Beme_lot;

		public String getBeme_lot() {
			return this.Beme_lot;
		}

		public String Surface_Carrez_du_Beme_lot;

		public String getSurface_Carrez_du_Beme_lot() {
			return this.Surface_Carrez_du_Beme_lot;
		}

		public String Ceme_lot;

		public String getCeme_lot() {
			return this.Ceme_lot;
		}

		public String Surface_Carrez_du_Ceme_lot;

		public String getSurface_Carrez_du_Ceme_lot() {
			return this.Surface_Carrez_du_Ceme_lot;
		}

		public String Deme_lot;

		public String getDeme_lot() {
			return this.Deme_lot;
		}

		public String Surface_Carrez_du_Deme_lot;

		public String getSurface_Carrez_du_Deme_lot() {
			return this.Surface_Carrez_du_Deme_lot;
		}

		public String Eeme_lot;

		public String getEeme_lot() {
			return this.Eeme_lot;
		}

		public String Surface_Carrez_du_Eeme_lot;

		public String getSurface_Carrez_du_Eeme_lot() {
			return this.Surface_Carrez_du_Eeme_lot;
		}

		public String Nombre_de_lots;

		public String getNombre_de_lots() {
			return this.Nombre_de_lots;
		}

		public String Code_type_local;

		public String getCode_type_local() {
			return this.Code_type_local;
		}

		public String Type_local;

		public String getType_local() {
			return this.Type_local;
		}

		public String Identifiant_local;

		public String getIdentifiant_local() {
			return this.Identifiant_local;
		}

		public String Surface_reelle_bati;

		public String getSurface_reelle_bati() {
			return this.Surface_reelle_bati;
		}

		public String Nombre_pieces_principales;

		public String getNombre_pieces_principales() {
			return this.Nombre_pieces_principales;
		}

		public String Nature_culture;

		public String getNature_culture() {
			return this.Nature_culture;
		}

		public String Nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.Nature_culture_speciale;
		}

		public String Surface_terrain;

		public String getSurface_terrain() {
			return this.Surface_terrain;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_union_sources_dvf.length) {
					if (length < 1024
							&& commonByteArray_DVF_union_sources_dvf.length == 0) {
						commonByteArray_DVF_union_sources_dvf = new byte[1024];
					} else {
						commonByteArray_DVF_union_sources_dvf = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_union_sources_dvf, 0, length);
				strReturn = new String(commonByteArray_DVF_union_sources_dvf,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_union_sources_dvf) {

				try {

					int length = 0;

					this.Code_service_CH = readString(dis);

					this.Reference_document = readString(dis);

					this.A_Articles_CGI = readString(dis);

					this.B_Articles_CGI = readString(dis);

					this.C_Articles_CGI = readString(dis);

					this.D_Articles_CGI = readString(dis);

					this.E_Articles_CGI = readString(dis);

					this.No_disposition = readString(dis);

					this.Date_mutation = readString(dis);

					this.Nature_mutation = readString(dis);

					this.Valeur_fonciere = readString(dis);

					this.No_voie = readString(dis);

					this.B_T_Q = readString(dis);

					this.Type_de_voie = readString(dis);

					this.Code_voie = readString(dis);

					this.Voie = readString(dis);

					this.Code_postal = readString(dis);

					this.Commune = readString(dis);

					this.Code_departement = readString(dis);

					this.Code_commune = readString(dis);

					this.Prefixe_de_section = readString(dis);

					this.Section = readString(dis);

					this.No_plan = readString(dis);

					this.No_Volume = readString(dis);

					this.Aer_lot = readString(dis);

					this.Surface_Carrez_du_Aer_lot = readString(dis);

					this.Beme_lot = readString(dis);

					this.Surface_Carrez_du_Beme_lot = readString(dis);

					this.Ceme_lot = readString(dis);

					this.Surface_Carrez_du_Ceme_lot = readString(dis);

					this.Deme_lot = readString(dis);

					this.Surface_Carrez_du_Deme_lot = readString(dis);

					this.Eeme_lot = readString(dis);

					this.Surface_Carrez_du_Eeme_lot = readString(dis);

					this.Nombre_de_lots = readString(dis);

					this.Code_type_local = readString(dis);

					this.Type_local = readString(dis);

					this.Identifiant_local = readString(dis);

					this.Surface_reelle_bati = readString(dis);

					this.Nombre_pieces_principales = readString(dis);

					this.Nature_culture = readString(dis);

					this.Nature_culture_speciale = readString(dis);

					this.Surface_terrain = readString(dis);

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Code_service_CH, dos);

				// String

				writeString(this.Reference_document, dos);

				// String

				writeString(this.A_Articles_CGI, dos);

				// String

				writeString(this.B_Articles_CGI, dos);

				// String

				writeString(this.C_Articles_CGI, dos);

				// String

				writeString(this.D_Articles_CGI, dos);

				// String

				writeString(this.E_Articles_CGI, dos);

				// String

				writeString(this.No_disposition, dos);

				// String

				writeString(this.Date_mutation, dos);

				// String

				writeString(this.Nature_mutation, dos);

				// String

				writeString(this.Valeur_fonciere, dos);

				// String

				writeString(this.No_voie, dos);

				// String

				writeString(this.B_T_Q, dos);

				// String

				writeString(this.Type_de_voie, dos);

				// String

				writeString(this.Code_voie, dos);

				// String

				writeString(this.Voie, dos);

				// String

				writeString(this.Code_postal, dos);

				// String

				writeString(this.Commune, dos);

				// String

				writeString(this.Code_departement, dos);

				// String

				writeString(this.Code_commune, dos);

				// String

				writeString(this.Prefixe_de_section, dos);

				// String

				writeString(this.Section, dos);

				// String

				writeString(this.No_plan, dos);

				// String

				writeString(this.No_Volume, dos);

				// String

				writeString(this.Aer_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Aer_lot, dos);

				// String

				writeString(this.Beme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Beme_lot, dos);

				// String

				writeString(this.Ceme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Ceme_lot, dos);

				// String

				writeString(this.Deme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Deme_lot, dos);

				// String

				writeString(this.Eeme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Eeme_lot, dos);

				// String

				writeString(this.Nombre_de_lots, dos);

				// String

				writeString(this.Code_type_local, dos);

				// String

				writeString(this.Type_local, dos);

				// String

				writeString(this.Identifiant_local, dos);

				// String

				writeString(this.Surface_reelle_bati, dos);

				// String

				writeString(this.Nombre_pieces_principales, dos);

				// String

				writeString(this.Nature_culture, dos);

				// String

				writeString(this.Nature_culture_speciale, dos);

				// String

				writeString(this.Surface_terrain, dos);

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Code_service_CH=" + Code_service_CH);
			sb.append(",Reference_document=" + Reference_document);
			sb.append(",A_Articles_CGI=" + A_Articles_CGI);
			sb.append(",B_Articles_CGI=" + B_Articles_CGI);
			sb.append(",C_Articles_CGI=" + C_Articles_CGI);
			sb.append(",D_Articles_CGI=" + D_Articles_CGI);
			sb.append(",E_Articles_CGI=" + E_Articles_CGI);
			sb.append(",No_disposition=" + No_disposition);
			sb.append(",Date_mutation=" + Date_mutation);
			sb.append(",Nature_mutation=" + Nature_mutation);
			sb.append(",Valeur_fonciere=" + Valeur_fonciere);
			sb.append(",No_voie=" + No_voie);
			sb.append(",B_T_Q=" + B_T_Q);
			sb.append(",Type_de_voie=" + Type_de_voie);
			sb.append(",Code_voie=" + Code_voie);
			sb.append(",Voie=" + Voie);
			sb.append(",Code_postal=" + Code_postal);
			sb.append(",Commune=" + Commune);
			sb.append(",Code_departement=" + Code_departement);
			sb.append(",Code_commune=" + Code_commune);
			sb.append(",Prefixe_de_section=" + Prefixe_de_section);
			sb.append(",Section=" + Section);
			sb.append(",No_plan=" + No_plan);
			sb.append(",No_Volume=" + No_Volume);
			sb.append(",Aer_lot=" + Aer_lot);
			sb.append(",Surface_Carrez_du_Aer_lot=" + Surface_Carrez_du_Aer_lot);
			sb.append(",Beme_lot=" + Beme_lot);
			sb.append(",Surface_Carrez_du_Beme_lot="
					+ Surface_Carrez_du_Beme_lot);
			sb.append(",Ceme_lot=" + Ceme_lot);
			sb.append(",Surface_Carrez_du_Ceme_lot="
					+ Surface_Carrez_du_Ceme_lot);
			sb.append(",Deme_lot=" + Deme_lot);
			sb.append(",Surface_Carrez_du_Deme_lot="
					+ Surface_Carrez_du_Deme_lot);
			sb.append(",Eeme_lot=" + Eeme_lot);
			sb.append(",Surface_Carrez_du_Eeme_lot="
					+ Surface_Carrez_du_Eeme_lot);
			sb.append(",Nombre_de_lots=" + Nombre_de_lots);
			sb.append(",Code_type_local=" + Code_type_local);
			sb.append(",Type_local=" + Type_local);
			sb.append(",Identifiant_local=" + Identifiant_local);
			sb.append(",Surface_reelle_bati=" + Surface_reelle_bati);
			sb.append(",Nombre_pieces_principales=" + Nombre_pieces_principales);
			sb.append(",Nature_culture=" + Nature_culture);
			sb.append(",Nature_culture_speciale=" + Nature_culture_speciale);
			sb.append(",Surface_terrain=" + Surface_terrain);
			sb.append(",newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DVF_union_sources_dvf = new byte[0];
		static byte[] commonByteArray_DVF_union_sources_dvf = new byte[0];

		public String Code_service_CH;

		public String getCode_service_CH() {
			return this.Code_service_CH;
		}

		public String Reference_document;

		public String getReference_document() {
			return this.Reference_document;
		}

		public String A_Articles_CGI;

		public String getA_Articles_CGI() {
			return this.A_Articles_CGI;
		}

		public String B_Articles_CGI;

		public String getB_Articles_CGI() {
			return this.B_Articles_CGI;
		}

		public String C_Articles_CGI;

		public String getC_Articles_CGI() {
			return this.C_Articles_CGI;
		}

		public String D_Articles_CGI;

		public String getD_Articles_CGI() {
			return this.D_Articles_CGI;
		}

		public String E_Articles_CGI;

		public String getE_Articles_CGI() {
			return this.E_Articles_CGI;
		}

		public String No_disposition;

		public String getNo_disposition() {
			return this.No_disposition;
		}

		public String Date_mutation;

		public String getDate_mutation() {
			return this.Date_mutation;
		}

		public String Nature_mutation;

		public String getNature_mutation() {
			return this.Nature_mutation;
		}

		public String Valeur_fonciere;

		public String getValeur_fonciere() {
			return this.Valeur_fonciere;
		}

		public String No_voie;

		public String getNo_voie() {
			return this.No_voie;
		}

		public String B_T_Q;

		public String getB_T_Q() {
			return this.B_T_Q;
		}

		public String Type_de_voie;

		public String getType_de_voie() {
			return this.Type_de_voie;
		}

		public String Code_voie;

		public String getCode_voie() {
			return this.Code_voie;
		}

		public String Voie;

		public String getVoie() {
			return this.Voie;
		}

		public String Code_postal;

		public String getCode_postal() {
			return this.Code_postal;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public String Code_departement;

		public String getCode_departement() {
			return this.Code_departement;
		}

		public String Code_commune;

		public String getCode_commune() {
			return this.Code_commune;
		}

		public String Prefixe_de_section;

		public String getPrefixe_de_section() {
			return this.Prefixe_de_section;
		}

		public String Section;

		public String getSection() {
			return this.Section;
		}

		public String No_plan;

		public String getNo_plan() {
			return this.No_plan;
		}

		public String No_Volume;

		public String getNo_Volume() {
			return this.No_Volume;
		}

		public String Aer_lot;

		public String getAer_lot() {
			return this.Aer_lot;
		}

		public String Surface_Carrez_du_Aer_lot;

		public String getSurface_Carrez_du_Aer_lot() {
			return this.Surface_Carrez_du_Aer_lot;
		}

		public String Beme_lot;

		public String getBeme_lot() {
			return this.Beme_lot;
		}

		public String Surface_Carrez_du_Beme_lot;

		public String getSurface_Carrez_du_Beme_lot() {
			return this.Surface_Carrez_du_Beme_lot;
		}

		public String Ceme_lot;

		public String getCeme_lot() {
			return this.Ceme_lot;
		}

		public String Surface_Carrez_du_Ceme_lot;

		public String getSurface_Carrez_du_Ceme_lot() {
			return this.Surface_Carrez_du_Ceme_lot;
		}

		public String Deme_lot;

		public String getDeme_lot() {
			return this.Deme_lot;
		}

		public String Surface_Carrez_du_Deme_lot;

		public String getSurface_Carrez_du_Deme_lot() {
			return this.Surface_Carrez_du_Deme_lot;
		}

		public String Eeme_lot;

		public String getEeme_lot() {
			return this.Eeme_lot;
		}

		public String Surface_Carrez_du_Eeme_lot;

		public String getSurface_Carrez_du_Eeme_lot() {
			return this.Surface_Carrez_du_Eeme_lot;
		}

		public String Nombre_de_lots;

		public String getNombre_de_lots() {
			return this.Nombre_de_lots;
		}

		public String Code_type_local;

		public String getCode_type_local() {
			return this.Code_type_local;
		}

		public String Type_local;

		public String getType_local() {
			return this.Type_local;
		}

		public String Identifiant_local;

		public String getIdentifiant_local() {
			return this.Identifiant_local;
		}

		public String Surface_reelle_bati;

		public String getSurface_reelle_bati() {
			return this.Surface_reelle_bati;
		}

		public String Nombre_pieces_principales;

		public String getNombre_pieces_principales() {
			return this.Nombre_pieces_principales;
		}

		public String Nature_culture;

		public String getNature_culture() {
			return this.Nature_culture;
		}

		public String Nature_culture_speciale;

		public String getNature_culture_speciale() {
			return this.Nature_culture_speciale;
		}

		public String Surface_terrain;

		public String getSurface_terrain() {
			return this.Surface_terrain;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DVF_union_sources_dvf.length) {
					if (length < 1024
							&& commonByteArray_DVF_union_sources_dvf.length == 0) {
						commonByteArray_DVF_union_sources_dvf = new byte[1024];
					} else {
						commonByteArray_DVF_union_sources_dvf = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DVF_union_sources_dvf, 0, length);
				strReturn = new String(commonByteArray_DVF_union_sources_dvf,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DVF_union_sources_dvf) {

				try {

					int length = 0;

					this.Code_service_CH = readString(dis);

					this.Reference_document = readString(dis);

					this.A_Articles_CGI = readString(dis);

					this.B_Articles_CGI = readString(dis);

					this.C_Articles_CGI = readString(dis);

					this.D_Articles_CGI = readString(dis);

					this.E_Articles_CGI = readString(dis);

					this.No_disposition = readString(dis);

					this.Date_mutation = readString(dis);

					this.Nature_mutation = readString(dis);

					this.Valeur_fonciere = readString(dis);

					this.No_voie = readString(dis);

					this.B_T_Q = readString(dis);

					this.Type_de_voie = readString(dis);

					this.Code_voie = readString(dis);

					this.Voie = readString(dis);

					this.Code_postal = readString(dis);

					this.Commune = readString(dis);

					this.Code_departement = readString(dis);

					this.Code_commune = readString(dis);

					this.Prefixe_de_section = readString(dis);

					this.Section = readString(dis);

					this.No_plan = readString(dis);

					this.No_Volume = readString(dis);

					this.Aer_lot = readString(dis);

					this.Surface_Carrez_du_Aer_lot = readString(dis);

					this.Beme_lot = readString(dis);

					this.Surface_Carrez_du_Beme_lot = readString(dis);

					this.Ceme_lot = readString(dis);

					this.Surface_Carrez_du_Ceme_lot = readString(dis);

					this.Deme_lot = readString(dis);

					this.Surface_Carrez_du_Deme_lot = readString(dis);

					this.Eeme_lot = readString(dis);

					this.Surface_Carrez_du_Eeme_lot = readString(dis);

					this.Nombre_de_lots = readString(dis);

					this.Code_type_local = readString(dis);

					this.Type_local = readString(dis);

					this.Identifiant_local = readString(dis);

					this.Surface_reelle_bati = readString(dis);

					this.Nombre_pieces_principales = readString(dis);

					this.Nature_culture = readString(dis);

					this.Nature_culture_speciale = readString(dis);

					this.Surface_terrain = readString(dis);

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Code_service_CH, dos);

				// String

				writeString(this.Reference_document, dos);

				// String

				writeString(this.A_Articles_CGI, dos);

				// String

				writeString(this.B_Articles_CGI, dos);

				// String

				writeString(this.C_Articles_CGI, dos);

				// String

				writeString(this.D_Articles_CGI, dos);

				// String

				writeString(this.E_Articles_CGI, dos);

				// String

				writeString(this.No_disposition, dos);

				// String

				writeString(this.Date_mutation, dos);

				// String

				writeString(this.Nature_mutation, dos);

				// String

				writeString(this.Valeur_fonciere, dos);

				// String

				writeString(this.No_voie, dos);

				// String

				writeString(this.B_T_Q, dos);

				// String

				writeString(this.Type_de_voie, dos);

				// String

				writeString(this.Code_voie, dos);

				// String

				writeString(this.Voie, dos);

				// String

				writeString(this.Code_postal, dos);

				// String

				writeString(this.Commune, dos);

				// String

				writeString(this.Code_departement, dos);

				// String

				writeString(this.Code_commune, dos);

				// String

				writeString(this.Prefixe_de_section, dos);

				// String

				writeString(this.Section, dos);

				// String

				writeString(this.No_plan, dos);

				// String

				writeString(this.No_Volume, dos);

				// String

				writeString(this.Aer_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Aer_lot, dos);

				// String

				writeString(this.Beme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Beme_lot, dos);

				// String

				writeString(this.Ceme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Ceme_lot, dos);

				// String

				writeString(this.Deme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Deme_lot, dos);

				// String

				writeString(this.Eeme_lot, dos);

				// String

				writeString(this.Surface_Carrez_du_Eeme_lot, dos);

				// String

				writeString(this.Nombre_de_lots, dos);

				// String

				writeString(this.Code_type_local, dos);

				// String

				writeString(this.Type_local, dos);

				// String

				writeString(this.Identifiant_local, dos);

				// String

				writeString(this.Surface_reelle_bati, dos);

				// String

				writeString(this.Nombre_pieces_principales, dos);

				// String

				writeString(this.Nature_culture, dos);

				// String

				writeString(this.Nature_culture_speciale, dos);

				// String

				writeString(this.Surface_terrain, dos);

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Code_service_CH=" + Code_service_CH);
			sb.append(",Reference_document=" + Reference_document);
			sb.append(",A_Articles_CGI=" + A_Articles_CGI);
			sb.append(",B_Articles_CGI=" + B_Articles_CGI);
			sb.append(",C_Articles_CGI=" + C_Articles_CGI);
			sb.append(",D_Articles_CGI=" + D_Articles_CGI);
			sb.append(",E_Articles_CGI=" + E_Articles_CGI);
			sb.append(",No_disposition=" + No_disposition);
			sb.append(",Date_mutation=" + Date_mutation);
			sb.append(",Nature_mutation=" + Nature_mutation);
			sb.append(",Valeur_fonciere=" + Valeur_fonciere);
			sb.append(",No_voie=" + No_voie);
			sb.append(",B_T_Q=" + B_T_Q);
			sb.append(",Type_de_voie=" + Type_de_voie);
			sb.append(",Code_voie=" + Code_voie);
			sb.append(",Voie=" + Voie);
			sb.append(",Code_postal=" + Code_postal);
			sb.append(",Commune=" + Commune);
			sb.append(",Code_departement=" + Code_departement);
			sb.append(",Code_commune=" + Code_commune);
			sb.append(",Prefixe_de_section=" + Prefixe_de_section);
			sb.append(",Section=" + Section);
			sb.append(",No_plan=" + No_plan);
			sb.append(",No_Volume=" + No_Volume);
			sb.append(",Aer_lot=" + Aer_lot);
			sb.append(",Surface_Carrez_du_Aer_lot=" + Surface_Carrez_du_Aer_lot);
			sb.append(",Beme_lot=" + Beme_lot);
			sb.append(",Surface_Carrez_du_Beme_lot="
					+ Surface_Carrez_du_Beme_lot);
			sb.append(",Ceme_lot=" + Ceme_lot);
			sb.append(",Surface_Carrez_du_Ceme_lot="
					+ Surface_Carrez_du_Ceme_lot);
			sb.append(",Deme_lot=" + Deme_lot);
			sb.append(",Surface_Carrez_du_Deme_lot="
					+ Surface_Carrez_du_Deme_lot);
			sb.append(",Eeme_lot=" + Eeme_lot);
			sb.append(",Surface_Carrez_du_Eeme_lot="
					+ Surface_Carrez_du_Eeme_lot);
			sb.append(",Nombre_de_lots=" + Nombre_de_lots);
			sb.append(",Code_type_local=" + Code_type_local);
			sb.append(",Type_local=" + Type_local);
			sb.append(",Identifiant_local=" + Identifiant_local);
			sb.append(",Surface_reelle_bati=" + Surface_reelle_bati);
			sb.append(",Nombre_pieces_principales=" + Nombre_pieces_principales);
			sb.append(",Nature_culture=" + Nature_culture);
			sb.append(",Nature_culture_speciale=" + Nature_culture_speciale);
			sb.append(",Surface_terrain=" + Surface_terrain);
			sb.append(",newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tUniqRow_1_UniqOut begin ] start
				 */

				ok_Hash.put("tUniqRow_1_UniqOut", false);
				start_Hash
						.put("tUniqRow_1_UniqOut", System.currentTimeMillis());
				currentComponent = "tUniqRow_1_UniqOut";

				int tos_count_tUniqRow_1_UniqOut = 0;

				// ////////////////////////
				int nb_tUniqRow_1 = 0;

				int bufferSize_tUniqRow_1 = 500000;

				class rowStruct_tUniqRow_1 extends row3Struct {

					int id_tUniqRow_1;

					@Override
					public void readData(ObjectInputStream dis) {
						super.readData(dis);
						try {
							this.id_tUniqRow_1 = dis.readInt();
						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					@Override
					public String toString() {
						return "{" + super.toString() + "\t" + id_tUniqRow_1
								+ "}";
					}

					@Override
					public void writeData(ObjectOutputStream dos) {
						super.writeData(dos);
						try {
							// Integer
							dos.writeInt(this.id_tUniqRow_1);

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public boolean duplicateTo(rowStruct_tUniqRow_1 other) {

						if (this.Code_service_CH == null) {
							if (other.Code_service_CH != null) {
								return false;
							}
						} else {
							if (other.Code_service_CH == null) {
								return false;
							} else {
								if (!this.Code_service_CH
										.equalsIgnoreCase(other.Code_service_CH)) {
									return false;
								}
							}
						}

						if (this.Reference_document == null) {
							if (other.Reference_document != null) {
								return false;
							}
						} else {
							if (other.Reference_document == null) {
								return false;
							} else {
								if (!this.Reference_document
										.equalsIgnoreCase(other.Reference_document)) {
									return false;
								}
							}
						}

						if (this.A_Articles_CGI == null) {
							if (other.A_Articles_CGI != null) {
								return false;
							}
						} else {
							if (other.A_Articles_CGI == null) {
								return false;
							} else {
								if (!this.A_Articles_CGI
										.equalsIgnoreCase(other.A_Articles_CGI)) {
									return false;
								}
							}
						}

						if (this.B_Articles_CGI == null) {
							if (other.B_Articles_CGI != null) {
								return false;
							}
						} else {
							if (other.B_Articles_CGI == null) {
								return false;
							} else {
								if (!this.B_Articles_CGI
										.equalsIgnoreCase(other.B_Articles_CGI)) {
									return false;
								}
							}
						}

						if (this.C_Articles_CGI == null) {
							if (other.C_Articles_CGI != null) {
								return false;
							}
						} else {
							if (other.C_Articles_CGI == null) {
								return false;
							} else {
								if (!this.C_Articles_CGI
										.equalsIgnoreCase(other.C_Articles_CGI)) {
									return false;
								}
							}
						}

						if (this.D_Articles_CGI == null) {
							if (other.D_Articles_CGI != null) {
								return false;
							}
						} else {
							if (other.D_Articles_CGI == null) {
								return false;
							} else {
								if (!this.D_Articles_CGI
										.equalsIgnoreCase(other.D_Articles_CGI)) {
									return false;
								}
							}
						}

						if (this.E_Articles_CGI == null) {
							if (other.E_Articles_CGI != null) {
								return false;
							}
						} else {
							if (other.E_Articles_CGI == null) {
								return false;
							} else {
								if (!this.E_Articles_CGI
										.equalsIgnoreCase(other.E_Articles_CGI)) {
									return false;
								}
							}
						}

						if (this.No_disposition == null) {
							if (other.No_disposition != null) {
								return false;
							}
						} else {
							if (other.No_disposition == null) {
								return false;
							} else {
								if (!this.No_disposition
										.equalsIgnoreCase(other.No_disposition)) {
									return false;
								}
							}
						}

						if (this.Date_mutation == null) {
							if (other.Date_mutation != null) {
								return false;
							}
						} else {
							if (other.Date_mutation == null) {
								return false;
							} else {
								if (!this.Date_mutation
										.equalsIgnoreCase(other.Date_mutation)) {
									return false;
								}
							}
						}

						if (this.Nature_mutation == null) {
							if (other.Nature_mutation != null) {
								return false;
							}
						} else {
							if (other.Nature_mutation == null) {
								return false;
							} else {
								if (!this.Nature_mutation
										.equalsIgnoreCase(other.Nature_mutation)) {
									return false;
								}
							}
						}

						if (this.Valeur_fonciere == null) {
							if (other.Valeur_fonciere != null) {
								return false;
							}
						} else {
							if (other.Valeur_fonciere == null) {
								return false;
							} else {
								if (!this.Valeur_fonciere
										.equalsIgnoreCase(other.Valeur_fonciere)) {
									return false;
								}
							}
						}

						if (this.No_voie == null) {
							if (other.No_voie != null) {
								return false;
							}
						} else {
							if (other.No_voie == null) {
								return false;
							} else {
								if (!this.No_voie
										.equalsIgnoreCase(other.No_voie)) {
									return false;
								}
							}
						}

						if (this.B_T_Q == null) {
							if (other.B_T_Q != null) {
								return false;
							}
						} else {
							if (other.B_T_Q == null) {
								return false;
							} else {
								if (!this.B_T_Q.equalsIgnoreCase(other.B_T_Q)) {
									return false;
								}
							}
						}

						if (this.Type_de_voie == null) {
							if (other.Type_de_voie != null) {
								return false;
							}
						} else {
							if (other.Type_de_voie == null) {
								return false;
							} else {
								if (!this.Type_de_voie
										.equalsIgnoreCase(other.Type_de_voie)) {
									return false;
								}
							}
						}

						if (this.Code_voie == null) {
							if (other.Code_voie != null) {
								return false;
							}
						} else {
							if (other.Code_voie == null) {
								return false;
							} else {
								if (!this.Code_voie
										.equalsIgnoreCase(other.Code_voie)) {
									return false;
								}
							}
						}

						if (this.Voie == null) {
							if (other.Voie != null) {
								return false;
							}
						} else {
							if (other.Voie == null) {
								return false;
							} else {
								if (!this.Voie.equalsIgnoreCase(other.Voie)) {
									return false;
								}
							}
						}

						if (this.Code_postal == null) {
							if (other.Code_postal != null) {
								return false;
							}
						} else {
							if (other.Code_postal == null) {
								return false;
							} else {
								if (!this.Code_postal
										.equalsIgnoreCase(other.Code_postal)) {
									return false;
								}
							}
						}

						if (this.Commune == null) {
							if (other.Commune != null) {
								return false;
							}
						} else {
							if (other.Commune == null) {
								return false;
							} else {
								if (!this.Commune
										.equalsIgnoreCase(other.Commune)) {
									return false;
								}
							}
						}

						if (this.Code_departement == null) {
							if (other.Code_departement != null) {
								return false;
							}
						} else {
							if (other.Code_departement == null) {
								return false;
							} else {
								if (!this.Code_departement
										.equalsIgnoreCase(other.Code_departement)) {
									return false;
								}
							}
						}

						if (this.Code_commune == null) {
							if (other.Code_commune != null) {
								return false;
							}
						} else {
							if (other.Code_commune == null) {
								return false;
							} else {
								if (!this.Code_commune
										.equalsIgnoreCase(other.Code_commune)) {
									return false;
								}
							}
						}

						if (this.Prefixe_de_section == null) {
							if (other.Prefixe_de_section != null) {
								return false;
							}
						} else {
							if (other.Prefixe_de_section == null) {
								return false;
							} else {
								if (!this.Prefixe_de_section
										.equalsIgnoreCase(other.Prefixe_de_section)) {
									return false;
								}
							}
						}

						if (this.Section == null) {
							if (other.Section != null) {
								return false;
							}
						} else {
							if (other.Section == null) {
								return false;
							} else {
								if (!this.Section
										.equalsIgnoreCase(other.Section)) {
									return false;
								}
							}
						}

						if (this.No_plan == null) {
							if (other.No_plan != null) {
								return false;
							}
						} else {
							if (other.No_plan == null) {
								return false;
							} else {
								if (!this.No_plan
										.equalsIgnoreCase(other.No_plan)) {
									return false;
								}
							}
						}

						if (this.No_Volume == null) {
							if (other.No_Volume != null) {
								return false;
							}
						} else {
							if (other.No_Volume == null) {
								return false;
							} else {
								if (!this.No_Volume
										.equalsIgnoreCase(other.No_Volume)) {
									return false;
								}
							}
						}

						if (this.Aer_lot == null) {
							if (other.Aer_lot != null) {
								return false;
							}
						} else {
							if (other.Aer_lot == null) {
								return false;
							} else {
								if (!this.Aer_lot
										.equalsIgnoreCase(other.Aer_lot)) {
									return false;
								}
							}
						}

						if (this.Surface_Carrez_du_Aer_lot == null) {
							if (other.Surface_Carrez_du_Aer_lot != null) {
								return false;
							}
						} else {
							if (other.Surface_Carrez_du_Aer_lot == null) {
								return false;
							} else {
								if (!this.Surface_Carrez_du_Aer_lot
										.equalsIgnoreCase(other.Surface_Carrez_du_Aer_lot)) {
									return false;
								}
							}
						}

						if (this.Beme_lot == null) {
							if (other.Beme_lot != null) {
								return false;
							}
						} else {
							if (other.Beme_lot == null) {
								return false;
							} else {
								if (!this.Beme_lot
										.equalsIgnoreCase(other.Beme_lot)) {
									return false;
								}
							}
						}

						if (this.Surface_Carrez_du_Beme_lot == null) {
							if (other.Surface_Carrez_du_Beme_lot != null) {
								return false;
							}
						} else {
							if (other.Surface_Carrez_du_Beme_lot == null) {
								return false;
							} else {
								if (!this.Surface_Carrez_du_Beme_lot
										.equalsIgnoreCase(other.Surface_Carrez_du_Beme_lot)) {
									return false;
								}
							}
						}

						if (this.Ceme_lot == null) {
							if (other.Ceme_lot != null) {
								return false;
							}
						} else {
							if (other.Ceme_lot == null) {
								return false;
							} else {
								if (!this.Ceme_lot
										.equalsIgnoreCase(other.Ceme_lot)) {
									return false;
								}
							}
						}

						if (this.Surface_Carrez_du_Ceme_lot == null) {
							if (other.Surface_Carrez_du_Ceme_lot != null) {
								return false;
							}
						} else {
							if (other.Surface_Carrez_du_Ceme_lot == null) {
								return false;
							} else {
								if (!this.Surface_Carrez_du_Ceme_lot
										.equalsIgnoreCase(other.Surface_Carrez_du_Ceme_lot)) {
									return false;
								}
							}
						}

						if (this.Deme_lot == null) {
							if (other.Deme_lot != null) {
								return false;
							}
						} else {
							if (other.Deme_lot == null) {
								return false;
							} else {
								if (!this.Deme_lot
										.equalsIgnoreCase(other.Deme_lot)) {
									return false;
								}
							}
						}

						if (this.Surface_Carrez_du_Deme_lot == null) {
							if (other.Surface_Carrez_du_Deme_lot != null) {
								return false;
							}
						} else {
							if (other.Surface_Carrez_du_Deme_lot == null) {
								return false;
							} else {
								if (!this.Surface_Carrez_du_Deme_lot
										.equalsIgnoreCase(other.Surface_Carrez_du_Deme_lot)) {
									return false;
								}
							}
						}

						if (this.Eeme_lot == null) {
							if (other.Eeme_lot != null) {
								return false;
							}
						} else {
							if (other.Eeme_lot == null) {
								return false;
							} else {
								if (!this.Eeme_lot
										.equalsIgnoreCase(other.Eeme_lot)) {
									return false;
								}
							}
						}

						if (this.Surface_Carrez_du_Eeme_lot == null) {
							if (other.Surface_Carrez_du_Eeme_lot != null) {
								return false;
							}
						} else {
							if (other.Surface_Carrez_du_Eeme_lot == null) {
								return false;
							} else {
								if (!this.Surface_Carrez_du_Eeme_lot
										.equalsIgnoreCase(other.Surface_Carrez_du_Eeme_lot)) {
									return false;
								}
							}
						}

						if (this.Nombre_de_lots == null) {
							if (other.Nombre_de_lots != null) {
								return false;
							}
						} else {
							if (other.Nombre_de_lots == null) {
								return false;
							} else {
								if (!this.Nombre_de_lots
										.equalsIgnoreCase(other.Nombre_de_lots)) {
									return false;
								}
							}
						}

						if (this.Code_type_local == null) {
							if (other.Code_type_local != null) {
								return false;
							}
						} else {
							if (other.Code_type_local == null) {
								return false;
							} else {
								if (!this.Code_type_local
										.equalsIgnoreCase(other.Code_type_local)) {
									return false;
								}
							}
						}

						if (this.Type_local == null) {
							if (other.Type_local != null) {
								return false;
							}
						} else {
							if (other.Type_local == null) {
								return false;
							} else {
								if (!this.Type_local
										.equalsIgnoreCase(other.Type_local)) {
									return false;
								}
							}
						}

						if (this.Identifiant_local == null) {
							if (other.Identifiant_local != null) {
								return false;
							}
						} else {
							if (other.Identifiant_local == null) {
								return false;
							} else {
								if (!this.Identifiant_local
										.equalsIgnoreCase(other.Identifiant_local)) {
									return false;
								}
							}
						}

						if (this.Surface_reelle_bati == null) {
							if (other.Surface_reelle_bati != null) {
								return false;
							}
						} else {
							if (other.Surface_reelle_bati == null) {
								return false;
							} else {
								if (!this.Surface_reelle_bati
										.equalsIgnoreCase(other.Surface_reelle_bati)) {
									return false;
								}
							}
						}

						if (this.Nombre_pieces_principales == null) {
							if (other.Nombre_pieces_principales != null) {
								return false;
							}
						} else {
							if (other.Nombre_pieces_principales == null) {
								return false;
							} else {
								if (!this.Nombre_pieces_principales
										.equalsIgnoreCase(other.Nombre_pieces_principales)) {
									return false;
								}
							}
						}

						if (this.Nature_culture == null) {
							if (other.Nature_culture != null) {
								return false;
							}
						} else {
							if (other.Nature_culture == null) {
								return false;
							} else {
								if (!this.Nature_culture
										.equalsIgnoreCase(other.Nature_culture)) {
									return false;
								}
							}
						}

						if (this.Nature_culture_speciale == null) {
							if (other.Nature_culture_speciale != null) {
								return false;
							}
						} else {
							if (other.Nature_culture_speciale == null) {
								return false;
							} else {
								if (!this.Nature_culture_speciale
										.equalsIgnoreCase(other.Nature_culture_speciale)) {
									return false;
								}
							}
						}

						if (this.Surface_terrain == null) {
							if (other.Surface_terrain != null) {
								return false;
							}
						} else {
							if (other.Surface_terrain == null) {
								return false;
							} else {
								if (!this.Surface_terrain
										.equalsIgnoreCase(other.Surface_terrain)) {
									return false;
								}
							}
						}

						if (this.newColumn == null) {
							if (other.newColumn != null) {
								return false;
							}
						} else {
							if (other.newColumn == null) {
								return false;
							} else {
								if (!this.newColumn
										.equalsIgnoreCase(other.newColumn)) {
									return false;
								}
							}
						}

						return true;
					}

				}

				// comparator for first sort
				class Comparator_1_tUniqRow_1 implements
						Comparator<rowStruct_tUniqRow_1> {

					public int compare(rowStruct_tUniqRow_1 arg0,
							rowStruct_tUniqRow_1 arg1) {
						int compare = 0;
						if (arg0.Code_service_CH == null) {
							if (arg1.Code_service_CH != null) {
								return -1;
							}
						} else {
							if (arg1.Code_service_CH == null) {
								return 1;
							} else {
								compare = arg0.Code_service_CH
										.compareToIgnoreCase(arg1.Code_service_CH);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Reference_document == null) {
							if (arg1.Reference_document != null) {
								return -1;
							}
						} else {
							if (arg1.Reference_document == null) {
								return 1;
							} else {
								compare = arg0.Reference_document
										.compareToIgnoreCase(arg1.Reference_document);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.A_Articles_CGI == null) {
							if (arg1.A_Articles_CGI != null) {
								return -1;
							}
						} else {
							if (arg1.A_Articles_CGI == null) {
								return 1;
							} else {
								compare = arg0.A_Articles_CGI
										.compareToIgnoreCase(arg1.A_Articles_CGI);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.B_Articles_CGI == null) {
							if (arg1.B_Articles_CGI != null) {
								return -1;
							}
						} else {
							if (arg1.B_Articles_CGI == null) {
								return 1;
							} else {
								compare = arg0.B_Articles_CGI
										.compareToIgnoreCase(arg1.B_Articles_CGI);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.C_Articles_CGI == null) {
							if (arg1.C_Articles_CGI != null) {
								return -1;
							}
						} else {
							if (arg1.C_Articles_CGI == null) {
								return 1;
							} else {
								compare = arg0.C_Articles_CGI
										.compareToIgnoreCase(arg1.C_Articles_CGI);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.D_Articles_CGI == null) {
							if (arg1.D_Articles_CGI != null) {
								return -1;
							}
						} else {
							if (arg1.D_Articles_CGI == null) {
								return 1;
							} else {
								compare = arg0.D_Articles_CGI
										.compareToIgnoreCase(arg1.D_Articles_CGI);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.E_Articles_CGI == null) {
							if (arg1.E_Articles_CGI != null) {
								return -1;
							}
						} else {
							if (arg1.E_Articles_CGI == null) {
								return 1;
							} else {
								compare = arg0.E_Articles_CGI
										.compareToIgnoreCase(arg1.E_Articles_CGI);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.No_disposition == null) {
							if (arg1.No_disposition != null) {
								return -1;
							}
						} else {
							if (arg1.No_disposition == null) {
								return 1;
							} else {
								compare = arg0.No_disposition
										.compareToIgnoreCase(arg1.No_disposition);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Date_mutation == null) {
							if (arg1.Date_mutation != null) {
								return -1;
							}
						} else {
							if (arg1.Date_mutation == null) {
								return 1;
							} else {
								compare = arg0.Date_mutation
										.compareToIgnoreCase(arg1.Date_mutation);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Nature_mutation == null) {
							if (arg1.Nature_mutation != null) {
								return -1;
							}
						} else {
							if (arg1.Nature_mutation == null) {
								return 1;
							} else {
								compare = arg0.Nature_mutation
										.compareToIgnoreCase(arg1.Nature_mutation);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Valeur_fonciere == null) {
							if (arg1.Valeur_fonciere != null) {
								return -1;
							}
						} else {
							if (arg1.Valeur_fonciere == null) {
								return 1;
							} else {
								compare = arg0.Valeur_fonciere
										.compareToIgnoreCase(arg1.Valeur_fonciere);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.No_voie == null) {
							if (arg1.No_voie != null) {
								return -1;
							}
						} else {
							if (arg1.No_voie == null) {
								return 1;
							} else {
								compare = arg0.No_voie
										.compareToIgnoreCase(arg1.No_voie);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.B_T_Q == null) {
							if (arg1.B_T_Q != null) {
								return -1;
							}
						} else {
							if (arg1.B_T_Q == null) {
								return 1;
							} else {
								compare = arg0.B_T_Q
										.compareToIgnoreCase(arg1.B_T_Q);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Type_de_voie == null) {
							if (arg1.Type_de_voie != null) {
								return -1;
							}
						} else {
							if (arg1.Type_de_voie == null) {
								return 1;
							} else {
								compare = arg0.Type_de_voie
										.compareToIgnoreCase(arg1.Type_de_voie);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Code_voie == null) {
							if (arg1.Code_voie != null) {
								return -1;
							}
						} else {
							if (arg1.Code_voie == null) {
								return 1;
							} else {
								compare = arg0.Code_voie
										.compareToIgnoreCase(arg1.Code_voie);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Voie == null) {
							if (arg1.Voie != null) {
								return -1;
							}
						} else {
							if (arg1.Voie == null) {
								return 1;
							} else {
								compare = arg0.Voie
										.compareToIgnoreCase(arg1.Voie);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Code_postal == null) {
							if (arg1.Code_postal != null) {
								return -1;
							}
						} else {
							if (arg1.Code_postal == null) {
								return 1;
							} else {
								compare = arg0.Code_postal
										.compareToIgnoreCase(arg1.Code_postal);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Commune == null) {
							if (arg1.Commune != null) {
								return -1;
							}
						} else {
							if (arg1.Commune == null) {
								return 1;
							} else {
								compare = arg0.Commune
										.compareToIgnoreCase(arg1.Commune);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Code_departement == null) {
							if (arg1.Code_departement != null) {
								return -1;
							}
						} else {
							if (arg1.Code_departement == null) {
								return 1;
							} else {
								compare = arg0.Code_departement
										.compareToIgnoreCase(arg1.Code_departement);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Code_commune == null) {
							if (arg1.Code_commune != null) {
								return -1;
							}
						} else {
							if (arg1.Code_commune == null) {
								return 1;
							} else {
								compare = arg0.Code_commune
										.compareToIgnoreCase(arg1.Code_commune);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Prefixe_de_section == null) {
							if (arg1.Prefixe_de_section != null) {
								return -1;
							}
						} else {
							if (arg1.Prefixe_de_section == null) {
								return 1;
							} else {
								compare = arg0.Prefixe_de_section
										.compareToIgnoreCase(arg1.Prefixe_de_section);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Section == null) {
							if (arg1.Section != null) {
								return -1;
							}
						} else {
							if (arg1.Section == null) {
								return 1;
							} else {
								compare = arg0.Section
										.compareToIgnoreCase(arg1.Section);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.No_plan == null) {
							if (arg1.No_plan != null) {
								return -1;
							}
						} else {
							if (arg1.No_plan == null) {
								return 1;
							} else {
								compare = arg0.No_plan
										.compareToIgnoreCase(arg1.No_plan);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.No_Volume == null) {
							if (arg1.No_Volume != null) {
								return -1;
							}
						} else {
							if (arg1.No_Volume == null) {
								return 1;
							} else {
								compare = arg0.No_Volume
										.compareToIgnoreCase(arg1.No_Volume);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Aer_lot == null) {
							if (arg1.Aer_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Aer_lot == null) {
								return 1;
							} else {
								compare = arg0.Aer_lot
										.compareToIgnoreCase(arg1.Aer_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Surface_Carrez_du_Aer_lot == null) {
							if (arg1.Surface_Carrez_du_Aer_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Surface_Carrez_du_Aer_lot == null) {
								return 1;
							} else {
								compare = arg0.Surface_Carrez_du_Aer_lot
										.compareToIgnoreCase(arg1.Surface_Carrez_du_Aer_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Beme_lot == null) {
							if (arg1.Beme_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Beme_lot == null) {
								return 1;
							} else {
								compare = arg0.Beme_lot
										.compareToIgnoreCase(arg1.Beme_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Surface_Carrez_du_Beme_lot == null) {
							if (arg1.Surface_Carrez_du_Beme_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Surface_Carrez_du_Beme_lot == null) {
								return 1;
							} else {
								compare = arg0.Surface_Carrez_du_Beme_lot
										.compareToIgnoreCase(arg1.Surface_Carrez_du_Beme_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Ceme_lot == null) {
							if (arg1.Ceme_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Ceme_lot == null) {
								return 1;
							} else {
								compare = arg0.Ceme_lot
										.compareToIgnoreCase(arg1.Ceme_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Surface_Carrez_du_Ceme_lot == null) {
							if (arg1.Surface_Carrez_du_Ceme_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Surface_Carrez_du_Ceme_lot == null) {
								return 1;
							} else {
								compare = arg0.Surface_Carrez_du_Ceme_lot
										.compareToIgnoreCase(arg1.Surface_Carrez_du_Ceme_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Deme_lot == null) {
							if (arg1.Deme_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Deme_lot == null) {
								return 1;
							} else {
								compare = arg0.Deme_lot
										.compareToIgnoreCase(arg1.Deme_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Surface_Carrez_du_Deme_lot == null) {
							if (arg1.Surface_Carrez_du_Deme_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Surface_Carrez_du_Deme_lot == null) {
								return 1;
							} else {
								compare = arg0.Surface_Carrez_du_Deme_lot
										.compareToIgnoreCase(arg1.Surface_Carrez_du_Deme_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Eeme_lot == null) {
							if (arg1.Eeme_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Eeme_lot == null) {
								return 1;
							} else {
								compare = arg0.Eeme_lot
										.compareToIgnoreCase(arg1.Eeme_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Surface_Carrez_du_Eeme_lot == null) {
							if (arg1.Surface_Carrez_du_Eeme_lot != null) {
								return -1;
							}
						} else {
							if (arg1.Surface_Carrez_du_Eeme_lot == null) {
								return 1;
							} else {
								compare = arg0.Surface_Carrez_du_Eeme_lot
										.compareToIgnoreCase(arg1.Surface_Carrez_du_Eeme_lot);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Nombre_de_lots == null) {
							if (arg1.Nombre_de_lots != null) {
								return -1;
							}
						} else {
							if (arg1.Nombre_de_lots == null) {
								return 1;
							} else {
								compare = arg0.Nombre_de_lots
										.compareToIgnoreCase(arg1.Nombre_de_lots);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Code_type_local == null) {
							if (arg1.Code_type_local != null) {
								return -1;
							}
						} else {
							if (arg1.Code_type_local == null) {
								return 1;
							} else {
								compare = arg0.Code_type_local
										.compareToIgnoreCase(arg1.Code_type_local);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Type_local == null) {
							if (arg1.Type_local != null) {
								return -1;
							}
						} else {
							if (arg1.Type_local == null) {
								return 1;
							} else {
								compare = arg0.Type_local
										.compareToIgnoreCase(arg1.Type_local);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Identifiant_local == null) {
							if (arg1.Identifiant_local != null) {
								return -1;
							}
						} else {
							if (arg1.Identifiant_local == null) {
								return 1;
							} else {
								compare = arg0.Identifiant_local
										.compareToIgnoreCase(arg1.Identifiant_local);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Surface_reelle_bati == null) {
							if (arg1.Surface_reelle_bati != null) {
								return -1;
							}
						} else {
							if (arg1.Surface_reelle_bati == null) {
								return 1;
							} else {
								compare = arg0.Surface_reelle_bati
										.compareToIgnoreCase(arg1.Surface_reelle_bati);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Nombre_pieces_principales == null) {
							if (arg1.Nombre_pieces_principales != null) {
								return -1;
							}
						} else {
							if (arg1.Nombre_pieces_principales == null) {
								return 1;
							} else {
								compare = arg0.Nombre_pieces_principales
										.compareToIgnoreCase(arg1.Nombre_pieces_principales);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Nature_culture == null) {
							if (arg1.Nature_culture != null) {
								return -1;
							}
						} else {
							if (arg1.Nature_culture == null) {
								return 1;
							} else {
								compare = arg0.Nature_culture
										.compareToIgnoreCase(arg1.Nature_culture);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Nature_culture_speciale == null) {
							if (arg1.Nature_culture_speciale != null) {
								return -1;
							}
						} else {
							if (arg1.Nature_culture_speciale == null) {
								return 1;
							} else {
								compare = arg0.Nature_culture_speciale
										.compareToIgnoreCase(arg1.Nature_culture_speciale);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.Surface_terrain == null) {
							if (arg1.Surface_terrain != null) {
								return -1;
							}
						} else {
							if (arg1.Surface_terrain == null) {
								return 1;
							} else {
								compare = arg0.Surface_terrain
										.compareToIgnoreCase(arg1.Surface_terrain);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.newColumn == null) {
							if (arg1.newColumn != null) {
								return -1;
							}
						} else {
							if (arg1.newColumn == null) {
								return 1;
							} else {
								compare = arg0.newColumn
										.compareToIgnoreCase(arg1.newColumn);
								if (compare != 0) {
									return compare;
								}
							}
						}

						return arg0.id_tUniqRow_1 - arg1.id_tUniqRow_1;
					}

				}

				int bufferSize_1_tUniqRow_1 = bufferSize_tUniqRow_1;

				rowStruct_tUniqRow_1[] buffer_1_tUniqRow_1 = new rowStruct_tUniqRow_1[bufferSize_1_tUniqRow_1];

				for (int i_tUniqRow_1 = 0; i_tUniqRow_1 < buffer_1_tUniqRow_1.length; i_tUniqRow_1++) {
					buffer_1_tUniqRow_1[i_tUniqRow_1] = new rowStruct_tUniqRow_1();
				}

				int rowsInBuffer_1_tUniqRow_1 = 0;

				Comparator<rowStruct_tUniqRow_1> comparator_1_tUniqRow_1 = new Comparator_1_tUniqRow_1();

				java.util.ArrayList<java.io.File> files_1_tUniqRow_1 = new java.util.ArrayList<java.io.File>();

				String workDirectory_tUniqRow_1 = context.path_DVF
						+ context.source_union_folder_DVF;

				/**
				 * [tUniqRow_1_UniqOut begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.path_DVF + context.source_union_folder_DVF
						+ "toute_livraison_DVF.txt"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row3 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row3 = new row3Struct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row3.Code_service_CH = null;

								row3.Reference_document = null;

								row3.A_Articles_CGI = null;

								row3.B_Articles_CGI = null;

								row3.C_Articles_CGI = null;

								row3.D_Articles_CGI = null;

								row3.E_Articles_CGI = null;

								row3.No_disposition = null;

								row3.Date_mutation = null;

								row3.Nature_mutation = null;

								row3.Valeur_fonciere = null;

								row3.No_voie = null;

								row3.B_T_Q = null;

								row3.Type_de_voie = null;

								row3.Code_voie = null;

								row3.Voie = null;

								row3.Code_postal = null;

								row3.Commune = null;

								row3.Code_departement = null;

								row3.Code_commune = null;

								row3.Prefixe_de_section = null;

								row3.Section = null;

								row3.No_plan = null;

								row3.No_Volume = null;

								row3.Aer_lot = null;

								row3.Surface_Carrez_du_Aer_lot = null;

								row3.Beme_lot = null;

								row3.Surface_Carrez_du_Beme_lot = null;

								row3.Ceme_lot = null;

								row3.Surface_Carrez_du_Ceme_lot = null;

								row3.Deme_lot = null;

								row3.Surface_Carrez_du_Deme_lot = null;

								row3.Eeme_lot = null;

								row3.Surface_Carrez_du_Eeme_lot = null;

								row3.Nombre_de_lots = null;

								row3.Code_type_local = null;

								row3.Type_local = null;

								row3.Identifiant_local = null;

								row3.Surface_reelle_bati = null;

								row3.Nombre_pieces_principales = null;

								row3.Nature_culture = null;

								row3.Nature_culture_speciale = null;

								row3.Surface_terrain = null;

								row3.newColumn = null;

							} else {

								for (int i_tFileInputDelimited_3 = 0; i_tFileInputDelimited_3 < rowtFileInputDelimited_3.length; i_tFileInputDelimited_3++) {
									rowtFileInputDelimited_3[i_tFileInputDelimited_3] = rowtFileInputDelimited_3[i_tFileInputDelimited_3]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Code_service_CH = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Code_service_CH = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Reference_document = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Reference_document = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.A_Articles_CGI = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.A_Articles_CGI = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.B_Articles_CGI = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.B_Articles_CGI = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.C_Articles_CGI = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.C_Articles_CGI = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.D_Articles_CGI = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.D_Articles_CGI = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.E_Articles_CGI = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.E_Articles_CGI = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.No_disposition = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.No_disposition = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Date_mutation = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Date_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Nature_mutation = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Nature_mutation = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Valeur_fonciere = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Valeur_fonciere = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.No_voie = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.No_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.B_T_Q = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.B_T_Q = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Type_de_voie = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Type_de_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Code_voie = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Code_voie = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 15;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Voie = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Voie = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 16;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Code_postal = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Code_postal = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 17;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Commune = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Commune = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 18;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Code_departement = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Code_departement = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 19;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Code_commune = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Code_commune = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 20;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Prefixe_de_section = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Prefixe_de_section = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 21;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Section = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Section = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 22;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.No_plan = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.No_plan = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 23;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.No_Volume = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.No_Volume = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 24;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Aer_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Aer_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 25;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Surface_Carrez_du_Aer_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Surface_Carrez_du_Aer_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 26;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Beme_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Beme_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 27;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Surface_Carrez_du_Beme_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Surface_Carrez_du_Beme_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 28;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Ceme_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Ceme_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 29;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Surface_Carrez_du_Ceme_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Surface_Carrez_du_Ceme_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 30;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Deme_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Deme_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 31;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Surface_Carrez_du_Deme_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Surface_Carrez_du_Deme_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 32;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Eeme_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Eeme_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 33;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Surface_Carrez_du_Eeme_lot = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Surface_Carrez_du_Eeme_lot = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 34;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Nombre_de_lots = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Nombre_de_lots = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 35;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Code_type_local = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Code_type_local = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 36;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Type_local = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Type_local = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 37;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Identifiant_local = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Identifiant_local = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 38;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Surface_reelle_bati = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Surface_reelle_bati = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 39;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Nombre_pieces_principales = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Nombre_pieces_principales = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 40;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Nature_culture = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Nature_culture = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 41;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Nature_culture_speciale = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Nature_culture_speciale = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 42;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Surface_terrain = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.Surface_terrain = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 43;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.newColumn = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row3.newColumn = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tUniqRow_1_UniqOut main ] start
							 */

							currentComponent = "tUniqRow_1_UniqOut";

							if (rowsInBuffer_1_tUniqRow_1 >= bufferSize_1_tUniqRow_1) {// buffer
																						// is
																						// full
																						// do
																						// sort
																						// and

								java.util.Arrays.<rowStruct_tUniqRow_1> sort(
										buffer_1_tUniqRow_1, 0,
										bufferSize_1_tUniqRow_1,
										comparator_1_tUniqRow_1);

								java.io.File file_tUniqRow_1 = new java.io.File(
										workDirectory_tUniqRow_1
												+ "/tUniqRow_1_TEMP_"
												+ files_1_tUniqRow_1.size());

								file_tUniqRow_1.deleteOnExit();

								java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
										new java.io.BufferedOutputStream(
												new java.io.FileOutputStream(
														file_tUniqRow_1)));

								for (int i_tUniqRow_1 = 0; i_tUniqRow_1 < bufferSize_1_tUniqRow_1; i_tUniqRow_1++) {
									buffer_1_tUniqRow_1[i_tUniqRow_1]
											.writeData(rw);
								}

								rw.close();

								files_1_tUniqRow_1.add(file_tUniqRow_1);

								rowsInBuffer_1_tUniqRow_1 = 0;
							}
							rowStruct_tUniqRow_1 row_tUniqRow_1 = buffer_1_tUniqRow_1[rowsInBuffer_1_tUniqRow_1++];
							row_tUniqRow_1.id_tUniqRow_1 = ++nb_tUniqRow_1;
							row_tUniqRow_1.Code_service_CH = row3.Code_service_CH;

							row_tUniqRow_1.Reference_document = row3.Reference_document;

							row_tUniqRow_1.A_Articles_CGI = row3.A_Articles_CGI;

							row_tUniqRow_1.B_Articles_CGI = row3.B_Articles_CGI;

							row_tUniqRow_1.C_Articles_CGI = row3.C_Articles_CGI;

							row_tUniqRow_1.D_Articles_CGI = row3.D_Articles_CGI;

							row_tUniqRow_1.E_Articles_CGI = row3.E_Articles_CGI;

							row_tUniqRow_1.No_disposition = row3.No_disposition;

							row_tUniqRow_1.Date_mutation = row3.Date_mutation;

							row_tUniqRow_1.Nature_mutation = row3.Nature_mutation;

							row_tUniqRow_1.Valeur_fonciere = row3.Valeur_fonciere;

							row_tUniqRow_1.No_voie = row3.No_voie;

							row_tUniqRow_1.B_T_Q = row3.B_T_Q;

							row_tUniqRow_1.Type_de_voie = row3.Type_de_voie;

							row_tUniqRow_1.Code_voie = row3.Code_voie;

							row_tUniqRow_1.Voie = row3.Voie;

							row_tUniqRow_1.Code_postal = row3.Code_postal;

							row_tUniqRow_1.Commune = row3.Commune;

							row_tUniqRow_1.Code_departement = row3.Code_departement;

							row_tUniqRow_1.Code_commune = row3.Code_commune;

							row_tUniqRow_1.Prefixe_de_section = row3.Prefixe_de_section;

							row_tUniqRow_1.Section = row3.Section;

							row_tUniqRow_1.No_plan = row3.No_plan;

							row_tUniqRow_1.No_Volume = row3.No_Volume;

							row_tUniqRow_1.Aer_lot = row3.Aer_lot;

							row_tUniqRow_1.Surface_Carrez_du_Aer_lot = row3.Surface_Carrez_du_Aer_lot;

							row_tUniqRow_1.Beme_lot = row3.Beme_lot;

							row_tUniqRow_1.Surface_Carrez_du_Beme_lot = row3.Surface_Carrez_du_Beme_lot;

							row_tUniqRow_1.Ceme_lot = row3.Ceme_lot;

							row_tUniqRow_1.Surface_Carrez_du_Ceme_lot = row3.Surface_Carrez_du_Ceme_lot;

							row_tUniqRow_1.Deme_lot = row3.Deme_lot;

							row_tUniqRow_1.Surface_Carrez_du_Deme_lot = row3.Surface_Carrez_du_Deme_lot;

							row_tUniqRow_1.Eeme_lot = row3.Eeme_lot;

							row_tUniqRow_1.Surface_Carrez_du_Eeme_lot = row3.Surface_Carrez_du_Eeme_lot;

							row_tUniqRow_1.Nombre_de_lots = row3.Nombre_de_lots;

							row_tUniqRow_1.Code_type_local = row3.Code_type_local;

							row_tUniqRow_1.Type_local = row3.Type_local;

							row_tUniqRow_1.Identifiant_local = row3.Identifiant_local;

							row_tUniqRow_1.Surface_reelle_bati = row3.Surface_reelle_bati;

							row_tUniqRow_1.Nombre_pieces_principales = row3.Nombre_pieces_principales;

							row_tUniqRow_1.Nature_culture = row3.Nature_culture;

							row_tUniqRow_1.Nature_culture_speciale = row3.Nature_culture_speciale;

							row_tUniqRow_1.Surface_terrain = row3.Surface_terrain;

							row_tUniqRow_1.newColumn = row3.newColumn;

							tos_count_tUniqRow_1_UniqOut++;

							/**
							 * [tUniqRow_1_UniqOut main ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tUniqRow_1_UniqOut end ] start
				 */

				currentComponent = "tUniqRow_1_UniqOut";

				if (rowsInBuffer_1_tUniqRow_1 > 0) {
					java.util.Arrays.<rowStruct_tUniqRow_1> sort(
							buffer_1_tUniqRow_1, 0, rowsInBuffer_1_tUniqRow_1,
							comparator_1_tUniqRow_1);

					java.io.File file_tUniqRow_1 = new java.io.File(
							workDirectory_tUniqRow_1 + "/tUniqRow_1_TEMP_"
									+ files_1_tUniqRow_1.size());

					file_tUniqRow_1.deleteOnExit();

					java.io.ObjectOutputStream rw_tUniqRow_1 = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											file_tUniqRow_1)));
					for (int i = 0; i < rowsInBuffer_1_tUniqRow_1; i++) {
						buffer_1_tUniqRow_1[i].writeData(rw_tUniqRow_1);
					}

					rw_tUniqRow_1.close();

					files_1_tUniqRow_1.add(file_tUniqRow_1);

					rowsInBuffer_1_tUniqRow_1 = 0;
				}
				buffer_1_tUniqRow_1 = null;

				// ////////////////////////////////////
				class FileRowIterator_tUniqRow_1 implements
						java.util.Iterator<rowStruct_tUniqRow_1> {

					boolean isEndOfFile = false;

					rowStruct_tUniqRow_1[] buffer;

					ObjectInputStream ois;

					java.io.BufferedInputStream bis;

					rowStruct_tUniqRow_1 tempRow;

					int count = 0;

					int index = 0;

					public FileRowIterator_tUniqRow_1(java.io.File file,
							int bufferSize) throws IOException {
						isEndOfFile = false;
						tempRow = null;
						bis = new java.io.BufferedInputStream(
								new java.io.FileInputStream(file));
						ois = new java.io.ObjectInputStream(bis);
						buffer = new rowStruct_tUniqRow_1[bufferSize];
					}

					private void load() {
						count = 0;
						index = 0;
						try {
							if (tempRow != null) {
								buffer[count++] = tempRow;
								tempRow = null;
							}
							while (!isEndOfFile && count < buffer.length) {
								buffer[count] = new rowStruct_tUniqRow_1();
								buffer[count].readData(ois);
								count++;
							}
							if (!isEndOfFile && count >= buffer.length
									&& bis.available() == 0) {
								tempRow = new rowStruct_tUniqRow_1();
								tempRow.readData(ois);
							}
						} catch (java.lang.Exception e) {
							if (e.getCause() instanceof java.io.EOFException) {
								this.isEndOfFile = true; // the EOFException
								tempRow = null;
							} else {
								throw new RuntimeException(e);
							}
						}
					}

					public boolean hasNext() {
						return index < count || !isEndOfFile;
					}

					public rowStruct_tUniqRow_1 next() {
						if (index >= count) {
							load();
						}

						return buffer[index++];
					}

					public void remove() {
						throw new UnsupportedOperationException();
					}

					public void close() throws IOException {
						if (ois != null) {
							ois.close();
							ois = null;
						}
					}
				}

				ok_Hash.put("tUniqRow_1_UniqOut", true);
				end_Hash.put("tUniqRow_1_UniqOut", System.currentTimeMillis());

				/**
				 * [tUniqRow_1_UniqOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.path_DVF + context.source_union_folder_DVF
								+ "filtre_toute_livraison_DVF.txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				String[] headColutFileOutputDelimited_2 = new String[44];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
				try {
					CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_2,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_2
							.setSeparator(csvSettings_tFileOutputDelimited_2
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_2
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_2.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_2
										.getRowDelim());
					}

					CsvWritertFileOutputDelimited_2
							.setEscapeChar(csvSettings_tFileOutputDelimited_2
									.getEscapeChar());
					CsvWritertFileOutputDelimited_2
							.setQuoteChar(csvSettings_tFileOutputDelimited_2
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_2
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tUniqRow_1_UniqIn begin ] start
					 */

					ok_Hash.put("tUniqRow_1_UniqIn", false);
					start_Hash.put("tUniqRow_1_UniqIn",
							System.currentTimeMillis());
					currentComponent = "tUniqRow_1_UniqIn";

					int tos_count_tUniqRow_1_UniqIn = 0;
					int bufferSizePerFile_tUniqRow_1 = 10000;

					java.util.List<FileRowIterator_tUniqRow_1> rowFileList_1_tUniqRow_1 = new java.util.ArrayList<FileRowIterator_tUniqRow_1>();
					java.util.List<rowStruct_tUniqRow_1> rowList_1_tUniqRow_1 = new java.util.ArrayList<rowStruct_tUniqRow_1>();

					for (java.io.File file : files_1_tUniqRow_1) {
						FileRowIterator_tUniqRow_1 fri = new FileRowIterator_tUniqRow_1(
								file, bufferSizePerFile_tUniqRow_1);
						rowFileList_1_tUniqRow_1.add(fri);
						rowList_1_tUniqRow_1.add(fri.next());
					}

					// comparator for second sort
					class Comparator_2_tUniqRow_1 implements
							Comparator<rowStruct_tUniqRow_1> {

						public int compare(rowStruct_tUniqRow_1 arg0,
								rowStruct_tUniqRow_1 arg1) {
							return arg0.id_tUniqRow_1 - arg1.id_tUniqRow_1;
						}

					}

					// For second sort init begin
					int bufferSize_2_tUniqRow_1 = bufferSize_tUniqRow_1;
					rowStruct_tUniqRow_1[] buffer_2_tUniqRow_1 = new rowStruct_tUniqRow_1[bufferSize_1_tUniqRow_1];
					int rowsInBuffer_2_tUniqRow_1 = 0;
					Comparator<rowStruct_tUniqRow_1> comparator_2_tUniqRow_1 = new Comparator_2_tUniqRow_1();

					java.util.ArrayList<java.io.File> files_2_tUniqRow_1 = new java.util.ArrayList<java.io.File>();
					// For second sort init end

					while (rowList_1_tUniqRow_1.size() > 0) {
						int minIndex_tUniqRow_1 = 0;
						if (rowList_1_tUniqRow_1.size() > 1) {
							for (int i = 1; i < rowList_1_tUniqRow_1.size(); i++) {
								if (comparator_1_tUniqRow_1.compare(
										rowList_1_tUniqRow_1
												.get(minIndex_tUniqRow_1),
										rowList_1_tUniqRow_1.get(i)) > 0) {
									minIndex_tUniqRow_1 = i;
								}
							}
						}

						// /////////////
						if (rowsInBuffer_2_tUniqRow_1 >= bufferSize_2_tUniqRow_1) {// buffer
																					// is
																					// full
																					// do
																					// sort
																					// and

							java.util.Arrays.<rowStruct_tUniqRow_1> sort(
									buffer_2_tUniqRow_1, 0,
									bufferSize_2_tUniqRow_1,
									comparator_2_tUniqRow_1);
							java.io.File file = new java.io.File(
									workDirectory_tUniqRow_1
											+ "/tUniqRow_1_TEMP_uniq_"
											+ files_2_tUniqRow_1.size());
							file.deleteOnExit();
							java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
									new java.io.BufferedOutputStream(
											new java.io.FileOutputStream(file)));
							for (int i = 0; i < bufferSize_2_tUniqRow_1; i++) {
								buffer_2_tUniqRow_1[i].writeData(rw);
							}
							rw.close();

							files_2_tUniqRow_1.add(file);

							rowsInBuffer_2_tUniqRow_1 = 0;
						}
						rowStruct_tUniqRow_1 minItem = rowList_1_tUniqRow_1
								.get(minIndex_tUniqRow_1);
						buffer_2_tUniqRow_1[rowsInBuffer_2_tUniqRow_1++] = minItem;
						FileRowIterator_tUniqRow_1 fri = rowFileList_1_tUniqRow_1
								.get(minIndex_tUniqRow_1);
						if (fri.hasNext()) {
							rowList_1_tUniqRow_1.set(minIndex_tUniqRow_1,
									fri.next());
						} else {
							fri.close();
							rowFileList_1_tUniqRow_1
									.remove(minIndex_tUniqRow_1);
							rowList_1_tUniqRow_1.remove(minIndex_tUniqRow_1);
						}

						// skip duplicates....begin-->this case is suitable for
						// no duplicate connection
						for (int i = 0; i < rowList_1_tUniqRow_1.size();) {
							if (rowList_1_tUniqRow_1.get(i)
									.duplicateTo(minItem)) {
								rowStruct_tUniqRow_1 noDuplicateItem = null;
								FileRowIterator_tUniqRow_1 fri2 = rowFileList_1_tUniqRow_1
										.get(i);
								while (fri2.hasNext()) {
									rowStruct_tUniqRow_1 current = fri2.next();
									if (!minItem.duplicateTo(current)) {
										noDuplicateItem = current;
										break;
									}
								}
								if (noDuplicateItem == null) {
									fri2.close();
									rowFileList_1_tUniqRow_1.remove(i);
									rowList_1_tUniqRow_1.remove(i);
								} else {
									rowList_1_tUniqRow_1
											.set(i, noDuplicateItem);
									i++;
								}
							} else {
								i++;
							}
						}
						// skip duplicates....end
					}

					if (rowsInBuffer_2_tUniqRow_1 > 0) {

						java.util.Arrays.<rowStruct_tUniqRow_1> sort(
								buffer_2_tUniqRow_1, 0,
								rowsInBuffer_2_tUniqRow_1,
								comparator_2_tUniqRow_1);

						java.io.File file = new java.io.File(
								workDirectory_tUniqRow_1
										+ "/tUniqRow_1_TEMP_uniq_"
										+ files_2_tUniqRow_1.size());

						file.deleteOnExit();

						java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
								new java.io.BufferedOutputStream(
										new java.io.FileOutputStream(file)));

						for (int i = 0; i < rowsInBuffer_2_tUniqRow_1; i++) {
							buffer_2_tUniqRow_1[i].writeData(rw);
						}

						rw.close();

						files_2_tUniqRow_1.add(file);

						rowsInBuffer_2_tUniqRow_1 = 0;
					}
					buffer_2_tUniqRow_1 = null;
					java.util.List<FileRowIterator_tUniqRow_1> rowFileList_2_tUniqRow_1 = new java.util.ArrayList<FileRowIterator_tUniqRow_1>();
					java.util.List<rowStruct_tUniqRow_1> rowList_2_tUniqRow_1 = new java.util.ArrayList<rowStruct_tUniqRow_1>();

					for (java.io.File file : files_2_tUniqRow_1) {
						FileRowIterator_tUniqRow_1 fri = new FileRowIterator_tUniqRow_1(
								file, bufferSizePerFile_tUniqRow_1);
						rowFileList_2_tUniqRow_1.add(fri);
						rowList_2_tUniqRow_1.add(fri.next());
					}

					int nb_uniq_tUniqRow_1 = 0;
					while (rowList_2_tUniqRow_1.size() > 0) {
						int minIndex_tUniqRow_1 = 0;
						if (rowList_2_tUniqRow_1.size() > 1) {
							for (int i = 1; i < rowList_2_tUniqRow_1.size(); i++) {
								if (comparator_2_tUniqRow_1.compare(
										rowList_2_tUniqRow_1
												.get(minIndex_tUniqRow_1),
										rowList_2_tUniqRow_1.get(i)) > 0) {
									minIndex_tUniqRow_1 = i;
								}
							}
						}

						// /////////////

						rowStruct_tUniqRow_1 current = rowList_2_tUniqRow_1
								.get(minIndex_tUniqRow_1);

						// ////////////
						FileRowIterator_tUniqRow_1 fri = rowFileList_2_tUniqRow_1
								.get(minIndex_tUniqRow_1);
						if (fri.hasNext()) {
							rowList_2_tUniqRow_1.set(minIndex_tUniqRow_1,
									fri.next());
						} else {
							fri.close();
							rowFileList_2_tUniqRow_1
									.remove(minIndex_tUniqRow_1);
							rowList_2_tUniqRow_1.remove(minIndex_tUniqRow_1);
						}
						row4.Code_service_CH = current.Code_service_CH;

						row4.Reference_document = current.Reference_document;

						row4.A_Articles_CGI = current.A_Articles_CGI;

						row4.B_Articles_CGI = current.B_Articles_CGI;

						row4.C_Articles_CGI = current.C_Articles_CGI;

						row4.D_Articles_CGI = current.D_Articles_CGI;

						row4.E_Articles_CGI = current.E_Articles_CGI;

						row4.No_disposition = current.No_disposition;

						row4.Date_mutation = current.Date_mutation;

						row4.Nature_mutation = current.Nature_mutation;

						row4.Valeur_fonciere = current.Valeur_fonciere;

						row4.No_voie = current.No_voie;

						row4.B_T_Q = current.B_T_Q;

						row4.Type_de_voie = current.Type_de_voie;

						row4.Code_voie = current.Code_voie;

						row4.Voie = current.Voie;

						row4.Code_postal = current.Code_postal;

						row4.Commune = current.Commune;

						row4.Code_departement = current.Code_departement;

						row4.Code_commune = current.Code_commune;

						row4.Prefixe_de_section = current.Prefixe_de_section;

						row4.Section = current.Section;

						row4.No_plan = current.No_plan;

						row4.No_Volume = current.No_Volume;

						row4.Aer_lot = current.Aer_lot;

						row4.Surface_Carrez_du_Aer_lot = current.Surface_Carrez_du_Aer_lot;

						row4.Beme_lot = current.Beme_lot;

						row4.Surface_Carrez_du_Beme_lot = current.Surface_Carrez_du_Beme_lot;

						row4.Ceme_lot = current.Ceme_lot;

						row4.Surface_Carrez_du_Ceme_lot = current.Surface_Carrez_du_Ceme_lot;

						row4.Deme_lot = current.Deme_lot;

						row4.Surface_Carrez_du_Deme_lot = current.Surface_Carrez_du_Deme_lot;

						row4.Eeme_lot = current.Eeme_lot;

						row4.Surface_Carrez_du_Eeme_lot = current.Surface_Carrez_du_Eeme_lot;

						row4.Nombre_de_lots = current.Nombre_de_lots;

						row4.Code_type_local = current.Code_type_local;

						row4.Type_local = current.Type_local;

						row4.Identifiant_local = current.Identifiant_local;

						row4.Surface_reelle_bati = current.Surface_reelle_bati;

						row4.Nombre_pieces_principales = current.Nombre_pieces_principales;

						row4.Nature_culture = current.Nature_culture;

						row4.Nature_culture_speciale = current.Nature_culture_speciale;

						row4.Surface_terrain = current.Surface_terrain;

						row4.newColumn = current.newColumn;

						nb_uniq_tUniqRow_1++;

						/**
						 * [tUniqRow_1_UniqIn begin ] stop
						 */
						/**
						 * [tUniqRow_1_UniqIn main ] start
						 */

						currentComponent = "tUniqRow_1_UniqIn";

						tos_count_tUniqRow_1_UniqIn++;

						/**
						 * [tUniqRow_1_UniqIn main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tFileOutputDelimited_2 main ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							String[] rowtFileOutputDelimited_2 = new String[44];

							rowtFileOutputDelimited_2[0] = row4.Code_service_CH == null ? ""
									: row4.Code_service_CH;

							rowtFileOutputDelimited_2[1] = row4.Reference_document == null ? ""
									: row4.Reference_document;

							rowtFileOutputDelimited_2[2] = row4.A_Articles_CGI == null ? ""
									: row4.A_Articles_CGI;

							rowtFileOutputDelimited_2[3] = row4.B_Articles_CGI == null ? ""
									: row4.B_Articles_CGI;

							rowtFileOutputDelimited_2[4] = row4.C_Articles_CGI == null ? ""
									: row4.C_Articles_CGI;

							rowtFileOutputDelimited_2[5] = row4.D_Articles_CGI == null ? ""
									: row4.D_Articles_CGI;

							rowtFileOutputDelimited_2[6] = row4.E_Articles_CGI == null ? ""
									: row4.E_Articles_CGI;

							rowtFileOutputDelimited_2[7] = row4.No_disposition == null ? ""
									: row4.No_disposition;

							rowtFileOutputDelimited_2[8] = row4.Date_mutation == null ? ""
									: row4.Date_mutation;

							rowtFileOutputDelimited_2[9] = row4.Nature_mutation == null ? ""
									: row4.Nature_mutation;

							rowtFileOutputDelimited_2[10] = row4.Valeur_fonciere == null ? ""
									: row4.Valeur_fonciere;

							rowtFileOutputDelimited_2[11] = row4.No_voie == null ? ""
									: row4.No_voie;

							rowtFileOutputDelimited_2[12] = row4.B_T_Q == null ? ""
									: row4.B_T_Q;

							rowtFileOutputDelimited_2[13] = row4.Type_de_voie == null ? ""
									: row4.Type_de_voie;

							rowtFileOutputDelimited_2[14] = row4.Code_voie == null ? ""
									: row4.Code_voie;

							rowtFileOutputDelimited_2[15] = row4.Voie == null ? ""
									: row4.Voie;

							rowtFileOutputDelimited_2[16] = row4.Code_postal == null ? ""
									: row4.Code_postal;

							rowtFileOutputDelimited_2[17] = row4.Commune == null ? ""
									: row4.Commune;

							rowtFileOutputDelimited_2[18] = row4.Code_departement == null ? ""
									: row4.Code_departement;

							rowtFileOutputDelimited_2[19] = row4.Code_commune == null ? ""
									: row4.Code_commune;

							rowtFileOutputDelimited_2[20] = row4.Prefixe_de_section == null ? ""
									: row4.Prefixe_de_section;

							rowtFileOutputDelimited_2[21] = row4.Section == null ? ""
									: row4.Section;

							rowtFileOutputDelimited_2[22] = row4.No_plan == null ? ""
									: row4.No_plan;

							rowtFileOutputDelimited_2[23] = row4.No_Volume == null ? ""
									: row4.No_Volume;

							rowtFileOutputDelimited_2[24] = row4.Aer_lot == null ? ""
									: row4.Aer_lot;

							rowtFileOutputDelimited_2[25] = row4.Surface_Carrez_du_Aer_lot == null ? ""
									: row4.Surface_Carrez_du_Aer_lot;

							rowtFileOutputDelimited_2[26] = row4.Beme_lot == null ? ""
									: row4.Beme_lot;

							rowtFileOutputDelimited_2[27] = row4.Surface_Carrez_du_Beme_lot == null ? ""
									: row4.Surface_Carrez_du_Beme_lot;

							rowtFileOutputDelimited_2[28] = row4.Ceme_lot == null ? ""
									: row4.Ceme_lot;

							rowtFileOutputDelimited_2[29] = row4.Surface_Carrez_du_Ceme_lot == null ? ""
									: row4.Surface_Carrez_du_Ceme_lot;

							rowtFileOutputDelimited_2[30] = row4.Deme_lot == null ? ""
									: row4.Deme_lot;

							rowtFileOutputDelimited_2[31] = row4.Surface_Carrez_du_Deme_lot == null ? ""
									: row4.Surface_Carrez_du_Deme_lot;

							rowtFileOutputDelimited_2[32] = row4.Eeme_lot == null ? ""
									: row4.Eeme_lot;

							rowtFileOutputDelimited_2[33] = row4.Surface_Carrez_du_Eeme_lot == null ? ""
									: row4.Surface_Carrez_du_Eeme_lot;

							rowtFileOutputDelimited_2[34] = row4.Nombre_de_lots == null ? ""
									: row4.Nombre_de_lots;

							rowtFileOutputDelimited_2[35] = row4.Code_type_local == null ? ""
									: row4.Code_type_local;

							rowtFileOutputDelimited_2[36] = row4.Type_local == null ? ""
									: row4.Type_local;

							rowtFileOutputDelimited_2[37] = row4.Identifiant_local == null ? ""
									: row4.Identifiant_local;

							rowtFileOutputDelimited_2[38] = row4.Surface_reelle_bati == null ? ""
									: row4.Surface_reelle_bati;

							rowtFileOutputDelimited_2[39] = row4.Nombre_pieces_principales == null ? ""
									: row4.Nombre_pieces_principales;

							rowtFileOutputDelimited_2[40] = row4.Nature_culture == null ? ""
									: row4.Nature_culture;

							rowtFileOutputDelimited_2[41] = row4.Nature_culture_speciale == null ? ""
									: row4.Nature_culture_speciale;

							rowtFileOutputDelimited_2[42] = row4.Surface_terrain == null ? ""
									: row4.Surface_terrain;

							rowtFileOutputDelimited_2[43] = row4.newColumn == null ? ""
									: row4.newColumn;

							nb_line_tFileOutputDelimited_2++;
							CsvWritertFileOutputDelimited_2
									.writeNext(rowtFileOutputDelimited_2);

							tos_count_tFileOutputDelimited_2++;

							/**
							 * [tFileOutputDelimited_2 main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tUniqRow_1_UniqIn end ] start
						 */

						currentComponent = "tUniqRow_1_UniqIn";

					}
					globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniq_tUniqRow_1);
					globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_tUniqRow_1
							- nb_uniq_tUniqRow_1);

					ok_Hash.put("tUniqRow_1_UniqIn", true);
					end_Hash.put("tUniqRow_1_UniqIn",
							System.currentTimeMillis());

					/**
					 * [tUniqRow_1_UniqIn end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "test";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final union_sources_dvf union_sources_dvfClass = new union_sources_dvf();

		int exitCode = union_sources_dvfClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = union_sources_dvf.class
					.getClassLoader().getResourceAsStream(
							"dvf/union_sources_dvf_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.control_folder_DVF = (String) context
					.getProperty("control_folder_DVF");
			context.extract_folder_DVF = (String) context
					.getProperty("extract_folder_DVF");
			context.path_DVF = (String) context.getProperty("path_DVF");
			context.source_folder_DVF = (String) context
					.getProperty("source_folder_DVF");
			context.source_union_folder_DVF = (String) context
					.getProperty("source_union_folder_DVF");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("control_folder_DVF")) {
				context.control_folder_DVF = (String) parentContextMap
						.get("control_folder_DVF");
			}
			if (parentContextMap.containsKey("extract_folder_DVF")) {
				context.extract_folder_DVF = (String) parentContextMap
						.get("extract_folder_DVF");
			}
			if (parentContextMap.containsKey("path_DVF")) {
				context.path_DVF = (String) parentContextMap.get("path_DVF");
			}
			if (parentContextMap.containsKey("source_folder_DVF")) {
				context.source_folder_DVF = (String) parentContextMap
						.get("source_folder_DVF");
			}
			if (parentContextMap.containsKey("source_union_folder_DVF")) {
				context.source_union_folder_DVF = (String) parentContextMap
						.get("source_union_folder_DVF");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileDelete_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_1) {

			e_tFileDelete_1.printStackTrace();
			globalMap.put("tFileDelete_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : union_sources_dvf");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 212004 characters generated by Talend Open Studio for Data Integration on the
 * 17 décembre 2013 18:32:54 CET
 ************************************************************************************************/
